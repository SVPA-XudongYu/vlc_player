
stream_filter/prefetch.c,1243
struct stream_sys_t38,1343
    vlc_mutex_t  lock;40,1365
    vlc_cond_t   wait_data;41,1388
    vlc_cond_t   wait_space;42,1416
    vlc_thread_t thread;43,1445
    vlc_interrupt_t *interrupt;interrupt44,1470
    bool         eof;46,1503
    bool         error;47,1525
    bool         paused;48,1549
    bool         can_seek;50,1575
    bool         can_pace;51,1602
    bool         can_pause;52,1629
    uint64_t     size;53,1657
    int64_t      pts_delay;54,1680
    char        *content_type;content_type55,1708
    uint64_t     buffer_offset;57,1740
    uint64_t     stream_offset;58,1772
    size_t       buffer_length;59,1804
    size_t       buffer_size;60,1836
    char        *buffer;buffer61,1866
    size_t       read_size;62,1891
    size_t       seek_threshold;63,1919
static ssize_t ThreadRead(66,1956
static int ThreadSeek(81,2314
static int ThreadControl(98,2759
#define MAX_READ 117,3141
#define SEEK_THRESHOLD 118,3164
static void *Thread(Thread120,3197
static int Seek(262,8129
static size_t BufferLevel(274,8401
static ssize_t Read(290,8794
static int ReadDir(344,10081
static int Control(350,10205
static int Open(413,12213
static void Close 516,15746
vlc_module_begin(534,16196

access/dvdnav.c,2148
#define ANGLE_TEXT 69,2570
#define ANGLE_LONGTEXT 70,2605
#define MENU_TEXT 73,2663
#define MENU_LONGTEXT 74,2710
#define LANGUAGE_DEFAULT 78,2857
#define HAVE_DVDNAV_DEMUX84,3046
vlc_module_begin 88,3122
#define DVD_READ_CACHE 113,3963
#define DVD_READ_CACHE 115,3994
struct demux_sys_t121,4206
    dvdnav_t    *dvdnav;dvdnav123,4227
    bool        b_reset_pcr;126,4263
    bool        b_readahead;127,4292
        bool         b_created;131,4339
        bool         b_enabled;132,4371
        vlc_mutex_t  lock;133,4403
        vlc_timer_t  timer;134,4430
    } still;135,4458
    ps_track_t  tk[tk138,4488
    int         i_mux_rate;139,4521
    vout_thread_t *p_vout;p_vout142,4566
    uint32_t clut[clut145,4622
    uint8_t  palette[palette146,4645
    bool b_spu_change;147,4673
        unsigned i_num;151,4734
        unsigned i_den;152,4758
    } sar;153,4782
    int           i_title;156,4804
    input_title_t **title;title157,4831
    mtime_t     i_pgc_length;160,4899
    int         i_vobu_index;161,4929
    int         i_vobu_flush;162,4959
static int CommonOpen(191,5935
static int AccessDemuxOpen 338,11108
static int StreamProbeDVD(404,13012
static int stream_cb_seek(440,14118
static int stream_cb_read(445,14224
static int DemuxOpen 453,14522
static void Close(507,16159
static int Control(556,17888
                enum { numargs 673,21679
                enum { numargs = sizeof(673,21679
                enum { numargs = sizeof(argtab)673,21679
                enum { numargs = sizeof(argtab)/sizeof(sizeof673,21679
                enum { numargs = sizeof(argtab)/sizeof(int)673,21679
static int ControlInternal(776,24878
static int Demux(790,25280
static char *DemuxGetLanguageCode(DemuxGetLanguageCode1115,35653
static void DemuxTitles(1149,36587
static void ButtonUpdate(1227,39105
static void ESSubtitleUpdate(1290,41082
static int DemuxBlock(1331,42349
static void DemuxForceStill(1417,44670
static void ESNew(1433,45206
static void StillTimer(1529,48150
static int EventMouse(1542,48454
static int EventIntf(1567,49168
static int ProbeDVD(1596,50297

stream_out/transcode/spu.c,194
static subpicture_t *spu_new_buffer(spu_new_buffer38,1630
int transcode_spu_new(48,1951
void transcode_spu_close(97,3365
int transcode_spu_process(117,3940
bool transcode_spu_add(159,5030

audio_output/oss.c,625
# define SNDCTL_DSP_HALT 43,1560
#define A52_FRAME_NB 52,1722
struct aout_sys_t54,1749
    int fd;56,1769
    audio_sample_format_t format;57,1781
    bool starting;58,1815
    bool soft_mute;59,1834
    float soft_gain;60,1854
    char *device;device61,1875
#define AUDIO_DEV_TEXT 69,1989
#define AUDIO_DEV_LONGTEXT 70,2038
vlc_module_begin 72,2094
static int TimeGet 247,6960
static void Play 266,7449
static void Pause 288,7965
static void Flush 300,8231
static void Stop 313,8491
static int DevicesEnum 323,8669
static int DeviceSelect 366,9715
static int Open 385,10111
static void Close 407,10625

demux/opus.h,52
static inline unsigned opus_frame_duration(26,1213

lua/libs/variables.h,78
#define VLC_LUA_VARIABLES_H26,1260
#define vlclua_var_toggle_or_set(30,1365

demux/adaptive/http/BytesRange.hpp,319
#define BYTESRANGE_HPP21,986
namespace adaptive25,1035
    namespace httpadaptive::http27,1056
        class BytesRangeadaptive::http::BytesRange29,1081
                size_t bytesStart;adaptive::http::BytesRange::bytesStart39,1368
                size_t bytesEnd;adaptive::http::BytesRange::bytesEnd40,1403

hw/vdpau/display.c,965
vlc_module_begin(44,1391
struct vout_display_sys_t55,1671
    xcb_connection_t *conn;conn57,1699
    vout_window_t *embed;embed58,1750
    vdp_t *vdp;vdp59,1798
    picture_t *current;current60,1837
    xcb_window_t window;62,1896
    xcb_cursor_t cursor;63,1969
    VdpDevice device;64,2015
    VdpPresentationQueueTarget target;65,2065
    VdpPresentationQueue queue;66,2144
    VdpRGBAFormat rgb_fmt;67,2209
    picture_pool_t *pool;pool69,2267
static void pictureSys_DestroyVDPAU(72,2319
static void PictureDestroyVDPAU(79,2487
static VdpStatus picture_NewVDPAU(85,2596
static picture_pool_t *PoolAlloc(PoolAlloc120,3629
static void PoolFree(150,4456
static picture_pool_t *Pool(Pool159,4665
static void RenderRegion(168,4885
static void Queue(244,7850
static void Wait(294,9644
static int Control(325,10548
static void Manage(400,13296
static int xcb_screen_num(408,13443
static int Open(423,13821
static void Close(677,22301

video_filter/anaglyph.c,642
#define SCHEME_TEXT 39,1583
#define SCHEME_LONGTEXT 40,1622
#define FILTER_PREFIX 42,1686
enum scheme_e46,1812
    red_green 48,1828
    red_blue,49,1847
    red_cyan,50,1861
    trioscopic,51,1875
    magenta_cyan,52,1891
static const char *const ppsz_scheme_values[ppsz_scheme_values55,1913
static const char *const ppsz_scheme_descriptions[ppsz_scheme_descriptions62,2057
vlc_module_begin(70,2331
struct filter_sys_t85,2858
    int left,87,2880
    int left, right;87,2880
static int Create(91,2906
static void Destroy(164,5014
static picture_t *Filter(Filter171,5166
static void combine_side_by_side_yuv420(205,5987

lua/libs/messages.c,261
#   define  _GNU_SOURCE29,1384
static int vlclua_msg_dbg(46,1762
static int vlclua_msg_warn(56,2009
static int vlclua_msg_err(66,2258
static int vlclua_msg_info(76,2505
static const luaL_Reg vlclua_msg_reg[vlclua_msg_reg89,2916
void luaopen_msg(97,3110

demux/hls/HLSManager.cpp,162
HLSManager::HLSManager(38,1424
HLSManager::~HLSManager(45,1668
bool HLSManager::isHTTPLiveStreaming(49,1699
mtime_t HLSManager::getFirstPlaybackTime(105,2953

video_output/vmem.c,890
#define T_WIDTH 42,1683
#define LT_WIDTH 43,1711
#define T_HEIGHT 45,1762
#define LT_HEIGHT 46,1792
#define T_PITCH 48,1845
#define LT_PITCH 49,1873
#define T_CHROMA 51,1933
#define LT_CHROMA 52,1963
vlc_module_begin(58,2160
struct picture_sys_t 84,3148
    void *id;id85,3171
struct vout_display_sys_t 89,3252
    picture_pool_t *pool;pool90,3280
    void *opaque;opaque92,3307
    void *pic_opaque;pic_opaque93,3325
    void *(*lock)lock94,3347
    void (*unlock)unlock95,3391
    void (*display)display96,3452
    void (*cleanup)cleanup97,3494
    unsigned pitches[pitches99,3527
    unsigned lines[lines100,3568
typedef unsigned (*vlc_format_cb)vlc_format_cb103,3611
static int Open(116,4353
static void Close(231,7694
static picture_pool_t *Pool(Pool243,7962
static void Prepare(252,8185
static void Display(278,8925
static int Control(289,9181

video_output/win32/common.c,917
#define COBJMACROS41,1751
# define INITGUID43,1820
int CommonInit(59,2196
picture_pool_t *CommonPool(CommonPool123,3891
void UpdateRects(136,4449
#define rect_src 142,4616
#define rect_src_clipped 143,4647
#define rect_dest 144,4694
#define rect_dest_clipped 145,4727
#undef rect_src347,11680
#undef rect_src_clipped348,11696
#undef rect_dest349,11720
#undef rect_dest_clipped350,11737
void CommonClean(355,11793
void CommonManage(382,12719
void CommonDisplay(432,14605
int CommonUpdatePicture(455,15168
void AlignRect(526,17869
static void CommonChangeThumbnailClip(536,18154
static int CommonControlSetFullscreen(578,19642
int CommonControl(665,22742
static void DisableScreensaver(741,25819
static void RestoreScreensaver(758,26379
int CommonControl(771,26700
void CommonManage(779,26837
void CommonClean(782,26919
void CommonDisplay(783,26959
void CommonChangeThumbnailClip(784,27001

access/linsys/linsys_sdi.c,6132
#undef ZVBI_DEBUG49,1675
#define SDI_DEVICE 52,1715
#define SDI_BUFFERS_FILE 53,1756
#define SDI_BUFSIZE_FILE 54,1815
#define SDI_MODE_FILE 55,1874
#define READ_TIMEOUT 56,1930
#define RESYNC_TIMEOUT 57,1962
#define CLOCK_GAP 58,1995
#define START_DATE 59,2037
#define DEMUX_BUFFER_SIZE 61,2084
#define MAX_AUDIOS 62,2118
#define SAMPLERATE_TOLERANCE 63,2146
#define LINK_TEXT 68,2361
#define LINK_LONGTEXT 69,2392
#define VIDEO_TEXT 71,2509
#define VIDEO_LONGTEXT 72,2543
#define VIDEO_ASPECT_TEXT 74,2622
#define VIDEO_ASPECT_LONGTEXT 75,2667
#define AUDIO_TEXT 77,2762
#define AUDIO_LONGTEXT 78,2807
#define TELX_TEXT 80,2916
#define TELX_LONGTEXT 81,2963
#define TELX_LANG_TEXT 83,3075
#define TELX_LANG_LONGTEXT 84,3122
vlc_module_begin(92,3381
typedef struct sdi_audio_t122,4522
    unsigned int i_group,124,4551
    unsigned int i_group, i_pair;124,4551
    int32_t      i_delay;127,4607
    unsigned int i_rate;128,4633
    uint8_t      i_block_number;129,4658
    int16_t      *p_buffer;p_buffer130,4691
    unsigned int i_left_samples,131,4719
    unsigned int i_left_samples, i_right_samples,131,4719
    unsigned int i_left_samples, i_right_samples, i_nb_samples,131,4719
    unsigned int i_left_samples, i_right_samples, i_nb_samples, i_max_samples;131,4719
    int          i_id;134,4818
    es_out_id_t  *p_es;p_es135,4841
} sdi_audio_t;136,4865
    STATE_NOSYNC,139,4888
    STATE_STARTSYNC,140,4906
    STATE_ANCSYNC,141,4927
    STATE_LINESYNC,142,4946
    STATE_ACTIVESYNC,143,4966
    STATE_VBLANKSYNC,144,4988
    STATE_PICSYNC,145,5010
    STATE_SYNC,146,5029
struct demux_sys_t149,5049
    int              i_fd;152,5094
    unsigned int     i_link;153,5121
    uint8_t          **pp_buffers;pp_buffers154,5150
    unsigned int     i_buffers,155,5185
    unsigned int     i_buffers, i_current_buffer;155,5185
    unsigned int     i_buffer_size;156,5235
    int              i_state;159,5291
    mtime_t          i_last_state_change;160,5321
    unsigned int     i_anc_size,161,5363
    unsigned int     i_anc_size, i_active_size,161,5363
    unsigned int     i_anc_size, i_active_size, i_picture_size;161,5363
    unsigned int     i_line_offset,162,5427
    unsigned int     i_line_offset, i_nb_lines;162,5427
    unsigned int     i_line_buffer;165,5497
    unsigned int     i_current_line;166,5533
    uint8_t          *p_line_buffer;p_line_buffer167,5570
    block_t          *p_current_picture;p_current_picture168,5607
    uint8_t          *p_y,p_y169,5648
    uint8_t          *p_y, *p_u,p_u169,5648
    uint8_t          *p_y, *p_u, *p_v;p_v169,5648
    uint8_t          *p_wss_buffer;p_wss_buffer170,5687
    uint8_t          *p_telx_buffer;p_telx_buffer171,5723
    unsigned int     i_frame_rate,174,5788
    unsigned int     i_frame_rate, i_frame_rate_base;174,5788
    unsigned int     i_width,175,5842
    unsigned int     i_width, i_height,175,5842
    unsigned int     i_width, i_height, i_aspect,175,5842
    unsigned int     i_width, i_height, i_aspect, i_forced_aspect;175,5842
    unsigned int     i_block_size;176,5909
    unsigned int     i_telx_line,177,5944
    unsigned int     i_telx_line, i_telx_count;177,5944
    char             *psz_telx,psz_telx178,5992
    char             *psz_telx, *psz_telx_lang;psz_telx_lang178,5992
    bool             b_hd,179,6040
    bool             b_hd, b_vbi;179,6040
    vbi_raw_decoder  rd_wss,180,6074
    vbi_raw_decoder  rd_wss, rd_telx;180,6074
    mtime_t          i_next_date;181,6112
    int              i_incr;182,6146
    int              i_id_video;185,6195
    es_out_id_t      *p_es_video;p_es_video186,6228
    sdi_audio_t      p_audios[p_audios187,6262
    es_out_id_t      *p_es_telx;p_es_telx188,6305
static int DemuxOpen(209,7017
static int Open(293,9368
static void DemuxClose(321,10096
static void Close(331,10320
static int DemuxDemux(342,10643
static int Demux(356,10971
static int DemuxControl(364,11234
static int Control(370,11430
#define WSS_LINE 400,12304
struct block_extension_t402,12332
    bool            b_progressive;404,12359
    bool            b_top_field_first;405,12439
    unsigned int    i_nb_fields;406,12519
    unsigned int    i_aspect;407,12599
static int NewFrame(410,12683
static int StartDecode(429,13293
static void StopDecode(548,17711
static void InitVideo(589,18790
static void DecodeVideo(661,21314
static int InitWSS(682,22059
static void DecodeWSS(719,23171
static int InitTelx(756,24415
static int DecodeTelx(792,25604
static int InitAudio(839,27153
static void ResampleAudio(875,28691
static int DecodeAudio(905,29509
static int DecodeFrame(966,31791
#define FIELD_1_VBLANK_EAV 1009,33120
#define FIELD_1_VBLANK_SAV 1010,33153
#define FIELD_1_ACTIVE_EAV 1011,33186
#define FIELD_1_ACTIVE_SAV 1012,33219
#define FIELD_2_VBLANK_EAV 1013,33252
#define FIELD_2_VBLANK_SAV 1014,33285
#define FIELD_2_ACTIVE_EAV 1015,33318
#define FIELD_2_ACTIVE_SAV 1016,33351
static const uint8_t *FindReferenceCode(FindReferenceCode1018,33385
static const uint8_t *CountReference(CountReference1033,33835
static const uint8_t *GetLine(GetLine1047,34265
#define U 1078,35205
#define Y1 1079,35268
#define V 1080,35336
#define Y2 1081,35405
static void UnpackVBI(1083,35466
static void Unpack01(1099,35851
static void Unpack2(1115,36238
static void Unpack3(1136,36741
#undef U1156,37222
#undef Y11157,37231
#undef V1158,37241
#undef Y21159,37250
#define A0 1161,37261
#define A1 1162,37322
#define A2 1163,37388
#define A3 1164,37455
static void UnpackAnc(1166,37514
#undef A01181,37832
#undef A11182,37842
#undef A21183,37852
#undef A31184,37862
static int HasAncillary(1186,37873
static void HandleAudioData(1192,38044
static void HandleAudioConfig(1270,41000
static void HandleAncillary(1349,43771
static int HandleSDBuffer(1422,45777
#define MAXLEN 1660,55951
static int ReadULSysfs(1662,55971
static int WriteULSysfs(1679,56384
static int InitCapture(1695,56771
static void CloseCapture(1761,58885
static int Capture(1772,59185

mux/mpeg/csa.c,1204
struct csa_t33,1290
    uint8_t o_ck[o_ck36,1333
    uint8_t e_ck[e_ck37,1354
    uint8_t o_kk[o_kk39,1376
    uint8_t e_kk[e_kk40,1398
    int     A[A43,1444
    int     B[B44,1463
    int     X,45,1482
    int     X, Y,45,1482
    int     X, Y, Z;45,1482
    int     D,46,1503
    int     D, E,46,1503
    int     D, E, F;46,1503
    int     p,47,1524
    int     p, q,47,1524
    int     p, q, r;47,1524
    bool    use_odd;49,1546
csa_t *csa_New(csa_New62,2055
void csa_Delete(70,2298
int csa_SetCW(78,2519
int csa_UseKey(127,3878
void csa_Decrypt(141,4345
void csa_Encrypt(230,6246
static const uint8_t key_perm[key_perm313,7976
static void csa_ComputeKey(321,8360
static const int sbox1[sbox1369,9373
static const int sbox2[sbox2370,9474
static const int sbox3[sbox3371,9575
static const int sbox4[sbox4372,9676
static const int sbox5[sbox5373,9777
static const int sbox6[sbox6374,9878
static const int sbox7[sbox7375,9979
static void csa_StreamCypher(377,10081
static const uint8_t block_sbox[block_sbox498,14740
static const uint8_t block_perm[block_perm520,16162
static void csa_BlockDecypher(541,17584
static void csa_BlockCypher(577,18302

video_output/win32/common.h,5831
    DXGI_FORMAT   textureFormat;56,2036
    DXGI_FORMAT   resourceFormatYRGB;57,2069
    DXGI_FORMAT   resourceFormatUV;58,2107
} d3d_quad_cfg_t;59,2143
    ID3D11Buffer              *pVertexBuffer;pVertexBuffer63,2179
    ID3D11Texture2D           *pTexture;pTexture64,2225
    ID3D11ShaderResourceView  *d3dresViewY;d3dresViewY65,2266
    ID3D11ShaderResourceView  *d3dresViewUV;d3dresViewUV66,2310
    ID3D11PixelShader         *d3dpixelShader;d3dpixelShader67,2355
    D3D11_VIEWPORT            cropViewport;68,2402
} d3d_quad_t;69,2446
struct vout_display_sys_t83,2995
    event_thread_t *event;event86,3033
    HWND                 hwnd;89,3071
    HWND                 hvideownd;90,3151
    struct vout_window_t *parent_window;parent_window91,3231
    HWND                 hparent;92,3311
    HWND                 hfswnd;93,3391
    RECT         rect_display;96,3502
    RECT         rect_parent;99,3595
    HINSTANCE     dxgidebug_dll;102,3677
    unsigned changes;105,3719
    bool is_first_display;108,3804
    bool is_on_top;109,3831
    UINT i_spi_screensaveactive;112,3925
    RECT         rect_src;115,4036
    RECT         rect_src_clipped;116,4063
    RECT         rect_dest;117,4098
    RECT         rect_dest_clipped;118,4126
    picture_pool_t *pool;pool120,4163
    HMONITOR             hmonitor;124,4255
    GUID                 *display_driver;display_driver125,4335
    int          i_align_src_boundary;128,4419
    int          i_align_src_size;129,4458
    int          i_align_dest_boundary;130,4493
    int          i_align_dest_size;131,4533
    bool   use_wallpaper;133,4570
    bool   use_overlay;135,4633
    bool   restore_overlay;136,4699
    bool            can_blit_fourcc;139,4757
    uint32_t        i_rgb_colorkey;141,4795
    uint32_t        i_colorkey;142,4878
    COLORREF        color_bkg;144,4962
    COLORREF        color_bkgtxt;145,4993
    LPDIRECTDRAW2        ddobject;147,5028
    LPDIRECTDRAWSURFACE2 display;148,5106
    LPDIRECTDRAWCLIPPER  clipper;149,5184
    HINSTANCE            hddraw_dll;150,5262
    picture_sys_t        *picsys;picsys152,5343
    vlc_mutex_t    lock;155,5424
    bool           ch_wallpaper;156,5449
    bool           wallpaper_requested;157,5482
    HDC                   hGLDC;161,5597
    HGLRC                 hGLRC;162,5630
    vlc_gl_t              gl;163,5663
    vout_display_opengl_t *vgl;vgl165,5724
    HDC                   affinityHDC;167,5764
    HINSTANCE              d2_dll;171,5869
    ID2D1Factory           *d2_factory;d2_factory172,5951
    ID2D1HwndRenderTarget  *d2_render_target;d2_render_target173,6033
    ID2D1Bitmap            *d2_bitmap;d2_bitmap174,6115
    HINSTANCE                hdxgi_dll;179,6260
    HINSTANCE                hd3d11_dll;180,6343
    HINSTANCE                hd3dcompiler_dll;181,6427
    IDXGIFactory2            *dxgifactory;dxgifactory182,6517
    PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN OurD3D11CreateDeviceAndSwapChain;184,6665
    PFN_D3D11_CREATE_DEVICE                OurD3D11CreateDevice;185,6742
    pD3DCompile                            OurD3DCompile;186,6807
    HANDLE                   context_lock;189,6909
    IDXGISwapChain1          *dxgiswapChain;dxgiswapChain192,7064
    ID3D11Device             *d3ddevice;d3ddevice193,7137
    ID3D11DeviceContext      *d3dcontext;d3dcontext194,7201
    d3d_quad_t               picQuad;195,7266
    d3d_quad_cfg_t           picQuadConfig;196,7304
    d3d_quad_t               stagingQuad;199,7398
    ID3D11RenderTargetView   *d3drenderTargetView;d3drenderTargetView201,7441
    ID3D11DepthStencilView   *d3ddepthStencilView;d3ddepthStencilView202,7492
    const char               *d3dPxShader;d3dPxShader203,7543
    vlc_fourcc_t             pSubpictureChromas[pSubpictureChromas206,7598
    const char               *psz_rgbaPxShader;psz_rgbaPxShader207,7650
    ID3D11PixelShader        *pSPUPixelShader;pSPUPixelShader208,7698
    DXGI_FORMAT              d3dregion_format;209,7745
    int                      d3dregion_count;210,7792
    picture_t                **d3dregions;d3dregions211,7838
    bool allow_hw_yuv;215,7921
    bool use_desktop;217,8038
        bool is_fullscreen;219,8073
        bool is_on_top;220,8101
        RECT win;221,8125
    } desktop_save;222,8143
    vout_display_cfg_t cfg_saved;223,8163
    HINSTANCE               hd3d9_dll;226,8274
    HINSTANCE               hd3d9x_dll;227,8355
    IDirect3DPixelShader9*  d3dx_shader;228,8437
    LPDIRECT3D9             d3dobj;229,8478
    D3DCAPS9                d3dcaps;230,8514
    LPDIRECT3DDEVICE9       d3ddev;231,8551
    D3DPRESENT_PARAMETERS   d3dpp;232,8587
    bool                    use_d3d9ex;233,8622
    LPDIRECT3DTEXTURE9      d3dtex;236,8684
    LPDIRECT3DVERTEXBUFFER9 d3dvtc;237,8720
    D3DFORMAT               d3dregion_format;238,8756
    int                     d3dregion_count;239,8802
    struct d3d_region_t     *d3dregion;d3dregion240,8847
    picture_sys_t           *picsys;picsys242,8888
    bool                    reset_device;245,8936
    bool                    reopen_device;246,8978
    bool                    lost_not_ready;247,9021
    bool                    clear_scene;248,9065
    vlc_mutex_t    lock;251,9153
    bool           ch_desktop;252,9178
    bool           desktop_requested;253,9209
    int  i_depth;257,9290
    HDC        off_dc;260,9360
    HBITMAP    off_bitmap;261,9383
        BITMAPINFO bitmapinfo;265,9428
        RGBQUAD    red;266,9459
        RGBQUAD    green;267,9483
        RGBQUAD    blue;268,9509
#define IDM_TOGGLE_ON_TOP 294,10463
#define DX_POSITION_CHANGE 295,10501
#define DX_WALLPAPER_CHANGE 296,10535
#define DX_DESKTOP_CHANGE 297,10570

demux/hls/HLSStreams.cpp,368
HLSStream::HLSStream(36,1210
HLSStream::~HLSStream(44,1378
void HLSStream::setTimeOffset(50,1455
AbstractDemuxer * HLSStream::createDemux(70,1879
int HLSStream::ParseID3PrivTag(105,2778
int HLSStream::ParseID3Tag(120,3226
int HLSStream::ID3TAG_Parse_Handler(126,3421
block_t * HLSStream::checkBlock(132,3661
AbstractStream * HLSStreamFactory::create(160,4507

access/linsys/linsys_sdi.h,1720
#define _SDI_H39,1772
#define SDI_DRIVER_NAME 42,1806
#define SDI_MAJOR 44,1837
#define SDI_TX_BUFFERS_MIN 48,1985
#define SDI_TX_BUFSIZE_MIN 55,2431
#define SDI_RX_BUFFERS_MIN 56,2463
#define SDI_RX_BUFSIZE_MIN 57,2522
#define SDI_TX_BUFFERS 59,2599
#define SDI_TX_BUFSIZE 60,2655
#define SDI_RX_BUFFERS 61,2733
#define SDI_RX_BUFSIZE 62,2789
#define SDI_IOC_MAGIC 65,2895
#define SDI_IOC_TXGETCAP	68,3029
#define SDI_IOC_TXGETEVENTS	69,3091
#define SDI_IOC_TXGETBUFLEVEL	70,3156
#define SDI_IOC_TXGETTXD	71,3223
#define SDI_IOC_RXGETCAP	73,3277
#define SDI_IOC_RXGETEVENTS	74,3340
#define SDI_IOC_RXGETBUFLEVEL	75,3406
#define SDI_IOC_RXGETCARRIER	76,3474
#define SDI_IOC_RXGETSTATUS	77,3532
#define SDI_IOC_GETID	79,3590
#define SDI_IOC_GETVERSION	80,3652
#define SDI_IOC_QBUF_DEPRECATED	82,3787
#define SDI_IOC_QBUF_DEPRECATED2	83,3859
#define SDI_IOC_QBUF	84,3931
#define SDI_IOC_DQBUF_DEPRECATED	86,4046
#define SDI_IOC_DQBUF_DEPRECATED2	87,4118
#define SDI_IOC_DQBUF	88,4191
#define SDI_EVENT_TX_BUFFER_ORDER	91,4282
#define SDI_EVENT_TX_BUFFER	92,4318
#define SDI_EVENT_TX_FIFO_ORDER	93,4380
#define SDI_EVENT_TX_FIFO	94,4415
#define SDI_EVENT_TX_DATA_ORDER	95,4473
#define SDI_EVENT_TX_DATA	96,4508
#define SDI_EVENT_RX_BUFFER_ORDER	99,4607
#define SDI_EVENT_RX_BUFFER	100,4643
#define SDI_EVENT_RX_FIFO_ORDER	101,4705
#define SDI_EVENT_RX_FIFO	102,4740
#define SDI_EVENT_RX_CARRIER_ORDER	103,4798
#define SDI_EVENT_RX_CARRIER	104,4835
#define SDI_CAP_TX_RXCLKSRC	107,4929
#define SDI_CTL_TX_CLKSRC_ONBOARD	110,5009
#define SDI_CTL_TX_CLKSRC_EXT	111,5045
#define SDI_CTL_TX_CLKSRC_RX	112,5078
#define SDI_CTL_MODE_8BIT	115,5131
#define SDI_CTL_MODE_10BIT	116,5159

video_output/win32/wingdi.c,483
vlc_module_begin 48,1850
static void Close(110,3510
static picture_pool_t *Pool(Pool122,3670
static void Display(128,3788
#define rect_src 132,3916
#define rect_src_clipped 133,3951
#define rect_dest 134,4002
#define rect_dest_clipped 135,4039
#undef rect_src161,5079
#undef rect_src_clipped162,5095
#undef rect_dest163,5119
#undef rect_dest_clipped164,5136
static int Control(172,5261
static void Manage(184,5519
static int Init(189,5585
static void Clean(303,9018

mux/mpeg/csa.h,234
#define VLC_MPEG_CSA_H_25,1150
typedef struct csa_t csa_t;27,1175
#define csa_New 28,1203
#define csa_Delete 29,1233
#define csa_SetCW 30,1266
#define csa_UseKey 31,1297
#define csa_Decrypt 32,1330
#define csa_Encrypt 33,1364

misc/playlist/xspf.c,157
static char *input_xml(input_xml43,1538
static void xspf_export_item(59,1985
static void xspf_extension_item(181,5623
int xspf_export_playlist(220,6765

codec/avcodec/chroma.c,429
#   define VLC_RGB_ES(41,1679
#   define VLC_RGB_ES(44,1756
#define VLC_RGB(48,1835
    vlc_fourcc_t  i_chroma;56,2035
    int           i_chroma_id;57,2063
    uint32_t      i_rmask;58,2094
    uint32_t      i_gmask;59,2121
    uint32_t      i_bmask;60,2148
} chroma_table[chroma_table62,2176
int GetFfmpegChroma(168,6848
vlc_fourcc_t FindVlcChroma(189,7567
int GetVlcChroma(197,7791
int FindFfmpegChroma(214,8340

codec/a52.c,792
struct decoder_sys_t58,2299
    a52_state_t     *p_liba52;p_liba5260,2322
    bool            b_dynrng;61,2385
    int             i_flags;62,2431
    bool            b_dontwarn;63,2506
    int             i_nb_channels;64,2538
    uint8_t         pi_chan_table[pi_chan_table66,2609
    bool            b_synced;67,2684
#define DYNRNG_TEXT 70,2718
#define DYNRNG_LONGTEXT 71,2775
vlc_module_begin 78,3145
            union { uint32_t u;100,3905
            union { uint32_t u; int32_t i;100,3905
static void Duplicate(114,4242
        union { uint32_t u;119,4385
        union { uint32_t u; int32_t i;119,4385
static void Exchange(136,4687
static block_t *Decode(Decode157,5182
static int channels_vlc2a52(240,7871
static int Open(305,9892
static void Close(377,12129

demux/adaptive/tools/Retrieve.hpp,101
#define RETRIEVE_HPP21,989
namespace adaptive26,1054
    class Retrieveadaptive::Retrieve28,1075

video_filter/deinterlace/yadif.h,1094
#  define DECLARE_ALIGNED(26,879
#    define DECLARE_ASM_CONST(28,978
#    define DECLARE_ASM_CONST(30,1095
#    define DECLARE_ASM_CONST(33,1215
typedef intptr_t x86_reg;36,1301
typedef struct { uint64_t a,37,1327
typedef struct { uint64_t a, b;37,1327
typedef struct { uint64_t a, b; } xmm_reg;37,1327
#define HAVE_YADIF_SSSE346,1684
#define COMPILE_TEMPLATE_SSE 47,1709
#define COMPILE_TEMPLATE_SSSE3 48,1740
#define VLC_TARGET 49,1773
#define RENAME(50,1800
#undef COMPILE_TEMPLATE_SSE52,1858
#undef COMPILE_TEMPLATE_SSSE353,1886
#undef VLC_TARGET54,1916
#undef RENAME55,1934
#define HAVE_YADIF_SSE262,2099
#define COMPILE_TEMPLATE_SSE 63,2123
#define VLC_TARGET 64,2154
#define RENAME(65,2181
#undef COMPILE_TEMPLATE_SSE67,2238
#undef VLC_TARGET68,2266
#undef RENAME69,2284
#define HAVE_YADIF_MMX76,2446
#define VLC_TARGET 77,2469
#define RENAME(78,2496
#undef VLC_TARGET80,2552
#undef RENAME81,2570
#define FFABS 85,2599
#define CHECK(87,2618
#define FILTER 95,2972
static void yadif_filter_line_c(135,4341
static void yadif_filter_line_c_16bit(142,4593

access/http/transport.c,218
static void cleanup_addrinfo(39,1353
static void cleanup_fd(44,1423
static int vlc_tcp_connect(49,1494
vlc_tls_t *vlc_http_connect(vlc_http_connect109,3100
vlc_tls_t *vlc_https_connect(vlc_https_connect124,3421

codec/avcodec/chroma.h,37
#define VLC_AVUTIL_CHROMA_H_27,1241

misc/playlist/html.c,57
static void DoChildren(45,1512
int Export_HTML(98,3154

demux/smooth/playlist/ForgedInitSegment.hpp,1162
#define FORGEDINITSEGMENT_HPP21,1000
namespace smooth28,1148
    namespace playlistsmooth::playlist30,1167
        class ForgedInitSegment smooth::playlist::ForgedInitSegment35,1281
                std::string data;smooth::playlist::ForgedInitSegment::data59,2502
                std::string type;smooth::playlist::ForgedInitSegment::type60,2536
                std::string language;smooth::playlist::ForgedInitSegment::language61,2570
                uint8_t *extradata;smooth::playlist::ForgedInitSegment::extradata62,2608
                size_t   i_extradata;smooth::playlist::ForgedInitSegment::i_extradata63,2644
                WAVEFORMATEX formatex;smooth::playlist::ForgedInitSegment::formatex64,2682
                unsigned width,smooth::playlist::ForgedInitSegment::width65,2721
                unsigned width, height;smooth::playlist::ForgedInitSegment::height65,2721
                vlc_fourcc_t fourcc;smooth::playlist::ForgedInitSegment::fourcc66,2761
                int es_type;smooth::playlist::ForgedInitSegment::es_type67,2798
                unsigned track_id;smooth::playlist::ForgedInitSegment::track_id68,2827

video_filter/rotate.c,810
#define VLC_MODULE_LICENSE 34,1468
#define ANGLE_TEXT 55,2235
#define ANGLE_LONGTEXT 56,2277
#define MOTION_TEXT 57,2334
#define MOTION_LONGTEXT 58,2379
#define FILTER_PREFIX 61,2492
vlc_module_begin 66,2705
struct filter_sys_t88,3452
    atomic_uint_fast32_t sincos;90,3474
    motion_sensors_t *p_motion;p_motion91,3507
    uint32_t u;95,3559
        int16_t sin;97,3588
        int16_t cos;98,3609
} sincos_t;100,3637
static void store_trigo(102,3650
static void fetch_trigo(113,3949
static int Create(124,4340
static void Destroy(185,6190
static picture_t *Filter(Filter203,6715
                #define test 263,9121
                #undef test264,9152
                #undef test309,11171
static picture_t *FilterPacked(FilterPacked331,11721
static int RotateCallback(438,15643

codec/omxil/mediacodec_ndk.c,5853
#define THREAD_NAME 44,1630
#define AMEDIACODEC_FLAG_CODEC_CONFIG 48,1802
    AMEDIA_OK 55,2037
    AMEDIA_ERROR_BASE 57,2057
    AMEDIA_ERROR_UNKNOWN 58,2106
    AMEDIA_ERROR_UNKNOWN               = AMEDIA_ERROR_BASE,58,2106
    AMEDIA_ERROR_MALFORMED 59,2166
    AMEDIA_ERROR_MALFORMED             = AMEDIA_ERROR_BASE 59,2166
    AMEDIA_ERROR_UNSUPPORTED 60,2230
    AMEDIA_ERROR_UNSUPPORTED           = AMEDIA_ERROR_BASE 60,2230
    AMEDIA_ERROR_INVALID_OBJECT 61,2294
    AMEDIA_ERROR_INVALID_OBJECT        = AMEDIA_ERROR_BASE 61,2294
    AMEDIA_ERROR_INVALID_PARAMETER 62,2358
    AMEDIA_ERROR_INVALID_PARAMETER     = AMEDIA_ERROR_BASE 62,2358
    AMEDIA_DRM_ERROR_BASE 64,2423
    AMEDIA_DRM_NOT_PROVISIONED 65,2472
    AMEDIA_DRM_NOT_PROVISIONED         = AMEDIA_DRM_ERROR_BASE 65,2472
    AMEDIA_DRM_RESOURCE_BUSY 66,2540
    AMEDIA_DRM_RESOURCE_BUSY           = AMEDIA_DRM_ERROR_BASE 66,2540
    AMEDIA_DRM_DEVICE_REVOKED 67,2608
    AMEDIA_DRM_DEVICE_REVOKED          = AMEDIA_DRM_ERROR_BASE 67,2608
    AMEDIA_DRM_SHORT_BUFFER 68,2676
    AMEDIA_DRM_SHORT_BUFFER            = AMEDIA_DRM_ERROR_BASE 68,2676
    AMEDIA_DRM_SESSION_NOT_OPENED 69,2744
    AMEDIA_DRM_SESSION_NOT_OPENED      = AMEDIA_DRM_ERROR_BASE 69,2744
    AMEDIA_DRM_TAMPER_DETECTED 70,2812
    AMEDIA_DRM_TAMPER_DETECTED         = AMEDIA_DRM_ERROR_BASE 70,2812
    AMEDIA_DRM_VERIFY_FAILED 71,2880
    AMEDIA_DRM_VERIFY_FAILED           = AMEDIA_DRM_ERROR_BASE 71,2880
    AMEDIA_DRM_NEED_KEY 72,2948
    AMEDIA_DRM_NEED_KEY                = AMEDIA_DRM_ERROR_BASE 72,2948
    AMEDIA_DRM_LICENSE_EXPIRED 73,3016
    AMEDIA_DRM_LICENSE_EXPIRED         = AMEDIA_DRM_ERROR_BASE 73,3016
} media_status_t;75,3085
typedef struct AMediaCodec AMediaCodec;82,3303
struct AMediaCodecBufferInfo 84,3344
    int32_t offset;85,3375
    int32_t size;86,3395
    int64_t presentationTimeUs;87,3413
    uint32_t flags;88,3445
typedef struct AMediaCodecBufferInfo AMediaCodecBufferInfo;90,3468
    AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM 93,3536
    AMEDIACODEC_CONFIGURE_FLAG_ENCODE 94,3583
    AMEDIACODEC_INFO_OUTPUT_BUFFERS_CHANGED 95,3626
    AMEDIACODEC_INFO_OUTPUT_FORMAT_CHANGED 96,3676
    AMEDIACODEC_INFO_TRY_AGAIN_LATER 97,3725
typedef struct AMediaFormat AMediaFormat;101,3792
typedef struct AMediaCrypto AMediaCrypto;104,3856
typedef AMediaCodec* (*pf_AMediaCodec_createCodecByName)pf_AMediaCodec_createCodecByName110,4074
typedef media_status_t (*pf_AMediaCodec_configure)pf_AMediaCodec_configure112,4151
typedef media_status_t (*pf_AMediaCodec_start)pf_AMediaCodec_start118,4340
typedef media_status_t (*pf_AMediaCodec_stop)pf_AMediaCodec_stop120,4403
typedef media_status_t (*pf_AMediaCodec_flush)pf_AMediaCodec_flush122,4465
typedef media_status_t (*pf_AMediaCodec_delete)pf_AMediaCodec_delete124,4528
typedef AMediaFormat* (*pf_AMediaCodec_getOutputFormat)pf_AMediaCodec_getOutputFormat126,4592
typedef ssize_t (*pf_AMediaCodec_dequeueInputBuffer)pf_AMediaCodec_dequeueInputBuffer128,4664
typedef uint8_t* (*pf_AMediaCodec_getInputBuffer)pf_AMediaCodec_getInputBuffer131,4760
typedef media_status_t (*pf_AMediaCodec_queueInputBuffer)pf_AMediaCodec_queueInputBuffer134,4864
typedef ssize_t (*pf_AMediaCodec_dequeueOutputBuffer)pf_AMediaCodec_dequeueOutputBuffer137,5016
typedef uint8_t* (*pf_AMediaCodec_getOutputBuffer)pf_AMediaCodec_getOutputBuffer140,5142
typedef media_status_t (*pf_AMediaCodec_releaseOutputBuffer)pf_AMediaCodec_releaseOutputBuffer143,5247
typedef AMediaFormat *(*pf_AMediaFormat_new)pf_AMediaFormat_new146,5357
typedef media_status_t (*pf_AMediaFormat_delete)pf_AMediaFormat_delete147,5405
typedef void (*pf_AMediaFormat_setString)pf_AMediaFormat_setString149,5471
typedef void (*pf_AMediaFormat_setInt32)pf_AMediaFormat_setInt32152,5575
typedef bool (*pf_AMediaFormat_getInt32)pf_AMediaFormat_getInt32155,5674
struct syms158,5772
        pf_AMediaCodec_createCodecByName createCodecByName;161,5799
        pf_AMediaCodec_configure configure;162,5859
        pf_AMediaCodec_start start;163,5903
        pf_AMediaCodec_stop stop;164,5939
        pf_AMediaCodec_flush flush;165,5973
        pf_AMediaCodec_delete delete;166,6009
        pf_AMediaCodec_getOutputFormat getOutputFormat;167,6047
        pf_AMediaCodec_dequeueInputBuffer dequeueInputBuffer;168,6103
        pf_AMediaCodec_getInputBuffer getInputBuffer;169,6165
        pf_AMediaCodec_queueInputBuffer queueInputBuffer;170,6219
        pf_AMediaCodec_dequeueOutputBuffer dequeueOutputBuffer;171,6277
        pf_AMediaCodec_getOutputBuffer getOutputBuffer;172,6341
        pf_AMediaCodec_releaseOutputBuffer releaseOutputBuffer;173,6397
    } AMediaCodec;174,6461
        pf_AMediaFormat_new new;176,6493
        pf_AMediaFormat_delete delete;177,6526
        pf_AMediaFormat_setString setString;178,6565
        pf_AMediaFormat_setInt32 setInt32;179,6610
        pf_AMediaFormat_getInt32 getInt32;180,6653
    } AMediaFormat;181,6696
static struct syms syms;183,6719
struct members185,6745
    const char *name;name187,6762
    int offset;188,6784
    bool critical;189,6800
static struct members members[members191,6822
#define OFF(193,6858
#undef OFF207,7715
#define OFF(208,7726
#undef OFF214,8037
#undef OFF217,8074
InitSymbols(222,8182
struct mc_api_sys264,9149
    AMediaCodec* p_codec;266,9169
    AMediaFormat* p_format;267,9195
    AMediaCodecBufferInfo info;268,9223
static int Stop(274,9426
static int Start(303,10143
static int Flush(377,12696
static int DequeueInput(390,13060
static int QueueInput(410,13691
static int32_t GetFormatInteger(440,14648
static int DequeueOutput(450,15008
static int GetOutput(476,15937
static int ReleaseOutput(542,18674
static void Clean(558,19172
static int Configure(567,19427
int MediaCodecNdk_Init(582,20028

access/http/transport.h,38
#define VLC_HTTP_TRANSPORT_H 22,1110

demux/mpeg/ts_scte.c,76
void SCTE18_Section_Callback(40,1350
void SCTE27_Section_Callback(75,2888

packetizer/mlp.c,961
vlc_module_begin 47,1837
    int i_type;60,2249
    unsigned i_rate;61,2265
    unsigned i_channels;62,2286
    int i_channels_conf;63,2311
    unsigned i_samples;64,2336
    bool b_vbr;66,2361
    unsigned  i_bitrate;67,2377
    unsigned  i_substreams;69,2403
} mlp_header_t;71,2432
struct decoder_sys_t73,2449
    int i_state;78,2511
    block_bytestream_t bytestream;80,2529
    date_t  end_date;85,2605
    mtime_t i_pts;87,2628
    int i_frame_size;88,2647
    bool         b_mlp;90,2670
    mlp_header_t mlp;91,2694
#define MLP_MAX_SUBSTREAMS 94,2720
#define MLP_HEADER_SYNC 95,2752
#define MLP_HEADER_SIZE 96,2781
static const uint8_t pu_start_code[pu_start_code98,2853
static int TrueHdChannels(105,2988
static int MlpParse(121,3281
static int SyncInfo(198,5350
static int SyncInfoDolby(246,6522
static void Flush(255,6734
static block_t *Packetize(Packetize265,6966
static int Open(452,13573
static void Close(484,14362

lua/libs/dialog.c,1776
#   define  _GNU_SOURCE28,1381
static inline int vlclua_dialog_add_text_input(63,2445
static inline int vlclua_dialog_add_password(67,2587
static inline int vlclua_dialog_add_html(71,2725
static const luaL_Reg vlclua_dialog_reg[vlclua_dialog_reg103,4090
static const luaL_Reg vlclua_widget_reg[vlclua_widget_reg125,4906
static const char key_opaque 140,5484
void luaopen_dialog(149,5747
static int vlclua_dialog_create(166,6270
static int vlclua_dialog_delete(228,8125
static int vlclua_dialog_show(298,10092
static int vlclua_dialog_hide(313,10480
static int vlclua_dialog_set_title(329,10875
static int vlclua_dialog_update(351,11460
static void lua_SetDialogUpdate(370,11953
static int lua_GetDialogUpdate(378,12183
int lua_DialogFlush(392,12651
static int vlclua_dialog_add_button(416,13190
static int vlclua_dialog_add_label(439,13890
static int vlclua_dialog_add_text_inner(456,14469
static int vlclua_dialog_add_check_box(475,15065
static int vlclua_dialog_add_dropdown(495,15675
static int vlclua_dialog_add_list(508,16011
static int vlclua_dialog_add_image(521,16348
static int vlclua_dialog_add_spin_icon(539,16923
static int vlclua_create_widget_inner(557,17484
static int vlclua_widget_set_text(616,19316
static int vlclua_widget_get_text(660,20606
static int vlclua_widget_get_checked(700,21777
static int vlclua_widget_add_value(719,22409
static int vlclua_widget_get_value(765,23873
static int vlclua_widget_clear(800,24903
static int vlclua_widget_get_selection(836,25880
static int vlclua_widget_set_checked(871,26869
static int vlclua_widget_animate(904,27853
static int vlclua_widget_stop(931,28697
static int vlclua_dialog_delete_widget(965,29676
static void AddWidget(1042,31779
static int DeleteWidget(1053,32102

access/dcp/dcpdecrypt.cpp,311
static string createUUID(50,1612
int KDM::Parse(84,2251
int KDM::ParsePrivate(136,3676
int AESKey::Parse(187,5085
int AESKey::decryptRSA(231,6368
int AESKey::extractInfo(355,10693
int RSAKey::setPath(417,12360
int RSAKey::readPEM(449,13040
int RSAKey::readDER(523,14900
int RSAKey::parseTag(597,17586

misc/playlist/export.c,62
#define VLC_MODULE_LICENSE 31,1368
vlc_module_begin 46,1999

stream_out/rtsp.c,2551
typedef struct rtsp_session_t rtsp_session_t;57,1857
struct rtsp_stream_t59,1904
    vlc_mutex_t     lock;61,1927
    vlc_object_t   *owner;owner62,1953
    vod_media_t    *vod_media;vod_media63,1980
    httpd_host_t   *host;host64,2011
    httpd_url_t    *url;url65,2037
    char           *psz_path;psz_path66,2062
    unsigned        track_id;67,2092
    int             sessionc;69,2123
    rtsp_session_t **sessionv;sessionv70,2153
    int             timeout;72,2185
    vlc_timer_t     timer;73,2214
rtsp_stream_t *RtspSetup(RtspSetup87,2738
void RtspUnsetup(140,4371
struct rtsp_stream_id_t161,4774
    rtsp_stream_t    *stream;stream163,4800
    sout_stream_id_sys_t *sout_id;sout_id164,4830
    httpd_url_t      *url;url165,4865
    unsigned          track_id;166,4892
    uint32_t          ssrc;167,4924
    unsigned          clock_rate;168,4952
    int               mcast_fd;169,5030
typedef struct rtsp_strack_t rtsp_strack_t;173,5067
struct rtsp_session_t176,5140
    rtsp_stream_t *stream;stream178,5164
    uint64_t       id;179,5191
    mtime_t        last_seen;180,5214
    int            trackc;183,5293
    rtsp_strack_t *trackv;trackv184,5320
struct rtsp_strack_t189,5380
    rtsp_stream_id_t  *id;id191,5403
    sout_stream_id_sys_t  *sout_id;sout_id192,5430
    int          setup_fd;193,5466
    int          rtp_fd;194,5536
    uint32_t     ssrc;195,5614
    uint16_t     seq_init;196,5637
#define TRACK_PATH_SIZE 201,5718
char *RtspAppendTrackPath(RtspAppendTrackPath203,5772
rtsp_stream_id_t *RtspAddId(RtspAddId215,6084
void RtspDelId(275,7709
static void RtspUpdateTimer(301,8320
static void RtspTimeOut(318,8748
rtsp_session_t *RtspClientNew(RtspClientNew345,9475
rtsp_session_t *RtspClientGet(RtspClientGet364,9835
void RtspClientDel(390,10325
static void RtspClientAlive(404,10637
static int dup_socket(413,10825
int RtspTrackAttach(429,11277
void RtspTrackDetach(491,13031
static void RtspTrackClose(532,14139
static inline const char *transport_next(transport_next548,14462
static inline const char *parameter_next(parameter_next564,14818
static int64_t ParseNPT 573,14987
static int RtspHandler(599,15596
    answer->i_proto i_proto634,16663
    answer->i_version=i_version635,16703
    answer->i_type i_type636,16729
    answer->i_body i_body637,16770
    answer->p_body p_body638,16794
    struct tm ut;643,16954
    psz 1191,37359
    psz 1194,37473
static int RtspCallback(1203,37657
static int RtspCallbackId(1213,37980

audio_filter/resampler/speex.c,188
#define QUALITY_TEXT 34,1268
#define QUALITY_LONGTEXT 35,1314
vlc_module_begin 42,1534
static int Open 103,3459
static void Close 113,3698
static block_t *Resample Resample121,3884

demux/mpeg/ts_scte.h,30
#define VLC_TS_SCTE_H20,1030

codec/svcdsub.c,1180
vlc_module_begin 46,1978
#define GETINT16(72,3052
#define GETINT32(74,3109
  SUBTITLE_BLOCK_EMPTY 78,3241
  SUBTITLE_BLOCK_PARTIAL 79,3272
  SUBTITLE_BLOCK_COMPLETE 80,3303
} packet_state_t;81,3333
struct decoder_sys_t83,3352
  packet_state_t i_state;85,3375
  block_t  *p_spu;p_spu87,3447
  uint16_t i_image;89,3501
  uint8_t  i_packet;90,3569
  size_t   i_spu_size;92,3639
  uint16_t i_image_offset;95,3779
  size_t i_image_length;97,3903
  size_t second_field_offset;98,3978
  size_t metadata_offset;99,4046
  size_t metadata_length;100,4123
  mtime_t i_duration;102,4184
  uint16_t i_x_start,105,4308
  uint16_t i_x_start, i_y_start;105,4308
  uint16_t i_width,107,4438
  uint16_t i_width, i_height;107,4438
  uint8_t p_palette[p_palette109,4508
static int DecoderOpen(115,4798
static int PacketizerOpen(144,5597
void DecoderClose(154,5960
static subpicture_t *Decode(Decode166,6344
static block_t *Packetize(Packetize188,6918
#define SPU_HEADER_LEN 228,8185
static block_t *Reassemble(Reassemble230,8211
static void ParseHeader(352,12084
static subpicture_t *DecodePacket(DecodePacket414,14340
static void SVCDSubRenderImage(494,17216

demux/dash/mpd/IsoffMainParser.h,379
#define ISOFFMAINPARSER_H_26,1180
        class IsoffMainParser63,1749
                xml::Node       *root;IsoffMainParser::root86,3127
                vlc_object_t    *p_object;IsoffMainParser::p_object87,3166
                stream_t        *p_stream;IsoffMainParser::p_stream88,3209
                std::string      playlisturl;IsoffMainParser::playlisturl89,3252

demux/adaptive/http/HTTPConnectionManager.h,1350
#define HTTPCONNECTIONMANAGER_H_26,1192
        class AbstractConnectionManager 44,1539
                AbstractConnectionManager(47,1640
                ~AbstractConnectionManager(48,1699
                virtual void updateDownloadRate(54,2017
                void setDownloadRateObserver(55,2106
                vlc_object_t                                       *p_object;p_object58,2201
                IDownloadRateObserver                              *rateObserver;rateObserver61,2301
        class HTTPConnectionManager 64,2395
                HTTPConnectionManager 67,2496
                virtual ~HTTPConnectionManager 68,2598
                virtual void    closeAllConnections 70,2651
                virtual AbstractConnection * getConnection(71,2718
                virtual void start(73,2810
                virtual void cancel(74,2880
                void    releaseAllConnections 77,2973
                Downloader                                         *downloader;downloader78,3023
                vlc_mutex_t                                         lock;79,3103
                std::vector<AbstractConnection *>                   connectionPool;HTTPConnectionManager::connectionPool80,3177
                ConnectionFactory                                  *factory;HTTPConnectionManager::factory81,3261

access/mms/mms.c,376
#define ALL_TEXT 49,1979
#define ALL_LONGTEXT 50,2033
#define BITRATE_TEXT 54,2193
#define BITRATE_LONGTEXT 55,2238
#define PROXY_TEXT 58,2340
#define PROXY_LONGTEXT 59,2376
#define TIMEOUT_TEXT 64,2586
#define TIMEOUT_LONGTEXT 65,2634
vlc_module_begin 67,2804
struct access_sys_t90,3652
    int i_proto;92,3674
static int Open(98,3863
static void Close(120,4608

access/http/hpackenc.c,457
# undef NDEBUG26,1150
static size_t hpack_encode_int(45,1611
static size_t hpack_encode_str_raw(76,2191
static size_t hpack_encode_str_raw_lower(96,2601
size_t hpack_encode_hdr_neverindex(120,3163
size_t hpack_encode(154,3766
static void test_integer(184,4392
static void test_integers(196,4623
static void test_lowercase(203,4737
static void test_block(211,4870
static void test_reqs(260,6133
static void test_resps(273,6651
int main(290,7388

access/http/h2output_test.c,411
#undef NDEBUG25,1118
#undef msleep37,1321
static unsigned char counter 39,1336
static bool send_failure 40,1370
static bool expect_hello 41,1404
static vlc_sem_t rx;42,1437
static int fd_callback(44,1459
static ssize_t send_callback(50,1599
static vlc_tls_t fake_tls 86,2354
static struct vlc_h2_frame *frame(frame92,2444
static struct vlc_h2_frame *frame_list(frame_list99,2602
int main(116,2955

stream_out/gather.c,446
vlc_module_begin 44,1785
struct sout_stream_id_sys_t58,2395
    bool    b_used;60,2425
    bool    b_streamswap;61,2445
    es_format_t fmt;63,2472
    void          *id;id64,2493
struct sout_stream_sys_t67,2520
    int              i_id;69,2547
    sout_stream_id_sys_t **id;id70,2574
static int Open(76,2777
static void Close(102,3455
static sout_stream_id_sys_t * Add(124,4061
static void Del(200,6298
static int Send(209,6590

video_filter/opencv_example.cpp,377
struct filter_sys_t51,2080
    CvMemStorage* p_storage;filter_sys_t::p_storage53,2102
    CvHaarClassifierCascade* p_cascade;filter_sys_t::p_cascade54,2131
    video_filter_event_info_t event_info;filter_sys_t::event_info55,2171
    int i_id;filter_sys_t::i_id56,2213
vlc_module_end 83,3297
static void CloseFilter(128,5017
static picture_t *Filter(Filter148,5677

access/mms/asf.c,92
void  GenerateGuid 35,1338
void  asf_HeaderParse 43,1589
void  asf_StreamSelect 181,6112

audio_output/amem.c,886
vlc_module_begin 33,1283
struct aout_sys_t55,2023
    void *opaque;opaque57,2043
    int (*setup)setup58,2061
    void (*cleanup)cleanup59,2121
            void *setup_opaque;setup_opaque64,2198
             unsigned rate:rate68,2266
             unsigned channels:channels69,2297
    void (*play)play72,2350
    void (*pause)pause73,2430
    void (*resume)resume74,2477
    void (*flush)flush75,2525
    void (*drain)drain76,2559
    int (*set_volume)set_volume77,2593
    float volume;78,2653
    bool mute;79,2671
    bool ready;80,2686
static void Play 83,2706
static void Pause 92,2924
static void Flush 101,3153
static int VolumeSet 110,3348
static int MuteSet 120,3610
static int SoftVolumeSet 130,3873
static int SoftMuteSet 141,4106
static void Stop 151,4316
static int Start 160,4485
static int Open 238,6738
static void Close 294,8317

access/v4l2/linux/videodev2.h,41955
#define _UAPI__LINUX_VIDEODEV2_H57,2597
#define VIDEO_MAX_FRAME 71,2865
#define VIDEO_MAX_PLANES 72,2906
#define v4l2_fourcc(79,3021
#define v4l2_fourcc_be(81,3130
enum v4l2_field 86,3224
	V4L2_FIELD_ANY 87,3242
	V4L2_FIELD_NONE 91,3401
	V4L2_FIELD_TOP 92,3468
	V4L2_FIELD_BOTTOM 93,3520
	V4L2_FIELD_INTERLACED 94,3575
	V4L2_FIELD_SEQ_TB 95,3635
	V4L2_FIELD_SEQ_BT 97,3735
	V4L2_FIELD_ALTERNATE 98,3805
	V4L2_FIELD_INTERLACED_TB 100,3894
	V4L2_FIELD_INTERLACED_BT 103,4022
#define V4L2_FIELD_HAS_TOP(107,4156
#define V4L2_FIELD_HAS_BOTTOM(114,4415
#define V4L2_FIELD_HAS_BOTH(121,4680
#define V4L2_FIELD_HAS_T_OR_B(127,4907
enum v4l2_buf_type 132,5049
	V4L2_BUF_TYPE_VIDEO_CAPTURE 133,5070
	V4L2_BUF_TYPE_VIDEO_OUTPUT 134,5111
	V4L2_BUF_TYPE_VIDEO_OVERLAY 135,5152
	V4L2_BUF_TYPE_VBI_CAPTURE 136,5193
	V4L2_BUF_TYPE_VBI_OUTPUT 137,5234
	V4L2_BUF_TYPE_SLICED_VBI_CAPTURE 138,5275
	V4L2_BUF_TYPE_SLICED_VBI_OUTPUT 139,5316
	V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY 142,5383
	V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE 144,5431
	V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE 145,5472
	V4L2_BUF_TYPE_SDR_CAPTURE 146,5514
	V4L2_BUF_TYPE_SDR_OUTPUT 147,5556
	V4L2_BUF_TYPE_PRIVATE 149,5628
	V4L2_BUF_TYPE_PRIVATE              = 0x80,x80149,5628
#define V4L2_TYPE_IS_MULTIPLANAR(152,5676
#define V4L2_TYPE_IS_OUTPUT(156,5819
enum v4l2_tuner_type 165,6187
	V4L2_TUNER_RADIO	166,6210
	V4L2_TUNER_ANALOG_TV	167,6238
	V4L2_TUNER_DIGITAL_TV	168,6270
	V4L2_TUNER_SDR 169,6303
	V4L2_TUNER_RF 170,6338
#define V4L2_TUNER_ADC 174,6406
enum v4l2_memory 176,6446
	V4L2_MEMORY_MMAP 177,6465
	V4L2_MEMORY_USERPTR 178,6500
	V4L2_MEMORY_OVERLAY 179,6535
	V4L2_MEMORY_DMABUF 180,6570
enum v4l2_colorspace 184,6665
	V4L2_COLORSPACE_DEFAULT 189,6797
	V4L2_COLORSPACE_SMPTE170M 192,6886
	V4L2_COLORSPACE_SMPTE240M 195,6996
	V4L2_COLORSPACE_REC709 198,7063
	V4L2_COLORSPACE_BT878 204,7235
	V4L2_COLORSPACE_470_SYSTEM_M 210,7413
	V4L2_COLORSPACE_470_SYSTEM_BG 217,7606
	V4L2_COLORSPACE_JPEG 223,7791
	V4L2_COLORSPACE_SRGB 226,7889
	V4L2_COLORSPACE_ADOBERGB 229,7953
	V4L2_COLORSPACE_BT2020 232,8033
	V4L2_COLORSPACE_RAW 235,8121
	V4L2_COLORSPACE_DCI_P3 238,8211
#define V4L2_MAP_COLORSPACE_DEFAULT(246,8459
enum v4l2_xfer_func 250,8623
	V4L2_XFER_FUNC_DEFAULT 269,9221
	V4L2_XFER_FUNC_709 270,9254
	V4L2_XFER_FUNC_SRGB 271,9287
	V4L2_XFER_FUNC_ADOBERGB 272,9320
	V4L2_XFER_FUNC_SMPTE240M 273,9353
	V4L2_XFER_FUNC_NONE 274,9386
	V4L2_XFER_FUNC_DCI_P3 275,9419
	V4L2_XFER_FUNC_SMPTE2084 276,9452
#define V4L2_MAP_XFER_FUNC_DEFAULT(283,9608
enum v4l2_ycbcr_encoding 291,10049
	V4L2_YCBCR_ENC_DEFAULT 308,10592
	V4L2_YCBCR_ENC_601 311,10654
	V4L2_YCBCR_ENC_709 314,10715
	V4L2_YCBCR_ENC_XV601 317,10805
	V4L2_YCBCR_ENC_XV709 320,10894
	V4L2_YCBCR_ENC_SYCC 323,10969
	V4L2_YCBCR_ENC_BT2020 326,11051
	V4L2_YCBCR_ENC_BT2020_CONST_LUM 329,11131
	V4L2_YCBCR_ENC_SMPTE240M 332,11205
#define V4L2_MAP_YCBCR_ENC_DEFAULT(339,11362
enum v4l2_quantization 346,11675
	V4L2_QUANTIZATION_DEFAULT 353,11942
	V4L2_QUANTIZATION_FULL_RANGE 354,11978
	V4L2_QUANTIZATION_LIM_RANGE 355,12014
#define V4L2_MAP_QUANTIZATION_DEFAULT(363,12231
enum v4l2_priority 369,12581
	V4L2_PRIORITY_UNSET 370,12602
	V4L2_PRIORITY_BACKGROUND 371,12657
	V4L2_PRIORITY_INTERACTIVE 372,12689
	V4L2_PRIORITY_RECORD 373,12721
	V4L2_PRIORITY_DEFAULT 374,12753
	V4L2_PRIORITY_DEFAULT     = V4L2_PRIORITY_INTERACTIVE,374,12753
struct v4l2_rect 377,12813
	__s32   left;378,12832
	__s32   top;379,12847
	__u32   width;380,12861
	__u32   height;381,12877
struct v4l2_fract 384,12898
	__u32   numerator;385,12918
	__u32   denominator;386,12938
struct v4l2_capability 400,13471
	__u8	driver[driver401,13496
	__u8	card[card402,13514
	__u8	bus_info[bus_info403,13530
	__u32   version;404,13550
	__u32	capabilities;405,13568
	__u32	device_caps;406,13589
	__u32	reserved[reserved407,13609
#define V4L2_CAP_VIDEO_CAPTURE	411,13671
#define V4L2_CAP_VIDEO_OUTPUT	412,13747
#define V4L2_CAP_VIDEO_OVERLAY	413,13821
#define V4L2_CAP_VBI_CAPTURE	414,13892
#define V4L2_CAP_VBI_OUTPUT	415,13968
#define V4L2_CAP_SLICED_VBI_CAPTURE	416,14042
#define V4L2_CAP_SLICED_VBI_OUTPUT	417,14127
#define V4L2_CAP_RDS_CAPTURE	418,14210
#define V4L2_CAP_VIDEO_OUTPUT_OVERLAY	419,14275
#define V4L2_CAP_HW_FREQ_SEEK	420,14359
#define V4L2_CAP_RDS_OUTPUT	421,14440
#define V4L2_CAP_VIDEO_CAPTURE_MPLANE	424,14572
#define V4L2_CAP_VIDEO_OUTPUT_MPLANE	426,14686
#define V4L2_CAP_VIDEO_M2M_MPLANE	428,14803
#define V4L2_CAP_VIDEO_M2M	430,14883
#define V4L2_CAP_TUNER	432,14923
#define V4L2_CAP_AUDIO	433,14978
#define V4L2_CAP_RADIO	434,15039
#define V4L2_CAP_MODULATOR	435,15100
#define V4L2_CAP_SDR_CAPTURE	437,15163
#define V4L2_CAP_EXT_PIX_FORMAT	438,15235
#define V4L2_CAP_SDR_OUTPUT	439,15321
#define V4L2_CAP_READWRITE 441,15392
#define V4L2_CAP_ASYNCIO 442,15473
#define V4L2_CAP_STREAMING 443,15541
#define V4L2_CAP_DEVICE_CAPS 445,15621
struct v4l2_pix_format 450,15757
	__u32         		width;451,15782
	__u32			height;452,15806
	__u32			pixelformat;453,15823
	__u32			field;454,15845
	__u32            	bytesperline;455,15884
	__u32          		sizeimage;456,15951
	__u32			colorspace;457,15980
	__u32			priv;458,16028
	__u32			flags;459,16087
	__u32			ycbcr_enc;460,16145
	__u32			quantization;461,16196
	__u32			xfer_func;462,16248
#define V4L2_PIX_FMT_RGB332 468,16401
#define V4L2_PIX_FMT_RGB444 469,16486
#define V4L2_PIX_FMT_ARGB444 470,16575
#define V4L2_PIX_FMT_XRGB444 471,16664
#define V4L2_PIX_FMT_RGB555 472,16753
#define V4L2_PIX_FMT_ARGB555 473,16838
#define V4L2_PIX_FMT_XRGB555 474,16923
#define V4L2_PIX_FMT_RGB565 475,17008
#define V4L2_PIX_FMT_RGB555X 476,17093
#define V4L2_PIX_FMT_ARGB555X 477,17178
#define V4L2_PIX_FMT_XRGB555X 478,17267
#define V4L2_PIX_FMT_RGB565X 479,17356
#define V4L2_PIX_FMT_BGR666 480,17441
#define V4L2_PIX_FMT_BGR24 481,17524
#define V4L2_PIX_FMT_RGB24 482,17609
#define V4L2_PIX_FMT_BGR32 483,17694
#define V4L2_PIX_FMT_ABGR32 484,17779
#define V4L2_PIX_FMT_XBGR32 485,17864
#define V4L2_PIX_FMT_RGB32 486,17949
#define V4L2_PIX_FMT_ARGB32 487,18034
#define V4L2_PIX_FMT_XRGB32 488,18119
#define V4L2_PIX_FMT_GREY 491,18224
#define V4L2_PIX_FMT_Y4 492,18309
#define V4L2_PIX_FMT_Y6 493,18394
#define V4L2_PIX_FMT_Y10 494,18479
#define V4L2_PIX_FMT_Y12 495,18564
#define V4L2_PIX_FMT_Y16 496,18649
#define V4L2_PIX_FMT_Y16_BE 497,18734
#define V4L2_PIX_FMT_Y10BPACK 500,18853
#define V4L2_PIX_FMT_PAL8 503,18972
#define V4L2_PIX_FMT_UV8 506,19084
#define V4L2_PIX_FMT_YVU410 509,19199
#define V4L2_PIX_FMT_YVU420 510,19284
#define V4L2_PIX_FMT_YUYV 511,19369
#define V4L2_PIX_FMT_YYUV 512,19454
#define V4L2_PIX_FMT_YVYU 513,19539
#define V4L2_PIX_FMT_UYVY 514,19619
#define V4L2_PIX_FMT_VYUY 515,19704
#define V4L2_PIX_FMT_YUV422P 516,19789
#define V4L2_PIX_FMT_YUV411P 517,19874
#define V4L2_PIX_FMT_Y41P 518,19959
#define V4L2_PIX_FMT_YUV444 519,20044
#define V4L2_PIX_FMT_YUV555 520,20133
#define V4L2_PIX_FMT_YUV565 521,20218
#define V4L2_PIX_FMT_YUV32 522,20303
#define V4L2_PIX_FMT_YUV410 523,20388
#define V4L2_PIX_FMT_YUV420 524,20473
#define V4L2_PIX_FMT_HI240 525,20558
#define V4L2_PIX_FMT_HM12 526,20643
#define V4L2_PIX_FMT_M420 527,20742
#define V4L2_PIX_FMT_NV12 530,20909
#define V4L2_PIX_FMT_NV21 531,20994
#define V4L2_PIX_FMT_NV16 532,21079
#define V4L2_PIX_FMT_NV61 533,21164
#define V4L2_PIX_FMT_NV24 534,21249
#define V4L2_PIX_FMT_NV42 535,21334
#define V4L2_PIX_FMT_NV12M 538,21486
#define V4L2_PIX_FMT_NV21M 539,21571
#define V4L2_PIX_FMT_NV16M 540,21656
#define V4L2_PIX_FMT_NV61M 541,21741
#define V4L2_PIX_FMT_NV12MT 542,21826
#define V4L2_PIX_FMT_NV12MT_16X16 543,21928
#define V4L2_PIX_FMT_YUV420M 546,22082
#define V4L2_PIX_FMT_YVU420M 547,22167
#define V4L2_PIX_FMT_SBGGR8 550,22325
#define V4L2_PIX_FMT_SGBRG8 551,22410
#define V4L2_PIX_FMT_SGRBG8 552,22495
#define V4L2_PIX_FMT_SRGGB8 553,22580
#define V4L2_PIX_FMT_SBGGR10 554,22665
#define V4L2_PIX_FMT_SGBRG10 555,22750
#define V4L2_PIX_FMT_SGRBG10 556,22835
#define V4L2_PIX_FMT_SRGGB10 557,22920
#define V4L2_PIX_FMT_SBGGR10P 559,23063
#define V4L2_PIX_FMT_SGBRG10P 560,23125
#define V4L2_PIX_FMT_SGRBG10P 561,23187
#define V4L2_PIX_FMT_SRGGB10P 562,23249
#define V4L2_PIX_FMT_SBGGR10ALAW8 564,23361
#define V4L2_PIX_FMT_SGBRG10ALAW8 565,23427
#define V4L2_PIX_FMT_SGRBG10ALAW8 566,23493
#define V4L2_PIX_FMT_SRGGB10ALAW8 567,23559
#define V4L2_PIX_FMT_SBGGR10DPCM8 569,23674
#define V4L2_PIX_FMT_SGBRG10DPCM8 570,23740
#define V4L2_PIX_FMT_SGRBG10DPCM8 571,23806
#define V4L2_PIX_FMT_SRGGB10DPCM8 572,23872
#define V4L2_PIX_FMT_SBGGR12 573,23938
#define V4L2_PIX_FMT_SGBRG12 574,24023
#define V4L2_PIX_FMT_SGRBG12 575,24108
#define V4L2_PIX_FMT_SRGGB12 576,24193
#define V4L2_PIX_FMT_SBGGR16 577,24278
#define V4L2_PIX_FMT_MJPEG 580,24389
#define V4L2_PIX_FMT_JPEG 581,24471
#define V4L2_PIX_FMT_DV 582,24553
#define V4L2_PIX_FMT_MPEG 583,24635
#define V4L2_PIX_FMT_H264 584,24726
#define V4L2_PIX_FMT_H264_NO_SC 585,24816
#define V4L2_PIX_FMT_H264_MVC 586,24911
#define V4L2_PIX_FMT_H263 587,24988
#define V4L2_PIX_FMT_MPEG1 588,25070
#define V4L2_PIX_FMT_MPEG2 589,25152
#define V4L2_PIX_FMT_MPEG4 590,25234
#define V4L2_PIX_FMT_XVID 591,25319
#define V4L2_PIX_FMT_VC1_ANNEX_G 592,25402
#define V4L2_PIX_FMT_VC1_ANNEX_L 593,25509
#define V4L2_PIX_FMT_VP8 594,25616
#define V4L2_PIX_FMT_CPIA1 597,25722
#define V4L2_PIX_FMT_WNVA 598,25800
#define V4L2_PIX_FMT_SN9C10X 599,25887
#define V4L2_PIX_FMT_SN9C20X_I420 600,25975
#define V4L2_PIX_FMT_PWC1 601,26065
#define V4L2_PIX_FMT_PWC2 602,26150
#define V4L2_PIX_FMT_ET61X251 603,26235
#define V4L2_PIX_FMT_SPCA501 604,26324
#define V4L2_PIX_FMT_SPCA505 605,26406
#define V4L2_PIX_FMT_SPCA508 606,26488
#define V4L2_PIX_FMT_SPCA561 607,26570
#define V4L2_PIX_FMT_PAC207 608,26660
#define V4L2_PIX_FMT_MR97310A 609,26750
#define V4L2_PIX_FMT_JL2005BCD 610,26840
#define V4L2_PIX_FMT_SN9C2028 611,26931
#define V4L2_PIX_FMT_SQ905C 612,27021
#define V4L2_PIX_FMT_PJPG 613,27111
#define V4L2_PIX_FMT_OV511 614,27196
#define V4L2_PIX_FMT_OV518 615,27275
#define V4L2_PIX_FMT_STV0680 616,27354
#define V4L2_PIX_FMT_TM6000 617,27436
#define V4L2_PIX_FMT_CIT_YYVYUY 618,27518
#define V4L2_PIX_FMT_KONICA420 619,27622
#define V4L2_PIX_FMT_JPGL	620,27730
#define V4L2_PIX_FMT_SE401 621,27804
#define V4L2_PIX_FMT_S5C_UYVY_JPG 622,27902
#define V4L2_SDR_FMT_CU8 625,28070
#define V4L2_SDR_FMT_CU16LE 626,28148
#define V4L2_SDR_FMT_CS8 627,28229
#define V4L2_SDR_FMT_CS14LE 628,28312
#define V4L2_SDR_FMT_RU12LE 629,28398
#define V4L2_PIX_FMT_PRIV_MAGIC	632,28552
#define V4L2_PIX_FMT_FLAG_PREMUL_ALPHA	635,28609
struct v4l2_fmtdesc 640,28706
	__u32		    index;641,28728
	__u32		    type;642,28784
	__u32               flags;643,28840
	__u8		    description[description644,28868
	__u32		    pixelformat;645,28923
	__u32		    reserved[reserved646,28979
#define V4L2_FMT_FLAG_COMPRESSED 649,29008
#define V4L2_FMT_FLAG_EMULATED 650,29048
enum v4l2_frmsizetypes 657,29207
	V4L2_FRMSIZE_TYPE_DISCRETE	658,29232
	V4L2_FRMSIZE_TYPE_CONTINUOUS	659,29265
	V4L2_FRMSIZE_TYPE_STEPWISE	660,29300
struct v4l2_frmsize_discrete 663,29337
	__u32			width;664,29368
	__u32			height;665,29411
struct v4l2_frmsize_stepwise 668,29460
	__u32			min_width;669,29491
	__u32			max_width;670,29545
	__u32			step_width;671,29599
	__u32			min_height;672,29656
	__u32			max_height;673,29712
	__u32			step_height;674,29768
struct v4l2_frmsizeenum 677,29831
	__u32			index;678,29857
	__u32			pixel_format;679,29898
	__u32			type;680,29940
		struct v4l2_frmsize_discrete	discrete;683,30030
		struct v4l2_frmsize_stepwise	stepwise;684,30071
	__u32   reserved[reserved687,30117
enum v4l2_frmivaltypes 693,30235
	V4L2_FRMIVAL_TYPE_DISCRETE	694,30260
	V4L2_FRMIVAL_TYPE_CONTINUOUS	695,30293
	V4L2_FRMIVAL_TYPE_STEPWISE	696,30328
struct v4l2_frmival_stepwise 699,30365
	struct v4l2_fract	min;700,30396
	struct v4l2_fract	max;701,30454
	struct v4l2_fract	step;702,30512
struct v4l2_frmivalenum 705,30577
	__u32			index;706,30603
	__u32			pixel_format;707,30645
	__u32			width;708,30687
	__u32			height;709,30722
	__u32			type;710,30759
		struct v4l2_fract		discrete;713,30857
		struct v4l2_frmival_stepwise	stepwise;714,30888
	__u32	reserved[reserved717,30934
struct v4l2_timecode 724,31029
	__u32	type;725,31052
	__u32	flags;726,31065
	__u8	frames;727,31079
	__u8	seconds;728,31093
	__u8	minutes;729,31108
	__u8	hours;730,31123
	__u8	userbits[userbits731,31136
#define V4L2_TC_TYPE_24FPS	735,31172
#define V4L2_TC_TYPE_25FPS	736,31202
#define V4L2_TC_TYPE_30FPS	737,31232
#define V4L2_TC_TYPE_50FPS	738,31262
#define V4L2_TC_TYPE_60FPS	739,31292
#define V4L2_TC_FLAG_DROPFRAME	742,31337
#define V4L2_TC_FLAG_COLORFRAME	743,31400
#define V4L2_TC_USERBITS_field	744,31440
#define V4L2_TC_USERBITS_USERDEFINED	745,31479
#define V4L2_TC_USERBITS_8BITCHARS	746,31523
struct v4l2_jpegcompression 749,31610
	int quality;750,31640
	int  APPn;752,31655
	int  APP_len;754,31744
	char APP_data[APP_data755,31811
	int  COM_len;757,31874
	char COM_data[COM_data758,31940
	__u32 jpeg_markers;760,31997
#define V4L2_JPEG_MARKER_DHT 770,32411
#define V4L2_JPEG_MARKER_DQT 771,32478
#define V4L2_JPEG_MARKER_DRI 772,32550
#define V4L2_JPEG_MARKER_COM 773,32619
#define V4L2_JPEG_MARKER_APP 774,32680
struct v4l2_requestbuffers 781,32831
	__u32			count;782,32860
	__u32			type;783,32876
	__u32			memory;784,32917
	__u32			reserved[reserved785,32958
struct v4l2_plane 808,34052
	__u32			bytesused;809,34072
	__u32			length;810,34092
		__u32		mem_offset;812,34118
		unsigned long	userptr;813,34139
		__s32		fd;814,34164
	} m;815,34177
	__u32			data_offset;816,34183
	__u32			reserved[reserved817,34205
struct v4l2_buffer 850,35664
	__u32			index;851,35685
	__u32			type;852,35701
	__u32			bytesused;853,35716
	__u32			flags;854,35736
	__u32			field;855,35752
	struct timeval		timestamp;856,35768
	struct v4l2_timecode	timecode;857,35796
	__u32			sequence;858,35828
	__u32			memory;861,35871
		__u32           offset;863,35897
		unsigned long   userptr;864,35923
		struct v4l2_plane *planes;planes865,35950
		__s32		fd;866,35979
	} m;867,35992
	__u32			length;868,35998
	__u32			reserved2;869,36015
	__u32			reserved;870,36035
#define V4L2_BUF_FLAG_MAPPED	875,36119
#define V4L2_BUF_FLAG_QUEUED	877,36199
#define V4L2_BUF_FLAG_DONE	879,36263
#define V4L2_BUF_FLAG_KEYFRAME	881,36339
#define V4L2_BUF_FLAG_PFRAME	883,36408
#define V4L2_BUF_FLAG_BFRAME	885,36475
#define V4L2_BUF_FLAG_ERROR	887,36584
#define V4L2_BUF_FLAG_TIMECODE	889,36655
#define V4L2_BUF_FLAG_PREPARED	891,36736
#define V4L2_BUF_FLAG_NO_CACHE_INVALIDATE	893,36807
#define V4L2_BUF_FLAG_NO_CACHE_CLEAN	894,36860
#define V4L2_BUF_FLAG_TIMESTAMP_MASK	896,36930
#define V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN	897,36979
#define V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC	898,37031
#define V4L2_BUF_FLAG_TIMESTAMP_COPY	899,37084
#define V4L2_BUF_FLAG_TSTAMP_SRC_MASK	901,37158
#define V4L2_BUF_FLAG_TSTAMP_SRC_EOF	902,37208
#define V4L2_BUF_FLAG_TSTAMP_SRC_SOE	903,37257
#define V4L2_BUF_FLAG_LAST	905,37336
struct v4l2_exportbuffer 925,38315
	__u32		type;926,38342
	__u32		index;927,38381
	__u32		plane;928,38396
	__u32		flags;929,38411
	__s32		fd;930,38426
	__u32		reserved[reserved931,38438
struct v4l2_framebuffer 937,38504
	__u32			capability;938,38530
	__u32			flags;939,38551
	void                    *base;base942,38692
		__u32		width;944,38734
		__u32		height;945,38750
		__u32		pixelformat;946,38767
		__u32		field;947,38789
		__u32		bytesperline;948,38828
		__u32		sizeimage;949,38885
		__u32		colorspace;950,38905
		__u32		priv;951,38953
	} fmt;952,39000
#define V4L2_FBUF_CAP_EXTERNOVERLAY	955,39062
#define V4L2_FBUF_CAP_CHROMAKEY	956,39105
#define V4L2_FBUF_CAP_LIST_CLIPPING 957,39145
#define V4L2_FBUF_CAP_BITMAP_CLIPPING	958,39192
#define V4L2_FBUF_CAP_LOCAL_ALPHA	959,39237
#define V4L2_FBUF_CAP_GLOBAL_ALPHA	960,39278
#define V4L2_FBUF_CAP_LOCAL_INV_ALPHA	961,39320
#define V4L2_FBUF_CAP_SRC_CHROMAKEY	962,39365
#define V4L2_FBUF_FLAG_PRIMARY	964,39444
#define V4L2_FBUF_FLAG_OVERLAY	965,39483
#define V4L2_FBUF_FLAG_CHROMAKEY	966,39522
#define V4L2_FBUF_FLAG_LOCAL_ALPHA	967,39562
#define V4L2_FBUF_FLAG_GLOBAL_ALPHA	968,39604
#define V4L2_FBUF_FLAG_LOCAL_INV_ALPHA	969,39647
#define V4L2_FBUF_FLAG_SRC_CHROMAKEY	970,39693
struct v4l2_clip 972,39738
	struct v4l2_rect        c;973,39757
	struct v4l2_clip	*next;next974,39785
struct v4l2_window 977,39814
	struct v4l2_rect        w;978,39835
	__u32			field;979,39863
	__u32			chromakey;980,39902
	struct v4l2_clip	*clips;clips981,39922
	__u32			clipcount;982,39948
	void			*bitmap;bitmap983,39968
	__u8                    global_alpha;984,39985
struct v4l2_captureparm 990,40074
	__u32		   capability;991,40100
	__u32		   capturemode;992,40148
	struct v4l2_fract  timeperframe;993,40194
	__u32		   extendedmode;994,40262
	__u32              readbuffers;995,40322
	__u32		   reserved[reserved996,40386
#define V4L2_MODE_HIGHQUALITY	1000,40469
#define V4L2_CAP_TIMEPERFRAME	1001,40539
struct v4l2_outputparm 1003,40616
	__u32		   capability;1004,40641
	__u32		   outputmode;1005,40688
	struct v4l2_fract  timeperframe;1006,40732
	__u32		   extendedmode;1007,40799
	__u32              writebuffers;1008,40858
	__u32		   reserved[reserved1009,40922
struct v4l2_cropcap 1015,41000
	__u32			type;1016,41022
	struct v4l2_rect        bounds;1017,41062
	struct v4l2_rect        defrect;1018,41095
	struct v4l2_fract       pixelaspect;1019,41129
struct v4l2_crop 1022,41171
	__u32			type;1023,41190
	struct v4l2_rect        c;1024,41230
struct v4l2_selection 1040,41844
	__u32			type;1041,41868
	__u32			target;1042,41883
	__u32                   flags;1043,41900
	struct v4l2_rect        r;1044,41932
	__u32                   reserved[reserved1045,41960
typedef __u64 v4l2_std_id;1053,42061
#define V4L2_STD_PAL_B 1056,42112
#define V4L2_STD_PAL_B1 1057,42170
#define V4L2_STD_PAL_G 1058,42228
#define V4L2_STD_PAL_H 1059,42286
#define V4L2_STD_PAL_I 1060,42344
#define V4L2_STD_PAL_D 1061,42402
#define V4L2_STD_PAL_D1 1062,42460
#define V4L2_STD_PAL_K 1063,42518
#define V4L2_STD_PAL_M 1065,42577
#define V4L2_STD_PAL_N 1066,42635
#define V4L2_STD_PAL_Nc 1067,42693
#define V4L2_STD_PAL_60 1068,42751
#define V4L2_STD_NTSC_M 1070,42810
#define V4L2_STD_NTSC_M_JP 1071,42879
#define V4L2_STD_NTSC_443 1072,42949
#define V4L2_STD_NTSC_M_KR 1073,43007
#define V4L2_STD_SECAM_B 1075,43078
#define V4L2_STD_SECAM_D 1076,43136
#define V4L2_STD_SECAM_G 1077,43194
#define V4L2_STD_SECAM_H 1078,43252
#define V4L2_STD_SECAM_K 1079,43310
#define V4L2_STD_SECAM_K1 1080,43368
#define V4L2_STD_SECAM_L 1081,43426
#define V4L2_STD_SECAM_LC 1082,43484
#define V4L2_STD_ATSC_8_VSB 1085,43559
#define V4L2_STD_ATSC_16_VSB 1086,43617
#define V4L2_STD_NTSC 1106,44266
#define V4L2_STD_SECAM_DK 1110,44393
#define V4L2_STD_SECAM	1114,44521
#define V4L2_STD_PAL_BG	1121,44714
#define V4L2_STD_PAL_DK	1124,44804
#define V4L2_STD_PAL	1132,45062
#define V4L2_STD_B	1137,45207
#define V4L2_STD_G	1140,45294
#define V4L2_STD_H	1142,45357
#define V4L2_STD_L	1144,45420
#define V4L2_STD_GH	1146,45485
#define V4L2_STD_DK	1148,45539
#define V4L2_STD_BG	1150,45604
#define V4L2_STD_MN	1152,45658
#define V4L2_STD_MTS	1158,45821
#define V4L2_STD_525_60	1164,45989
#define V4L2_STD_625_50	1169,46160
#define V4L2_STD_ATSC 1174,46273
#define V4L2_STD_UNKNOWN 1177,46407
#define V4L2_STD_ALL 1178,46441
struct v4l2_standard 1181,46516
	__u32		     index;1182,46539
	v4l2_std_id          id;1183,46559
	__u8		     name[name1184,46585
	struct v4l2_fract    frameperiod;1185,46607
	__u32		     framelines;1186,46667
	__u32		     reserved[reserved1187,46692
struct v4l2_bt_timings 1226,48200
	__u32	width;1227,48225
	__u32	height;1228,48239
	__u32	interlaced;1229,48254
	__u32	polarities;1230,48273
	__u64	pixelclock;1231,48292
	__u32	hfrontporch;1232,48311
	__u32	hsync;1233,48331
	__u32	hbackporch;1234,48345
	__u32	vfrontporch;1235,48364
	__u32	vsync;1236,48384
	__u32	vbackporch;1237,48398
	__u32	il_vfrontporch;1238,48417
	__u32	il_vsync;1239,48440
	__u32	il_vbackporch;1240,48457
	__u32	standards;1241,48479
	__u32	flags;1242,48497
	__u32	reserved[reserved1243,48511
#define	V4L2_DV_PROGRESSIVE	1247,48600
#define	V4L2_DV_INTERLACED	1248,48630
#define V4L2_DV_VSYNC_POS_POL	1251,48735
#define V4L2_DV_HSYNC_POS_POL	1252,48776
#define V4L2_DV_BT_STD_CEA861	1255,48842
#define V4L2_DV_BT_STD_DMT	1256,48915
#define V4L2_DV_BT_STD_CVT	1257,48988
#define V4L2_DV_BT_STD_GTF	1258,49062
#define V4L2_DV_FL_REDUCED_BLANKING	1266,49413
#define V4L2_DV_FL_CAN_REDUCE_FPS	1270,49637
#define V4L2_DV_FL_REDUCED_FPS	1278,50142
#define V4L2_DV_FL_HALF_LINE	1283,50453
#define V4L2_DV_FL_IS_CE_VIDEO	1289,50849
#define V4L2_DV_BT_BLANKING_WIDTH(1292,50967
#define V4L2_DV_BT_FRAME_WIDTH(1294,51061
#define V4L2_DV_BT_BLANKING_HEIGHT(1296,51145
#define V4L2_DV_BT_FRAME_HEIGHT(1299,51306
struct v4l2_dv_timings 1306,51499
	__u32 type;1307,51524
		struct v4l2_bt_timings	bt;1309,51546
		__u32	reserved[reserved1310,51575
#define V4L2_DV_BT_656_1120	1315,51662
struct v4l2_enum_dv_timings 1325,51981
	__u32 index;1326,52011
	__u32 pad;1327,52025
	__u32 reserved[reserved1328,52037
	struct v4l2_dv_timings timings;1329,52057
struct v4l2_bt_timings_cap 1343,52527
	__u32	min_width;1344,52556
	__u32	max_width;1345,52574
	__u32	min_height;1346,52592
	__u32	max_height;1347,52611
	__u64	min_pixelclock;1348,52630
	__u64	max_pixelclock;1349,52653
	__u32	standards;1350,52676
	__u32	capabilities;1351,52694
	__u32	reserved[reserved1352,52715
#define V4L2_DV_BT_CAP_INTERLACED	1356,52799
#define V4L2_DV_BT_CAP_PROGRESSIVE	1358,52877
#define V4L2_DV_BT_CAP_REDUCED_BLANKING	1360,52961
#define V4L2_DV_BT_CAP_CUSTOM	1362,53040
struct v4l2_dv_timings_cap 1370,53351
	__u32 type;1371,53380
	__u32 pad;1372,53393
	__u32 reserved[reserved1373,53405
		struct v4l2_bt_timings_cap bt;1375,53434
		__u32 raw_data[raw_data1376,53467
struct v4l2_input 1384,53532
	__u32	     index;1385,53552
	__u8	     name[name1386,53591
	__u32	     type;1387,53626
	__u32	     audioset;1388,53666
	__u32        tuner;1389,53725
	v4l2_std_id  std;1390,53786
	__u32	     status;1391,53805
	__u32	     capabilities;1392,53825
	__u32	     reserved[reserved1393,53851
#define V4L2_INPUT_TYPE_TUNER	1397,53915
#define V4L2_INPUT_TYPE_CAMERA	1398,53948
#define V4L2_IN_ST_NO_POWER 1401,54014
#define V4L2_IN_ST_NO_SIGNAL 1402,54086
#define V4L2_IN_ST_NO_COLOR 1403,54128
#define V4L2_IN_ST_HFLIP 1407,54266
#define V4L2_IN_ST_VFLIP 1408,54346
#define V4L2_IN_ST_NO_H_LOCK 1411,54455
#define V4L2_IN_ST_COLOR_KILL 1412,54528
#define V4L2_IN_ST_NO_SYNC 1415,54632
#define V4L2_IN_ST_NO_EQU 1416,54705
#define V4L2_IN_ST_NO_CARRIER 1417,54772
#define V4L2_IN_ST_MACROVISION 1420,54889
#define V4L2_IN_ST_NO_ACCESS 1421,54959
#define V4L2_IN_ST_VTR 1422,55034
#define V4L2_IN_CAP_DV_TIMINGS	1425,55127
#define V4L2_IN_CAP_CUSTOM_TIMINGS	1426,55198
#define V4L2_IN_CAP_STD	1427,55280
#define V4L2_IN_CAP_NATIVE_SIZE	1428,55338
struct v4l2_output 1433,55454
	__u32	     index;1434,55475
	__u8	     name[name1435,55515
	__u32	     type;1436,55550
	__u32	     audioset;1437,55591
	__u32	     modulator;1438,55650
	v4l2_std_id  std;1439,55709
	__u32	     capabilities;1440,55728
	__u32	     reserved[reserved1441,55754
#define V4L2_OUTPUT_TYPE_MODULATOR	1444,55817
#define V4L2_OUTPUT_TYPE_ANALOG	1445,55855
#define V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY	1446,55891
#define V4L2_OUT_CAP_DV_TIMINGS	1449,55961
#define V4L2_OUT_CAP_CUSTOM_TIMINGS	1450,56033
#define V4L2_OUT_CAP_STD	1451,56117
#define V4L2_OUT_CAP_NATIVE_SIZE	1452,56175
struct v4l2_control 1457,56281
	__u32		     id;1458,56303
	__s32		     value;1459,56320
struct v4l2_ext_control 1462,56344
	__u32 id;1463,56370
	__u32 size;1464,56381
	__u32 reserved2[reserved21465,56394
		__s32 value;1467,56424
		__s64 value64;1468,56439
		char *string;string1469,56456
		__u8 *p_u8;p_u81470,56472
		__u16 *p_u16;p_u161471,56486
		__u32 *p_u32;p_u321472,56502
		void *ptr;ptr1473,56518
struct v4l2_ext_controls 1477,56564
		__u32 ctrl_class;1480,56619
		__u32 which;1482,56646
	__u32 count;1484,56665
	__u32 error_idx;1485,56679
	__u32 reserved[reserved1486,56697
	struct v4l2_ext_control *controls;controls1487,56717
#define V4L2_CTRL_ID_MASK 1490,56757
#define V4L2_CTRL_ID2CLASS(1492,56823
#define V4L2_CTRL_ID2WHICH(1494,56886
#define V4L2_CTRL_DRIVER_PRIV(1495,56942
#define V4L2_CTRL_MAX_DIMS	1496,57004
#define V4L2_CTRL_WHICH_CUR_VAL 1497,57037
#define V4L2_CTRL_WHICH_DEF_VAL 1498,57073
enum v4l2_ctrl_type 1500,57119
	V4L2_CTRL_TYPE_INTEGER	1501,57141
	V4L2_CTRL_TYPE_BOOLEAN	1502,57175
	V4L2_CTRL_TYPE_MENU	1503,57209
	V4L2_CTRL_TYPE_BUTTON	1504,57240
	V4L2_CTRL_TYPE_INTEGER64 1505,57273
	V4L2_CTRL_TYPE_CTRL_CLASS 1506,57308
	V4L2_CTRL_TYPE_STRING 1507,57343
	V4L2_CTRL_TYPE_BITMASK 1508,57378
	V4L2_CTRL_TYPE_INTEGER_MENU 1509,57413
	V4L2_CTRL_COMPOUND_TYPES 1512,57485
	V4L2_CTRL_COMPOUND_TYPES     = 0x0100,x01001512,57485
	V4L2_CTRL_TYPE_U8	1513,57525
	V4L2_CTRL_TYPE_U8	     = 0x0100,x01001513,57525
	V4L2_CTRL_TYPE_U16	1514,57559
	V4L2_CTRL_TYPE_U16	     = 0x0101,x01011514,57559
	V4L2_CTRL_TYPE_U32	1515,57594
	V4L2_CTRL_TYPE_U32	     = 0x0102,x01021515,57594
struct v4l2_queryctrl 1519,57697
	__u32		     id;1520,57721
	__u32		     type;1521,57738
	__u8		     name[name1522,57783
	__s32		     minimum;1523,57820
	__s32		     maximum;1524,57864
	__s32		     step;1525,57886
	__s32		     default_value;1526,57905
	__u32                flags;1527,57933
	__u32		     reserved[reserved1528,57962
struct v4l2_query_ext_ctrl 1532,58070
	__u32		     id;1533,58099
	__u32		     type;1534,58116
	char		     name[name1535,58135
	__s64		     minimum;1536,58157
	__s64		     maximum;1537,58179
	__u64		     step;1538,58201
	__s64		     default_value;1539,58220
	__u32                flags;1540,58248
	__u32                elem_size;1541,58277
	__u32                elems;1542,58310
	__u32                nr_of_dims;1543,58339
	__u32                dims[dims1544,58373
	__u32		     reserved[reserved1545,58421
struct v4l2_querymenu 1549,58518
	__u32		id;1550,58542
	__u32		index;1551,58554
		__u8	name[name1553,58578
		__s64	value;1554,58610
	__u32		reserved;1556,58629
#define V4L2_CTRL_FLAG_DISABLED	1560,58698
#define V4L2_CTRL_FLAG_GRABBED	1561,58738
#define V4L2_CTRL_FLAG_READ_ONLY 1562,58777
#define V4L2_CTRL_FLAG_UPDATE 1563,58818
#define V4L2_CTRL_FLAG_INACTIVE 1564,58857
#define V4L2_CTRL_FLAG_SLIDER 1565,58897
#define V4L2_CTRL_FLAG_WRITE_ONLY 1566,58936
#define V4L2_CTRL_FLAG_VOLATILE	1567,58978
#define V4L2_CTRL_FLAG_HAS_PAYLOAD	1568,59018
#define V4L2_CTRL_FLAG_EXECUTE_ON_WRITE	1569,59060
#define V4L2_CTRL_FLAG_NEXT_CTRL	1572,59159
#define V4L2_CTRL_FLAG_NEXT_COMPOUND	1573,59203
#define V4L2_CID_MAX_CTRLS	1576,59298
#define V4L2_CID_PRIVATE_BASE	1578,59380
struct v4l2_tuner 1584,59446
	__u32                   index;1585,59466
	__u8			name[name1586,59498
	__u32			type;1587,59516
	__u32			capability;1588,59558
	__u32			rangelow;1589,59579
	__u32			rangehigh;1590,59598
	__u32			rxsubchans;1591,59618
	__u32			audmode;1592,59639
	__s32			signal;1593,59657
	__s32			afc;1594,59674
	__u32			reserved[reserved1595,59688
struct v4l2_modulator 1598,59714
	__u32			index;1599,59738
	__u8			name[name1600,59754
	__u32			capability;1601,59772
	__u32			rangelow;1602,59793
	__u32			rangehigh;1603,59812
	__u32			txsubchans;1604,59832
	__u32			type;1605,59853
	__u32			reserved[reserved1606,59895
#define V4L2_TUNER_CAP_LOW	1610,59961
#define V4L2_TUNER_CAP_NORM	1611,59996
#define V4L2_TUNER_CAP_HWSEEK_BOUNDED	1612,60032
#define V4L2_TUNER_CAP_HWSEEK_WRAP	1613,60077
#define V4L2_TUNER_CAP_STEREO	1614,60119
#define V4L2_TUNER_CAP_LANG2	1615,60157
#define V4L2_TUNER_CAP_SAP	1616,60194
#define V4L2_TUNER_CAP_LANG1	1617,60229
#define V4L2_TUNER_CAP_RDS	1618,60266
#define V4L2_TUNER_CAP_RDS_BLOCK_IO	1619,60301
#define V4L2_TUNER_CAP_RDS_CONTROLS	1620,60344
#define V4L2_TUNER_CAP_FREQ_BANDS	1621,60387
#define V4L2_TUNER_CAP_HWSEEK_PROG_LIM	1622,60428
#define V4L2_TUNER_CAP_1HZ	1623,60474
#define V4L2_TUNER_SUB_MONO	1626,60550
#define V4L2_TUNER_SUB_STEREO	1627,60586
#define V4L2_TUNER_SUB_LANG2	1628,60624
#define V4L2_TUNER_SUB_SAP	1629,60661
#define V4L2_TUNER_SUB_LANG1	1630,60696
#define V4L2_TUNER_SUB_RDS	1631,60733
#define V4L2_TUNER_MODE_MONO	1634,60807
#define V4L2_TUNER_MODE_STEREO	1635,60844
#define V4L2_TUNER_MODE_LANG2	1636,60883
#define V4L2_TUNER_MODE_SAP	1637,60921
#define V4L2_TUNER_MODE_LANG1	1638,60957
#define V4L2_TUNER_MODE_LANG1_LANG2	1639,60995
struct v4l2_frequency 1641,61039
	__u32	tuner;1642,61063
	__u32	type;1643,61077
	__u32	frequency;1644,61117
	__u32	reserved[reserved1645,61135
#define V4L2_BAND_MODULATION_VSB	1648,61159
#define V4L2_BAND_MODULATION_FM	1649,61201
#define V4L2_BAND_MODULATION_AM	1650,61243
struct v4l2_frequency_band 1652,61286
	__u32	tuner;1653,61315
	__u32	type;1654,61329
	__u32	index;1655,61369
	__u32	capability;1656,61383
	__u32	rangelow;1657,61402
	__u32	rangehigh;1658,61419
	__u32	modulation;1659,61437
	__u32	reserved[reserved1660,61456
struct v4l2_hw_freq_seek 1663,61480
	__u32	tuner;1664,61507
	__u32	type;1665,61521
	__u32	seek_upward;1666,61561
	__u32	wrap_around;1667,61581
	__u32	spacing;1668,61601
	__u32	rangelow;1669,61617
	__u32	rangehigh;1670,61634
	__u32	reserved[reserved1671,61652
struct v4l2_rds_data 1678,61693
	__u8 	lsb;1679,61716
	__u8 	msb;1680,61728
	__u8 	block;1681,61740
#define V4L2_RDS_BLOCK_MSK 1684,61783
#define V4L2_RDS_BLOCK_A 1685,61816
#define V4L2_RDS_BLOCK_B 1686,61845
#define V4L2_RDS_BLOCK_C 1687,61874
#define V4L2_RDS_BLOCK_D 1688,61903
#define V4L2_RDS_BLOCK_C_ALT 1689,61932
#define V4L2_RDS_BLOCK_INVALID 1690,61965
#define V4L2_RDS_BLOCK_CORRECTED 1692,62001
#define V4L2_RDS_BLOCK_ERROR 1693,62039
struct v4l2_audio 1698,62096
	__u32	index;1699,62116
	__u8	name[name1700,62130
	__u32	capability;1701,62146
	__u32	mode;1702,62165
	__u32	reserved[reserved1703,62178
#define V4L2_AUDCAP_STEREO	1707,62242
#define V4L2_AUDCAP_AVL	1708,62278
#define V4L2_AUDMODE_AVL	1711,62347
struct v4l2_audioout 1713,62382
	__u32	index;1714,62405
	__u8	name[name1715,62419
	__u32	capability;1716,62435
	__u32	mode;1717,62454
	__u32	reserved[reserved1718,62467
#define V4L2_ENC_IDX_FRAME_I 1727,62562
#define V4L2_ENC_IDX_FRAME_P 1728,62598
#define V4L2_ENC_IDX_FRAME_B 1729,62634
#define V4L2_ENC_IDX_FRAME_MASK 1730,62670
struct v4l2_enc_idx_entry 1732,62709
	__u64 offset;1733,62737
	__u64 pts;1734,62752
	__u32 length;1735,62764
	__u32 flags;1736,62779
	__u32 reserved[reserved1737,62793
#define V4L2_ENC_IDX_ENTRIES 1740,62817
struct v4l2_enc_idx 1741,62851
	__u32 entries;1742,62873
	__u32 entries_cap;1743,62889
	__u32 reserved[reserved1744,62909
	struct v4l2_enc_idx_entry entry[entry1745,62929
#define V4L2_ENC_CMD_START 1749,62990
#define V4L2_ENC_CMD_STOP 1750,63026
#define V4L2_ENC_CMD_PAUSE 1751,63062
#define V4L2_ENC_CMD_RESUME 1752,63098
#define V4L2_ENC_CMD_STOP_AT_GOP_END 1755,63169
struct v4l2_encoder_cmd 1757,63219
	__u32 cmd;1758,63245
	__u32 flags;1759,63257
			__u32 data[data1762,63291
		} raw;1763,63309
#define V4L2_DEC_CMD_START 1768,63349
#define V4L2_DEC_CMD_STOP 1769,63386
#define V4L2_DEC_CMD_PAUSE 1770,63423
#define V4L2_DEC_CMD_RESUME 1771,63460
#define V4L2_DEC_CMD_START_MUTE_AUDIO	1774,63533
#define V4L2_DEC_CMD_PAUSE_TO_BLACK	1777,63616
#define V4L2_DEC_CMD_STOP_TO_BLACK	1780,63696
#define V4L2_DEC_CMD_STOP_IMMEDIATELY	1781,63740
#define V4L2_DEC_START_FMT_NONE	1786,63899
#define V4L2_DEC_START_FMT_GOP	1788,63973
struct v4l2_decoder_cmd 1792,64132
	__u32 cmd;1793,64158
	__u32 flags;1794,64170
			__u64 pts;1797,64204
		} stop;1798,64218
			__s32 speed;1806,64491
			__u32 format;1807,64507
		} start;1808,64524
			__u32 data[data1811,64547
		} raw;1812,64566
struct v4l2_vbi_format 1825,64697
	__u32	sampling_rate;1826,64722
	__u32	offset;1827,64759
	__u32	samples_per_line;1828,64774
	__u32	sample_format;1829,64799
	__s32	start[start1830,64843
	__u32	count[count1831,64860
	__u32	flags;1832,64877
	__u32	reserved[reserved1833,64910
#define V4L2_VBI_UNSYNC	1837,64972
#define V4L2_VBI_INTERLACED	1838,65006
#define V4L2_VBI_ITU_525_F1_START 1841,65083
#define V4L2_VBI_ITU_525_F2_START 1842,65121
#define V4L2_VBI_ITU_625_F1_START 1843,65161
#define V4L2_VBI_ITU_625_F2_START 1844,65199
struct v4l2_sliced_vbi_format 1853,65436
	__u16   service_set;1854,65468
	__u16   service_lines[service_lines1859,65751
	__u32   io_size;1860,65782
	__u32   reserved[reserved1861,65800
#define V4L2_SLICED_TELETEXT_B 1866,65929
#define V4L2_SLICED_VPS 1868,66028
#define V4L2_SLICED_CAPTION_525 1870,66118
#define V4L2_SLICED_WSS_625 1872,66219
#define V4L2_SLICED_VBI_525 1874,66269
#define V4L2_SLICED_VBI_625 1875,66335
struct v4l2_sliced_vbi_cap 1877,66441
	__u16   service_set;1878,66470
	__u16   service_lines[service_lines1883,66753
	__u32	type;1884,66784
	__u32   reserved[reserved1885,66823
struct v4l2_sliced_vbi_data 1888,66868
	__u32   id;1889,66898
	__u32   field;1890,66911
	__u32   line;1891,66974
	__u32   reserved;1892,67010
	__u8    data[data1893,67051
#define V4L2_MPEG_VBI_IVTV_TELETEXT_B 1913,67537
#define V4L2_MPEG_VBI_IVTV_CAPTION_525 1914,67583
#define V4L2_MPEG_VBI_IVTV_WSS_625 1915,67629
#define V4L2_MPEG_VBI_IVTV_VPS 1916,67675
struct v4l2_mpeg_vbi_itv0_line 1918,67722
	__u8 id;1919,67755
	__u8 data[data1920,67805
struct v4l2_mpeg_vbi_itv0 1923,67885
	__le32 linemask[linemask1924,67913
	struct v4l2_mpeg_vbi_itv0_line line[line1925,67978
struct v4l2_mpeg_vbi_ITV0 1928,68049
	struct v4l2_mpeg_vbi_itv0_line line[line1929,68077
#define V4L2_MPEG_VBI_IVTV_MAGIC0	1932,68148
#define V4L2_MPEG_VBI_IVTV_MAGIC1	1933,68189
struct v4l2_mpeg_vbi_fmt_ivtv 1935,68231
	__u8 magic[magic1936,68263
		struct v4l2_mpeg_vbi_itv0 itv0;1938,68288
		struct v4l2_mpeg_vbi_ITV0 ITV0;1939,68322
struct v4l2_plane_pix_format 1954,68709
	__u32		sizeimage;1955,68740
	__u32		bytesperline;1956,68759
	__u16		reserved[reserved1957,68781
struct v4l2_pix_format_mplane 1974,69490
	__u32				width;1975,69522
	__u32				height;1976,69539
	__u32				pixelformat;1977,69557
	__u32				field;1978,69580
	__u32				colorspace;1979,69597
	struct v4l2_plane_pix_format	plane_fmt[plane_fmt1981,69620
	__u8				num_planes;1982,69679
	__u8				flags;1983,69700
	__u8				ycbcr_enc;1984,69716
	__u8				quantization;1985,69736
	__u8				xfer_func;1986,69759
	__u8				reserved[reserved1987,69779
struct v4l2_sdr_format 1995,70005
	__u32				pixelformat;1996,70030
	__u32				buffersize;1997,70053
	__u8				reserved[reserved1998,70075
struct v4l2_format 2011,70530
	__u32	 type;2012,70551
		struct v4l2_pix_format		pix;2014,70574
		struct v4l2_pix_format_mplane	pix_mp;2015,70643
		struct v4l2_window		win;2016,70725
		struct v4l2_vbi_format		vbi;2017,70790
		struct v4l2_sliced_vbi_format	sliced;2018,70857
		struct v4l2_sdr_format		sdr;2019,70937
		__u8	raw_data[raw_data2020,71004
	} fmt;2021,71063
struct v4l2_streamparm 2026,71115
	__u32	 type;2027,71140
		struct v4l2_captureparm	capture;2029,71190
		struct v4l2_outputparm	output;2030,71225
		__u8	raw_data[raw_data2031,71258
	} parm;2032,71300
#define V4L2_EVENT_ALL	2039,71336
#define V4L2_EVENT_VSYNC	2040,71364
#define V4L2_EVENT_EOS	2041,71393
#define V4L2_EVENT_CTRL	2042,71421
#define V4L2_EVENT_FRAME_SYNC	2043,71450
#define V4L2_EVENT_SOURCE_CHANGE	2044,71484
#define V4L2_EVENT_MOTION_DET	2045,71520
#define V4L2_EVENT_PRIVATE_START	2046,71554
struct v4l2_event_vsync 2049,71635
	__u8 field;2051,71714
#define V4L2_EVENT_CTRL_CH_VALUE	2055,71790
#define V4L2_EVENT_CTRL_CH_FLAGS	2056,71833
#define V4L2_EVENT_CTRL_CH_RANGE	2057,71876
struct v4l2_event_ctrl 2059,71920
	__u32 changes;2060,71945
	__u32 type;2061,71961
		__s32 value;2063,71983
		__s64 value64;2064,71998
	__u32 flags;2066,72019
	__s32 minimum;2067,72033
	__s32 maximum;2068,72049
	__s32 step;2069,72065
	__s32 default_value;2070,72078
struct v4l2_event_frame_sync 2073,72104
	__u32 frame_sequence;2074,72135
#define V4L2_EVENT_SRC_CH_RESOLUTION	2077,72162
struct v4l2_event_src_change 2079,72210
	__u32 changes;2080,72241
#define V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ	2083,72261
struct v4l2_event_motion_det 2092,72636
	__u32 flags;2093,72667
	__u32 frame_sequence;2094,72681
	__u32 region_mask;2095,72704
struct v4l2_event 2098,72728
	__u32				type;2099,72748
		struct v4l2_event_vsync		vsync;2101,72773
		struct v4l2_event_ctrl		ctrl;2102,72807
		struct v4l2_event_frame_sync	frame_sync;2103,72839
		struct v4l2_event_src_change	src_change;2104,72882
		struct v4l2_event_motion_det	motion_det;2105,72925
		__u8				data[data2106,72968
	} u;2107,72988
	__u32				pending;2108,72994
	__u32				sequence;2109,73013
	struct timespec			timestamp;2110,73033
	__u32				id;2111,73063
	__u32				reserved[reserved2112,73077
#define V4L2_EVENT_SUB_FL_SEND_INITIAL	2115,73104
#define V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK	2116,73153
struct v4l2_event_subscription 2118,73204
	__u32				type;2119,73237
	__u32				id;2120,73253
	__u32				flags;2121,73267
	__u32				reserved[reserved2122,73284
#define V4L2_CHIP_MATCH_BRIDGE 2134,73528
#define V4L2_CHIP_MATCH_SUBDEV 2135,73628
#define V4L2_CHIP_MATCH_HOST 2138,73755
#define V4L2_CHIP_MATCH_I2C_DRIVER 2139,73807
#define V4L2_CHIP_MATCH_I2C_ADDR 2140,73882
#define V4L2_CHIP_MATCH_AC97 2141,73959
struct v4l2_dbg_match 2143,74039
	__u32 type;2144,74063
		__u32 addr;2146,74156
		char name[name2147,74170
struct v4l2_dbg_register 2151,74220
	struct v4l2_dbg_match match;2152,74247
	__u32 size;2153,74277
	__u64 reg;2154,74319
	__u64 val;2155,74331
#define V4L2_CHIP_FL_READABLE 2158,74372
#define V4L2_CHIP_FL_WRITABLE 2159,74411
struct v4l2_dbg_chip_info 2162,74480
	struct v4l2_dbg_match match;2163,74508
	char name[name2164,74538
	__u32 flags;2165,74554
	__u32 reserved[reserved2166,74568
struct v4l2_create_buffers 2178,74966
	__u32			index;2179,74995
	__u32			count;2180,75011
	__u32			memory;2181,75027
	struct v4l2_format	format;2182,75044
	__u32			reserved[reserved2183,75072
#define VIDIOC_QUERYCAP	2190,75169
#define VIDIOC_RESERVED	2191,75233
#define VIDIOC_ENUM_FMT 2192,75273
#define VIDIOC_G_FMT	2193,75341
#define VIDIOC_S_FMT	2194,75398
#define VIDIOC_REQBUFS	2195,75455
#define VIDIOC_QUERYBUF	2196,75522
#define VIDIOC_G_FBUF	2197,75582
#define VIDIOC_S_FBUF	2198,75645
#define VIDIOC_OVERLAY	2199,75708
#define VIDIOC_QBUF	2200,75752
#define VIDIOC_EXPBUF	2201,75808
#define VIDIOC_DQBUF	2202,75872
#define VIDIOC_STREAMON	2203,75929
#define VIDIOC_STREAMOFF	2204,75974
#define VIDIOC_G_PARM	2205,76019
#define VIDIOC_S_PARM	2206,76081
#define VIDIOC_G_STD	2207,76143
#define VIDIOC_S_STD	2208,76193
#define VIDIOC_ENUMSTD	2209,76243
#define VIDIOC_ENUMINPUT	2210,76304
#define VIDIOC_G_CTRL	2211,76363
#define VIDIOC_S_CTRL	2212,76422
#define VIDIOC_G_TUNER	2213,76481
#define VIDIOC_S_TUNER	2214,76539
#define VIDIOC_G_AUDIO	2215,76597
#define VIDIOC_S_AUDIO	2216,76655
#define VIDIOC_QUERYCTRL	2217,76713
#define VIDIOC_QUERYMENU	2218,76776
#define VIDIOC_G_INPUT	2219,76839
#define VIDIOC_S_INPUT	2220,76883
#define VIDIOC_G_EDID	2221,76927
#define VIDIOC_S_EDID	2222,76983
#define VIDIOC_G_OUTPUT	2223,77039
#define VIDIOC_S_OUTPUT	2224,77084
#define VIDIOC_ENUMOUTPUT	2225,77129
#define VIDIOC_G_AUDOUT	2226,77190
#define VIDIOC_S_AUDOUT	2227,77252
#define VIDIOC_G_MODULATOR	2228,77314
#define VIDIOC_S_MODULATOR	2229,77379
#define VIDIOC_G_FREQUENCY	2230,77444
#define VIDIOC_S_FREQUENCY	2231,77509
#define VIDIOC_CROPCAP	2232,77574
#define VIDIOC_G_CROP	2233,77634
#define VIDIOC_S_CROP	2234,77690
#define VIDIOC_G_JPEGCOMP	2235,77746
#define VIDIOC_S_JPEGCOMP	2236,77816
#define VIDIOC_QUERYSTD 2237,77886
#define VIDIOC_TRY_FMT 2238,77944
#define VIDIOC_ENUMAUDIO	2239,78008
#define VIDIOC_ENUMAUDOUT	2240,78067
#define VIDIOC_G_PRIORITY	2241,78130
#define VIDIOC_S_PRIORITY	2242,78203
#define VIDIOC_G_SLICED_VBI_CAP 2243,78276
#define VIDIOC_LOG_STATUS 2244,78351
#define VIDIOC_G_EXT_CTRLS	2245,78398
#define VIDIOC_S_EXT_CTRLS	2246,78466
#define VIDIOC_TRY_EXT_CTRLS	2247,78534
#define VIDIOC_ENUM_FRAMESIZES	2248,78604
#define VIDIOC_ENUM_FRAMEINTERVALS 2249,78675
#define VIDIOC_G_ENC_INDEX 2250,78750
#define VIDIOC_ENCODER_CMD 2251,78818
#define VIDIOC_TRY_ENCODER_CMD 2252,78890
#define	VIDIOC_DBG_S_REGISTER 2257,79162
#define	VIDIOC_DBG_G_REGISTER 2258,79234
#define VIDIOC_S_HW_FREQ_SEEK	2260,79307
#define	VIDIOC_S_DV_TIMINGS	2262,79379
#define	VIDIOC_G_DV_TIMINGS	2263,79446
#define	VIDIOC_DQEVENT	2264,79513
#define	VIDIOC_SUBSCRIBE_EVENT	2265,79571
#define	VIDIOC_UNSUBSCRIBE_EVENT 2266,79649
#define VIDIOC_CREATE_BUFS	2270,79824
#define VIDIOC_PREPARE_BUF	2271,79894
#define VIDIOC_G_SELECTION	2274,79990
#define VIDIOC_S_SELECTION	2275,80055
#define VIDIOC_DECODER_CMD	2279,80213
#define VIDIOC_TRY_DECODER_CMD	2280,80280
#define VIDIOC_ENUM_DV_TIMINGS 2284,80446
#define VIDIOC_QUERY_DV_TIMINGS 2285,80522
#define VIDIOC_DV_TIMINGS_CAP 2286,80593
#define VIDIOC_ENUM_FREQ_BANDS	2290,80756
#define VIDIOC_DBG_G_CHIP_INFO 2294,80935
#define VIDIOC_QUERY_EXT_CTRL	2296,81011
#define BASE_VIDIOC_PRIVATE	2301,81215

demux/mpeg/ts_si.c,638
 #define SI_DEBUG_TIMESHIFT(54,1666
 static time_t i_eit_debug_offset 56,1703
 #define SI_DEBUG_TIMESHIFT(57,1742
static inline char *grab_notempty(grab_notempty65,1935
void ts_si_Packet_Push(79,2262
static char *EITConvertToUTF8(EITConvertToUTF886,2515
static void SDTCallBack(133,4086
static void EITDecodeMjd(312,10846
#define CVT_FROM_BCD(322,11239
static int64_t EITConvertStartTime(323,11297
static int EITConvertDuration(343,11816
#undef CVT_FROM_BCD349,12016
static void TDTCallBack(351,12037
static void EITCallBack(375,13019
static void SINewTableCallBack(604,22130
bool ts_attach_SI_Tables_Decoders(648,24246

access/mms/mms.h,157
#define VLC_MMS_MMS_H_25,1186
#define MMS_PROTO_AUTO 27,1210
#define MMS_PROTO_TCP 28,1236
#define MMS_PROTO_UDP 29,1262
#define MMS_PROTO_HTTP 30,1288

stream_out/dummy.c,122
vlc_module_begin 49,2128
static sout_stream_id_sys_t *Add(Add72,2744
static void Del(78,2904
static int Send(84,3020

access/http/chunked.c,609
struct vlc_chunked_stream39,1387
    struct vlc_http_stream stream;41,1415
    struct vlc_http_stream *parent;parent42,1450
    struct vlc_tls *tls;tls43,1486
    uintmax_t chunk_length;44,1511
    bool eof;45,1539
    bool error;46,1553
static void *vlc_chunked_fatal(vlc_chunked_fatal51,1653
static struct vlc_http_msg *vlc_chunked_wait(vlc_chunked_wait57,1767
static block_t *vlc_chunked_read(vlc_chunked_read65,1994
static void vlc_chunked_close(135,3788
static struct vlc_http_stream_cbs vlc_chunked_callbacks 146,4112
struct vlc_http_stream *vlc_chunked_open(vlc_chunked_open153,4243

lua/libs/playlist.c,1353
#   define  _GNU_SOURCE28,1324
void vlclua_set_playlist_internal(46,1587
playlist_t *vlclua_get_playlist_internal(vlclua_get_playlist_internal51,1720
static int vlclua_playlist_prev(56,1847
static int vlclua_playlist_next(63,2012
static int vlclua_playlist_skip(70,2177
static int vlclua_playlist_play(78,2390
static int vlclua_playlist_pause(85,2555
static int vlclua_playlist_stop(92,2728
static int vlclua_playlist_clear(99,2893
static int vlclua_playlist_repeat(107,3149
static int vlclua_playlist_loop(114,3356
static int vlclua_playlist_random(121,3559
static int vlclua_playlist_gotoitem(128,3766
static int vlclua_playlist_delete(139,4131
static int vlclua_playlist_move(155,4598
static int vlclua_playlist_add(177,5390
static int vlclua_playlist_enqueue(188,5746
static void push_playlist_item(199,6107
#define CHECK_AND_SET_FLAG(208,6397
#undef CHECK_AND_SET_FLAG220,6813
static int vlclua_playlist_get(253,7895
static int vlclua_playlist_search(301,9276
static int vlclua_playlist_current(312,9626
static int vlc_sort_key_from_string(331,10101
        const char *psz_name;psz_name335,10193
        int i_key;336,10223
static int vlclua_playlist_sort(357,10821
static int vlclua_playlist_status(372,11420
static const luaL_Reg vlclua_playlist_reg[vlclua_playlist_reg398,12163
void luaopen_playlist(424,13186

access/http/message_test.c,291
#undef NDEBUG25,1121
static void check_req(37,1304
static void check_resp(61,2116
static void check_connect(91,3217
static void check_msg(109,3737
static time_t parse_date(142,4528
static const char *check_realm(check_realm162,5148
int main(183,5660
vlc_h2_frame_headers(346,12502

control/motionlib.c,592
#  define HAVE_MACOS_UNIMOTION38,1419
struct motion_sensors_t48,1550
    enum { HDAPS_SENSOR,50,1576
    enum { HDAPS_SENSOR, AMS_SENSOR,50,1576
    enum { HDAPS_SENSOR, AMS_SENSOR, APPLESMC_SENSOR,50,1576
           UNIMOTION_SENSOR 51,1630
           UNIMOTION_SENSOR } sensor;51,1630
    enum sms_hardware unimotion_hw;53,1696
    int i_calibrate;55,1739
    int p_oldx[p_oldx57,1761
    int i;58,1781
    int i_sum;59,1792
motion_sensors_t *motion_create(motion_create62,1811
void motion_destroy(119,3632
static int GetOrientation(127,3927
int motion_get_angle(204,5850

access/mms/asf.h,447
#define VLC_MMS_ASF_H_32,1465
#define ASF_CODEC_TYPE_VIDEO 36,1514
#define ASF_CODEC_TYPE_AUDIO 37,1552
#define ASF_CODEC_TYPE_UNKNOWN 38,1590
    int i_cat;42,1646
    int i_bitrate;43,1716
    int i_selected;44,1756
} asf_stream_t;45,1776
    int64_t      i_file_size;49,1810
    int64_t      i_data_packets_count;50,1840
    int32_t      i_min_data_packet_size;51,1879
    asf_stream_t stream[stream53,1921
} asf_header_t;55,1952

demux/playlist/asx.c,186
static mtime_t ParseTime(49,1850
static void ReadElement(114,3323
static bool PeekASX(133,3893
int Import_ASX(144,4280
static void ProcessEntry(168,4958
static int Demux(314,10439

video_filter/opencv_wrapper.c,1240
static const char *const chroma_list[chroma_list60,2308
static const char *const chroma_list_text[chroma_list_text61,2378
static const char *const output_list[output_list64,2516
static const char *const output_list_text[output_list_text65,2590
static const char *const verbosity_list[verbosity_list68,2739
static const char *const verbosity_list_text[verbosity_list_text69,2815
vlc_module_begin 72,2974
enum wrapper_output_t101,4491
   NONE,103,4515
   VINPUT,104,4524
   PROCESSED105,4535
enum internal_chroma_t111,4783
   CINPUT,113,4808
   GREY,114,4819
   RGB115,4828
struct filter_sys_t124,5281
    image_handler_t *p_image;p_image126,5303
    int i_cv_image_size;128,5334
    picture_t *p_proc_image;p_proc_image130,5360
    picture_t *p_to_be_freed;p_to_be_freed131,5389
    float f_scale;133,5420
    int i_wrapper_output;135,5440
    int i_internal_chroma;136,5466
    IplImage *p_cv_image[p_cv_image138,5494
    filter_t *p_opencv;p_opencv140,5538
    char* psz_inner_name;141,5562
    picture_t hacked_pic;143,5589
static int Create(151,5993
static void Destroy(266,10272
static void ReleaseImages(282,10862
static void VlcPictureToIplImage(314,11861
static picture_t* Filter(404,15455

hw/vdpau/chroma.c,1107
#define MAX_PAST 35,1336
#define MAX_FUTURE 36,1357
struct filter_sys_t38,1379
    vdp_t *vdp;vdp40,1401
    VdpDevice device;41,1417
    VdpVideoMixer mixer;42,1439
    VdpChromaType chroma;43,1464
    VdpYCbCrFormat format;44,1490
        vlc_vdp_video_field_t *field;field48,1535
        mtime_t date;49,1573
        bool force;50,1595
    } history[history51,1615
        float brightness;55,1675
        float contrast;56,1701
        float saturation;57,1725
        float hue;58,1751
    } procamp;59,1770
static VdpStatus MixerSetupColors(63,1842
static VdpVideoMixer MixerCreate(112,3286
static void Flush(285,9220
static picture_t *VideoExport(VideoExport298,9598
static picture_t *VideoImport(VideoImport338,10872
static picture_t *Render(Render434,13754
static picture_t *VideoRender(VideoRender692,22340
static picture_t *YCbCrRender(YCbCrRender698,22449
static int OutputOpen(704,22615
static void OutputClose(788,25156
static const int algo_values[algo_values799,25400
static const char *const algo_names[algo_names805,25555
vlc_module_begin(809,25656

demux/mpeg/ts_si.h,447
#define VLC_TS_PSI_EIT_H20,1014
#define TS_SI_SDT_PID 26,1089
#define TS_SI_EIT_PID 27,1116
#define TS_SI_TDT_PID 28,1143
#define TS_SI_TDT_TABLE_ID 30,1171
#define TS_SI_TOT_TABLE_ID 31,1207
#define TS_SI_RUNSTATUS_UNDEFINED 33,1244
#define TS_SI_RUNSTATUS_STOPPED 34,1283
#define TS_SI_RUNSTATUS_STARTING 35,1322
#define TS_SI_RUNSTATUS_PAUSING 36,1361
#define TS_SI_RUNSTATUS_RUNNING 37,1400
#define TS_SI_RUNSTATUS_OFF_AIR 38,1439

control/motionlib.h,83
#define MOTION_H25,1138
typedef struct motion_sensors_t motion_sensors_t;27,1156

demux/mpeg/ts_psip.c,1757
static inline char *grab_notempty(grab_notempty58,1753
struct ts_psip_context_t76,2116
    dvbpsi_atsc_mgt_t *p_mgt;p_mgt78,2143
    dvbpsi_atsc_stt_t *p_stt;p_stt79,2212
    dvbpsi_atsc_vct_t *p_vct;p_vct80,2275
    atsc_a65_handle_t *p_a65;p_a6581,2358
    uint16_t i_tabletype;82,2431
    DECL_ARRAY(83,2488
ts_psip_context_t * ts_psip_context_New(93,2898
void ts_psip_context_Delete(109,3266
static ts_pid_t *ATSC_GetSiblingxTTPID(ATSC_GetSiblingxTTPID132,4043
static inline uint32_t toETMId(150,4772
static inline void fromETMId(155,4910
static const dvbpsi_atsc_ett_t * ATSC_ETTFindByETMId(161,5091
static const dvbpsi_atsc_eit_event_t * ATSC_EventFindByETMId(170,5431
static void ATSC_EITInsert(192,6221
static void ATSC_CleanETTByChannelVersion(207,6681
static void ATSC_InsertETTOrdered(225,7223
static bool ATSC_TranslateVChannelToProgram(245,7755
static bool ATSC_Ready_SubDecoders(264,8498
void ATSC_Detach_Dvbpsi_Decoders(271,8720
#define ATSC_ATTACH(277,8865
#define ATSC_ATTACH_WITH_FIXED_DECODER(282,9167
static const char * const rgpsz_ATSC_A53_service_types[rgpsz_ATSC_A53_service_types287,9498
static const char * ATSC_A53_get_service_type(296,9705
 #define EIT_DEBUG_TIMESHIFT(304,9907
 static time_t i_eit_debug_offset 307,10032
 #define EIT_DEBUG_TIMESHIFT(308,10071
static time_t ATSC_AddVLCEPGEvent(316,10265
static void ATSC_EIT_Callback(399,13567
static void ATSC_ETT_Callback(489,16959
static void ATSC_ETT_RawCallback(556,19906
static void ATSC_VCT_Callback(565,20243
static void ATSC_MGT_Callback(640,23039
static void ATSC_STT_Callback(748,27743
static void ATSC_STT_RawCallback(789,29148
bool ATSC_Attach_Dvbpsi_Base_Decoders(798,29485
static void ATSC_NewTable_Callback(808,29801

lua/libs/xml.c,471
#   define  _GNU_SOURCE28,1337
static const luaL_Reg vlclua_xml_reg[vlclua_xml_reg46,1726
static int vlclua_xml_create(51,1843
static const luaL_Reg vlclua_xml_reader_reg[vlclua_xml_reader_reg73,2480
static int vlclua_xml_reader_delete(80,2705
static int vlclua_xml_create_reader(87,2895
static int vlclua_xml_reader_next_node(112,3656
static int vlclua_xml_reader_next_attr(128,4056
static int vlclua_xml_reader_node_empty(141,4423
void luaopen_xml(149,4648

demux/adaptive/xml/DOMHelper.cpp,249
std::vector<Node *> DOMHelper::getElementByTagName 32,1254
std::vector<Node *> DOMHelper::getChildElementByTagName 44,1586
void                DOMHelper::getElementsByTagName 57,1931
Node*           DOMHelper::getFirstChildElementByName(74,2429

stream_filter/adf.c,105
vlc_module_begin(37,1502
static ssize_t Read(51,1912
static int Seek(63,2273
static int Open(68,2377

demux/mpeg/ts_psip.h,1077
#define VLC_ATSC_PSIP_H20,1014
#define ATSC_EIT_MAX_DEPTH_MIN1 30,1194
#define ATSC_TABLE_TYPE_TVCT 32,1262
#define ATSC_TABLE_TYPE_TVCT_NEXT 33,1309
#define ATSC_TABLE_TYPE_CVCT 34,1356
#define ATSC_TABLE_TYPE_CVCT_NEXT 35,1403
#define ATSC_TABLE_TYPE_ETT 36,1450
#define ATSC_TABLE_TYPE_DCCSCT 37,1497
#define ATSC_TABLE_TYPE_EIT_0 38,1544
#define ATSC_TABLE_TYPE_EIT_127 39,1591
#define ATSC_TABLE_TYPE_ETT_0 40,1638
#define ATSC_TABLE_TYPE_ETT_127 41,1685
#define ATSC_TABLE_TYPE_RTT_1 42,1732
#define ATSC_TABLE_TYPE_RTT_255 43,1779
#define ATSC_TABLE_TYPE_DCCT_00 44,1826
#define ATSC_TABLE_TYPE_DCCT_FF 45,1873
#define ATSC_BASE_PID 47,1921
#define ATSC_MGT_TABLE_ID 48,1956
#define ATSC_TVCT_TABLE_ID 49,1989
#define ATSC_CVCT_TABLE_ID 50,2022
#define ATSC_RRT_TABLE_ID 51,2055
#define ATSC_EIT_TABLE_ID 52,2088
#define ATSC_ETT_TABLE_ID 53,2121
#define ATSC_STT_TABLE_ID 54,2154
#define ATSC_DESCRIPTOR_CONTENT_ADVISORY 56,2188
#define ATSC_DESCRIPTOR_EXTENDED_CHANNEL_NAME 57,2245
typedef struct ts_psip_context_t ts_psip_context_t;59,2303

codec/ddummy.c,237
#define SAVE_TEXT 36,1479
#define SAVE_LONGTEXT 37,1523
vlc_module_begin 45,1793
static int OpenDecoder(108,3910
static int  OpenDecoderDump(113,4009
static void *DecodeBlock(DecodeBlock123,4425
static void CloseDecoder(147,5150

demux/adaptive/playlist/BaseAdaptationSet.h,576
#define BASEADAPTATIONSET_H_26,1180
        class BaseAdaptationSet 44,1477
                BaseAdaptationSet(48,1634
                virtual ~BaseAdaptationSet(49,1683
                virtual StreamFormat            getStreamFormat(51,1730
                Property<std::string>           description;BaseAdaptationSet::description58,2312
                std::vector<BaseRepresentation *>   representations;BaseAdaptationSet::representations61,2397
                bool                            isBitstreamSwitching;BaseAdaptationSet::isBitstreamSwitching62,2466

video_chroma/grey_yuv.c,146
#define SRC_FOURCC 36,1483
#define DEST_FOURCC 37,1510
vlc_module_begin 53,2211
VIDEO_FILTER_WRAPPER(102,3780
static void GREY_YUY2(159,5759

demux/hls/playlist/Representation.cpp,537
Representation::Representation 40,1383
Representation::~Representation 51,1720
StreamFormat Representation::getStreamFormat(55,1760
bool Representation::isLive(60,1843
bool Representation::initialized(65,1903
void Representation::setPlaylistUrl(70,1970
Url Representation::getPlaylistUrl(75,2063
void Representation::debug(90,2335
void Representation::scheduleNextUpdate(102,2648
bool Representation::needsUpdate(135,3663
bool Representation::runLocalUpdates(140,3776
uint64_t Representation::translateSegmentNumber(159,4244

codec/omxil/OMX_Audio.h,35787
#define OMX_Audio_h30,1331
typedef enum OMX_AUDIO_CODINGTYPE 63,2165
    OMX_AUDIO_CodingUnused 64,2201
    OMX_AUDIO_CodingAutoDetect,65,2280
    OMX_AUDIO_CodingPCM,66,2352
    OMX_AUDIO_CodingADPCM,67,2419
    OMX_AUDIO_CodingAMR,68,2494
    OMX_AUDIO_CodingGSMFR,69,2567
    OMX_AUDIO_CodingGSMEFR,70,2650
    OMX_AUDIO_CodingGSMHR,71,2740
    OMX_AUDIO_CodingPDCFR,72,2822
    OMX_AUDIO_CodingPDCEFR,73,2904
    OMX_AUDIO_CodingPDCHR,74,2995
    OMX_AUDIO_CodingTDMAFR,75,3077
    OMX_AUDIO_CodingTDMAEFR,76,3178
    OMX_AUDIO_CodingQCELP8,77,3288
    OMX_AUDIO_CodingQCELP13,78,3369
    OMX_AUDIO_CodingEVRC,79,3451
    OMX_AUDIO_CodingSMV,80,3525
    OMX_AUDIO_CodingG711,81,3598
    OMX_AUDIO_CodingG723,82,3673
    OMX_AUDIO_CodingG726,83,3754
    OMX_AUDIO_CodingG729,84,3829
    OMX_AUDIO_CodingAAC,85,3904
    OMX_AUDIO_CodingMP3,86,3977
    OMX_AUDIO_CodingSBC,87,4050
    OMX_AUDIO_CodingVORBIS,88,4123
    OMX_AUDIO_CodingWMA,89,4199
    OMX_AUDIO_CodingRA,90,4272
    OMX_AUDIO_CodingMIDI,91,4344
    OMX_AUDIO_CodingKhronosExtensions 92,4418
    OMX_AUDIO_CodingKhronosExtensions = 0x6F000000,x6F00000092,4418
    OMX_AUDIO_CodingVendorStartUnused 93,4539
    OMX_AUDIO_CodingVendorStartUnused = 0x7F000000,x7F00000093,4539
    OMX_AUDIO_CodingMax 94,4649
    OMX_AUDIO_CodingMax = 0x7FFFFFFFx7FFFFFFF94,4649
} OMX_AUDIO_CODINGTYPE;95,4686
typedef struct OMX_AUDIO_PORTDEFINITIONTYPE 104,5113
    OMX_STRING cMIMEType;105,5159
    OMX_NATIVE_DEVICETYPE pNativeRender;106,5235
    OMX_BOOL bFlagErrorConcealment;109,5456
    OMX_AUDIO_CODINGTYPE eEncoding;111,5611
} OMX_AUDIO_PORTDEFINITIONTYPE;113,5761
typedef struct OMX_AUDIO_PARAM_PORTFORMATTYPE 119,5930
    OMX_U32 nSize;120,5978
    OMX_VERSIONTYPE nVersion;121,6053
    OMX_U32 nPortIndex;122,6135
    OMX_U32 nIndex;123,6207
    OMX_AUDIO_CODINGTYPE eEncoding;124,6314
} OMX_AUDIO_PARAM_PORTFORMATTYPE;125,6420
typedef enum OMX_AUDIO_PCMMODETYPE 129,6479
    OMX_AUDIO_PCMModeLinear 130,6517
    OMX_AUDIO_PCMModeALaw,131,6584
    OMX_AUDIO_PCMModeMULaw,132,6658
    OMX_AUDIO_PCMModeKhronosExtensions 133,6734
    OMX_AUDIO_PCMModeKhronosExtensions = 0x6F000000,x6F000000133,6734
    OMX_AUDIO_PCMModeVendorStartUnused 134,6856
    OMX_AUDIO_PCMModeVendorStartUnused = 0x7F000000,x7F000000134,6856
    OMX_AUDIO_PCMModeMax 135,6967
    OMX_AUDIO_PCMModeMax = 0x7FFFFFFF x7FFFFFFF135,6967
} OMX_AUDIO_PCMMODETYPE;136,7006
typedef enum OMX_AUDIO_CHANNELTYPE 139,7034
    OMX_AUDIO_ChannelNone 140,7071
    OMX_AUDIO_ChannelNone = 0x0,x0140,7071
    OMX_AUDIO_ChannelLF 141,7131
    OMX_AUDIO_ChannelLF   = 0x1,x1141,7131
    OMX_AUDIO_ChannelRF 142,7186
    OMX_AUDIO_ChannelRF   = 0x2,x2142,7186
    OMX_AUDIO_ChannelCF 143,7242
    OMX_AUDIO_ChannelCF   = 0x3,x3143,7242
    OMX_AUDIO_ChannelLS 144,7299
    OMX_AUDIO_ChannelLS   = 0x4,x4144,7299
    OMX_AUDIO_ChannelRS 145,7357
    OMX_AUDIO_ChannelRS   = 0x5,x5145,7357
    OMX_AUDIO_ChannelLFE 146,7416
    OMX_AUDIO_ChannelLFE  = 0x6,x6146,7416
    OMX_AUDIO_ChannelCS 147,7482
    OMX_AUDIO_ChannelCS   = 0x7,x7147,7482
    OMX_AUDIO_ChannelLR 148,7540
    OMX_AUDIO_ChannelLR   = 0x8,x8148,7540
    OMX_AUDIO_ChannelRR 149,7595
    OMX_AUDIO_ChannelRR   = 0x9,x9149,7595
    OMX_AUDIO_ChannelKhronosExtensions 150,7651
    OMX_AUDIO_ChannelKhronosExtensions = 0x6F000000,x6F000000150,7651
    OMX_AUDIO_ChannelVendorStartUnused 151,7773
    OMX_AUDIO_ChannelVendorStartUnused = 0x7F000000,x7F000000151,7773
    OMX_AUDIO_ChannelMax 152,7884
    OMX_AUDIO_ChannelMax  = 0x7FFFFFFF x7FFFFFFF152,7884
} OMX_AUDIO_CHANNELTYPE;153,7924
#define OMX_AUDIO_MAXCHANNELS 155,7950
#define OMX_MIN_PCMPAYLOAD_MSEC 156,8057
typedef struct OMX_AUDIO_PARAM_PCMMODETYPE 159,8194
    OMX_U32 nSize;160,8240
    OMX_VERSIONTYPE nVersion;161,8320
    OMX_U32 nPortIndex;162,8405
    OMX_U32 nChannels;163,8488
    OMX_NUMERICALDATATYPE eNumData;164,8574
    OMX_ENDIANTYPE eEndian;165,8662
    OMX_BOOL bInterleaved;166,8752
    OMX_U32 nBitPerSample;168,8926
    OMX_U32 nSamplingRate;169,8988
    OMX_AUDIO_PCMMODETYPE ePCMMode;171,9159
    OMX_AUDIO_CHANNELTYPE eChannelMapping[eChannelMapping172,9227
} OMX_AUDIO_PARAM_PCMMODETYPE;174,9352
typedef enum OMX_AUDIO_CHANNELMODETYPE 180,9569
    OMX_AUDIO_ChannelModeStereo 181,9610
    OMX_AUDIO_ChannelModeJointStereo,183,9809
    OMX_AUDIO_ChannelModeDual,185,9990
    OMX_AUDIO_ChannelModeMono,187,10166
    OMX_AUDIO_ChannelModeKhronosExtensions 188,10230
    OMX_AUDIO_ChannelModeKhronosExtensions = 0x6F000000,x6F000000188,10230
    OMX_AUDIO_ChannelModeVendorStartUnused 189,10356
    OMX_AUDIO_ChannelModeVendorStartUnused = 0x7F000000,x7F000000189,10356
    OMX_AUDIO_ChannelModeMax 190,10471
    OMX_AUDIO_ChannelModeMax = 0x7FFFFFFFx7FFFFFFF190,10471
} OMX_AUDIO_CHANNELMODETYPE;191,10513
typedef enum OMX_AUDIO_MP3STREAMFORMATTYPE 194,10544
    OMX_AUDIO_MP3StreamFormatMP1Layer3 195,10589
    OMX_AUDIO_MP3StreamFormatMP2Layer3,196,10680
    OMX_AUDIO_MP3StreamFormatMP2_5Layer3,197,10771
    OMX_AUDIO_MP3StreamFormatKhronosExtensions 198,10863
    OMX_AUDIO_MP3StreamFormatKhronosExtensions = 0x6F000000,x6F000000198,10863
    OMX_AUDIO_MP3StreamFormatVendorStartUnused 199,10993
    OMX_AUDIO_MP3StreamFormatVendorStartUnused = 0x7F000000,x7F000000199,10993
    OMX_AUDIO_MP3StreamFormatMax 200,11112
    OMX_AUDIO_MP3StreamFormatMax = 0x7FFFFFFFx7FFFFFFF200,11112
} OMX_AUDIO_MP3STREAMFORMATTYPE;201,11158
typedef struct OMX_AUDIO_PARAM_MP3TYPE 204,11210
    OMX_U32 nSize;205,11251
    OMX_VERSIONTYPE nVersion;206,11325
    OMX_U32 nPortIndex;207,11406
    OMX_U32 nChannels;208,11485
    OMX_U32 nBitRate;209,11547
    OMX_U32 nSampleRate;211,11704
    OMX_U32 nAudioBandWidth;213,11867
    OMX_AUDIO_CHANNELMODETYPE eChannelMode;215,12054
    OMX_AUDIO_MP3STREAMFORMATTYPE eFormat;216,12133
} OMX_AUDIO_PARAM_MP3TYPE;217,12203
typedef enum OMX_AUDIO_AACSTREAMFORMATTYPE 220,12232
    OMX_AUDIO_AACStreamFormatMP2ADTS 221,12277
    OMX_AUDIO_AACStreamFormatMP4ADTS,222,12368
    OMX_AUDIO_AACStreamFormatMP4LOAS,223,12459
    OMX_AUDIO_AACStreamFormatMP4LATM,224,12546
    OMX_AUDIO_AACStreamFormatADIF,225,12639
    OMX_AUDIO_AACStreamFormatMP4FF,226,12723
    OMX_AUDIO_AACStreamFormatRAW,227,12807
    OMX_AUDIO_AACStreamFormatKhronosExtensions 228,12872
    OMX_AUDIO_AACStreamFormatKhronosExtensions = 0x6F000000,x6F000000228,12872
    OMX_AUDIO_AACStreamFormatVendorStartUnused 229,13002
    OMX_AUDIO_AACStreamFormatVendorStartUnused = 0x7F000000,x7F000000229,13002
    OMX_AUDIO_AACStreamFormatMax 230,13121
    OMX_AUDIO_AACStreamFormatMax = 0x7FFFFFFFx7FFFFFFF230,13121
} OMX_AUDIO_AACSTREAMFORMATTYPE;231,13167
typedef enum OMX_AUDIO_AACPROFILETYPE{OMX_AUDIO_AACPROFILETYPE236,13345
  OMX_AUDIO_AACObjectNull 237,13384
  OMX_AUDIO_AACObjectMain 238,13443
  OMX_AUDIO_AACObjectLC,239,13503
  OMX_AUDIO_AACObjectSSR,240,13587
  OMX_AUDIO_AACObjectLTP,241,13663
  OMX_AUDIO_AACObjectHE,242,13739
  OMX_AUDIO_AACObjectScalable,243,13837
  OMX_AUDIO_AACObjectERLC 244,13901
  OMX_AUDIO_AACObjectLD 245,13999
  OMX_AUDIO_AACObjectHE_PS 246,14082
  OMX_AUDIO_AACObjectKhronosExtensions 247,14204
  OMX_AUDIO_AACObjectKhronosExtensions = 0x6F000000,x6F000000247,14204
  OMX_AUDIO_AACObjectVendorStartUnused 248,14326
  OMX_AUDIO_AACObjectVendorStartUnused = 0x7F000000,x7F000000248,14326
  OMX_AUDIO_AACObjectMax 249,14437
  OMX_AUDIO_AACObjectMax = 0x7FFFFFFFx7FFFFFFF249,14437
} OMX_AUDIO_AACPROFILETYPE;250,14475
#define OMX_AUDIO_AACToolNone 256,14706
#define OMX_AUDIO_AACToolMS 257,14825
#define OMX_AUDIO_AACToolIS 258,14923
#define OMX_AUDIO_AACToolTNS 259,15016
#define OMX_AUDIO_AACToolPNS 260,15116
#define OMX_AUDIO_AACToolLTP 261,15230
#define OMX_AUDIO_AACToolAll 262,15335
#define OMX_AUDIO_AACERNone 266,15599
#define OMX_AUDIO_AACERVCB11 267,15677
#define OMX_AUDIO_AACERRVLC 268,15773
#define OMX_AUDIO_AACERHCR 269,15862
#define OMX_AUDIO_AACERAll 270,15944
typedef struct OMX_AUDIO_PARAM_AACPROFILETYPE 274,16043
    OMX_U32 nSize;275,16091
    OMX_VERSIONTYPE nVersion;276,16167
    OMX_U32 nPortIndex;277,16248
    OMX_U32 nChannels;278,16327
    OMX_U32 nSampleRate;279,16389
    OMX_U32 nBitRate;281,16552
    OMX_U32 nAudioBandWidth;283,16709
    OMX_U32 nFrameLength;285,16896
    OMX_U32 nAACtools;288,17170
    OMX_U32 nAACERtools;289,17228
    OMX_AUDIO_AACPROFILETYPE eAACProfile;290,17310
    OMX_AUDIO_AACSTREAMFORMATTYPE eAACStreamFormat;291,17386
    OMX_AUDIO_CHANNELMODETYPE eChannelMode;292,17476
} OMX_AUDIO_PARAM_AACPROFILETYPE;293,17555
typedef struct OMX_AUDIO_PARAM_VORBISTYPE 297,17612
    OMX_U32 nSize;298,17656
    OMX_VERSIONTYPE nVersion;299,17725
    OMX_U32 nPortIndex;300,17801
    OMX_U32 nChannels;301,17875
    OMX_U32 nBitRate;302,17932
    OMX_U32 nMinBitRate;305,18190
    OMX_U32 nMaxBitRate;306,18259
    OMX_U32 nSampleRate;308,18329
    OMX_U32 nAudioBandWidth;310,18482
    OMX_S32 nQuality;312,18659
    OMX_BOOL bManaged;315,18912
    OMX_BOOL bDownmix;320,19327
} OMX_AUDIO_PARAM_VORBISTYPE;322,19510
typedef enum OMX_AUDIO_WMAFORMATTYPE 326,19561
  OMX_AUDIO_WMAFormatUnused 327,19600
  OMX_AUDIO_WMAFormat7,328,19666
  OMX_AUDIO_WMAFormat8,329,19736
  OMX_AUDIO_WMAFormat9,330,19806
  OMX_AUDIO_WMAFormatKhronosExtensions 331,19876
  OMX_AUDIO_WMAFormatKhronosExtensions = 0x6F000000,x6F000000331,19876
  OMX_AUDIO_WMAFormatVendorStartUnused 332,19998
  OMX_AUDIO_WMAFormatVendorStartUnused = 0x7F000000,x7F000000332,19998
  OMX_AUDIO_WMAFormatMax 333,20109
  OMX_AUDIO_WMAFormatMax = 0x7FFFFFFFx7FFFFFFF333,20109
} OMX_AUDIO_WMAFORMATTYPE;334,20147
typedef enum OMX_AUDIO_WMAPROFILETYPE 338,20195
  OMX_AUDIO_WMAProfileUnused 339,20235
  OMX_AUDIO_WMAProfileL1,340,20304
  OMX_AUDIO_WMAProfileL2,341,20388
  OMX_AUDIO_WMAProfileL3,342,20472
  OMX_AUDIO_WMAProfileKhronosExtensions 343,20556
  OMX_AUDIO_WMAProfileKhronosExtensions = 0x6F000000,x6F000000343,20556
  OMX_AUDIO_WMAProfileVendorStartUnused 344,20679
  OMX_AUDIO_WMAProfileVendorStartUnused = 0x7F000000,x7F000000344,20679
  OMX_AUDIO_WMAProfileMax 345,20791
  OMX_AUDIO_WMAProfileMax = 0x7FFFFFFFx7FFFFFFF345,20791
} OMX_AUDIO_WMAPROFILETYPE;346,20830
typedef struct OMX_AUDIO_PARAM_WMATYPE 350,20878
    OMX_U32 nSize;351,20919
    OMX_VERSIONTYPE nVersion;352,20988
    OMX_U32 nPortIndex;353,21064
    OMX_U16 nChannels;354,21138
    OMX_U32 nBitRate;355,21195
    OMX_AUDIO_WMAFORMATTYPE eFormat;357,21342
	OMX_AUDIO_WMAPROFILETYPE eProfile;358,21416
    OMX_U32 nSamplingRate;359,21490
    OMX_U16 nBlockAlign;360,21561
    OMX_U16 nEncodeOptions;361,21666
    OMX_U32 nSuperBlockAlign;362,21727
} OMX_AUDIO_PARAM_WMATYPE;363,21788
typedef enum OMX_AUDIO_RAFORMATTYPE 368,21845
    OMX_AUDIO_RAFormatUnused 369,21883
    OMX_AUDIO_RA8,370,21950
    OMX_AUDIO_RA9,371,22010
    OMX_AUDIO_RA10_AAC,372,22070
    OMX_AUDIO_RA10_CODEC,373,22163
    OMX_AUDIO_RA10_LOSSLESS,374,22253
    OMX_AUDIO_RA10_MULTICHANNEL,375,22314
    OMX_AUDIO_RA10_VOICE,376,22379
    OMX_AUDIO_RAFormatKhronosExtensions 377,22464
    OMX_AUDIO_RAFormatKhronosExtensions = 0x6F000000,x6F000000377,22464
    OMX_AUDIO_RAFormatVendorStartUnused 378,22587
    OMX_AUDIO_RAFormatVendorStartUnused = 0x7F000000,x7F000000378,22587
    OMX_VIDEO_RAFormatMax 379,22699
    OMX_VIDEO_RAFormatMax = 0x7FFFFFFFx7FFFFFFF379,22699
} OMX_AUDIO_RAFORMATTYPE;380,22738
typedef struct OMX_AUDIO_PARAM_RATYPE 383,22796
    OMX_U32 nSize;384,22837
    OMX_VERSIONTYPE nVersion;385,22911
    OMX_U32 nPortIndex;386,22990
    OMX_U32 nChannels;387,23067
    OMX_U32 nSamplingRate;388,23127
    OMX_U32 nBitsPerFrame;389,23208
    OMX_U32 nSamplePerFrame;390,23282
    OMX_U32 nCouplingQuantBits;391,23358
    OMX_U32 nCouplingStartRegion;392,23457
    OMX_U32 nNumRegions;393,23546
    OMX_AUDIO_RAFORMATTYPE eFormat;394,23618
} OMX_AUDIO_PARAM_RATYPE;395,23692
typedef enum OMX_AUDIO_SBCALLOCMETHODTYPE 399,23755
  OMX_AUDIO_SBCAllocMethodLoudness,400,23799
  OMX_AUDIO_SBCAllocMethodSNR,401,23870
  OMX_AUDIO_SBCAllocMethodKhronosExtensions 402,23936
  OMX_AUDIO_SBCAllocMethodKhronosExtensions = 0x6F000000,x6F000000402,23936
  OMX_AUDIO_SBCAllocMethodVendorStartUnused 403,24063
  OMX_AUDIO_SBCAllocMethodVendorStartUnused = 0x7F000000,x7F000000403,24063
  OMX_AUDIO_SBCAllocMethodMax 404,24179
  OMX_AUDIO_SBCAllocMethodMax = 0x7FFFFFFFx7FFFFFFF404,24179
} OMX_AUDIO_SBCALLOCMETHODTYPE;405,24222
typedef struct OMX_AUDIO_PARAM_SBCTYPE 409,24274
    OMX_U32 nSize;410,24315
    OMX_VERSIONTYPE nVersion;411,24385
    OMX_U32 nPortIndex;412,24462
    OMX_U32 nChannels;413,24537
    OMX_U32 nBitRate;414,24595
    OMX_U32 nSampleRate;416,24744
    OMX_U32 nBlocks;418,24899
    OMX_U32 nSubbands;419,24955
    OMX_U32 nBitPool;420,25013
    OMX_BOOL bEnableBitrate;421,25066
    OMX_AUDIO_CHANNELMODETYPE eChannelMode;422,25142
    OMX_AUDIO_SBCALLOCMETHODTYPE eSBCAllocType;423,25219
} OMX_AUDIO_PARAM_SBCTYPE;424,25304
typedef struct OMX_AUDIO_PARAM_ADPCMTYPE 428,25372
    OMX_U32 nSize;429,25416
    OMX_VERSIONTYPE nVersion;430,25488
    OMX_U32 nPortIndex;431,25567
    OMX_U32 nChannels;432,25644
    OMX_U32 nBitsPerSample;435,25867
    OMX_U32 nSampleRate;436,25938
} OMX_AUDIO_PARAM_ADPCMTYPE;438,26096
typedef enum OMX_AUDIO_G723RATE 442,26145
    OMX_AUDIO_G723ModeUnused 443,26179
    OMX_AUDIO_G723ModeLow,444,26250
    OMX_AUDIO_G723ModeHigh,445,26302
    OMX_AUDIO_G723ModeKhronosExtensions 446,26354
    OMX_AUDIO_G723ModeKhronosExtensions = 0x6F000000,x6F000000446,26354
    OMX_AUDIO_G723ModeVendorStartUnused 447,26477
    OMX_AUDIO_G723ModeVendorStartUnused = 0x7F000000,x7F000000447,26477
    OMX_AUDIO_G723ModeMax 448,26589
    OMX_AUDIO_G723ModeMax = 0x7FFFFFFFx7FFFFFFF448,26589
} OMX_AUDIO_G723RATE;449,26628
typedef struct OMX_AUDIO_PARAM_G723TYPE 453,26692
    OMX_U32 nSize;454,26735
    OMX_VERSIONTYPE nVersion;455,26809
    OMX_U32 nPortIndex;456,26890
    OMX_U32 nChannels;457,26969
    OMX_BOOL bDTX;460,27198
    OMX_AUDIO_G723RATE eBitRate;461,27276
    OMX_BOOL bHiPassFilter;462,27358
    OMX_BOOL bPostFilter;463,27425
} OMX_AUDIO_PARAM_G723TYPE;464,27487
typedef enum OMX_AUDIO_G726MODE 468,27547
    OMX_AUDIO_G726ModeUnused 469,27581
    OMX_AUDIO_G726Mode16,470,27651
    OMX_AUDIO_G726Mode24,471,27702
    OMX_AUDIO_G726Mode32,472,27753
    OMX_AUDIO_G726Mode40,473,27833
    OMX_AUDIO_G726ModeKhronosExtensions 474,27884
    OMX_AUDIO_G726ModeKhronosExtensions = 0x6F000000,x6F000000474,27884
    OMX_AUDIO_G726ModeVendorStartUnused 475,28007
    OMX_AUDIO_G726ModeVendorStartUnused = 0x7F000000,x7F000000475,28007
    OMX_AUDIO_G726ModeMax 476,28119
    OMX_AUDIO_G726ModeMax = 0x7FFFFFFFx7FFFFFFF476,28119
} OMX_AUDIO_G726MODE;477,28158
typedef struct OMX_AUDIO_PARAM_G726TYPE 481,28239
    OMX_U32 nSize;482,28282
    OMX_VERSIONTYPE nVersion;483,28354
    OMX_U32 nPortIndex;484,28433
    OMX_U32 nChannels;485,28510
     OMX_AUDIO_G726MODE eG726Mode;488,28733
} OMX_AUDIO_PARAM_G726TYPE;489,28768
typedef enum OMX_AUDIO_G729TYPE 493,28822
    OMX_AUDIO_G729 494,28856
    OMX_AUDIO_G729A,495,28922
    OMX_AUDIO_G729B,496,28996
    OMX_AUDIO_G729AB,497,29074
    OMX_AUDIO_G729KhronosExtensions 498,29155
    OMX_AUDIO_G729KhronosExtensions = 0x6F000000,x6F000000498,29155
    OMX_AUDIO_G729VendorStartUnused 499,29274
    OMX_AUDIO_G729VendorStartUnused = 0x7F000000,x7F000000499,29274
    OMX_AUDIO_G729Max 500,29382
    OMX_AUDIO_G729Max = 0x7FFFFFFFx7FFFFFFF500,29382
} OMX_AUDIO_G729TYPE;501,29417
typedef struct OMX_AUDIO_PARAM_G729TYPE 505,29503
    OMX_U32 nSize;506,29545
    OMX_VERSIONTYPE nVersion;507,29614
    OMX_U32 nPortIndex;508,29690
    OMX_U32 nChannels;509,29764
    OMX_BOOL bDTX;512,29978
    OMX_AUDIO_G729TYPE eBitType;513,30051
} OMX_AUDIO_PARAM_G729TYPE;514,30084
typedef enum OMX_AUDIO_AMRFRAMEFORMATTYPE 518,30139
    OMX_AUDIO_AMRFrameFormatConformance 519,30184
    OMX_AUDIO_AMRFrameFormatIF1,521,30341
    OMX_AUDIO_AMRFrameFormatIF2,523,30487
    OMX_AUDIO_AMRFrameFormatFSF,525,30632
    OMX_AUDIO_AMRFrameFormatRTPPayload,527,30779
    OMX_AUDIO_AMRFrameFormatITU,529,30950
    OMX_AUDIO_AMRFrameFormatKhronosExtensions 530,31060
    OMX_AUDIO_AMRFrameFormatKhronosExtensions = 0x6F000000,x6F000000530,31060
    OMX_AUDIO_AMRFrameFormatVendorStartUnused 531,31189
    OMX_AUDIO_AMRFrameFormatVendorStartUnused = 0x7F000000,x7F000000531,31189
    OMX_AUDIO_AMRFrameFormatMax 532,31307
    OMX_AUDIO_AMRFrameFormatMax = 0x7FFFFFFF x7FFFFFFF532,31307
} OMX_AUDIO_AMRFRAMEFORMATTYPE;533,31353
typedef enum OMX_AUDIO_AMRBANDMODETYPE 537,31409
    OMX_AUDIO_AMRBandModeUnused 538,31450
    OMX_AUDIO_AMRBandModeNB0,539,31532
    OMX_AUDIO_AMRBandModeNB1,540,31611
    OMX_AUDIO_AMRBandModeNB2,541,31690
    OMX_AUDIO_AMRBandModeNB3,542,31770
    OMX_AUDIO_AMRBandModeNB4,543,31849
    OMX_AUDIO_AMRBandModeNB5,544,31928
    OMX_AUDIO_AMRBandModeNB6,545,32007
    OMX_AUDIO_AMRBandModeNB7,546,32086
    OMX_AUDIO_AMRBandModeWB0,547,32165
    OMX_AUDIO_AMRBandModeWB1,548,32244
    OMX_AUDIO_AMRBandModeWB2,549,32323
    OMX_AUDIO_AMRBandModeWB3,550,32403
    OMX_AUDIO_AMRBandModeWB4,551,32483
    OMX_AUDIO_AMRBandModeWB5,552,32562
    OMX_AUDIO_AMRBandModeWB6,553,32641
    OMX_AUDIO_AMRBandModeWB7,554,32720
    OMX_AUDIO_AMRBandModeWB8,555,32799
    OMX_AUDIO_AMRBandModeKhronosExtensions 556,32884
    OMX_AUDIO_AMRBandModeKhronosExtensions = 0x6F000000,x6F000000556,32884
    OMX_AUDIO_AMRBandModeVendorStartUnused 557,33010
    OMX_AUDIO_AMRBandModeVendorStartUnused = 0x7F000000,x7F000000557,33010
    OMX_AUDIO_AMRBandModeMax 558,33125
    OMX_AUDIO_AMRBandModeMax = 0x7FFFFFFFx7FFFFFFF558,33125
} OMX_AUDIO_AMRBANDMODETYPE;559,33167
typedef enum OMX_AUDIO_AMRDTXMODETYPE 563,33247
    OMX_AUDIO_AMRDTXModeOff 564,33288
    OMX_AUDIO_AMRDTXModeOnVAD1,565,33385
    OMX_AUDIO_AMRDTXModeOnVAD2,567,33566
    OMX_AUDIO_AMRDTXModeOnAuto,569,33753
    OMX_AUDIO_AMRDTXasEFR,572,33917
    OMX_AUDIO_AMRDTXModeKhronosExtensions 574,34034
    OMX_AUDIO_AMRDTXModeKhronosExtensions = 0x6F000000,x6F000000574,34034
    OMX_AUDIO_AMRDTXModeVendorStartUnused 575,34159
    OMX_AUDIO_AMRDTXModeVendorStartUnused = 0x7F000000,x7F000000575,34159
    OMX_AUDIO_AMRDTXModeMax 576,34273
    OMX_AUDIO_AMRDTXModeMax = 0x7FFFFFFF x7FFFFFFF576,34273
} OMX_AUDIO_AMRDTXMODETYPE;577,34315
typedef struct OMX_AUDIO_PARAM_AMRTYPE 581,34365
    OMX_U32 nSize;582,34406
    OMX_VERSIONTYPE nVersion;583,34489
    OMX_U32 nPortIndex;584,34579
    OMX_U32 nChannels;585,34667
    OMX_U32 nBitRate;586,34738
    OMX_AUDIO_AMRBANDMODETYPE eAMRBandMode;587,34815
    OMX_AUDIO_AMRDTXMODETYPE  eAMRDTXMode;588,34894
    OMX_AUDIO_AMRFRAMEFORMATTYPE eAMRFrameFormat;589,34971
} OMX_AUDIO_PARAM_AMRTYPE;590,35058
typedef struct OMX_AUDIO_PARAM_GSMFRTYPE 594,35152
    OMX_U32 nSize;595,35195
    OMX_VERSIONTYPE nVersion;596,35264
    OMX_U32 nPortIndex;597,35340
    OMX_BOOL bDTX;598,35414
    OMX_BOOL bHiPassFilter;599,35487
} OMX_AUDIO_PARAM_GSMFRTYPE;600,35549
typedef struct OMX_AUDIO_PARAM_GSMHRTYPE 604,35645
    OMX_U32 nSize;605,35688
    OMX_VERSIONTYPE nVersion;606,35757
    OMX_U32 nPortIndex;607,35833
    OMX_BOOL bDTX;608,35907
    OMX_BOOL bHiPassFilter;609,35980
} OMX_AUDIO_PARAM_GSMHRTYPE;610,36042
typedef struct OMX_AUDIO_PARAM_GSMEFRTYPE 614,36139
    OMX_U32 nSize;615,36183
    OMX_VERSIONTYPE nVersion;616,36252
    OMX_U32 nPortIndex;617,36328
    OMX_BOOL bDTX;618,36402
    OMX_BOOL bHiPassFilter;619,36475
} OMX_AUDIO_PARAM_GSMEFRTYPE;620,36537
typedef struct OMX_AUDIO_PARAM_TDMAFRTYPE 624,36649
    OMX_U32 nSize;625,36693
    OMX_VERSIONTYPE nVersion;626,36766
    OMX_U32 nPortIndex;627,36846
    OMX_U32 nChannels;628,36924
    OMX_BOOL bDTX;631,37150
    OMX_BOOL bHiPassFilter;632,37227
} OMX_AUDIO_PARAM_TDMAFRTYPE;633,37293
typedef struct OMX_AUDIO_PARAM_TDMAEFRTYPE 637,37405
    OMX_U32 nSize;638,37450
    OMX_VERSIONTYPE nVersion;639,37523
    OMX_U32 nPortIndex;640,37603
    OMX_U32 nChannels;641,37681
    OMX_BOOL bDTX;644,37907
    OMX_BOOL bHiPassFilter;645,37984
} OMX_AUDIO_PARAM_TDMAEFRTYPE;646,38050
typedef struct OMX_AUDIO_PARAM_PDCFRTYPE 650,38153
    OMX_U32 nSize;651,38196
    OMX_VERSIONTYPE nVersion;652,38269
    OMX_U32 nPortIndex;653,38349
    OMX_U32 nChannels;654,38427
    OMX_BOOL bDTX;657,38653
    OMX_BOOL bHiPassFilter;658,38730
} OMX_AUDIO_PARAM_PDCFRTYPE;659,38796
typedef struct OMX_AUDIO_PARAM_PDCEFRTYPE 663,38898
    OMX_U32 nSize;664,38942
    OMX_VERSIONTYPE nVersion;665,39015
    OMX_U32 nPortIndex;666,39095
    OMX_U32 nChannels;667,39173
    OMX_BOOL bDTX;670,39399
    OMX_BOOL bHiPassFilter;671,39476
} OMX_AUDIO_PARAM_PDCEFRTYPE;672,39542
typedef struct OMX_AUDIO_PARAM_PDCHRTYPE 675,39647
    OMX_U32 nSize;676,39690
    OMX_VERSIONTYPE nVersion;677,39763
    OMX_U32 nPortIndex;678,39843
    OMX_U32 nChannels;679,39921
    OMX_BOOL bDTX;682,40147
    OMX_BOOL bHiPassFilter;683,40224
} OMX_AUDIO_PARAM_PDCHRTYPE;684,40290
typedef enum OMX_AUDIO_CDMARATETYPE 688,40344
    OMX_AUDIO_CDMARateBlank 689,40382
    OMX_AUDIO_CDMARateFull,690,40460
    OMX_AUDIO_CDMARateHalf,691,40542
    OMX_AUDIO_CDMARateQuarter,692,40624
    OMX_AUDIO_CDMARateEighth,693,40709
    OMX_AUDIO_CDMARateErasure,694,40798
    OMX_AUDIO_CDMARateKhronosExtensions 695,40867
    OMX_AUDIO_CDMARateKhronosExtensions = 0x6F000000,x6F000000695,40867
    OMX_AUDIO_CDMARateVendorStartUnused 696,40990
    OMX_AUDIO_CDMARateVendorStartUnused = 0x7F000000,x7F000000696,40990
    OMX_AUDIO_CDMARateMax 697,41102
    OMX_AUDIO_CDMARateMax = 0x7FFFFFFFx7FFFFFFF697,41102
} OMX_AUDIO_CDMARATETYPE;698,41141
typedef struct OMX_AUDIO_PARAM_QCELP8TYPE 702,41240
    OMX_U32 nSize;703,41284
    OMX_VERSIONTYPE nVersion;704,41357
    OMX_U32 nPortIndex;705,41437
    OMX_U32 nChannels;706,41515
    OMX_U32 nBitRate;709,41741
    OMX_AUDIO_CDMARATETYPE eCDMARate;711,41896
    OMX_U32 nMinBitRate;712,41953
    OMX_U32 nMaxBitRate;713,42046
} OMX_AUDIO_PARAM_QCELP8TYPE;714,42140
typedef struct OMX_AUDIO_PARAM_QCELP13TYPE 718,42249
    OMX_U32 nSize;719,42294
    OMX_VERSIONTYPE nVersion;720,42367
    OMX_U32 nPortIndex;721,42447
    OMX_U32 nChannels;722,42525
    OMX_AUDIO_CDMARATETYPE eCDMARate;725,42751
    OMX_U32 nMinBitRate;726,42808
    OMX_U32 nMaxBitRate;727,42901
} OMX_AUDIO_PARAM_QCELP13TYPE;728,42995
typedef struct OMX_AUDIO_PARAM_EVRCTYPE 732,43114
    OMX_U32 nSize;733,43156
    OMX_VERSIONTYPE nVersion;734,43229
    OMX_U32 nPortIndex;735,43309
    OMX_U32 nChannels;736,43387
    OMX_AUDIO_CDMARATETYPE eCDMARate;739,43613
    OMX_BOOL bRATE_REDUCon;740,43677
    OMX_U32 nMinBitRate;741,43762
    OMX_U32 nMaxBitRate;742,43855
    OMX_BOOL bHiPassFilter;743,43949
    OMX_BOOL bNoiseSuppressor;744,44025
    OMX_BOOL bPostFilter;745,44116
} OMX_AUDIO_PARAM_EVRCTYPE;746,44187
typedef struct OMX_AUDIO_PARAM_SMVTYPE 750,44277
    OMX_U32 nSize;751,44318
    OMX_VERSIONTYPE nVersion;752,44391
    OMX_U32 nPortIndex;753,44471
    OMX_U32 nChannels;754,44549
    OMX_AUDIO_CDMARATETYPE eCDMARate;757,44775
    OMX_BOOL bRATE_REDUCon;758,44832
    OMX_U32 nMinBitRate;759,44921
    OMX_U32 nMaxBitRate;760,45016
    OMX_BOOL bHiPassFilter;761,45112
    OMX_BOOL bNoiseSuppressor;762,45190
    OMX_BOOL bPostFilter;763,45281
} OMX_AUDIO_PARAM_SMVTYPE;764,45354
typedef enum OMX_AUDIO_MIDIFORMATTYPE770,45421
    OMX_AUDIO_MIDIFormatUnknown 772,45461
    OMX_AUDIO_MIDIFormatSMF0,773,45540
    OMX_AUDIO_MIDIFormatSMF1,774,45611
    OMX_AUDIO_MIDIFormatSMF2,775,45682
    OMX_AUDIO_MIDIFormatSPMIDI,776,45753
    OMX_AUDIO_MIDIFormatXMF0,777,45806
    OMX_AUDIO_MIDIFormatXMF1,778,45882
    OMX_AUDIO_MIDIFormatMobileXMF,779,45958
    OMX_AUDIO_MIDIFormatKhronosExtensions 780,46047
    OMX_AUDIO_MIDIFormatKhronosExtensions = 0x6F000000,x6F000000780,46047
    OMX_AUDIO_MIDIFormatVendorStartUnused 781,46172
    OMX_AUDIO_MIDIFormatVendorStartUnused = 0x7F000000,x7F000000781,46172
    OMX_AUDIO_MIDIFormatMax 782,46286
    OMX_AUDIO_MIDIFormatMax = 0x7FFFFFFFx7FFFFFFF782,46286
} OMX_AUDIO_MIDIFORMATTYPE;783,46327
typedef struct OMX_AUDIO_PARAM_MIDITYPE 789,46395
    OMX_U32 nSize;790,46437
    OMX_VERSIONTYPE nVersion;791,46511
    OMX_U32 nPortIndex;792,46592
    OMX_U32 nFileSize;793,46671
    OMX_BU32 sMaxPolyphony;797,47005
    OMX_BOOL bLoadDefaultSound;800,47296
    OMX_AUDIO_MIDIFORMATTYPE eMidiFormat;802,47433
} OMX_AUDIO_PARAM_MIDITYPE;803,47583
typedef enum OMX_AUDIO_MIDISOUNDBANKTYPE 809,47667
    OMX_AUDIO_MIDISoundBankUnused 810,47710
    OMX_AUDIO_MIDISoundBankDLS1,811,47797
    OMX_AUDIO_MIDISoundBankDLS2,812,47868
    OMX_AUDIO_MIDISoundBankMobileDLSBase,813,47939
    OMX_AUDIO_MIDISoundBankMobileDLSPlusOptions,814,48037
    OMX_AUDIO_MIDISoundBankKhronosExtensions 815,48159
    OMX_AUDIO_MIDISoundBankKhronosExtensions = 0x6F000000,x6F000000815,48159
    OMX_AUDIO_MIDISoundBankVendorStartUnused 816,48287
    OMX_AUDIO_MIDISoundBankVendorStartUnused = 0x7F000000,x7F000000816,48287
    OMX_AUDIO_MIDISoundBankMax 817,48404
    OMX_AUDIO_MIDISoundBankMax = 0x7FFFFFFFx7FFFFFFF817,48404
} OMX_AUDIO_MIDISOUNDBANKTYPE;818,48448
typedef enum OMX_AUDIO_MIDISOUNDBANKLAYOUTTYPE 824,48602
   OMX_AUDIO_MIDISoundBankLayoutUnused 825,48651
   OMX_AUDIO_MIDISoundBankLayoutGM,826,48735
   OMX_AUDIO_MIDISoundBankLayoutGM2,827,48824
   OMX_AUDIO_MIDISoundBankLayoutUser,828,48932
   OMX_AUDIO_MIDISoundBankLayoutKhronosExtensions 829,49035
   OMX_AUDIO_MIDISoundBankLayoutKhronosExtensions = 0x6F000000,x6F000000829,49035
   OMX_AUDIO_MIDISoundBankLayoutVendorStartUnused 830,49168
   OMX_AUDIO_MIDISoundBankLayoutVendorStartUnused = 0x7F000000,x7F000000830,49168
   OMX_AUDIO_MIDISoundBankLayoutMax 831,49290
   OMX_AUDIO_MIDISoundBankLayoutMax = 0x7FFFFFFFx7FFFFFFF831,49290
} OMX_AUDIO_MIDISOUNDBANKLAYOUTTYPE;832,49339
typedef struct OMX_AUDIO_PARAM_MIDILOADUSERSOUNDTYPE 838,49446
    OMX_U32 nSize;839,49501
    OMX_VERSIONTYPE nVersion;840,49570
    OMX_U32 nPortIndex;841,49646
    OMX_U32 nDLSIndex;842,49720
    OMX_U32 nDLSSize;843,49786
    OMX_PTR pDLSData;844,49838
    OMX_AUDIO_MIDISOUNDBANKTYPE eMidiSoundBank;845,49901
    OMX_AUDIO_MIDISOUNDBANKLAYOUTTYPE eMidiSoundBankLayout;846,49992
} OMX_AUDIO_PARAM_MIDILOADUSERSOUNDTYPE;847,50095
typedef struct OMX_AUDIO_CONFIG_MIDIIMMEDIATEEVENTTYPE 854,50288
    OMX_U32 nSize;855,50345
    OMX_VERSIONTYPE nVersion;856,50414
    OMX_U32 nPortIndex;857,50490
    OMX_U32 nMidiEventSize;858,50564
    OMX_U8 nMidiEvents[nMidiEvents859,50657
} OMX_AUDIO_CONFIG_MIDIIMMEDIATEEVENTTYPE;862,50897
typedef struct OMX_AUDIO_CONFIG_MIDISOUNDBANKPROGRAMTYPE 868,51017
    OMX_U32 nSize;869,51076
    OMX_VERSIONTYPE nVersion;870,51147
    OMX_U32 nPortIndex;871,51225
    OMX_U32 nChannel;872,51301
    OMX_U16 nIDProgram;873,51381
    OMX_U16 nIDSoundBank;874,51456
    OMX_U32 nUserSoundBankIndex;875,51510
} OMX_AUDIO_CONFIG_MIDISOUNDBANKPROGRAMTYPE;877,51677
typedef struct OMX_AUDIO_CONFIG_MIDICONTROLTYPE 883,51763
    OMX_U32 nSize;884,51813
    OMX_VERSIONTYPE nVersion;885,51886
    OMX_U32 nPortIndex;886,51966
    OMX_BS32 sPitchTransposition;887,52044
    OMX_BU32 sPlayBackRate;889,52226
    OMX_BU32 sTempo 891,52396
    OMX_U32 nMaxPolyphony;893,52576
    OMX_U32 nNumRepeat;896,52828
    OMX_U32 nStopTime;897,52905
    OMX_U16 nChannelMuteMask;899,53084
    OMX_U16 nChannelSoloMask;900,53162
    OMX_U32 nTrack0031MuteMask;901,53240
    OMX_U32 nTrack3263MuteMask;902,53347
    OMX_U32 nTrack0031SoloMask;903,53455
    OMX_U32 nTrack3263SoloMask;904,53562
} OMX_AUDIO_CONFIG_MIDICONTROLTYPE;906,53671
typedef enum OMX_AUDIO_MIDIPLAYBACKSTATETYPE 912,53756
  OMX_AUDIO_MIDIPlayBackStateUnknown 913,53803
  OMX_AUDIO_MIDIPlayBackStateClosedEngaged,915,53934
  OMX_AUDIO_MIDIPlayBackStateParsing,918,54184
  OMX_AUDIO_MIDIPlayBackStateOpenEngaged,921,54443
  OMX_AUDIO_MIDIPlayBackStatePlaying,929,55164
  OMX_AUDIO_MIDIPlayBackStatePlayingPartially,932,55422
  OMX_AUDIO_MIDIPlayBackStatePlayingSilently,934,55590
  OMX_AUDIO_MIDIPlayBackStateKhronosExtensions 939,56035
  OMX_AUDIO_MIDIPlayBackStateKhronosExtensions = 0x6F000000,x6F000000939,56035
  OMX_AUDIO_MIDIPlayBackStateVendorStartUnused 940,56165
  OMX_AUDIO_MIDIPlayBackStateVendorStartUnused = 0x7F000000,x7F000000940,56165
  OMX_AUDIO_MIDIPlayBackStateMax 941,56284
  OMX_AUDIO_MIDIPlayBackStateMax = 0x7FFFFFFFx7FFFFFFF941,56284
} OMX_AUDIO_MIDIPLAYBACKSTATETYPE;942,56330
typedef struct OMX_AUDIO_CONFIG_MIDISTATUSTYPE 948,56405
    OMX_U32 nSize;949,56454
    OMX_VERSIONTYPE nVersion;950,56525
    OMX_U32 nPortIndex;951,56603
    OMX_U16 nNumTracks;952,56679
    OMX_U32 nDuration;955,56934
    OMX_U32 nPosition;958,57203
    OMX_BOOL bVibra;960,57348
    OMX_U32 nNumMetaEvents;962,57536
    OMX_U32 nNumActiveVoices;965,57809
    OMX_AUDIO_MIDIPLAYBACKSTATETYPE eMIDIPlayBackState;968,58075
} OMX_AUDIO_CONFIG_MIDISTATUSTYPE;969,58189
typedef struct OMX_AUDIO_CONFIG_MIDIMETAEVENTTYPE{OMX_AUDIO_CONFIG_MIDIMETAEVENTTYPE981,58772
    OMX_U32 nSize;982,58824
    OMX_VERSIONTYPE nVersion;983,58894
    OMX_U32 nPortIndex;984,58971
    OMX_U32 nIndex;985,59046
    OMX_U8 nMetaEventType;986,59105
    OMX_U32 nMetaEventSize;987,59182
    OMX_U32 nTrack;988,59253
    OMX_U32 nPosition;989,59323
} OMX_AUDIO_CONFIG_MIDIMETAEVENTTYPE;990,59404
typedef struct OMX_AUDIO_CONFIG_MIDIMETAEVENTDATATYPE{OMX_AUDIO_CONFIG_MIDIMETAEVENTDATATYPE996,59525
    OMX_U32 nSize;997,59581
    OMX_VERSIONTYPE nVersion;998,59651
    OMX_U32 nPortIndex;999,59728
    OMX_U32 nIndex;1000,59803
    OMX_U32 nMetaEventSize;1001,59862
    OMX_U8 nData[nData1002,59933
} OMX_AUDIO_CONFIG__MIDIMETAEVENTDATATYPE;1004,60089
typedef struct OMX_AUDIO_CONFIG_VOLUMETYPE 1008,60177
    OMX_U32 nSize;1009,60222
    OMX_VERSIONTYPE nVersion;1010,60293
    OMX_U32 nPortIndex;1011,60371
    OMX_BOOL bLinear;1016,60712
    OMX_BS32 sVolume;1018,60858
} OMX_AUDIO_CONFIG_VOLUMETYPE;1033,62047
typedef struct OMX_AUDIO_CONFIG_CHANNELVOLUMETYPE 1037,62125
    OMX_U32 nSize;1038,62177
    OMX_VERSIONTYPE nVersion;1039,62248
    OMX_U32 nPortIndex;1040,62326
    OMX_U32 nChannel;1045,62667
    OMX_BOOL bLinear;1048,62870
    OMX_BS32 sVolume;1050,63016
    OMX_BOOL bIsMIDI;1066,64246
} OMX_AUDIO_CONFIG_CHANNELVOLUMETYPE;1068,64382
typedef struct OMX_AUDIO_CONFIG_BALANCETYPE 1072,64451
    OMX_U32 nSize;1073,64497
    OMX_VERSIONTYPE nVersion;1074,64568
    OMX_U32 nPortIndex;1075,64646
    OMX_S32 nBalance;1080,64989
} OMX_AUDIO_CONFIG_BALANCETYPE;1083,65192
typedef struct OMX_AUDIO_CONFIG_MUTETYPE 1087,65249
    OMX_U32 nSize;1088,65292
    OMX_VERSIONTYPE nVersion;1089,65363
    OMX_U32 nPortIndex;1090,65441
    OMX_BOOL bMute;1095,65778
} OMX_AUDIO_CONFIG_MUTETYPE;1096,65845
typedef struct OMX_AUDIO_CONFIG_CHANNELMUTETYPE 1100,65902
    OMX_U32 nSize;1101,65952
    OMX_VERSIONTYPE nVersion;1102,66023
    OMX_U32 nPortIndex;1103,66101
    OMX_U32 nChannel;1104,66177
    OMX_BOOL bMute;1107,66378
    OMX_BOOL bIsMIDI;1108,66448
} OMX_AUDIO_CONFIG_CHANNELMUTETYPE;1110,66585
typedef struct OMX_AUDIO_CONFIG_LOUDNESSTYPE 1118,66820
    OMX_U32 nSize;1119,66867
    OMX_VERSIONTYPE nVersion;1120,66937
    OMX_U32 nPortIndex;1121,67014
    OMX_BOOL bLoudness;1122,67089
} OMX_AUDIO_CONFIG_LOUDNESSTYPE;1123,67156
typedef struct OMX_AUDIO_CONFIG_BASSTYPE 1128,67258
    OMX_U32 nSize;1129,67301
    OMX_VERSIONTYPE nVersion;1130,67371
    OMX_U32 nPortIndex;1131,67448
    OMX_BOOL bEnable;1132,67523
    OMX_S32 nBass;1133,67594
} OMX_AUDIO_CONFIG_BASSTYPE;1136,67807
typedef struct OMX_AUDIO_CONFIG_TREBLETYPE 1141,67914
    OMX_U32 nSize;1142,67959
    OMX_VERSIONTYPE nVersion;1143,68029
    OMX_U32 nPortIndex;1144,68106
    OMX_BOOL bEnable;1145,68181
    OMX_S32  nTreble;1146,68254
} OMX_AUDIO_CONFIG_TREBLETYPE;1149,68471
typedef struct OMX_AUDIO_CONFIG_EQUALIZERTYPE 1158,68774
    OMX_U32 nSize;1159,68822
    OMX_VERSIONTYPE nVersion;1160,68892
    OMX_U32 nPortIndex;1161,68969
    OMX_BOOL bEnable;1162,69044
    OMX_BU32 sBandIndex;1163,69112
    OMX_BU32 sCenterFreq;1165,69281
    OMX_BS32 sBandLevel;1169,69562
} OMX_AUDIO_CONFIG_EQUALIZERTYPE;1170,69625
typedef enum OMX_AUDIO_STEREOWIDENINGTYPE 1176,69717
    OMX_AUDIO_StereoWideningHeadphones,1177,69761
    OMX_AUDIO_StereoWideningLoudspeakers,1178,69845
    OMX_AUDIO_StereoWideningKhronosExtensions 1179,69944
    OMX_AUDIO_StereoWideningKhronosExtensions = 0x6F000000,x6F0000001179,69944
    OMX_AUDIO_StereoWideningVendorStartUnused 1180,70073
    OMX_AUDIO_StereoWideningVendorStartUnused = 0x7F000000,x7F0000001180,70073
    OMX_AUDIO_StereoWideningMax 1181,70191
    OMX_AUDIO_StereoWideningMax = 0x7FFFFFFFx7FFFFFFF1181,70191
} OMX_AUDIO_STEREOWIDENINGTYPE;1182,70236
typedef struct OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE 1190,70483
    OMX_U32 nSize;1191,70536
    OMX_VERSIONTYPE nVersion;1192,70606
    OMX_U32 nPortIndex;1193,70683
    OMX_BOOL bEnable;1194,70758
    OMX_AUDIO_STEREOWIDENINGTYPE eWideningType;1195,70840
    OMX_U32  nStereoWidening;1196,70927
} OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE;1198,71077
typedef struct OMX_AUDIO_CONFIG_CHORUSTYPE 1209,71562
    OMX_U32 nSize;1210,71607
    OMX_VERSIONTYPE nVersion;1211,71677
    OMX_U32 nPortIndex;1212,71754
    OMX_BOOL bEnable;1213,71829
    OMX_BU32 sDelay;1214,71894
    OMX_BU32 sModulationRate;1215,71963
    OMX_U32 nModulationDepth;1216,72035
    OMX_BU32 nFeedback;1218,72172
} OMX_AUDIO_CONFIG_CHORUSTYPE;1219,72262
typedef struct OMX_AUDIO_CONFIG_REVERBERATIONTYPE 1228,72639
    OMX_U32 nSize;1229,72691
    OMX_VERSIONTYPE nVersion;1230,72764
    OMX_U32 nPortIndex;1231,72844
    OMX_BOOL bEnable;1232,72922
    OMX_BS32 sRoomLevel;1233,73005
    OMX_BS32 sRoomHighFreqLevel;1236,73235
    OMX_BS32 sReflectionsLevel;1239,73445
    OMX_BU32 sReflectionsDelay;1241,73602
    OMX_BS32 sReverbLevel;1243,73764
    OMX_BU32 sReverbDelay;1245,73920
    OMX_BU32 sDecayTime;1248,74153
    OMX_BU32 nDecayHighFreqRatio;1250,74300
    OMX_U32 nDensity;1252,74466
    OMX_U32 nDiffusion;1254,74620
    OMX_BU32 sReferenceHighFreq;1256,74773
} OMX_AUDIO_CONFIG_REVERBERATIONTYPE;1260,75017
typedef enum OMX_AUDIO_ECHOCANTYPE 1266,75146
   OMX_AUDIO_EchoCanOff 1267,75183
   OMX_AUDIO_EchoCanNormal,1268,75253
   OMX_AUDIO_EchoCanHFree,1270,75396
   OMX_AUDIO_EchoCanCarKit,1272,75527
   OMX_AUDIO_EchoCanKhronosExtensions 1274,75658
   OMX_AUDIO_EchoCanKhronosExtensions = 0x6F000000,x6F0000001274,75658
   OMX_AUDIO_EchoCanVendorStartUnused 1275,75779
   OMX_AUDIO_EchoCanVendorStartUnused = 0x7F000000,x7F0000001275,75779
   OMX_AUDIO_EchoCanMax 1276,75889
   OMX_AUDIO_EchoCanMax = 0x7FFFFFFFx7FFFFFFF1276,75889
} OMX_AUDIO_ECHOCANTYPE;1277,75926
typedef struct OMX_AUDIO_CONFIG_ECHOCANCELATIONTYPE 1284,76071
    OMX_U32 nSize;1285,76125
    OMX_VERSIONTYPE nVersion;1286,76195
    OMX_U32 nPortIndex;1287,76272
    OMX_AUDIO_ECHOCANTYPE eEchoCancelation;1288,76347
} OMX_AUDIO_CONFIG_ECHOCANCELATIONTYPE;1289,76425
typedef struct OMX_AUDIO_CONFIG_NOISEREDUCTIONTYPE 1296,76574
    OMX_U32 nSize;1297,76627
    OMX_VERSIONTYPE nVersion;1298,76697
    OMX_U32 nPortIndex;1299,76774
    OMX_BOOL bNoiseReduction;1300,76849
} OMX_AUDIO_CONFIG_NOISEREDUCTIONTYPE;1301,76923

access/screen/screenshooter-protocol.c,288
static const struct wl_interface *types[types10,219
static const struct wl_message screenshooter_requests[screenshooter_requests15,315
static const struct wl_message screenshooter_events[screenshooter_events19,410
WL_EXPORT const struct wl_interface screenshooter_interface 23,500

mux/avi.c,2367
#define SOUT_CFG_PREFIX 47,1803
#define CFG_ARTIST_TEXT 49,1840
#define CFG_DATE_TEXT 50,1881
#define CFG_GENRE_TEXT 51,1920
#define CFG_COPYRIGHT_TEXT 52,1960
#define CFG_COMMENT_TEXT 53,2004
#define CFG_NAME_TEXT 54,2046
#define CFG_SUBJECT_TEXT 55,2085
#define CFG_ENCODER_TEXT 56,2127
#define CFG_KEYWORDS_TEXT 57,2169
vlc_module_begin 59,2213
typedef struct avi_stream_s90,3664
    int i_cat;92,3694
    char fcc[fcc94,3710
    mtime_t i_duration;96,3728
    int     i_frames;98,3769
    int64_t i_totalsize;99,3819
    float   f_fps;101,3869
    int     i_bitrate;102,3888
    VLC_BITMAPINFOHEADER    *p_bih;p_bih104,3912
    WAVEFORMATEX            *p_wf;p_wf105,3948
} avi_stream_t;107,3984
typedef struct avi_idx1_entry_s109,4001
    char     fcc[fcc111,4035
    uint32_t i_flags;112,4056
    uint32_t i_pos;113,4078
    uint32_t i_length;114,4098
} avi_idx1_entry_t;116,4122
typedef struct avi_idx1_s118,4143
    unsigned int i_entry_count;120,4171
    unsigned int i_entry_max;121,4203
    avi_idx1_entry_t *entry;entry123,4234
} avi_idx1_t;124,4263
struct sout_mux_sys_t126,4278
    bool b_write_header;128,4302
    int i_streams;130,4328
    int i_stream_video;131,4347
    off_t i_movi_size;133,4372
    avi_stream_t stream[stream134,4395
    avi_idx1_t idx1;136,4426
    off_t i_idx1_size;137,4447
#define HDR_BASE_SIZE 141,4475
#define AVIF_HASINDEX 144,4566
#define AVIF_ISINTERLEAVED 145,4631
#define AVIF_TRUSTCKTYPE 146,4670
#define AVIIF_KEYFRAME 149,4767
static void SetFCC(155,4950
static int Open(163,5192
static void Close(201,6223
static int Control(269,8312
static int AddStream(297,8983
static void DelStream(479,15843
static int Mux 486,15983
#define AVI_BOX_ENTER(608,20189
#define AVI_BOX_ENTER_LIST(614,20356
#define AVI_BOX_EXIT(618,20455
static int avi_HeaderAdd_avih(623,20654
static int avi_HeaderAdd_strh(694,22911
static int avi_HeaderAdd_strf(761,25583
static int avi_HeaderAdd_strl(805,27418
static int avi_HeaderAdd_meta(815,27634
static int avi_HeaderAdd_INFO(826,27952
#define APPLY_META(830,28033
#undef APPLY_META851,28647
static block_t *avi_HeaderCreateRIFF(avi_HeaderCreateRIFF856,28692
        int i_riffsize;865,28911
        int i_hdrllistsize;866,28935
        int i_hdrldatastart;867,28963
static block_t * avi_HeaderCreateidx1(922,30539

demux/adaptive/playlist/Templates.hpp,797
#define TEMPLATES_HPP21,1071
namespace adaptive23,1094
    namespace playlistadaptive::playlist25,1115
        template<class T> class Initializableadaptive::playlist::Initializable28,1145
            Initializable(adaptive::playlist::Initializable::Initializable31,1217
            ~Initializable(adaptive::playlist::Initializable::~Initializable35,1322
            Property<T *> initialisationSegment;adaptive::playlist::Initializable::initialisationSegment39,1431
        template<class T> class Indexableadaptive::playlist::Indexable42,1492
            Indexable(adaptive::playlist::Indexable::Indexable45,1560
            ~Indexable(adaptive::playlist::Indexable::~Indexable49,1652
            Property<T *> indexSegment;adaptive::playlist::Indexable::indexSegment53,1748

demux/wav.c,801
vlc_module_begin 46,1805
struct demux_sys_t60,2298
    es_format_t     fmt;62,2319
    es_out_id_t     *p_es;p_es63,2344
    int64_t         i_data_pos;65,2372
    int64_t         i_data_size;66,2404
    unsigned int    i_frame_size;68,2438
    int             i_frame_samples;69,2472
    date_t          pts;71,2510
    uint32_t i_channel_mask;73,2536
    uint8_t i_chans_to_reorder;74,2565
    uint8_t pi_chan_table[pi_chan_table75,2644
static int Open(89,3358
static int Demux(440,16424
static void Close 486,17861
static int Control(497,18189
static int ChunkFind(514,18842
static int FrameInfo_PCM(549,19741
static int FrameInfo_MS_ADPCM(571,20337
static int FrameInfo_IMA_ADPCM(584,20728
static int FrameInfo_Creative_ADPCM(597,21117
static int FrameInfo_MSGSM(610,21500

demux/mpeg/ts_psip_dvbpsi_fixes.c,100
dvbpsi_atsc_stt_t * DVBPlague_STT_Decode(39,1439
dvbpsi_atsc_ett_t * DVBPlague_ETT_Decode(58,2048

stream_out/setid.c,778
#define ID_TEXT 41,1637
#define ID_LONGTEXT 42,1680
#define NEWID_TEXT 45,1772
#define NEWID_LONGTEXT 46,1807
#define LANG_TEXT 49,1906
#define LANG_LONGTEXT 50,1939
#define SOUT_CFG_PREFIX_ID 57,2173
#define SOUT_CFG_PREFIX_LANG 58,2216
vlc_module_begin(60,2262
static const char *ppsz_sout_options_lang[ppsz_sout_options_lang94,3506
struct sout_stream_sys_t103,3905
    int              i_id;105,3932
    int              i_new_id;106,3959
    char             *psz_language;psz_language107,3990
static int OpenCommon(113,4198
static int OpenId(136,4690
static int OpenLang(156,5270
static void Close(179,6026
static sout_stream_id_sys_t * AddId(188,6254
static sout_stream_id_sys_t * AddLang(206,6725
static void Del(225,7298
static int Send(230,7426

demux/avformat/mux.c,692
static const char *const ppsz_mux_options[ppsz_mux_options46,1646
struct sout_mux_sys_t53,1913
    AVIOContext     *io;io55,1937
    int             io_buffer_size;56,1962
    uint8_t        *io_buffer;io_buffer57,1998
    AVFormatContext *oc;oc59,2030
    bool     b_write_header;61,2056
    bool     b_write_keyframe;62,2085
    bool     b_error;63,2116
    bool     b_header_done;65,2189
int OpenMux(87,3105
void CloseMux(164,5500
static int AddStream(184,6070
static void DelStream(319,10699
static int MuxBlock(325,10838
int IOWriteTyped(377,12609
static int Mux(393,13206
static int Control(447,14825
static int IOWrite(478,15650
static int64_t IOSeek(508,16438

codec/telx.c,1154
#   define dbg(42,1680
#   define dbg(44,1716
#define OVERRIDE_PAGE_TEXT 54,2056
#define OVERRIDE_PAGE_LONGTEXT 55,2103
#define IGNORE_SUB_FLAG_TEXT 60,2351
#define IGNORE_SUB_FLAG_LONGTEXT 61,2407
#define FRENCH_WORKAROUND_TEXT 64,2527
#define FRENCH_WORKAROUND_LONGTEXT 65,2586
vlc_module_begin 70,2845
struct decoder_sys_t91,3644
  int         i_align;93,3667
  bool        b_is_subtitle[b_is_subtitle94,3690
  char        ppsz_lines[ppsz_lines95,3722
  char        psz_prev_text[psz_prev_text96,3757
  mtime_t     prev_pts;97,3791
  int         i_page[i_page98,3815
  bool        b_erase[b_erase99,3840
  const uint16_t *  pi_active_national_set[pi_active_national_set100,3866
  int         i_wanted_page,101,3913
  int         i_wanted_page, i_wanted_magazine;101,3913
  bool        b_ignore_sub_flag;102,3961
static const uint16_t ppi_national_subsets[ppi_national_subsets120,4544
static int Open(170,6886
static void Close(244,9382
static uint8_t bytereverse(255,9623
static int hamming_8_4(263,9825
static void to_utf8(306,10637
static void decode_string(331,11120
static subpicture_t *Decode(Decode431,14060

codec/spudec/spudec.c,317
#define DVDSUBTRANS_DISABLE_TEXT 45,1844
#define DVDSUBTRANS_DISABLE_LONGTEXT 46,1917
vlc_module_begin 49,2062
static int PacketizerOpen(108,4290
static void Close(127,4832
static subpicture_t *Decode(Decode143,5241
static block_t *Packetize(Packetize176,6147
static block_t *Reassemble(Reassemble201,6779

demux/adaptive/http/Chunk.h,1619
#define CHUNK_H_26,1160
typedef struct block_t block_t;35,1314
        class AbstractChunkSource45,1498
                AbstractChunkSource(48,1562
                virtual ~AbstractChunkSource(49,1601
                virtual bool        hasMoreData 52,1775
        class AbstractChunk61,2112
                virtual ~AbstractChunk(64,2170
                size_t              getBytesRead 66,2213
        class HTTPChunkSource 83,2874
                HTTPChunkSource(86,2963
                virtual ~HTTPChunkSource(88,3093
                virtual block_t *   readBlock 90,3138
                virtual block_t *   read 91,3205
                virtual bool        hasMoreData 92,3278
                ConnectionParams    params;HTTPChunkSource::params107,3852
        class HTTPChunkBufferedSource 110,3908
                block_t            *p_head;HTTPChunkBufferedSource::p_head128,4661
                block_t           **pp_tail;HTTPChunkBufferedSource::pp_tail129,4729
                size_t              buffered;HTTPChunkBufferedSource::buffered130,4774
                bool                done;HTTPChunkBufferedSource::done131,4842
                bool                eof;HTTPChunkBufferedSource::eof132,4884
                mtime_t             downloadstart;HTTPChunkBufferedSource::downloadstart133,4925
                vlc_mutex_t         lock;HTTPChunkBufferedSource::lock134,4976
                vlc_cond_t          avail;HTTPChunkBufferedSource::avail135,5018
        class HTTPChunk 138,5073
                virtual void        onDownload HTTPChunk::onDownload145,5307

demux/adaptive/logic/PredictiveAdaptationLogic.cpp,511
PredictiveStats::PredictiveStats(37,1351
bool PredictiveStats::starting(46,1517
PredictiveAdaptationLogic::PredictiveAdaptationLogic(51,1617
PredictiveAdaptationLogic::~PredictiveAdaptationLogic(59,1793
BaseRepresentation *PredictiveAdaptationLogic::getNextRepresentation(PredictiveAdaptationLogic::getNextRepresentation64,1884
void PredictiveAdaptationLogic::updateDownloadRate(150,4749
unsigned PredictiveAdaptationLogic::getAvailableBw(162,5145
void PredictiveAdaptationLogic::trackerEvent(171,5391

mux/mp4/mp4.c,2900
#define FASTSTART_TEXT 50,1900
#define FASTSTART_LONGTEXT 51,1957
#define SOUT_CFG_PREFIX 61,2323
vlc_module_begin 63,2360
typedef struct mp4_fragentry_t mp4_fragentry_t;104,3704
struct mp4_fragentry_t106,3753
    block_t  *p_block;p_block108,3778
    uint32_t  i_run;109,3801
    mp4_fragentry_t *p_next;p_next110,3822
typedef struct mp4_fragindex_t113,3855
    uint64_t i_moofoffset;115,3888
    mtime_t  i_time;116,3915
    uint8_t  i_traf;117,3936
    uint8_t  i_trun;118,3957
    uint32_t i_sample;119,3978
} mp4_fragindex_t;120,4001
typedef struct mp4_fragqueue_t122,4021
    mp4_fragentry_t *p_first;p_first124,4054
    mp4_fragentry_t *p_last;p_last125,4084
} mp4_fragqueue_t;126,4113
    mp4mux_trackinfo_t mux;130,4150
    int64_t      i_length_neg;133,4195
    int64_t      i_first_dts;136,4269
    int64_t      i_last_dts;137,4299
    int64_t      i_last_pts;138,4328
    bool         b_hasiframes;141,4380
    uint32_t         i_current_run;143,4412
    mp4_fragentry_t *p_held_entry;p_held_entry144,4448
    mp4_fragqueue_t  read;145,4483
    mp4_fragqueue_t  towrite;146,4510
    mtime_t          i_last_iframe_time;147,4540
    mtime_t          i_written_duration;148,4581
    mp4_fragindex_t *p_indexentries;p_indexentries149,4622
    uint32_t         i_indexentriesmax;150,4659
    uint32_t         i_indexentries;151,4699
} mp4_stream_t;152,4736
struct sout_mux_sys_t154,4753
    bool b_mov;156,4777
    bool b_3gp;157,4793
    bool b_64_ext;158,4809
    bool b_fast_start;159,4828
    uint64_t i_mdat_pos;161,4852
    uint64_t i_pos;162,4877
    mtime_t  i_read_duration;163,4897
    mtime_t  i_start_dts;164,4927
    unsigned int   i_nb_streams;166,4954
    mp4_stream_t **pp_streams;pp_streams167,4987
    bool           b_fragmented;170,5037
    bool           b_header_sent;171,5070
    mtime_t        i_written_duration;172,5104
    uint32_t       i_mfhd_sequence;173,5143
static int Open(186,5611
static void Close(260,7724
static int Control(367,11724
static int AddStream(393,12424
static void DelStream(480,15331
static void DebugEdits(497,15853
static bool CreateCurrentEdit(509,16308
static block_t * BlockDequeue(554,17809
static int Mux(581,18544
static block_t *ConvertSUBT(ConvertSUBT757,25805
static void box_send(772,26244
#define FRAGMENT_LENGTH 783,26589
#define ENQUEUE_ENTRY(785,26634
#define DEQUEUE_ENTRY(794,26870
static void AddKeyframeEntry(804,27159
static bo_t *GetMoofBox(GetMoofBox842,28729
static void WriteFragmentMDAT(1058,36304
static bo_t *GetMfraBox(GetMfraBox1095,37583
static bo_t *BuildMoov(BuildMoov1134,39060
static void FlushHeader(1154,39827
static int OpenFrag(1175,40344
static void WriteFragments(1209,41219
static void LengthLocalFixup(1277,43383
static void CleanupFrag(1304,44596
static void CloseFrag(1333,45554
static int MuxFrag(1378,46911

access/http/resource.c,603
vlc_http_res_req(40,1400
struct vlc_http_msg *vlc_http_res_open(vlc_http_res_open84,2624
int vlc_http_res_get_status(131,4208
static void vlc_http_res_deinit(148,4584
void vlc_http_res_destroy(162,4894
static char *vlc_http_authority(vlc_http_authority168,5001
int vlc_http_res_init(180,5391
char *vlc_http_res_get_redirect(vlc_http_res_get_redirect248,7245
char *vlc_http_res_get_type(vlc_http_res_get_type308,9128
struct block_t *vlc_http_res_read(vlc_http_res_read318,9428
int vlc_http_res_set_login(327,9697
char *vlc_http_res_get_basic_realm(vlc_http_res_get_basic_realm361,10457

demux/mpeg/ts_psip_dvbpsi_fixes.h,43
#define VLC_TS_PSIP_DVBPSI_FIXES_H20,1051

codec/spudec/spudec.h,633
struct decoder_sys_t26,1218
    bool b_packetizer;28,1241
    bool b_disabletrans;29,1264
    mtime_t i_pts;31,1290
    unsigned int i_spu_size;32,1309
    unsigned int i_rle_size;33,1338
    unsigned int i_spu;34,1367
    block_t *p_block;p_block36,1392
    uint8_t buffer[buffer39,1448
#define SPU_CHUNK_SIZE 45,1681
#define SPU_CMD_FORCE_DISPLAY 50,1899
#define SPU_CMD_START_DISPLAY 51,1940
#define SPU_CMD_STOP_DISPLAY 52,1981
#define SPU_CMD_SET_PALETTE 53,2022
#define SPU_CMD_SET_ALPHACHANNEL 54,2063
#define SPU_CMD_SET_COORDINATES 55,2104
#define SPU_CMD_SET_OFFSETS 56,2145
#define SPU_CMD_END 57,2186

access/eyetv.m,331
#define MTU 46,1685
#define CHANNEL_TEXT 57,2044
#define CHANNEL_LONGTEXT 58,2086
vlc_module_begin 62,2227
struct access_sys_t79,2771
    int eyetvSock;81,2793
static void selectChannel(87,2910
static int Open(145,5936
static void Close(228,8895
static block_t *BlockRead(BlockRead252,9856
static int Control(275,10465

access/http/resource.h,715
#define VLC_HTTP_RESOURCE_H 22,1094
struct vlc_http_resource_cbs35,1303
    int (*request_format)request_format37,1334
    int (*response_validate)response_validate39,1452
struct vlc_http_resource43,1586
    const struct vlc_http_resource_cbs *cbs;cbs45,1613
    struct vlc_http_msg *response;response46,1658
    struct vlc_http_mgr *manager;manager47,1693
    bool secure;48,1727
    bool negotiate;49,1744
    bool failure;50,1764
    char *host;host51,1782
    unsigned port;52,1798
    char *authority;authority53,1817
    char *path;path54,1838
    char *username;username55,1854
    char *password;password56,1874
    char *agent;agent57,1894
    char *referrer;referrer58,1911

access/zip/unzip/ioapi.c,400
#define SEEK_CUR 21,389
#define SEEK_END 25,436
#define SEEK_SET 29,483
voidpf ZCALLBACK fopen_file_func 68,1132
uLong ZCALLBACK fread_file_func 91,1705
uLong ZCALLBACK fwrite_file_func 104,1948
long ZCALLBACK ftell_file_func 116,2198
long ZCALLBACK fseek_file_func 126,2369
int ZCALLBACK fclose_file_func 150,2916
int ZCALLBACK ferror_file_func 160,3087
void fill_fopen_filefunc 170,3258

control/dummy.c,122
#define VLC_MODULE_LICENSE 32,1362
#define QUIET_TEXT 38,1502
#define QUIET_LONGTEXT 39,1567
vlc_module_begin 51,1937

demux/playlist/qtl.c,600
typedef enum { FULLSCREEN_NORMAL,62,2065
               FULLSCREEN_DOUBLE,63,2099
               FULLSCREEN_HALF,64,2133
               FULLSCREEN_CURRENT,65,2165
               FULLSCREEN_FULL 66,2200
               FULLSCREEN_FULL } qtl_fullscreen_t;66,2200
const char* ppsz_fullscreen[ppsz_fullscreen67,2251
typedef enum { LOOP_TRUE,68,2334
               LOOP_FALSE,69,2360
               LOOP_PALINDROME 70,2387
               LOOP_PALINDROME } qtl_loop_t;70,2387
const char* ppsz_loop[ppsz_loop71,2432
int Import_QTL(81,2906
static int Demux(96,3245
#define SADD_INFO(240,8419

packetizer/a52.c,445
vlc_module_begin 46,1766
struct decoder_sys_t54,1999
    int i_state;59,2061
    block_bytestream_t bytestream;61,2079
    date_t  end_date;66,2155
    bool    b_date_set;67,2177
    mtime_t i_pts;69,2202
    vlc_a52_header_t frame;71,2222
static void PacketizeFlush(74,2254
static block_t *GetOutBuffer(GetOutBuffer83,2469
static block_t *PacketizeBlock(PacketizeBlock121,3899
static void Close(284,9395
static int Open(294,9598

access/idummy.c,298
vlc_module_begin 41,1626
static int DemuxHold(57,1986
struct demux_sys_t64,2098
    mtime_t end;66,2119
    mtime_t length;67,2136
static int DemuxPause(70,2160
static int ControlPause(82,2369
static int OpenDemux(142,3965
static void CloseDemux(208,5866
static int DemuxControl(215,5988

demux/mkv/util.hpp,2205
struct real_audio_private38,1697
    uint32_t fourcc;real_audio_private::fourcc40,1725
    uint16_t version;real_audio_private::version41,1746
    uint16_t unknown1;real_audio_private::unknown142,1768
    uint8_t  unknown2[real_audio_private::unknown243,1791
    uint16_t unknown3;real_audio_private::unknown344,1818
    uint16_t flavor;real_audio_private::flavor45,1841
    uint32_t coded_frame_size;real_audio_private::coded_frame_size46,1862
    uint32_t unknown4[real_audio_private::unknown447,1893
    uint16_t sub_packet_h;real_audio_private::sub_packet_h48,1919
    uint16_t frame_size;real_audio_private::frame_size49,1946
    uint16_t sub_packet_size;real_audio_private::sub_packet_size50,1971
    uint16_t unknown5;real_audio_private::unknown551,2001
struct real_audio_private_v454,2028
    real_audio_private header;real_audio_private_v4::header56,2059
    uint16_t sample_rate;real_audio_private_v4::sample_rate57,2090
    uint16_t unknown;real_audio_private_v4::unknown58,2116
    uint16_t sample_size;real_audio_private_v4::sample_size59,2138
    uint16_t channels;real_audio_private_v4::channels60,2164
struct real_audio_private_v564,2192
    real_audio_private header;real_audio_private_v5::header66,2223
    uint32_t unknown1;real_audio_private_v5::unknown167,2254
    uint16_t unknown2;real_audio_private_v5::unknown268,2277
    uint16_t sample_rate;real_audio_private_v5::sample_rate69,2300
    uint16_t unknown3;real_audio_private_v5::unknown370,2326
    uint16_t sample_size;real_audio_private_v5::sample_size71,2349
    uint16_t channels;real_audio_private_v5::channels72,2375
class Cook_PrivateTrackData 75,2402
    Cook_PrivateTrackData(Cook_PrivateTrackData::Cook_PrivateTrackData78,2466
    uint16_t i_sub_packet_h;Cook_PrivateTrackData::i_sub_packet_h84,2717
    uint16_t i_frame_size;Cook_PrivateTrackData::i_frame_size85,2746
    uint16_t i_subpacket_size;Cook_PrivateTrackData::i_subpacket_size86,2773
    block_t  **p_subpackets;Cook_PrivateTrackData::p_subpackets87,2804
    size_t   i_subpackets;Cook_PrivateTrackData::i_subpackets88,2833
    size_t   i_subpacket;Cook_PrivateTrackData::i_subpacket89,2860

arm_neon/yuv_rgb.c,184
vlc_module_begin 34,1341
static void I420_RV16 99,3472
static void YV12_RGBA 106,3814
static void NV21_RGBA 113,4155
static void NV12_RGBA 120,4496
VIDEO_FILTER_WRAPPER 127,4837

access/zip/unzip/ioapi.h,1451
#define _ZLIBIOAPI_H10,213
#define ZLIB_FILEFUNC_SEEK_CUR 13,236
#define ZLIB_FILEFUNC_SEEK_END 14,271
#define ZLIB_FILEFUNC_SEEK_SET 15,306
#define ZLIB_FILEFUNC_MODE_READ 17,342
#define ZLIB_FILEFUNC_MODE_WRITE 18,383
#define ZLIB_FILEFUNC_MODE_READWRITEFILTER 19,424
#define ZLIB_FILEFUNC_MODE_EXISTING 21,472
#define ZLIB_FILEFUNC_MODE_CREATE 22,512
#define ZCALLBACK 28,692
#define ZCALLBACK30,725
typedef voidpf (ZCALLBACK *open_file_func)open_file_func38,798
typedef uLong  (ZCALLBACK *read_file_func)read_file_func39,890
typedef uLong  (ZCALLBACK *write_file_func)write_file_func40,988
typedef long   (ZCALLBACK *tell_file_func)tell_file_func41,1093
typedef long   (ZCALLBACK *seek_file_func)seek_file_func42,1168
typedef int    (ZCALLBACK *close_file_func)close_file_func43,1269
typedef int    (ZCALLBACK *testerror_file_func)testerror_file_func44,1345
typedef struct zlib_filefunc_def_s46,1426
    open_file_func      zopen_file;48,1463
    read_file_func      zread_file;49,1499
    write_file_func     zwrite_file;50,1535
    tell_file_func      ztell_file;51,1572
    seek_file_func      zseek_file;52,1608
    close_file_func     zclose_file;53,1644
    testerror_file_func zerror_file;54,1681
    voidpf              opaque;55,1718
} zlib_filefunc_def;56,1750
#define ZREAD(62,1841
#define ZWRITE(63,1953
#define ZTELL(64,2067
#define ZSEEK(65,2161
#define ZCLOSE(66,2273
#define ZERROR(67,2369

packetizer/a52.h,794
#define VLC_A52_H_29,1339
#define VLC_A52_HEADER_SIZE 36,1450
    bool b_eac3;43,1535
    unsigned int i_channels;45,1553
    unsigned int i_channels_conf;46,1582
    unsigned int i_rate;47,1616
    unsigned int i_bitrate;48,1641
    unsigned int i_size;50,1670
    unsigned int i_samples;51,1695
                EAC3_STRMTYP_INDEPENDENT 56,1772
                EAC3_STRMTYP_DEPENDENT 57,1821
                EAC3_STRMTYP_AC3_CONVERT 58,1870
                EAC3_STRMTYP_RESERVED,59,1919
            uint8_t i_substreamid;61,1981
        } eac3;62,2016
    uint8_t i_blocks_per_sync_frame;64,2039
} vlc_a52_header_t;65,2076
static inline int vlc_a52_header_ParseAc3(72,2151
static inline int vlc_a52_header_ParseEac3(180,5536
static inline int vlc_a52_header_Parse(235,7556

codec/omxil/utils.c,3045
void InitOmxEventQueue(45,1803
void DeinitOmxEventQueue(52,1966
OMX_ERRORTYPE PostOmxEvent(58,2092
OMX_ERRORTYPE WaitForOmxEvent(80,2707
OMX_ERRORTYPE WaitForSpecificOmxEvent(113,3571
void PrintOmxEvent(133,4103
void ArchitectureSpecificCopyHooks(169,5363
void ArchitectureSpecificCopyHooksDestroy(190,6093
void CopyOmxPicture(206,6648
void CopyVlcPicture(254,8735
bool OMXCodec_IsBlacklisted(284,9783
struct str2quirks 344,11995
    const char *psz_name;psz_name345,12015
    int i_quirks;346,12041
int OMXCodec_GetQuirks(349,12063
const char *StateToString(StateToString430,14771
const char *CommandToString(CommandToString443,15200
const char *EventToString(EventToString456,15639
const char *ErrorToString(ErrorToString471,16201
    vlc_fourcc_t i_fourcc;509,18039
    OMX_VIDEO_CODINGTYPE i_codec;510,18066
    const char *psz_role;psz_role511,18100
} video_format_table[video_format_table513,18127
    vlc_fourcc_t i_fourcc;537,19396
    OMX_AUDIO_CODINGTYPE i_codec;538,19423
    const char *psz_role;psz_role539,19457
} audio_format_table[audio_format_table541,19484
    vlc_fourcc_t i_fourcc;553,19897
    OMX_VIDEO_CODINGTYPE i_codec;554,19924
    const char *psz_role;psz_role555,19958
} video_enc_format_table[video_enc_format_table557,19985
    vlc_fourcc_t i_fourcc;576,20898
    OMX_AUDIO_CODINGTYPE i_codec;577,20925
    const char *psz_role;psz_role578,20959
} audio_enc_format_table[audio_enc_format_table580,20986
    vlc_fourcc_t i_fourcc;591,21335
    OMX_COLOR_FORMATTYPE i_codec;592,21362
    unsigned int i_size_mul;593,21396
    unsigned int i_line_mul;594,21425
    unsigned int i_line_chroma_div;595,21454
} chroma_format_table[chroma_format_table597,21491
int GetOmxVideoFormat(613,22289
int GetVlcVideoFormat(629,22846
static const char *GetOmxVideoRole(GetOmxVideoRole643,23378
static const char *GetOmxVideoEncRole(GetOmxVideoEncRole655,23689
int GetOmxAudioFormat(667,24015
int OmxToVlcAudioFormat(683,24572
static const char *GetOmxAudioRole(GetOmxAudioRole697,25106
static const char *GetOmxAudioEncRole(GetOmxAudioEncRole709,25417
const char *GetOmxRole(GetOmxRole721,25743
int GetOmxChromaFormat(731,26060
int GetVlcChromaFormat(747,26624
int GetVlcChromaSizes(761,27163
    OMX_AUDIO_CODINGTYPE encoding;788,28231
    OMX_INDEXTYPE index;789,28266
    int size;790,28291
} audio_encoding_param[audio_encoding_param791,28305
static OMX_INDEXTYPE GetAudioParamFormatIndex(821,29606
unsigned int GetAudioParamSize(831,29872
OMX_ERRORTYPE SetAudioParameters(841,30106
OMX_ERRORTYPE GetAudioParameters(970,35171
void PrintOmx(1059,38388
    OMX_VIDEO_AVCPROFILETYPE omx_profile;1171,43226
    size_t                   profile_idc;1172,43268
} omx_to_profile_idc[omx_to_profile_idc1173,43310
size_t convert_omx_to_profile_idc(1184,43766
    OMX_VIDEO_AVCLEVELTYPE omx_level;1196,44135
    size_t                 level_idc;1197,44173
} omx_to_level_idc[omx_to_level_idc1198,44211
size_t convert_omx_to_level_idc(1218,44784

logger/file.c,858
#define VLC_MODULE_LICENSE 28,1175
static const char msg_type[msg_type38,1381
    FILE *stream;stream42,1474
    const char *footer;footer43,1492
    int verbosity;44,1516
} vlc_logger_sys_t;45,1535
#define TEXT_FILENAME 47,1556
#define TEXT_HEADER 48,1592
#define TEXT_FOOTER 50,1697
static void LogText(52,1750
#define HTML_FILENAME 68,2171
#define HTML_HEADER 69,2208
#define HTML_FOOTER 81,2695
static void LogHtml(87,2836
static vlc_log_cb Open(108,3453
static void Close(183,5387
static const char *const mode_list[mode_list192,5538
static const char *const mode_list_text[mode_list_text193,5597
#define FILE_LOG_TEXT 195,5670
#define FILE_LOG_LONGTEXT 196,5710
#define LOGMODE_TEXT 198,5780
#define LOGMODE_LONGTEXT 199,5818
#define LOGVERBOSE_TEXT 201,5878
#define LOGVERBOSE_LONGTEXT 202,5918
vlc_module_begin(205,6046

demux/smooth/SmoothManager.cpp,442
SmoothManager::SmoothManager(42,1420
SmoothManager::~SmoothManager(49,1674
Manifest * SmoothManager::fetchManifest(53,1711
bool SmoothManager::updatePlaylist(94,2810
void SmoothManager::scheduleNextUpdate(99,2886
bool SmoothManager::needsUpdate(126,3643
bool SmoothManager::updatePlaylist(134,3816
bool SmoothManager::reactivateStream(161,4415
bool SmoothManager::isSmoothStreaming(168,4592
bool SmoothManager::mimeMatched(173,4706

video_filter/subsdelay.c,3866
#define SUBSDELAY_HELP 45,1711
#define MODE_TEXT 47,1763
#define MODE_LONGTEXT 48,1812
#define FACTOR_TEXT 53,2052
#define FACTOR_LONGTEXT 54,2099
#define OVERLAP_TEXT 57,2214
#define OVERLAP_LONGTEXT 58,2273
#define MIN_ALPHA_TEXT 60,2361
#define MIN_ALPHA_LONGTEXT 61,2412
#define MIN_STOPS_INTERVAL_TEXT 64,2546
#define MIN_STOPS_INTERVAL_LONGTEXT 65,2622
#define MIN_STOP_START_INTERVAL_TEXT 69,2837
#define MIN_STOP_START_INTERVAL_LONGTEXT 70,2928
#define MIN_START_STOP_INTERVAL_TEXT 74,3144
#define MIN_START_STOP_INTERVAL_LONGTEXT 75,3235
static const int pi_mode_values[pi_mode_values79,3456
static const char * const ppsz_mode_descriptions[ppsz_mode_descriptions80,3505
#define CFG_PREFIX 85,3683
#define CFG_MODE 87,3716
#define CFG_FACTOR 88,3770
#define CFG_OVERLAP 89,3826
#define CFG_MIN_ALPHA 91,3884
#define CFG_MIN_STOPS_INTERVAL 92,3943
#define CFG_MIN_STOP_START_INTERVAL 93,4002
#define CFG_MIN_START_STOP_INTERVAL 94,4066
#define SUBSDELAY_MAX_ENTRIES 98,4172
#define INT_FACTOR_BASE 101,4234
#define FLOAT_FACTOR_TO_INT_FACTOR(102,4280
#define INT_FACTOR_TO_MICROSEC(103,4354
#define INT_FACTOR_TO_RANK_FACTOR(104,4437
#define MILLISEC_TO_MICROSEC(105,4484
#define SUBSDELAY_MODE_ABSOLUTE 108,4544
#define SUBSDELAY_MODE_RELATIVE_SOURCE_DELAY 109,4593
#define SUBSDELAY_MODE_RELATIVE_SOURCE_CONTENT 110,4642
typedef subpicture_updater_sys_t subsdelay_heap_entry_t;117,4891
struct subpicture_updater_sys_t119,4949
    subpicture_t *p_subpic;p_subpic121,4983
    subpicture_t *p_source;p_source123,5033
    filter_t *p_filter;p_filter125,5084
    subsdelay_heap_entry_t *p_next;p_next127,5141
    bool b_update_stop;129,5195
    bool b_update_ephemer;131,5262
    bool b_update_position;133,5325
    bool b_check_empty;135,5396
    mtime_t i_new_stop;137,5462
    int i_last_region_x;141,5535
    int i_last_region_y;143,5561
    int i_last_region_align;145,5587
    bool b_last_region_saved;147,5617
    vlc_mutex_t lock;156,5854
    subsdelay_heap_entry_t *p_list[p_list158,5900
    subsdelay_heap_entry_t *p_head;p_head160,5990
    int i_count;162,6063
} subsdelay_heap_t;164,6103
struct filter_sys_t172,6330
    int i_mode;174,6352
    int i_factor;176,6398
    int i_overlap;178,6442
    int i_min_alpha;180,6480
    int64_t i_min_stops_interval;182,6536
    int64_t i_min_stop_start_interval;184,6571
    int64_t i_min_start_stop_interval;186,6611
    subsdelay_heap_t heap;188,6651
vlc_module_begin(273,10042
static int SubsdelayCreate(308,11573
static void SubsdelayDestroy(360,13616
static subpicture_t * SubsdelayFilter(396,14944
static int SubsdelayCallback(454,16464
static void SubsdelayHeapInit(506,18017
static void SubsdelayHeapDestroy(517,18394
static subsdelay_heap_entry_t *SubsdelayHeapPush(SubsdelayHeapPush537,19006
static void SubsdelayHeapRemove(599,20490
static void SubsdelayRebuildList(631,21067
static void SubsdelayHeapLock(649,21577
static void SubsdelayHeapUnlock(657,21876
static subsdelay_heap_entry_t * SubsdelayEntryCreate(666,22186
static void SubsdelayEntryDestroy(722,23676
static int SubsdelayHeapCountOverlap(731,24049
static void SubsdelayEntryNewStopValueUpdated(760,24868
static void SubsdelayEnforceDelayRules(772,25363
static void SubsdelayRecalculateDelays(908,29318
static int SubpicValidateWrapper(926,29994
static void SubpicUpdateWrapper(975,31700
static void SubpicDestroyWrapper(1007,32856
static void SubpicLocalUpdate(1034,33553
static bool SubpicIsEmpty(1117,35922
static subpicture_t *SubpicClone(SubpicClone1125,36279
static void SubpicDestroyClone(1156,37190
static int64_t SubsdelayEstimateDelay(1166,37617
static int SubsdelayCalculateAlpha(1206,39079
static int SubsdelayGetWordRank(1243,40086
static int SubsdelayGetTextRank(1267,40795
static bool SubsdelayIsTextEmpty(1336,42251

codec/gstreamer/gstvlcvideosink.c,821
    SIGNAL_NEW_CAPS,34,1400
    SIGNAL_NEW_BUFFER,35,1421
    LAST_SIGNAL36,1444
    PROP_0,41,1471
    PROP_ALLOCATOR,42,1483
    PROP_ID43,1503
static guint gst_vlc_video_sink_signals[gst_vlc_video_sink_signals46,1519
static GstStaticPadTemplate sink_template 48,1584
#define gst_vlc_video_sink_parent_class 70,2499
static void gst_vlc_video_sink_class_init(73,2627
static gboolean gst_vlc_video_sink_setcaps(128,5069
static void gst_vlc_video_sink_init(163,5936
static void gst_vlc_video_sink_finalize(168,6085
static GstVlcVideoPool* gst_vlc_video_sink_create_pool(178,6345
static gboolean gst_vlc_video_sink_propose_allocation(201,6986
static GstFlowReturn gst_vlc_video_sink_chain(259,8471
static void gst_vlc_video_sink_set_property(268,8700
static void gst_vlc_video_sink_get_property(302,9646

access_output/shout.c,913
#define SOUT_CFG_PREFIX 62,2433
#define NAME_TEXT 64,2472
#define NAME_LONGTEXT 65,2508
#define DESCRIPTION_TEXT 68,2637
#define DESCRIPTION_LONGTEXT 69,2687
#define MP3_TEXT 72,2830
#define MP3_LONGTEXT 73,2864
#define GENRE_TEXT 82,3376
#define GENRE_LONGTEXT 83,3419
#define URL_TEXT 85,3473
#define URL_LONGTEXT 86,3512
#define BITRATE_TEXT 92,3838
#define BITRATE_LONGTEXT 93,3873
#define SAMPLERATE_TEXT 95,3953
#define SAMPLERATE_LONGTEXT 96,3994
#define CHANNELS_TEXT 98,4080
#define CHANNELS_LONGTEXT 99,4127
#define QUALITY_TEXT 101,4219
#define QUALITY_LONGTEXT 102,4265
#define PUBLIC_TEXT 104,4356
#define PUBLIC_LONGTEXT 105,4396
vlc_module_begin 110,4740
struct sout_access_out_sys_t156,6839
    shout_t *p_shout;p_shout158,6870
static int Open(164,7090
static void Close(401,15397
static int Control(416,15774
static ssize_t Write(436,16334
static int Seek(489,18264

demux/hls/playlist/HLSSegment.hpp,961
#define HLSSEGMENT_HPP21,992
namespace hls29,1124
    namespace playlisthls::playlist31,1140
        class SegmentEncryptionhls::playlist::SegmentEncryption35,1214
                    NONE,hls::playlist::SegmentEncryption::NONE41,1352
                    AES_128,hls::playlist::SegmentEncryption::AES_12842,1378
                    AES_SAMPLE,hls::playlist::SegmentEncryption::AES_SAMPLE43,1407
                } method;hls::playlist::SegmentEncryption::method44,1439
                std::vector<uint8_t> key;hls::playlist::SegmentEncryption::key45,1465
                std::vector<uint8_t> iv;hls::playlist::SegmentEncryption::iv46,1507
        class HLSSegment hls::playlist::HLSSegment49,1560
                mtime_t utcTime;hls::playlist::HLSSegment::utcTime61,1974
                SegmentEncryption encryption;hls::playlist::HLSSegment::encryption64,2117
                gcry_cipher_hd_t ctx;hls::playlist::HLSSegment::ctx66,2182

packetizer/hxxx_nal.c,270
static bool block_WillRealloc(26,1036
static inline void hxxx_WritePrefix(34,1273
block_t *hxxx_AnnexB_to_xVC(hxxx_AnnexB_to_xVC44,1564
    struct nalmoves_e48,1696
        const uint8_t *p;p50,1724
        uint8_t  prefix;51,1778
        off_t    move;52,1826

lua/libs/sd.c,870
#   define  _GNU_SOURCE29,1418
static const luaL_Reg vlclua_node_reg[vlclua_node_reg51,1940
#define vlclua_item_luareg(57,2103
#define vlclua_item_meta(60,2177
vlclua_item_meta(76,2724
static int vlclua_sd_get_services_names(127,4388
static int vlclua_sd_add(151,5063
static int vlclua_sd_remove(159,5333
static int vlclua_sd_is_loaded(167,5609
static int vlclua_sd_add_node(175,5873
static int vlclua_sd_add_item(227,7996
static int vlclua_sd_remove_item(318,11746
static int vlclua_sd_remove_node(332,12177
static int vlclua_sd_remove_all_items_nodes(347,12601
static int vlclua_node_add_subitem(354,12801
static int vlclua_node_add_subnode(422,15790
static const luaL_Reg vlclua_sd_sd_reg[vlclua_sd_sd_reg478,18187
void luaopen_sd_sd(487,18495
static const luaL_Reg vlclua_sd_intf_reg[vlclua_sd_intf_reg494,18639
void luaopen_sd_intf(502,18877

demux/adaptive/http/BytesRange.cpp,178
BytesRange::BytesRange(29,1074
BytesRange::BytesRange(35,1142
bool BytesRange::isValid(41,1240
size_t BytesRange::getStartByte(48,1355
size_t BytesRange::getEndByte(53,1423

demux/playlist/itml.c,610
struct demux_sys_t42,1512
    int i_ntracks;44,1533
int Import_iTML(52,1645
void Close_iTML(67,2112
int Demux(76,2279
static bool parse_plist_node(129,3634
static bool parse_dict(165,4844
static bool parse_plist_dict(259,7862
static bool parse_tracks_dict(281,8838
static bool parse_track_dict(302,9634
static track_elem_t *new_track(new_track350,11399
static void free_track(367,11785
static bool save_data(383,12160
#define SAVE_INFO(393,12474
#undef SAVE_INFO407,12972
static bool add_meta(414,13070
#define SET_INFO(420,13245
#undef SET_INFO428,13544
static bool skip_element(435,13649

access/imem-access.c,400
struct access_sys_t31,1240
    void *opaque;opaque33,1262
    ssize_t (*read_cb)read_cb34,1280
    int (*seek_cb)seek_cb35,1337
    void (*close_cb)close_cb36,1375
    uint64_t size;37,1405
static ssize_t Read(40,1428
static int Seek(54,1688
static int Control(65,1919
static int open_cb_default(104,2851
static int Open(111,2981
static void Close(152,4064
vlc_module_begin(162,4274

codec/gstreamer/gstdecode.c,1293
struct decoder_sys_t45,1666
    GstElement *p_decoder;p_decoder47,1689
    GstElement *p_decode_src;p_decode_src48,1716
    GstElement *p_decode_in;p_decode_in49,1746
    GstElement *p_decode_out;p_decode_out50,1775
    GstVlcPicturePlaneAllocator *p_allocator;p_allocator52,1806
    GstBus *p_bus;p_bus54,1853
    GstVideoInfo vinfo;56,1873
    GstAtomicQueue *p_que;p_que57,1897
    bool b_prerolled;58,1924
    bool b_running;59,1946
    GstCaps *p_sinkcaps;p_sinkcaps64,1987
    GstCaps *p_srccaps;p_srccaps65,2012
} sink_src_caps_t;66,2036
#define MODULE_DESCRIPTION 76,2411
#define USEDECODEBIN_TEXT 79,2522
#define USEDECODEBIN_LONGTEXT 80,2570
vlc_module_begin(87,2942
static gboolean seek_data_cb(135,4518
static void pad_added_cb(147,4935
static gboolean caps_handoff_cb(176,5779
static void frame_handoff_cb(200,6462
static void gst_CopyPicture(215,6976
static gint find_decoder_func(245,7980
static bool default_msg_handler(259,8408
static gboolean vlc_gst_plugin_init(314,9882
static bool vlc_gst_init(324,10167
static GstStructure* vlc_to_gst_fmt(344,10682
static int OpenDecoder(440,14274
#define VLC_GST_CHECK(453,14606
static void Flush(629,21343
static picture_t *DecodeBlock(DecodeBlock651,22071
static void CloseDecoder(821,27553

video_output/win32/direct3d11.c,3148
# undef _WIN32_WINNT25,1240
# define _WIN32_WINNT 26,1261
#define COBJMACROS40,1467
#define INITGUID41,1486
#  define D3D11CreateDeviceAndSwapChain(53,1737
#  define D3D11CreateDevice(55,1837
# define D3DCompile(57,1926
#define D3D11_HELP 67,2414
#define HW_BLENDING_TEXT 68,2497
#define HW_BLENDING_LONGTEXT 69,2558
vlc_module_begin 72,2660
struct picture_sys_t94,3428
    ID3D11VideoDecoderOutputView  *decoder;decoder96,3451
    ID3D11Texture2D               *texture;texture97,3540
    ID3D11DeviceContext           *context;context98,3584
    unsigned                      slice_index;99,3628
    ID3D11Texture2D               *texture;texture106,3734
    vout_display_t                *vd;vd107,3778
} picture_sys_pool_t;108,3817
typedef struct d3d_vertex_t 111,3892
        FLOAT x;113,3935
        FLOAT y;114,3952
        FLOAT z;115,3969
    } position;116,3986
        FLOAT x;118,4015
        FLOAT y;119,4032
    } texture;120,4049
    FLOAT       opacity;121,4064
} d3d_vertex_t;122,4089
#define RECTWidth(124,4106
#define RECTHeight(125,4157
typedef HRESULT(WINAPI *PFN_CREATE_DXGI_FACTORY)PFN_CREATE_DXGI_FACTORY165,5948
static const char* globVertexShaderDefault 169,6085
static const char* globPixelShaderDefault 194,6607
static const char *globPixelShaderBiplanarYUV_BT601_2RGB globPixelShaderBiplanarYUV_BT601_2RGB215,7047
static const char *globPixelShaderBiplanarYUV_BT709_2RGB globPixelShaderBiplanarYUV_BT709_2RGB244,7912
static const char *globPixelShaderBiplanarYUV_BT2020_2RGB globPixelShaderBiplanarYUV_BT2020_2RGB274,8875
static const char *globPixelShaderBiplanarYUYV_BT709_2RGB globPixelShaderBiplanarYUYV_BT709_2RGB306,9935
static const char *globPixelShaderBiplanarYUYV_BT601_2RGB globPixelShaderBiplanarYUYV_BT601_2RGB335,10843
static int OpenHwnd(365,11774
static int OpenCoreW(448,14407
static bool is_d3d11_opaque(475,15265
static int Open(487,15477
static void Close(541,16765
static picture_pool_t *Pool(Pool551,16955
static void DestroyDisplayPoolPicture(650,20332
static void DestroyDisplayPicture(664,20650
static HRESULT UpdateBackBuffer(675,20890
static void CropStagingFormat(765,24144
static void UncropStagingFormat(778,24582
static int Control(785,24782
static void Manage(794,25035
static void Prepare(828,26036
static void DisplayD3DPicture(902,29217
static void Display(919,29933
static void Direct3D11Destroy(968,31666
static HINSTANCE Direct3D11LoadShaderLibrary(995,32269
static int Direct3D11Open(1010,32645
static void Direct3D11Close(1358,45940
static void UpdatePicQuadPosition(1383,46538
static int Direct3D11CreateResources(1411,47760
static int Direct3D11CreatePool(1630,56244
static void Direct3D11DestroyPool(1677,57557
static int AllocQuad(1686,57738
static void ReleaseQuad(1836,63518
static void Direct3D11DestroyResources(1865,64217
static int Direct3D11MapTexture(1903,65256
static int Direct3D11UnmapTexture(1918,65844
static void Direct3D11DeleteRegions(1926,66125
static void DestroyPictureQuad(1936,66334
static void UpdateQuadOpacity(1942,66467
static int Direct3D11MapSubpicture(1963,67235

stream_out/transcode/audio.c,355
static const int pi_channels_maps[pi_channels_maps38,1638
static int audio_update_format(58,2443
static int transcode_audio_initialize_filters(64,2562
static int transcode_audio_initialize_encoder(91,3816
int transcode_audio_new(136,5897
void transcode_audio_close(183,7635
int transcode_audio_process(204,8278
bool transcode_audio_add(329,13342

codec/gstreamer/gstvlcvideosink.h,753
#define VLC_GST_VIDEO_SINK_H28,1338
typedef struct _GstVlcVideoSink GstVlcVideoSink;39,1544
typedef struct _GstVlcVideoSinkClass GstVlcVideoSinkClass;40,1593
#define GST_TYPE_VLC_VIDEO_SINK 42,1653
#define GST_VLC_VIDEO_SINK(44,1723
#define GST_VLC_VIDEO_SINK_CLASS(47,1849
#define GST_IS_VLC_VIDEO_SINK(50,1987
#define GST_IS_VLC_VIDEO_SINK_CLASS(52,2089
struct _GstVlcVideoSink55,2199
    GstBaseSink parent;57,2225
    GstAllocator *p_allocator;p_allocator59,2250
    GstVideoInfo vinfo;60,2281
    decoder_t *p_dec;p_dec62,2306
    gboolean (*new_caps)new_caps65,2354
struct _GstVlcVideoSinkClass69,2452
    GstBaseSinkClass parent_class;71,2483
    gboolean (*new_caps)new_caps75,2550
    void (*new_buffer)new_buffer78,2651

audio_output/adummy.c,134
vlc_module_begin 35,1359
#define A52_FRAME_NB 43,1579
static void Flush(51,1711
static int Start(56,1797
static int Open(73,2262

arm_neon/amplify.S,55
amplify_float_arm_neon:amplify_float_arm_neon32,1245

services_discovery/udev.c,1371
vlc_module_begin 55,1623
struct device112,3413
    dev_t devnum;114,3429
    input_item_t *item;item115,3467
    services_discovery_t *sd;sd116,3491
struct subsys119,3525
    const char *name;name121,3541
    char * (*get_mrl)get_mrl122,3563
    char * (*get_name)get_name123,3612
    int item_type;124,3662
struct services_discovery_sys_t127,3685
    const struct subsys *subsys;subsys129,3719
    struct udev_monitor *monitor;monitor130,3752
    vlc_thread_t         thread;131,3786
    void                *root;root132,3819
static int cmpdev 138,3914
static void DestroyDevice 149,4093
static int AddDevice 164,4380
static void RemoveDevice 210,5560
static int Open 229,6000
static void Close 298,8130
static void *Run Run317,8606
static int hex 356,9634
static char *decode decode370,9906
static char *decode_property decode_property398,10438
static bool v4l_is_legacy 405,10611
static bool v4l_can_capture 413,10820
static char *v4l_get_mrl v4l_get_mrl421,11041
static char *v4l_get_name v4l_get_name435,11365
int OpenV4L 441,11538
static int alsa_get_device 455,11822
static char *alsa_get_mrl alsa_get_mrl472,12245
static char *alsa_get_name alsa_get_name486,12553
int OpenALSA 515,13307
static char *disc_get_mrl disc_get_mrl527,13537
static char *disc_get_name disc_get_name573,15016
int OpenDisc 619,16165

packetizer/hevc.c,1538
vlc_module_begin 52,1940
struct decoder_sys_t74,2901
    packetizer_t packetizer;77,2934
        block_t *p_chain;p_chain81,2981
        block_t **pp_chain_last;pp_chain_last82,3007
    } frame,83,3040
    } frame, pre,83,3040
    } frame, pre, post;83,3040
    uint8_t  i_nal_length_size;85,3065
    hevc_video_parameter_set_t    *rgi_p_decvps[rgi_p_decvps86,3097
    hevc_sequence_parameter_set_t *rgi_p_decsps[rgi_p_decsps87,3160
    hevc_picture_parameter_set_t  *rgi_p_decpps[rgi_p_decpps88,3223
    bool b_init_sequence_complete;89,3286
    cc_storage_t *p_ccs;p_ccs92,3332
static const uint8_t p_hevc_startcode[p_hevc_startcode95,3361
static inline void InitQueue(99,3592
#define INITQ(104,3713
static block_t * OutputQueues(106,3794
static int Open(152,5082
static void Close(223,7203
static block_t *PacketizeHVC1(PacketizeHVC1259,8185
static block_t *PacketizeAnnexB(PacketizeAnnexB267,8412
static void PacketizeFlush(274,8592
static block_t *GetCc(GetCc284,8899
static void PacketizeReset(292,9215
static bool InsertXPS(306,9526
static bool XPSReady(385,11871
static block_t *ParseVCL(ParseVCL405,12441
static block_t * ParseAUHead(476,14813
static block_t * ParseAUTail(559,17996
static block_t * ParseNonVCL(585,18687
static block_t *GatherAndValidateChain(GatherAndValidateChain604,19258
static block_t *ParseNALBlock(ParseNALBlock629,20042
static block_t *PacketizeParse(PacketizeParse669,21173
static int PacketizeValidate(685,21637
static bool ParseSEICallback(692,21778

packetizer/hxxx_nal.h,2314
#define HXXX_NAL_H21,1099
static const uint8_t  annexb_startcode4[annexb_startcode427,1194
#define annexb_startcode3 28,1266
enum hxxx_colour_primaries31,1349
    HXXX_PRIMARIES_RESERVED0 33,1378
    HXXX_PRIMARIES_BT709 34,1419
    HXXX_PRIMARIES_UNSPECIFIED 35,1460
    HXXX_PRIMARIES_RESERVED3 36,1501
    HXXX_PRIMARIES_BT470M 37,1542
    HXXX_PRIMARIES_BT470BG 38,1583
    HXXX_PRIMARIES_BT601_525 39,1624
    HXXX_PRIMARIES_SMTPE_240M 40,1665
    HXXX_PRIMARIES_GENERIC_FILM 41,1706
    HXXX_PRIMARIES_BT2020 42,1747
    HXXX_PRIMARIES_SMPTE_ST_428 43,1788
hxxx_colour_primaries_to_vlc(47,1872
enum hxxx_transfer_characteristics76,2618
    HXXX_TRANSFER_RESERVED0 78,2655
    HXXX_TRANSFER_BT709 79,2696
    HXXX_TRANSFER_UNSPECIFIED 80,2737
    HXXX_TRANSFER_RESERVED3 81,2778
    HXXX_TRANSFER_BT470M 82,2819
    HXXX_TRANSFER_BT470BG 83,2860
    HXXX_TRANSFER_BT601_525 84,2901
    HXXX_TRANSFER_SMTPE_240M 85,2942
    HXXX_TRANSFER_LINEAR 86,2983
    HXXX_TRANSFER_LOG 87,3024
    HXXX_TRANSFER_LOG_SQRT 88,3065
    HXXX_TRANSFER_IEC61966_2_4 89,3107
    HXXX_TRANSFER_BT1361 90,3149
    HXXX_TRANSFER_IEC61966_2_1 91,3191
    HXXX_TRANSFER_BT2020_V14 92,3233
    HXXX_TRANSFER_BT2020_V15 93,3275
    HXXX_TRANSFER_SMPTE_ST_2084 94,3317
    HXXX_TRANSFER_SMPTE_ST_428 95,3359
hxxx_transfer_characteristics_to_vlc(99,3441
enum hxxx_matrix_coeffs133,4373
    HXXX_MATRIX_IDENTITY 135,4399
    HXXX_MATRIX_BT709 136,4440
    HXXX_MATRIX_UNSPECIFIED 137,4481
    HXXX_MATRIX_RESERVED 138,4522
    HXXX_MATRIX_FCC 139,4563
    HXXX_MATRIX_BT470BG 140,4604
    HXXX_MATRIX_BT601_525 141,4645
    HXXX_MATRIX_SMTPE_240M 142,4686
    HXXX_MATRIX_YCGCO 143,4727
    HXXX_MATRIX_BT2020_NCL 144,4768
    HXXX_MATRIX_BT2020_CL 145,4809
hxxx_matrix_coeffs_to_vlc(149,4889
static inline bool hxxx_strip_AnnexB_startcode(176,5530
static inline uint8_t *hxxx_bsfw_ep3b_to_rbsp(hxxx_bsfw_ep3b_to_rbsp202,6249
static inline uint8_t * hxxx_ep3b_to_rbsp(227,6882
    const uint8_t *p_head;p_head253,7445
    const uint8_t *p_tail;p_tail254,7472
    uint8_t i_nal_length_size;255,7499
} hxxx_iterator_ctx_t;256,7530
static inline void hxxx_iterator_init(258,7554
static inline bool hxxx_iterate_next(269,7966
static inline bool hxxx_annexb_iterate_next(291,8577

mux/mpeg/dvbpsi_compat.h,76
#define DVBPSI_COMPAT_H24,1147
static inline void dvbpsi_messages(26,1172

access/http/h1conn.c,1131
static unsigned vlc_http_can_read(39,1365
static char *vlc_https_headers_recv(vlc_https_headers_recv57,1822
static int vlc_http_minor(101,2791
struct vlc_h1_conn110,2940
    struct vlc_http_conn conn;112,2961
    struct vlc_http_stream stream;113,2992
    uintmax_t content_length;114,3027
    bool connection_close;115,3057
    bool active;116,3084
    bool released;117,3101
    bool proxy;118,3120
#define CO(121,3140
static void *vlc_h1_stream_fatal(vlc_h1_stream_fatal125,3242
static struct vlc_h1_conn *vlc_h1_stream_conn(vlc_h1_stream_conn139,3604
static struct vlc_http_stream *vlc_h1_stream_open(vlc_h1_stream_open144,3765
static struct vlc_http_msg *vlc_h1_stream_wait(vlc_h1_stream_wait171,4539
static block_t *vlc_h1_stream_read(vlc_h1_stream_read232,6187
static void vlc_h1_stream_close(272,7134
static const struct vlc_http_stream_cbs vlc_h1_stream_callbacks 287,7439
static void vlc_h1_conn_destroy(294,7584
static void vlc_h1_conn_release(307,7850
static const struct vlc_http_conn_cbs vlc_h1_conn_callbacks 318,8084
struct vlc_http_conn *vlc_h1_conn_create(vlc_h1_conn_create324,8201

demux/playlist/itml.h,1285
#define FREE_VALUE(29,1318
#define FREE_KEY(30,1364
#define FREE_ATT(31,1408
#define FREE_ATT_KEY(32,1445
#define UNKNOWN_CONTENT 34,1509
#define SIMPLE_CONTENT 35,1535
#define COMPLEX_CONTENT 36,1560
#define SIMPLE_INTERFACE 38,1587
#define COMPLEX_INTERFACE 41,1751
    char *name,name51,2135
    char *name, *artist,artist51,2135
    char *name, *artist, *album,album51,2135
    char *name, *artist, *album, *genre,genre51,2135
    char *name, *artist, *album, *genre, *trackNum,trackNum51,2135
    char *name, *artist, *album, *genre, *trackNum, *location;location51,2135
    mtime_t duration;52,2198
} track_elem_t;53,2220
struct xml_elem_hnd55,2237
    const char *name;name57,2259
    int type;58,2281
        bool (*smpl) SIMPLE_INTERFACE;61,2311
        bool (*cmplx) COMPLEX_INTERFACE;62,2350
    } pf_handler;63,2391
typedef struct xml_elem_hnd xml_elem_hnd_t;65,2412
static bool parse_plist_node COMPLEX_INTERFACE;68,2474
static bool skip_element COMPLEX_INTERFACE;69,2522
static bool parse_dict COMPLEX_INTERFACE;70,2566
static bool parse_plist_dict COMPLEX_INTERFACE;71,2608
static bool parse_tracks_dict COMPLEX_INTERFACE;72,2656
static bool parse_track_dict COMPLEX_INTERFACE;73,2705
static bool save_data SIMPLE_INTERFACE;74,2753

stream_filter/cache_block.c,870
#   define STREAM_CACHE_SIZE 51,1690
#   define STREAM_CACHE_SIZE 54,1786
#define STREAM_CACHE_PREBUFFER_SIZE 60,1978
struct stream_sys_t67,2185
    uint64_t     i_pos;69,2207
    uint64_t     i_start;71,2266
    uint64_t     i_offset;72,2333
    block_t     *p_current;p_current73,2401
    uint64_t     i_size;75,2454
    block_t     *p_first;p_first76,2526
    block_t    **pp_last;pp_last77,2552
        uint64_t i_read_count;82,2634
        uint64_t i_bytes;83,2665
        uint64_t i_read_time;84,2691
    } stat;85,2721
static int AStreamRefillBlock(88,2737
static void AStreamPrebufferBlock(149,4139
static void AStreamControlReset(212,5883
static int AStreamSeekBlock(232,6281
static ssize_t AStreamReadBlock(355,9523
static int AStreamControl(407,11146
static int Open(447,12360
static void Close(493,13467
vlc_module_begin(502,13632

codec/avcodec/video.c,1449
struct decoder_sys_t49,1920
    mtime_t i_pts;54,2009
    bool b_hurry_up;57,2063
    enum AVDiscard i_skip_frame;58,2084
    int     i_late_frames;61,2161
    mtime_t i_late_frames_start;62,2188
    bool        b_direct_rendering;65,2253
    atomic_bool b_dr_failure;66,2289
    bool b_first_frame;69,2370
    bool palette_sent;73,2406
    vlc_va_t *p_va;p_va76,2447
    enum PixelFormat pix_fmt;77,2467
    int profile;78,2497
    int level;79,2514
    vlc_sem_t sem_mt;81,2530
static inline void wait_mt(85,2579
static inline void post_mt(90,2663
# define wait_mt(95,2752
# define post_mt(96,2782
static uint32_t ffmpeg_CodecTag(109,3340
static int lavc_GetVideoFormat(122,3713
static int lavc_UpdateVideoFormat(275,8547
static void lavc_CopyPicture(300,9352
static int OpenVideoCodec(331,10308
int InitVideoDec(394,12493
static void Flush(562,18859
static bool check_block_validity(585,19617
static bool check_block_being_late(604,20084
static bool check_frame_should_be_dropped(633,20918
static void interpolate_next_pts(655,21577
static void update_late_frame_count(683,22428
static picture_t *DecodeVideo(DecodeVideo707,23289
void EndVideoDec(1023,33331
static void ffmpeg_InitCodec(1046,34018
static void lavc_ReleaseFrame(1108,35874
static int lavc_va_GetFrame(1115,35987
static int lavc_dr_GetFrame(1147,36888
static int lavc_GetFrame(1222,39272
static enum PixelFormat ffmpeg_GetFormat(1271,40637

stream_filter/record.c,322
vlc_module_begin(46,1755
struct stream_sys_t57,2160
    FILE *f;f59,2182
    bool b_error;60,2261
static int Open 78,2968
static void Close(102,3522
static ssize_t Read(116,3886
static int Seek(140,4458
static int Control(145,4562
static int Start(168,5270
static int Stop(214,6298
static void Write(226,6506

stream_out/standard.c,1371
#define ACCESS_TEXT 41,1697
#define ACCESS_LONGTEXT 42,1744
#define MUX_TEXT 44,1819
#define MUX_LONGTEXT 45,1855
#define DEST_TEXT 47,1919
#define DEST_LONGTEXT 48,1962
#define BIND_TEXT 50,2074
#define BIND_LONGTEXT 51,2142
#define PATH_TEXT 54,2308
#define PATH_LONGTEXT 55,2377
#define NAME_TEXT 58,2509
#define NAME_LONGTEXT 59,2546
#define DESC_TEXT 62,2679
#define DESC_LONGTEXT 63,2723
#define URL_TEXT 66,2899
#define URL_LONGTEXT 67,2934
#define EMAIL_TEXT 71,3159
#define EMAIL_LONGTEXT 72,3198
#define PHONE_TEXT 75,3363
#define PHONE_LONGTEXT 76,3409
#define SAP_TEXT 81,3580
#define SAP_LONGTEXT 82,3618
#define SOUT_CFG_PREFIX 87,3767
vlc_module_begin 89,3809
#define DEFAULT_PORT 123,5430
struct sout_stream_sys_t125,5457
    sout_mux_t           *p_mux;p_mux127,5484
    session_descriptor_t *p_session;p_session128,5517
static sout_stream_id_sys_t * Add(131,5558
static void Del(136,5736
static int Send(141,5881
static void Flush(147,6077
static void create_SDP(152,6217
static const char *getMuxFromAlias(getMuxFromAlias207,7916
    static struct { const char alias[alias209,7978
    static struct { const char alias[6]; const char mux[mux209,7978
static int fixAccessMux(245,8917
static bool exactMatch(296,10467
static void checkAccessMux(305,10737
static int Open(330,12041
static void Close(435,15235

notify/osx_notifications.m,509
#define VLC_MODULE_LICENSE 71,3224
@interface VLCGrowlDelegate 83,3633
struct intf_sys_t102,4203
    VLCGrowlDelegate *o_growl_delegate;o_growl_delegate104,4223
    int             i_id;105,4263
    int             i_item_changes;106,4289
vlc_module_begin 122,4881
static void Close(160,6214
static int ItemChange(177,6857
- (id)initWithInterfaceThread:284,10194
- (void)dealloc317,11585
- (void)registerToGrowl338,12235
              andArtUrl:notifyWithTitle:artist:album:andArtUrl:365,13342

video_filter/deinterlace/algo_x.c,783
static inline int ssd(53,1970
static inline int XDeint8x8DetectC(54,2017
static inline int XDeint8x8DetectMMXEXT(82,2652
static inline void XDeint8x8MergeC(146,4166
static inline void XDeint8x8MergeMMXEXT(169,4706
static inline void XDeint8x8Set(211,5869
static inline void XDeint8x8FieldEC(223,6173
static inline void XDeint8x8FieldEMMXEXT(243,6606
static inline void XDeint8x8FieldC(269,7161
static inline void XDeint8x8FieldMMXEXT(315,8943
static inline int XDeintNxNDetect(359,10073
static inline void XDeintNxNFrame(386,10723
static inline void XDeintNxNField(414,11450
static inline void XDeintNxN(442,12150
static inline int median(451,12499
static inline void XDeintBand8x8C(470,12772
static inline void XDeintBand8x8MMXEXT(503,13613
void RenderX(540,14681

access/wasapi.c,870
#define INITGUID27,1085
#define COBJMACROS28,1102
#define CONST_VTABLE29,1121
static LARGE_INTEGER freq;41,1328
BOOL WINAPI DllMain(45,1461
static UINT64 GetQPC(60,1752
static EDataFlow GetDeviceFlow(74,2096
static IAudioClient *GetClient(GetClient90,2425
static int vlc_FromWave(126,3517
static es_out_id_t *CreateES(CreateES226,6772
struct demux_sys_t271,8143
    IAudioClient *client;client273,8164
    es_out_id_t *es;es274,8190
    size_t frame_size;276,8212
    mtime_t caching;277,8235
    mtime_t start_time;278,8256
    HANDLE events[events280,8281
        HANDLE thread;282,8315
        HANDLE ready;283,8338
static unsigned __stdcall Thread(287,8371
static int Control(353,10148
static int Open(383,10845
static void Close 467,13047
#define LOOPBACK_TEXT 488,13558
#define LOOPBACK_LONGTEXT 489,13600
vlc_module_begin(491,13669

access/v4l2/access.c,470
struct access_sys_t40,1523
    int fd;42,1545
    uint32_t block_flags;43,1557
        uint32_t bufc;46,1599
        uint32_t blocksize;47,1622
    struct buffer_t *bufv;bufv49,1657
    vlc_v4l2_ctrl_t *controls;controls50,1684
int AccessOpen(58,1919
int InitVideo 98,2805
void AccessClose(188,5638
static int AccessPoll 201,5943
static block_t *MMapBlock MMapBlock213,6141
static block_t *ReadBlock ReadBlock230,6536
static int AccessControl(254,7099

video_filter/deinterlace/algo_x.h,42
#define VLC_DEINTERLACE_ALGO_X_H 25,1216

demux/ttml.c,1665
vlc_module_begin 39,1473
   int64_t i_start;52,1782
   int64_t i_stop;53,1802
   char *psz_text;psz_text54,1821
} subtitle_t;55,1840
struct demux_sys_t57,1855
    xml_t*          p_xml;59,1876
    xml_reader_t*   p_reader;60,1903
    subtitle_t*     subtitle;61,1933
    es_out_id_t*    p_es;62,1963
    int64_t         i_length;63,1989
    int64_t         i_next_demux_time;64,2019
    int             i_subtitle;65,2058
    int             i_subtitles;66,2090
    char*           psz_head;67,2123
    size_t          i_head_len;68,2153
    bool            b_has_head;69,2185
typedef struct node_t72,2221
    struct node_t* p_parent;74,2245
    char* psz_styleid;75,2274
    char* psz_node_name;76,2297
    char* psz_begin;77,2322
    char* psz_end;78,2343
    vlc_dictionary_t attr_dict;79,2362
} node_t;80,2394
static int Control(82,2405
static int Convert_time(170,5372
static char* Append(192,5952
static void FreeDictAttrValue(213,6422
static void ClearNode(219,6543
static void ClearNodeStack(229,6809
static int MergeAttrDict 239,7000
static int MergeStyles(252,7459
static int MergeNodeWithParents(266,7759
static int CompareTagName(280,8163
static char* NodeToStr(287,8371
static int ReadAttrNode(311,9162
static inline bool isVisibleSpan(342,10231
static bool isInArray(347,10387
static int addToArrayIfNotInside(357,10616
static int timeCmp(365,10805
static char* setOpacityToZero(381,11241
static void CleanSubs(392,11554
static int ParseTimeOnSpan(407,11877
static int ReadTTML(577,17794
static int Demux(745,24446
static void ParseHead(776,25425
static int Open(868,28964
static void Close(994,32581

demux/adaptive/tools/Retrieve.cpp,34
block_t * Retrieve::HTTP(34,1210

access/vcd/vcd.c,685
vlc_module_begin 46,1783
#define VCD_BLOCKS_ONCE 63,2365
#define VCD_DATA_ONCE 64,2392
struct access_sys_t66,2451
    vcddev_t    *vcddev;vcddev68,2473
    uint64_t    offset;69,2553
    int           i_titles;72,2600
        uint64_t *seekpoints;seekpoints75,2645
        size_t    count;76,2675
    } titles[titles77,2700
    int         i_current_title;78,2780
    unsigned    i_current_seekpoint;79,2813
    int         i_sector;81,2851
    int         *p_sectors;p_sectors82,2931
static int Open(93,3383
static void Close(216,6890
static int Control(231,7368
static block_t *Block(Block331,10323
static int Seek(403,12561
static int EntryPoints(433,13641

text_renderer/nsspeechsynthesizer.m,358
vlc_module_begin 45,1772
struct filter_sys_t54,1992
    NSSpeechSynthesizer *speechSynthesizer;speechSynthesizer56,2014
    NSString *currentLocale;currentLocale57,2058
    NSString *lastString;lastString58,2087
static int  Create 61,2117
static void Destroy(78,2522
static NSString * languageCodeForString(96,2929
static int RenderText(100,3110

visualization/vsxu.cpp,688
#define WIDTH_TEXT 52,1948
#define WIDTH_LONGTEXT 53,1985
#define HEIGHT_TEXT 55,2057
#define HEIGHT_LONGTEXT 56,2096
struct filter_sys_t77,2811
    vlc_thread_t thread;filter_sys_t::thread79,2833
    vlc_gl_t *gl;filter_sys_t::gl80,2858
    vlc_mutex_t lock;filter_sys_t::lock82,2877
    vlc_mutex_t cyclic_block_mutex;filter_sys_t::cyclic_block_mutex85,2937
    cyclic_block_queue* vsxu_cyclic_buffer;filter_sys_t::vsxu_cyclic_buffer88,3020
    int i_channels;filter_sys_t::i_channels90,3065
    bool b_quit;filter_sys_t::b_quit92,3086
static int Open(103,3293
static void Close(157,4794
static block_t *DoWork(DoWork181,5407
static void *Thread(Thread232,6994

audio_output/opensles_android.c,2398
#define OPENSLES_BUFFERS 47,1761
#define OPENSLES_BUFLEN 48,1822
#define CHECK_OPENSL_ERROR(54,1982
typedef SLresult (*slCreateEngine_t)slCreateEngine_t61,2234
#define Destroy(65,2387
#define SetPlayState(66,2424
#define RegisterCallback(67,2476
#define GetInterface(68,2542
#define Realize(69,2600
#define CreateOutputMix(70,2642
#define CreateAudioPlayer(71,2718
#define Enqueue(73,2816
#define Clear(74,2864
#define GetState(75,2896
#define SetPositionUpdatePeriod(76,2940
#define SetVolumeLevel(77,3014
#define SetMute(78,3070
struct aout_sys_t83,3275
    SLObjectItf                     engineObject;86,3320
    SLObjectItf                     outputMixObject;87,3370
    SLAndroidSimpleBufferQueueItf   playerBufferQueue;88,3423
    SLObjectItf                     playerObject;89,3478
    SLVolumeItf                     volumeItf;90,3528
    SLEngineItf                     engineEngine;91,3575
    SLPlayItf                       playerPlay;92,3625
    void                           *p_so_handle;p_so_handle95,3699
    slCreateEngine_t                slCreateEnginePtr;97,3749
    SLInterfaceID                   SL_IID_ENGINE;98,3804
    SLInterfaceID                   SL_IID_ANDROIDSIMPLEBUFFERQUEUE;99,3855
    SLInterfaceID                   SL_IID_VOLUME;100,3924
    SLInterfaceID                   SL_IID_PLAY;101,3975
    vlc_mutex_t                     lock;105,4036
    uint8_t                        *buf;buf108,4121
    size_t                          samples_per_buf;109,4162
    int                             next_buf;110,4215
    int                             rate;112,4262
    bool                            started;115,4349
    block_t                        *p_buffer_chain;p_buffer_chain118,4445
    block_t                       **pp_buffer_last;pp_buffer_last119,4497
    size_t                          samples;120,4549
vlc_module_begin 133,5032
static int TimeGet(153,5581
static void Flush(180,6324
static int VolumeSet(206,7029
static int MuteSet(225,7577
static void Pause(234,7785
static int WriteBuffer(242,8000
static void Play(324,10358
static void PlayedCallback 343,10870
static int aout_get_native_sample_rate(356,11185
static int Start(380,12161
static void Stop(494,16574
static void Close(512,17073
static int Open 524,17347
#define OPENSL_DLSYM(548,17981
#undef OPENSL_DLSYM563,18803

access/dvb/dvb.h,822
typedef struct demux_handle_t29,1497
    int i_pid;31,1529
    int i_handle;32,1544
    int i_type;33,1562
} demux_handle_t;34,1578
typedef struct frontend_t frontend_t;36,1597
    int i_snr;39,1652
    int i_ber;40,1707
    int i_signal_strenth;41,1763
} frontend_statistic_t;42,1815
    bool b_has_signal;46,1857
    bool b_has_carrier;47,1880
    bool b_has_lock;48,1904
} frontend_status_t;49,1925
#define MAX_DEMUX 51,1947
#define TS_PACKET_SIZE 52,1969
    int i_handle,59,2055
    int i_handle, i_frontend_handle;59,2055
    frontend_t *p_frontend;p_frontend60,2092
} dvb_sys_t;62,2121
#define VIDEO0_TYPE 64,2135
#define AUDIO0_TYPE 65,2161
#define TELETEXT0_TYPE 66,2187
#define SUBTITLE0_TYPE 67,2213
#define PCR0_TYPE 68,2239
#define TYPE_INTERVAL 69,2265
#define OTHER_TYPE 70,2291

control/globalhotkeys/xcb.c,875
#define VLC_MODULE_LICENSE 26,1165
vlc_module_begin(49,1898
    xcb_keycode_t *p_keys;p_keys61,2236
    unsigned      i_modifier;62,2263
    uint32_t      i_vlc;63,2293
} hotkey_mapping_t;64,2318
struct intf_sys_t66,2339
    vlc_thread_t thread;68,2359
    xcb_connection_t  *p_connection;p_connection70,2385
    xcb_window_t      root;71,2422
    xcb_key_symbols_t *p_symbols;p_symbols72,2450
    int              i_map;74,2485
    hotkey_mapping_t *p_map;p_map75,2513
static int Open(85,2845
static void Close(151,4606
static unsigned GetModifier(175,5258
static unsigned GetX11Modifier(233,6831
    xcb_keysym_t i_x11;258,7918
    unsigned     i_vlc;259,7942
} x11keys_to_vlckeys[x11keys_to_vlckeys261,7967
static xcb_keysym_t GetX11Key(266,8057
static bool Mapping(281,8432
static void Register(349,10540
static void *Thread(Thread365,11029

demux/smooth/playlist/ForgedInitSegment.cpp,872
ForgedInitSegment::ForgedInitSegment(42,1386
ForgedInitSegment::~ForgedInitSegment(66,2079
static uint8_t *HexDecode(HexDecode71,2145
void ForgedInitSegment::fromWaveFormatEx(83,2469
void ForgedInitSegment::fromVideoInfoHeader(115,3598
void ForgedInitSegment::setWaveFormatEx(121,3718
void ForgedInitSegment::setCodecPrivateData(129,3923
void ForgedInitSegment::setChannels(144,4251
void ForgedInitSegment::setPacketSize(149,4332
void ForgedInitSegment::setSamplingRate(154,4417
void ForgedInitSegment::setBitsPerSample(159,4507
void ForgedInitSegment::setVideoSize(164,4598
void ForgedInitSegment::setTrackID(170,4695
void ForgedInitSegment::setAudioTag(175,4765
void ForgedInitSegment::setFourCC(180,4858
void ForgedInitSegment::setLanguage(202,5506
block_t * ForgedInitSegment::buildMoovBox(207,5593
SegmentChunk* ForgedInitSegment::toChunk(309,9057

misc/webservices/acoustid.c,219
void free_acoustid_result_t(37,1456
static json_value * jsongetbyname(48,1765
static void parse_artists(57,2105
static void parse_recordings(67,2519
static bool ParseJson(94,3858
int DoAcoustIdWebRequest(153,5901

video_output/sdl.c,1076
#define CHROMA_TEXT 56,2101
#define CHROMA_LONGTEXT 57,2145
#define OVERLAY_TEXT 61,2321
#define OVERLAY_LONGTEXT 62,2360
vlc_module_begin(65,2463
struct vout_display_sys_t 98,3637
    vout_display_place_t place;99,3665
    SDL_Surface          *display;display101,3698
    int                  display_bpp;102,3733
    uint32_t             display_flags;103,3771
    unsigned int         desktop_width;105,3812
    unsigned int         desktop_height;106,3852
    SDL_Overlay          *overlay;overlay109,3919
    bool                 is_uv_swapped;110,3954
    picture_pool_t       *pool;pool113,4005
static int Open(119,4095
static void Close(373,12292
static picture_pool_t *Pool(Pool398,12839
static void PictureDisplay(446,14241
static int Control(472,14846
static void Manage(573,18126
            static const struct { int sdl;616,19514
            static const struct { int sdl; int vlc;616,19514
    SDLKey sdl_key;661,21033
    int    vlckey;662,21053
} sdlkeys_to_vlckeys[sdlkeys_to_vlckeys664,21073
static int ConvertKey(708,22135

access/http/hpack.c,1461
# undef NDEBUG26,1139
static const char hpack_names[hpack_names40,1356
static const char hpack_values[hpack_values58,2352
struct hpack_decoder64,2530
    char **table;table66,2553
    size_t entries;67,2571
    size_t size;68,2591
    size_t max_size;69,2608
struct hpack_decoder *hpack_decode_init(hpack_decode_init72,2633
void hpack_decode_destroy(85,2921
static int_fast32_t hpack_decode_int(97,3218
static char *hpack_decode_str_raw(hpack_decode_str_raw145,4160
static int hpack_decode_byte_huffman(156,4373
static char *hpack_decode_str_huffman(hpack_decode_str_huffman254,7525
static char *hpack_decode_str(hpack_decode_str292,8281
static char *hpack_lookup_name(hpack_lookup_name327,8996
static char *hpack_lookup_value(hpack_lookup_value351,9539
static void hpack_decode_evict(377,10196
static int hpack_append_hdr(405,10963
static int hpack_decode_hdr_indexed(432,11694
static int hpack_decode_hdr_index(458,12373
static int hpack_decode_hdr_noindex(496,13254
static int hpack_decode_tbl_update(527,14028
static int hpack_decode_hdr(549,14693
int hpack_decode(575,15472
static void test_integer(620,16372
static void test_integers(642,16955
static void test_header(663,17473
static void test_headers(694,18272
static void test_block(703,18615
static void test_reqs(732,19424
static void test_reqs_huffman(754,20297
static void test_resps(776,21248
static void test_resps_huffman(805,22518
int main(839,24169

demux/playlist/ram.c,170
int Import_RAM(72,3029
static const char *SkipBlanks(SkipBlanks102,3792
static int ParseTime(127,4332
static int Demux(200,6092
static void ParseClipInfo(398,14448

demux/dash/DASHManager.cpp,308
DASHManager::DASHManager(52,1812
DASHManager::~DASHManager 59,2051
void DASHManager::scheduleNextUpdate(63,2087
bool DASHManager::needsUpdate(89,2836
bool DASHManager::updatePlaylist(97,3007
int DASHManager::doControl(149,4504
bool DASHManager::isDASH(187,5789
bool DASHManager::mimeMatched(210,6424

video_filter/scene.c,1228
#define FORMAT_TEXT 59,2315
#define FORMAT_LONGTEXT 60,2356
#define WIDTH_TEXT 62,2435
#define WIDTH_LONGTEXT 63,2474
#define HEIGHT_TEXT 67,2665
#define HEIGHT_LONGTEXT 68,2706
#define RATIO_TEXT 72,2899
#define RATIO_LONGTEXT 73,2942
#define PREFIX_TEXT 76,3081
#define PREFIX_LONGTEXT 77,3125
#define PATH_TEXT 81,3346
#define PATH_LONGTEXT 82,3394
#define REPLACE_TEXT 86,3608
#define REPLACE_LONGTEXT 87,3667
#define SCENE_HELP 91,3896
#define CFG_PREFIX 92,3954
vlc_module_begin 94,3983
typedef struct scene_t 127,5192
    picture_t       *p_pic;p_pic128,5217
    video_format_t  format;129,5245
} scene_t;130,5273
struct filter_sys_t135,5474
    image_handler_t *p_image;p_image137,5496
    scene_t scene;138,5526
    char *psz_path;psz_path140,5546
    char *psz_prefix;psz_prefix141,5566
    char *psz_format;psz_format142,5588
    vlc_fourcc_t i_format;143,5610
    int32_t i_width;144,5637
    int32_t i_height;145,5658
    int32_t i_ratio;146,5680
    int32_t i_frames;147,5730
    bool  b_replace;148,5771
static int Create(154,6003
static void Destroy(209,8080
static picture_t *Filter(Filter227,8669
static void SnapshotRatio(234,8866
static void SavePicture(275,10124

misc/webservices/acoustid.h,962
#define MB_ID_SIZE 21,1070
struct musicbrainz_recording_t23,1093
    char *psz_artist;psz_artist25,1126
    char *psz_title;psz_title26,1148
    char s_musicbrainz_id[s_musicbrainz_id27,1169
typedef struct musicbrainz_recording_t musicbrainz_recording_t;29,1211
struct acoustid_result_t31,1276
    double d_score;33,1303
    char *psz_id;psz_id34,1323
        unsigned int count;37,1358
        musicbrainz_recording_t *p_recordings;p_recordings38,1386
    } recordings;39,1433
typedef struct acoustid_result_t acoustid_result_t;41,1454
struct acoustid_results_t43,1507
    acoustid_result_t * p_results;45,1535
    unsigned int count;46,1570
typedef struct acoustid_results_t acoustid_results_t;48,1597
struct acoustid_fingerprint_t50,1652
    char *psz_fingerprint;psz_fingerprint52,1684
    unsigned int i_duration;53,1711
    acoustid_results_t results;54,1740
typedef struct acoustid_fingerprint_t acoustid_fingerprint_t;56,1775

demux/subtitle_helper.h,44
inline static char * peek_Readline(21,1069

video_output/xcb/keysym.h,30
{ 0x000001a1,x000001a14,184

video_filter/sepia.c,950
static const char *const ppsz_filter_options[ppsz_filter_options51,2065
#define SEPIA_INTENSITY_TEXT 58,2322
#define SEPIA_INTENSITY_LONGTEXT 59,2373
#define CFG_PREFIX 61,2440
vlc_module_begin 63,2469
typedef void (*SepiaFunction)SepiaFunction82,3292
    vlc_fourcc_t i_chroma;86,3379
    SepiaFunction pf_sepia;87,3406
} p_sepia_cfg[p_sepia_cfg88,3434
struct filter_sys_t102,3951
    SepiaFunction pf_sepia;104,3973
    atomic_int i_intensity;105,4001
static int Create(113,4389
static void Destroy(156,5821
static picture_t *Filter(Filter172,6471
static inline void Sepia8ySSE2(203,7516
static void PlanarI420SepiaSSE(226,8444
static void PlanarI420Sepia(309,12954
static void PackedYUVSepia(370,16168
static void RVSepia(419,18140
#define SCALEBITS 421,18220
#define ONE_HALF 422,18241
#define FIX(423,18282
#undef SCALEBITS477,20824
#undef ONE_HALF478,20841
#undef FIX479,20857
static int FilterCallback 482,20871

demux/adaptive/xml/Node.h,720
#define NODE_H_26,1158
        class Node36,1272
                Node 39,1321
                virtual ~Node 40,1357
                const std::map<Node::std::map52,2328
                static const std::string            EmptyString;Node::EmptyString58,2647
                std::vector<Node *>                 subNodes;Node::subNodes59,2712
                std::map<Node::std::map60,2774
                std::map<std::string, std::string>  attributes;Node::attributes60,2774
                std::string                         name;Node::name61,2838
                std::string                         text;Node::text62,2896
                int                                 type;Node::type63,2954

control/intromsg.h,49
static inline void intf_consoleIntroMsg(22,1098

demux/adaptive/plumbing/Demuxer.hpp,959
#define DEMUXER_HPP21,987
namespace adaptive26,1051
    class AbstractDemuxeradaptive::AbstractDemuxer30,1105
            bool b_startsfromzero;adaptive::AbstractDemuxer::b_startsfromzero45,1589
            bool b_reinitsonseek;adaptive::AbstractDemuxer::b_reinitsonseek46,1624
            bool b_candetectswitches;adaptive::AbstractDemuxer::b_candetectswitches47,1658
    class Demuxer adaptive::Demuxer50,1704
            AbstractSourceStream *sourcestream;adaptive::Demuxer::sourcestream61,2099
            demux_t *p_realdemux;adaptive::Demuxer::p_realdemux62,2147
            demux_t *p_demux;adaptive::Demuxer::p_demux63,2181
            std::string name;adaptive::Demuxer::name64,2211
            es_out_t *p_es_out;adaptive::Demuxer::p_es_out65,2241
            bool b_eof;adaptive::Demuxer::b_eof66,2273
    class SlaveDemuxer adaptive::SlaveDemuxer69,2305
            mtime_t length;adaptive::SlaveDemuxer::length78,2617

demux/dash/DASHManager.h,183
#define DASHMANAGER_H_26,1171
    class DASHManager 44,1435
            DASHManager(47,1504
            virtual ~DASHManager 50,1679
            virtual bool needsUpdate(52,1720

access/tcp.c,193
vlc_module_begin 46,1782
struct access_sys_t60,2237
    int        fd;62,2259
static int Open(71,2566
static void Close(121,3838
static ssize_t Read(133,4219
static int Control(154,4810

video_filter/oldmovie.c,3308
static inline int64_t MOD(42,1569
#define SUB_MIN(45,1656
#define ADD_MAX(47,1752
static inline int32_t PIX_OFS(50,1849
#define CHECK_PIX_OFS(53,1997
static inline void DARKEN_PIXEL(59,2205
static inline void LIGHTEN_PIXEL(65,2398
static inline void CHECK_N_DARKEN_PIXEL(71,2623
static inline void CHECK_N_LIGHTEN_PIXEL(77,2872
#define MAX_SCRATCH 83,3123
#define MAX_HAIR 84,3153
#define MAX_DUST 85,3183
    int32_t  i_offset;88,3231
    int32_t  i_width;89,3254
    uint16_t i_intensity;90,3276
    mtime_t  i_stop_trigger;91,3302
} scratch_t;92,3331
    int32_t  i_x,95,3362
    int32_t  i_x, i_y;95,3362
    uint8_t  i_rotation;96,3385
    int32_t  i_width;97,3410
    int32_t  i_length;98,3432
    int32_t  i_curve;99,3455
    uint16_t i_intensity;100,3477
    mtime_t  i_stop_trigger;101,3503
} hair_t;102,3532
    int32_t  i_x,105,3560
    int32_t  i_x, i_y;105,3560
    int32_t  i_width;106,3583
    uint16_t i_intensity;107,3605
    mtime_t  i_stop_trigger;108,3631
} dust_t;109,3660
struct filter_sys_t 111,3671
    bool b_init;114,3717
    int32_t  i_planes;115,3734
    int32_t *i_height;i_height116,3757
    int32_t *i_width;i_width117,3780
    int32_t *i_visible_pitch;i_visible_pitch118,3802
    mtime_t i_start_time;119,3832
    mtime_t i_last_time;120,3858
    mtime_t i_cur_time;121,3883
    mtime_t  i_offset_trigger;124,3942
    mtime_t  i_sliding_trigger;125,3973
    mtime_t  i_sliding_stop_trig;126,4005
    int32_t  i_offset_ofs;127,4039
    int32_t  i_sliding_ofs;128,4066
    int32_t  i_sliding_speed;129,4094
    mtime_t    i_scratch_trigger;132,4151
    scratch_t *p_scratch[p_scratch133,4185
    mtime_t    i_hair_trigger;136,4248
    hair_t    *p_hair[p_hair137,4279
    mtime_t    i_blotch_trigger;140,4338
    mtime_t    i_dust_trigger;143,4395
    dust_t    *p_dust[p_dust144,4426
vlc_module_begin(177,5916
static void Close(227,7404
static picture_t *Filter(Filter239,7666
static int oldmovie_allocate_data(304,9526
static void oldmovie_free_allocated_data(334,10620
static void oldmovie_shutter_effect(355,11177
#define SHUTTER_FREQ 358,11303
#define SHUTTER_SPEED 359,11331
#define SHUTTER_HEIGHT 360,11360
#define SHUTTER_INTENSITY 362,11391
#define SUB_FRAME 364,11421
static int oldmovie_sliding_offset_effect(394,12658
#define OFFSET_AVERAGE_PERIOD 402,12836
#define SLIDING_AVERAGE_PERIOD 425,13689
#define SLIDING_AVERAGE_DURATION 426,13740
static int oldmovie_sliding_offset_apply(485,16292
static void oldmovie_black_n_white_effect(519,17709
static int oldmovie_dark_border_effect(539,18539
#define BORDER_DIST 543,18668
static int oldmovie_film_scratch_effect(572,19645
#define SCRATCH_GENERATOR_PERIOD 576,19775
#define SCRATCH_DURATION 577,19827
static void oldmovie_film_blotch_effect(633,22392
#define BLOTCH_GENERATOR_PERIOD 637,22522
static void oldmovie_film_dust_effect(672,24188
#define ONESHOT_DUST_RATIO 673,24272
#define HAIR_GENERATOR_PERIOD 694,25026
#define HAIR_DURATION 695,25077
#define DUST_GENERATOR_PERIOD 696,25128
#define DUST_DURATION 697,25179
static void oldmovie_define_hair_location(703,25290
static int oldmovie_lens_hair_effect(719,25886
static void oldmovie_define_dust_location(793,29187
static int oldmovie_lens_dust_effect(816,30043

access/mms/mmstu.c,887
#undef MMS_DEBUG54,1733
int  MMSTUOpen(88,2886
void MMSTUClose(193,5956
static int Control(211,6387
static int Seek(327,9892
static block_t *Block(Block426,12657
static int MMSOpen(479,14418
#define GETUTF16(596,18387
#undef GETUTF16618,19142
static int MMSStart(918,28985
static int MMSStop(961,30448
static void MMSClose(977,30982
static int mms_CommandSend(1013,32003
static int NetFillBuffer(1067,33900
static int  mms_ParseCommand(1175,36572
 #define GET32(1180,36764
#undef GET321250,38708
static int  mms_ParsePacket(1255,38752
static int mms_ReceivePacket(1354,41662
static int mms_ReceiveCommand(1452,44553
#define MMS_RETRY_MAX 1500,45713
static int mms_CommandRead(1502,45745
static int mms_HeaderMediaRead(1549,47025
static void *KeepAliveThread(KeepAliveThread1602,48693
static void KeepAliveStart(1620,49049
static void KeepAliveStop(1631,49381

demux/dash/mpd/MPD.cpp,161
MPD::MPD 40,1385
MPD::~MPD(47,1529
bool MPD::isLive(52,1577
Profile MPD::getProfile(63,1756
StreamFormat MPD::mimeToFormat(68,1813
void MPD::debug(86,2388

demux/adaptive/playlist/Segment.h,1815
#define SEGMENT_H_26,1164
        class ISegment 51,1594
                ISegment(54,1670
                virtual ~ISegment(55,1725
                virtual SegmentChunk*                   toChunk 61,2020
                virtual void                            setByteRange 62,2153
                virtual void                            setSequenceNumber(63,2253
                virtual uint64_t                        getSequenceNumber(64,2338
                Property<stime_t>       startTime;ISegment::startTime73,3128
                Property<stime_t>       duration;ISegment::duration74,3179
                Property<unsigned>      chunksuse;ISegment::chunksuse75,3229
                bool                    discontinuity;ISegment::discontinuity76,3280
                size_t                  startByte;ISegment::startByte83,3571
                size_t                  endByte;ISegment::endByte84,3622
                std::string             debugName;ISegment::debugName85,3671
                int                     classId;ISegment::classId86,3722
                bool                    templated;ISegment::templated87,3771
                uint64_t                sequence;ISegment::sequence88,3822
                static const int        SEQUENCE_INVALID;ISegment::SEQUENCE_INVALID89,3872
                static const int        SEQUENCE_FIRST;ISegment::SEQUENCE_FIRST90,3930
        class Segment 93,3998
                std::vector<SubSegment *> subsegments;Segment::subsegments106,4541
                Url sourceUrl;Segment::sourceUrl107,4596
                int size;Segment::size108,4627
        class InitSegment 111,4665
        class IndexSegment 118,4862
        class SubSegment 125,5062
                ISegment *parent;SubSegment::parent134,5461

access/mms/mmstu.h,2015
#define VLC_MMS_MMSTU_H_25,1190
#define MMS_PACKET_ANY 27,1216
#define MMS_PACKET_CMD 28,1250
#define MMS_PACKET_HEADER 29,1284
#define MMS_PACKET_MEDIA 30,1318
#define MMS_PACKET_UDP_TIMING 31,1352
#define MMS_CMD_HEADERSIZE 33,1387
#define MMS_BUFFER_SIZE 35,1419
struct access_sys_t37,1451
    int         i_proto;39,1473
    int         i_handle_tcp;40,1540
    int         i_handle_udp;41,1619
    char        sz_bind_addr[sz_bind_addr43,1760
    vlc_url_t   url;45,1828
    uint64_t    i_position;46,1849
    uint64_t    i_size;47,1877
    asf_header_t    asfh;49,1902
    unsigned    i_timeout;51,1929
    uint8_t     buffer_tcp[buffer_tcp54,1967
    size_t      i_buffer_tcp;55,2012
    uint8_t     buffer_udp[buffer_udp57,2043
    size_t      i_buffer_udp;58,2088
    guid_t      guid;61,2167
    int         i_command_level;62,2189
    int         i_seq_num;63,2222
    uint32_t    i_header_packet_id_type;64,2249
    uint32_t    i_media_packet_id_type;65,2290
    int         i_packet_seq_num;67,2331
    uint8_t     *p_cmd;p_cmd69,2366
    size_t      i_cmd;70,2420
    uint8_t     *p_header;p_header72,2481
    size_t      i_header;73,2543
    uint8_t     *p_media;p_media75,2570
    size_t      i_media;76,2632
    size_t      i_media_used;77,2657
    int         i_command;80,2720
    char        *psz_server_version;psz_server_version83,2789
    char        *psz_tool_version;psz_tool_version84,2826
    char        *psz_update_player_url;psz_update_player_url85,2861
    char        *psz_encryption_type;psz_encryption_type86,2901
    uint32_t    i_flags_broadcast;89,2967
    uint32_t    i_media_length;90,3002
    size_t      i_packet_length;91,3034
    uint32_t    i_packet_count;92,3067
    uint32_t    i_max_bit_rate;93,3099
    size_t      i_header_size;94,3131
    bool  b_seekable;97,3178
    bool  b_eof;98,3200
    vlc_mutex_t  lock_netwrite;100,3218
    bool         b_keep_alive;101,3250
    vlc_thread_t keep_alive;102,3281

video_output/android/nativewindow.c,211
#define THREAD_NAME 40,1312
vlc_module_begin(49,1529
struct vout_window_sys_t59,1790
    AWindowHandler *p_awh;p_awh61,1817
static int Open(67,1892
static void Close(108,2942
static int Control(119,3114

demux/adaptive/http/HTTPConnection.hpp,1659
#define HTTPCONNECTION_H_26,1233
namespace adaptive33,1361
    namespace httpadaptive::http35,1382
        class AbstractConnectionadaptive::http::AbstractConnection39,1430
                vlc_object_t      *p_object;adaptive::http::AbstractConnection::p_object55,2073
                ConnectionParams   params;adaptive::http::AbstractConnection::params56,2118
                bool               available;adaptive::http::AbstractConnection::available57,2161
                size_t             contentLength;adaptive::http::AbstractConnection::contentLength58,2207
                BytesRange         bytesRange;adaptive::http::AbstractConnection::bytesRange59,2257
                size_t             bytesRead;adaptive::http::AbstractConnection::bytesRead60,2304
        class HTTPConnection adaptive::http::HTTPConnection63,2362
                char * psz_useragent;adaptive::http::HTTPConnection::psz_useragent89,3560
                bool                connectionClose;adaptive::http::HTTPConnection::connectionClose91,3599
                bool                queryOk;adaptive::http::HTTPConnection::queryOk92,3652
                int                 retries;adaptive::http::HTTPConnection::retries93,3697
                Socket *socket;adaptive::http::HTTPConnection::socket97,3816
       class StreamUrlConnection adaptive::http::StreamUrlConnection100,3859
                stream_t *p_streamurl;adaptive::http::StreamUrlConnection::p_streamurl115,4415
       class ConnectionFactoryadaptive::http::ConnectionFactory118,4465
       class StreamUrlConnectionFactory adaptive::http::StreamUrlConnectionFactory126,4720

packetizer/startcode_helper.h,283
#define VLC_STARTCODE_HELPER_H_21,1093
#define TRY_MATCH(32,1373
static inline const uint8_t * startcode_FindAnnexB_SSE2(50,1885
static inline const uint8_t * startcode_FindAnnexB(116,3749
static inline const uint8_t * startcode_FindAnyAnnexB(147,4582
#undef TRY_MATCH163,4983

demux/hls/playlist/Tags.hpp,2349
#define TAGS_HPP21,981
namespace hls30,1092
    namespace playlisthls::playlist33,1109
        class Attributehls::playlist::Attribute36,1139
                std::pair<hls::playlist::Attribute::std::pair46,1509
                std::pair<hls::playlist::Attribute::std::pair47,1582
                std::string name;hls::playlist::Attribute::name49,1642
                std::string value;hls::playlist::Attribute::value50,1676
        class Taghls::playlist::Tag53,1723
                    EXTXDISCONTINUITY hls::playlist::Tag::EXTXDISCONTINUITY58,1810
                    EXTXENDLIST,hls::playlist::Tag::EXTXENDLIST59,1853
                    EXTXIFRAMESONLY,hls::playlist::Tag::EXTXIFRAMESONLY60,1886
                int type;hls::playlist::Tag::type67,2059
        class SingleValueTag hls::playlist::SingleValueTag70,2097
                    URI hls::playlist::SingleValueTag::URI75,2208
                    EXTXVERSION,hls::playlist::SingleValueTag::EXTXVERSION76,2238
                    EXTXBYTERANGE,hls::playlist::SingleValueTag::EXTXBYTERANGE77,2271
                    EXTXPROGRAMDATETIME,hls::playlist::SingleValueTag::EXTXPROGRAMDATETIME78,2306
                    EXTXTARGETDURATION,hls::playlist::SingleValueTag::EXTXTARGETDURATION79,2347
                    EXTXMEDIASEQUENCE,hls::playlist::SingleValueTag::EXTXMEDIASEQUENCE80,2387
                    EXTXDISCONTINUITYSEQUENCE,hls::playlist::SingleValueTag::EXTXDISCONTINUITYSEQUENCE81,2426
                    EXTXPLAYLISTTYPE,hls::playlist::SingleValueTag::EXTXPLAYLISTTYPE82,2473
                Attribute attr;hls::playlist::SingleValueTag::attr88,2704
        class AttributesTag hls::playlist::AttributesTag91,2748
                    EXTXKEY hls::playlist::AttributesTag::EXTXKEY96,2858
                    EXTXMAP,hls::playlist::AttributesTag::EXTXMAP97,2892
                    EXTXMEDIA,hls::playlist::AttributesTag::EXTXMEDIA98,2921
                    EXTXSTREAMINF,hls::playlist::AttributesTag::EXTXSTREAMINF99,2952
                std::list<Attribute *> attributes;hls::playlist::AttributesTag::attributes108,3318
        class ValuesListTag hls::playlist::ValuesListTag111,3381
                    EXTINF hls::playlist::ValuesListTag::EXTINF116,3501
        class TagFactoryhls::playlist::TagFactory125,3754

audio_filter/spatializer/revmodel.hpp,2036
#define _revmodel_12,245
class revmodel18,329
    float    gain;revmodel::gain39,936
    float    roomsize,revmodel::roomsize40,955
    float    roomsize,roomsize1;revmodel::roomsize140,955
    float    damp,revmodel::damp41,988
    float    damp,damp1;revmodel::damp141,988
    float    wet,revmodel::wet42,1013
    float    wet,wet1,revmodel::wet142,1013
    float    wet,wet1,wet2;revmodel::wet242,1013
    float    dry;revmodel::dry43,1041
    float    width;revmodel::width44,1059
    float    mode;revmodel::mode45,1079
    comb    combL[revmodel::combL52,1250
    comb    combR[revmodel::combR53,1279
    allpass    allpassL[revmodel::allpassL56,1332
    allpass    allpassR[revmodel::allpassR57,1371
    float    bufcombL1[revmodel::bufcombL160,1440
    float    bufcombR1[revmodel::bufcombR161,1478
    float    bufcombL2[revmodel::bufcombL262,1516
    float    bufcombR2[revmodel::bufcombR263,1554
    float    bufcombL3[revmodel::bufcombL364,1592
    float    bufcombR3[revmodel::bufcombR365,1630
    float    bufcombL4[revmodel::bufcombL466,1668
    float    bufcombR4[revmodel::bufcombR467,1706
    float    bufcombL5[revmodel::bufcombL568,1744
    float    bufcombR5[revmodel::bufcombR569,1782
    float    bufcombL6[revmodel::bufcombL670,1820
    float    bufcombR6[revmodel::bufcombR671,1858
    float    bufcombL7[revmodel::bufcombL772,1896
    float    bufcombR7[revmodel::bufcombR773,1934
    float    bufcombL8[revmodel::bufcombL874,1972
    float    bufcombR8[revmodel::bufcombR875,2010
    float    bufallpassL1[revmodel::bufallpassL178,2082
    float    bufallpassR1[revmodel::bufallpassR179,2126
    float    bufallpassL2[revmodel::bufallpassL280,2170
    float    bufallpassR2[revmodel::bufallpassR281,2214
    float    bufallpassL3[revmodel::bufallpassL382,2258
    float    bufallpassR3[revmodel::bufallpassR383,2302
    float    bufallpassL4[revmodel::bufallpassL484,2346
    float    bufallpassR4[revmodel::bufallpassR485,2390

access/live555.cpp,4540
#define KASENNA_TEXT 73,2439
#define KASENNA_LONGTEXT 74,2488
#define WMSERVER_TEXT 78,2697
#define WMSERVER_LONGTEXT 79,2747
#define USER_TEXT 83,2938
#define USER_LONGTEXT 84,2971
#define PASS_TEXT 86,3093
#define PASS_LONGTEXT 87,3126
#define FRAME_BUFFER_SIZE_TEXT 89,3248
#define FRAME_BUFFER_SIZE_LONGTEXT 90,3308
#define DEFAULT_FRAME_BUFFER_SIZE 93,3485
    demux_t         *p_demux;::p_demux151,5783
    MediaSubsession *sub;::sub152,5813
    es_format_t     fmt;::fmt154,5840
    es_out_id_t     *p_es;::p_es155,5865
        SINGLE_STREAM,::SINGLE_STREAM159,5908
        MULTIPLEXED_STREAM,::MULTIPLEXED_STREAM160,5931
        QUICKTIME_STREAM,::QUICKTIME_STREAM161,5959
        ASF_STREAM::ASF_STREAM162,5985
    } format;::format163,6004
    block_t         *p_asf_block;::p_asf_block165,6019
    bool            b_discard_trunc;::b_discard_trunc166,6053
    vlc_demux_chained_t *p_out_muxed;::p_out_muxed167,6090
    uint8_t         *p_buffer;::p_buffer169,6155
    unsigned int    i_buffer;::i_buffer170,6186
    bool            b_rtcp_sync;::b_rtcp_sync172,6217
    bool            b_discontinuity;::b_discontinuity173,6250
    char            waiting;::waiting174,6287
    int64_t         i_lastpts;::i_lastpts175,6316
    int64_t         i_pcr;::i_pcr176,6347
    int64_t         i_offset;::i_offset177,6374
    double          f_npt;::f_npt178,6404
    bool            b_selected;::b_selected180,6432
} live_track_t;182,6465
struct demux_sys_t186,6504
    char            *p_sdp;demux_sys_t::p_sdp188,6525
    char            *psz_pl_url;demux_sys_t::psz_pl_url189,6577
    vlc_url_t       url;demux_sys_t::url190,6634
    MediaSession     *ms;demux_sys_t::ms192,6660
    TaskScheduler    *scheduler;demux_sys_t::scheduler193,6686
    UsageEnvironment *env demux_sys_t::env194,6719
    RTSPClientVlc    *rtsp;demux_sys_t::rtsp195,6747
    int              i_track;demux_sys_t::i_track198,6786
    live_track_t     **track;demux_sys_t::track199,6816
    asf_header_t     asfh;demux_sys_t::asfh202,6871
    vlc_demux_chained_t *p_out_asf;demux_sys_t::p_out_asf203,6898
    bool             b_real;demux_sys_t::b_real204,6934
    int64_t          i_pcr;demux_sys_t::i_pcr207,6974
    bool             b_rtcp_sync;demux_sys_t::b_rtcp_sync208,7018
    double           f_npt;demux_sys_t::f_npt209,7091
    double           f_npt_length;demux_sys_t::f_npt_length210,7119
    double           f_npt_start;demux_sys_t::f_npt_start211,7154
    vlc_timer_t      timer;demux_sys_t::timer214,7226
    vlc_mutex_t      timeout_mutex;demux_sys_t::timeout_mutex215,7254
    bool             b_force_mcast;demux_sys_t::b_force_mcast218,7377
    bool             b_multicast;demux_sys_t::b_multicast219,7413
    bool             b_no_data;demux_sys_t::b_no_data220,7491
    int              i_no_data_ti;demux_sys_t::i_no_data_ti221,7563
    char             event_rtsp;demux_sys_t::event_rtsp223,7642
    char             event_data;demux_sys_t::event_data224,7675
    bool             b_get_param;demux_sys_t::b_get_param226,7709
    bool             b_paused;demux_sys_t::b_paused227,7789
    bool             b_error;demux_sys_t::b_error228,7846
    int              i_live555_ret;demux_sys_t::i_live555_ret229,7876
    float            f_seek_request;demux_sys_t::f_seek_request231,7948
class RTSPClientVlc 235,8041
    RTSPClientVlc(RTSPClientVlc::RTSPClientVlc238,8091
    demux_sys_t *p_sys;RTSPClientVlc::p_sys250,8558
static int  Open 280,9640
static void Close(452,14513
static inline const char *strempty(strempty487,15510
static inline Boolean toBool(488,15581
static void default_live555_callback(490,15660
static bool wait_Live555_response(501,16070
static void continueAfterDESCRIBE(526,16944
static void continueAfterOPTIONS(549,17613
static int Connect(568,18498
static int SessionsSetup(683,22759
static int Play(1223,44820
static int Demux(1262,46190
static int Control(1431,52113
static int RollOverTcp(1695,61663
static block_t *StreamParseAsf(StreamParseAsf1760,63490
static void StreamRead(1844,66540
static void StreamClose(2080,75033
static void TaskInterruptRTSP(2107,75844
static void TaskInterruptData(2115,76003
static void TimeoutPrevention(2128,76361
static int ParseASF(2172,78157
static unsigned char* parseH264ConfigStr(2220,79511
static uint8_t *parseVorbisConfigStr(parseVorbisConfigStr2262,80523
static char *passwordLessURL(passwordLessURL2288,81423

access/directory.c,179
struct access_sys_t45,1702
    char *base_uri;base_uri47,1724
    DIR *dir;dir48,1744
int DirInit 54,1983
int DirOpen 87,2895
void DirClose(104,3361
int DirRead 114,3543

demux/mpeg/ts_metadata.c,71
static int ID3TAG_Parse_Handler(31,1209
void ProcessMetadata(41,1499

stream_out/transcode/transcode.c,1920
#define VENC_TEXT 45,1895
#define VENC_LONGTEXT 46,1933
#define VCODEC_TEXT 49,2057
#define VCODEC_LONGTEXT 50,2107
#define VB_TEXT 52,2187
#define VB_LONGTEXT 53,2223
#define SCALE_TEXT 55,2304
#define SCALE_LONGTEXT 56,2343
#define FPS_TEXT 58,2443
#define FPS_LONGTEXT 59,2483
#define DEINTERLACE_TEXT 61,2565
#define DEINTERLACE_LONGTEXT 62,2614
#define DEINTERLACE_MODULE_TEXT 64,2696
#define DEINTERLACE_MODULE_LONGTEXT 65,2753
#define WIDTH_TEXT 67,2842
#define WIDTH_LONGTEXT 68,2879
#define HEIGHT_TEXT 70,2936
#define HEIGHT_LONGTEXT 71,2975
#define MAXWIDTH_TEXT 73,3034
#define MAXWIDTH_LONGTEXT 74,3082
#define MAXHEIGHT_TEXT 76,3150
#define MAXHEIGHT_LONGTEXT 77,3200
#define VFILTER_TEXT 79,3270
#define VFILTER_LONGTEXT 80,3310
#define AENC_TEXT 84,3489
#define AENC_LONGTEXT 85,3527
#define ACODEC_TEXT 88,3651
#define ACODEC_LONGTEXT 89,3701
#define AB_TEXT 91,3781
#define AB_LONGTEXT 92,3817
#define ARATE_TEXT 94,3898
#define ARATE_LONGTEXT 95,3941
#define ALANG_TEXT 97,4049
#define ALANG_LONGTEXT 98,4089
#define ACHANS_TEXT 100,4167
#define ACHANS_LONGTEXT 101,4208
#define AFILTER_TEXT 103,4298
#define AFILTER_LONGTEXT 104,4338
#define SENC_TEXT 108,4527
#define SENC_LONGTEXT 109,4568
#define SCODEC_TEXT 112,4697
#define SCODEC_LONGTEXT 113,4750
#define SFILTER_TEXT 116,4835
#define SFILTER_LONGTEXT 117,4871
#define OSD_TEXT 123,5174
#define OSD_LONGTEXT 124,5206
#define THREADS_TEXT 127,5314
#define THREADS_LONGTEXT 128,5359
#define HP_TEXT 130,5442
#define HP_LONGTEXT 131,5478
#define POOL_TEXT 134,5595
#define POOL_LONGTEXT 135,5637
static const char *const ppsz_deinterlace_type[ppsz_deinterlace_type139,5775
#define SOUT_CFG_PREFIX 147,5947
vlc_module_begin 149,5990
static int Open(248,10658
static void Close(482,18763
static sout_stream_id_sys_t *Add(Add513,19548
static void Del(598,22012
static int Send(640,23045

video_output/android/utils.c,3667
typedef ANativeWindow* (*ptr_ANativeWindow_fromSurface)ptr_ANativeWindow_fromSurface29,1286
typedef void (*ptr_ANativeWindow_release)ptr_ANativeWindow_release30,1361
struct AWindowHandler32,1421
    JavaVM *p_jvm;p_jvm34,1445
    jobject jobj;35,1464
        jobject jsurface;38,1496
        ANativeWindow *p_anw;p_anw39,1522
    } views[views40,1552
    void *p_anw_dl;p_anw_dl42,1579
    ptr_ANativeWindow_fromSurface pf_winFromSurface;43,1599
    ptr_ANativeWindow_release pf_winRelease;44,1652
    native_window_api_t anw_api;45,1697
    native_window_priv_api_t anwpriv_api;46,1730
    vlc_mutex_t lock;48,1773
        bool b_registered;50,1808
            int i_action,52,1852
            int i_action, i_button,52,1852
            int i_action, i_button, i_x,52,1852
            int i_action, i_button, i_x, i_y;52,1852
        } mouse;53,1898
            int i_width,55,1932
            int i_width, i_height;55,1932
        } window;56,1967
    } event;57,1985
        jmethodID getVideoSurface;63,2031
        jmethodID getSubtitlesSurface;64,2066
        jmethodID setCallback;65,2105
        jmethodID setBuffersGeometry;66,2136
        jmethodID setWindowLayout;67,2174
    } AndroidNativeWindow;68,2209
} jfields;69,2236
# define ANDROID_SYM_S_LOCK 77,2386
# define ANDROID_SYM_S_LOCK2 80,2497
# define ANDROID_SYM_S_UNLOCK 83,2621
typedef void (*AndroidSurface_lock)AndroidSurface_lock85,2697
typedef void (*AndroidSurface_lock2)AndroidSurface_lock286,2755
typedef void (*AndroidSurface_unlockAndPost)AndroidSurface_unlockAndPost87,2817
    void *p_dl_handle;p_dl_handle90,2889
    void *p_surface_handle;p_surface_handle91,2912
    AndroidSurface_lock pf_lock;92,2940
    AndroidSurface_lock2 pf_lock2;93,2973
    AndroidSurface_unlockAndPost pf_unlockAndPost;94,3008
} NativeSurface;95,3059
NativeSurface_Load(98,3098
NativeSurface_getHandle(117,3653
NativeSurface_fromSurface(150,4548
NativeSurface_release(182,5332
NativeSurface_lock(191,5495
        uint32_t    w;197,5683
        uint32_t    h;198,5706
        uint32_t    s;199,5729
        uint32_t    usage;200,5752
        uint32_t    format;201,5779
        uint32_t*   bits;202,5807
        uint32_t    reserved[reserved203,5833
NativeSurface_unlockAndPost(227,6367
LoadNativeSurfaceAPI(235,6537
LoadNativeWindowAPI(249,6916
LoadNativeWindowPrivAPI(287,8074
static pthread_key_t jni_env_key;316,9723
static pthread_once_t jni_env_key_once 317,9757
jni_detach_thread(322,9923
static void jni_env_key_create(332,10089
android_getEnvCommon(340,10336
android_getEnv(384,11601
const JNINativeMethod jni_callbacks[jni_callbacks394,11900
InitJNIFields(402,12139
#define CHECK_EXCEPTION(414,12401
#define GET_METHOD(423,12639
#undef CHECK_EXCEPTION435,13299
#undef GET_METHOD436,13322
#define JNI_CALL(456,13810
AWindowHandler_getEnv(460,13954
AWindowHandler_new(466,14092
AWindowHandler_releaseANativeWindowEnv(506,15191
AWindowHandler_destroy(539,16279
AWindowHandler_getANativeWindowAPI(563,16972
AWindowHandler_getANativeWindowPrivAPI(569,17090
WindowHandler_NewSurfaceEnv(578,17293
AWindowHandler_getANativeWindow(596,17814
AWindowHandler_getSurface(619,18422
void AWindowHandler_releaseANativeWindow(631,18692
static inline AWindowHandler *jlong_AWindowHandler(jlong_AWindowHandler639,18976
AndroidNativeWindow_onMouseEvent(645,19106
AndroidNativeWindow_onWindowSize(660,19580
AWindowHandler_registerCallback(673,19973
AWindowHandler_getMouseCoordinates(688,20416
AWindowHandler_getWindowSize(712,21149
AWindowHandler_setBuffersGeometry(732,21675
AWindowHandler_setWindowLayout(750,22248

gui/minimal_macosx/VLCMinimalVoutWindow.h,41
@interface VLCMinimalVoutWindow 29,1318

access/v4l2/linux/v4l2-controls.h,30051
#define __LINUX_V4L2_CONTROLS_H50,2416
#define V4L2_CTRL_CLASS_USER	53,2471
#define V4L2_CTRL_CLASS_MPEG	54,2544
#define V4L2_CTRL_CLASS_CAMERA	55,2617
#define V4L2_CTRL_CLASS_FM_TX	56,2688
#define V4L2_CTRL_CLASS_FLASH	57,2763
#define V4L2_CTRL_CLASS_JPEG	58,2833
#define V4L2_CTRL_CLASS_IMAGE_SOURCE	59,2906
#define V4L2_CTRL_CLASS_IMAGE_PROC	60,2982
#define V4L2_CTRL_CLASS_DV	61,3060
#define V4L2_CID_BASE	65,3159
#define V4L2_CID_USER_BASE 66,3214
#define V4L2_CID_USER_CLASS 67,3257
#define V4L2_CID_BRIGHTNESS	68,3314
#define V4L2_CID_CONTRAST	69,3361
#define V4L2_CID_SATURATION	70,3406
#define V4L2_CID_HUE	71,3453
#define V4L2_CID_AUDIO_VOLUME	72,3494
#define V4L2_CID_AUDIO_BALANCE	73,3543
#define V4L2_CID_AUDIO_BASS	74,3593
#define V4L2_CID_AUDIO_TREBLE	75,3640
#define V4L2_CID_AUDIO_MUTE	76,3689
#define V4L2_CID_AUDIO_LOUDNESS	77,3736
#define V4L2_CID_BLACK_LEVEL	78,3788
#define V4L2_CID_AUTO_WHITE_BALANCE	79,3854
#define V4L2_CID_DO_WHITE_BALANCE	80,3909
#define V4L2_CID_RED_BALANCE	81,3962
#define V4L2_CID_BLUE_BALANCE	82,4011
#define V4L2_CID_GAMMA	83,4061
#define V4L2_CID_WHITENESS	84,4105
#define V4L2_CID_EXPOSURE	85,4167
#define V4L2_CID_AUTOGAIN	86,4213
#define V4L2_CID_GAIN	87,4259
#define V4L2_CID_HFLIP	88,4302
#define V4L2_CID_VFLIP	89,4346
#define V4L2_CID_POWER_LINE_FREQUENCY	91,4391
enum v4l2_power_line_frequency 92,4448
	V4L2_CID_POWER_LINE_FREQUENCY_DISABLED	93,4481
	V4L2_CID_POWER_LINE_FREQUENCY_50HZ	94,4526
	V4L2_CID_POWER_LINE_FREQUENCY_60HZ	95,4567
	V4L2_CID_POWER_LINE_FREQUENCY_AUTO	96,4608
#define V4L2_CID_HUE_AUTO	98,4652
#define V4L2_CID_WHITE_BALANCE_TEMPERATURE	99,4699
#define V4L2_CID_SHARPNESS	100,4761
#define V4L2_CID_BACKLIGHT_COMPENSATION 101,4809
#define V4L2_CID_CHROMA_AGC 102,4869
#define V4L2_CID_COLOR_KILLER 103,4936
#define V4L2_CID_COLORFX	104,5003
enum v4l2_colorfx 105,5049
	V4L2_COLORFX_NONE	106,5069
	V4L2_COLORFX_BW	107,5095
	V4L2_COLORFX_SEPIA	108,5120
	V4L2_COLORFX_NEGATIVE	109,5147
	V4L2_COLORFX_EMBOSS	110,5177
	V4L2_COLORFX_SKETCH	111,5205
	V4L2_COLORFX_SKY_BLUE	112,5233
	V4L2_COLORFX_GRASS_GREEN	113,5263
	V4L2_COLORFX_SKIN_WHITEN	114,5295
	V4L2_COLORFX_VIVID	115,5327
	V4L2_COLORFX_AQUA	116,5354
	V4L2_COLORFX_ART_FREEZE	117,5381
	V4L2_COLORFX_SILHOUETTE	118,5414
	V4L2_COLORFX_SOLARIZATION	119,5447
	V4L2_COLORFX_ANTIQUE	120,5481
	V4L2_COLORFX_SET_CBCR	121,5511
#define V4L2_CID_AUTOBRIGHTNESS	123,5545
#define V4L2_CID_BAND_STOP_FILTER	124,5598
#define V4L2_CID_ROTATE	126,5653
#define V4L2_CID_BG_COLOR	127,5699
#define V4L2_CID_CHROMA_GAIN 129,5747
#define V4L2_CID_ILLUMINATORS_1	131,5815
#define V4L2_CID_ILLUMINATORS_2	132,5868
#define V4L2_CID_MIN_BUFFERS_FOR_CAPTURE	134,5922
#define V4L2_CID_MIN_BUFFERS_FOR_OUTPUT	135,5982
#define V4L2_CID_ALPHA_COMPONENT	137,6043
#define V4L2_CID_COLORFX_CBCR	138,6096
#define V4L2_CID_LASTP1 141,6167
#define V4L2_CID_USER_MEYE_BASE	147,6404
#define V4L2_CID_MPEG_BASE 151,6499
#define V4L2_CID_MPEG_CLASS 152,6560
#define V4L2_CID_MPEG_STREAM_TYPE 155,6672
enum v4l2_mpeg_stream_type 156,6731
	V4L2_MPEG_STREAM_TYPE_MPEG2_PS 157,6760
	V4L2_MPEG_STREAM_TYPE_MPEG2_TS 158,6827
	V4L2_MPEG_STREAM_TYPE_MPEG1_SS 159,6896
	V4L2_MPEG_STREAM_TYPE_MPEG2_DVD 160,6962
	V4L2_MPEG_STREAM_TYPE_MPEG1_VCD 161,7036
	V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD 162,7110
#define V4L2_CID_MPEG_STREAM_PID_PMT 164,7188
#define V4L2_CID_MPEG_STREAM_PID_AUDIO 165,7250
#define V4L2_CID_MPEG_STREAM_PID_VIDEO 166,7314
#define V4L2_CID_MPEG_STREAM_PID_PCR 167,7378
#define V4L2_CID_MPEG_STREAM_PES_ID_AUDIO 168,7440
#define V4L2_CID_MPEG_STREAM_PES_ID_VIDEO 169,7506
#define V4L2_CID_MPEG_STREAM_VBI_FMT 170,7572
enum v4l2_mpeg_stream_vbi_fmt 171,7634
	V4L2_MPEG_STREAM_VBI_FMT_NONE 172,7666
	V4L2_MPEG_STREAM_VBI_FMT_IVTV 173,7735
#define V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ 177,7878
enum v4l2_mpeg_audio_sampling_freq 178,7946
	V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 179,7983
	V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 180,8025
	V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 181,8067
#define V4L2_CID_MPEG_AUDIO_ENCODING 183,8112
enum v4l2_mpeg_audio_encoding 184,8176
	V4L2_MPEG_AUDIO_ENCODING_LAYER_1 185,8208
	V4L2_MPEG_AUDIO_ENCODING_LAYER_2 186,8247
	V4L2_MPEG_AUDIO_ENCODING_LAYER_3 187,8286
	V4L2_MPEG_AUDIO_ENCODING_AAC 188,8325
	V4L2_MPEG_AUDIO_ENCODING_AC3 189,8364
#define V4L2_CID_MPEG_AUDIO_L1_BITRATE 191,8406
enum v4l2_mpeg_audio_l1_bitrate 192,8472
	V4L2_MPEG_AUDIO_L1_BITRATE_32K 193,8506
	V4L2_MPEG_AUDIO_L1_BITRATE_64K 194,8544
	V4L2_MPEG_AUDIO_L1_BITRATE_96K 195,8582
	V4L2_MPEG_AUDIO_L1_BITRATE_128K 196,8620
	V4L2_MPEG_AUDIO_L1_BITRATE_160K 197,8658
	V4L2_MPEG_AUDIO_L1_BITRATE_192K 198,8696
	V4L2_MPEG_AUDIO_L1_BITRATE_224K 199,8734
	V4L2_MPEG_AUDIO_L1_BITRATE_256K 200,8772
	V4L2_MPEG_AUDIO_L1_BITRATE_288K 201,8810
	V4L2_MPEG_AUDIO_L1_BITRATE_320K 202,8848
	V4L2_MPEG_AUDIO_L1_BITRATE_352K 203,8886
	V4L2_MPEG_AUDIO_L1_BITRATE_384K 204,8925
	V4L2_MPEG_AUDIO_L1_BITRATE_416K 205,8964
	V4L2_MPEG_AUDIO_L1_BITRATE_448K 206,9003
#define V4L2_CID_MPEG_AUDIO_L2_BITRATE 208,9045
enum v4l2_mpeg_audio_l2_bitrate 209,9111
	V4L2_MPEG_AUDIO_L2_BITRATE_32K 210,9145
	V4L2_MPEG_AUDIO_L2_BITRATE_48K 211,9183
	V4L2_MPEG_AUDIO_L2_BITRATE_56K 212,9221
	V4L2_MPEG_AUDIO_L2_BITRATE_64K 213,9259
	V4L2_MPEG_AUDIO_L2_BITRATE_80K 214,9297
	V4L2_MPEG_AUDIO_L2_BITRATE_96K 215,9335
	V4L2_MPEG_AUDIO_L2_BITRATE_112K 216,9373
	V4L2_MPEG_AUDIO_L2_BITRATE_128K 217,9411
	V4L2_MPEG_AUDIO_L2_BITRATE_160K 218,9449
	V4L2_MPEG_AUDIO_L2_BITRATE_192K 219,9487
	V4L2_MPEG_AUDIO_L2_BITRATE_224K 220,9525
	V4L2_MPEG_AUDIO_L2_BITRATE_256K 221,9564
	V4L2_MPEG_AUDIO_L2_BITRATE_320K 222,9603
	V4L2_MPEG_AUDIO_L2_BITRATE_384K 223,9642
#define V4L2_CID_MPEG_AUDIO_L3_BITRATE 225,9684
enum v4l2_mpeg_audio_l3_bitrate 226,9750
	V4L2_MPEG_AUDIO_L3_BITRATE_32K 227,9784
	V4L2_MPEG_AUDIO_L3_BITRATE_40K 228,9822
	V4L2_MPEG_AUDIO_L3_BITRATE_48K 229,9860
	V4L2_MPEG_AUDIO_L3_BITRATE_56K 230,9898
	V4L2_MPEG_AUDIO_L3_BITRATE_64K 231,9936
	V4L2_MPEG_AUDIO_L3_BITRATE_80K 232,9974
	V4L2_MPEG_AUDIO_L3_BITRATE_96K 233,10012
	V4L2_MPEG_AUDIO_L3_BITRATE_112K 234,10050
	V4L2_MPEG_AUDIO_L3_BITRATE_128K 235,10088
	V4L2_MPEG_AUDIO_L3_BITRATE_160K 236,10126
	V4L2_MPEG_AUDIO_L3_BITRATE_192K 237,10164
	V4L2_MPEG_AUDIO_L3_BITRATE_224K 238,10203
	V4L2_MPEG_AUDIO_L3_BITRATE_256K 239,10242
	V4L2_MPEG_AUDIO_L3_BITRATE_320K 240,10281
#define V4L2_CID_MPEG_AUDIO_MODE 242,10323
enum v4l2_mpeg_audio_mode 243,10383
	V4L2_MPEG_AUDIO_MODE_STEREO 244,10411
	V4L2_MPEG_AUDIO_MODE_JOINT_STEREO 245,10451
	V4L2_MPEG_AUDIO_MODE_DUAL 246,10491
	V4L2_MPEG_AUDIO_MODE_MONO 247,10531
#define V4L2_CID_MPEG_AUDIO_MODE_EXTENSION 249,10574
enum v4l2_mpeg_audio_mode_extension 250,10643
	V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 251,10681
	V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 252,10727
	V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 253,10773
	V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 254,10819
#define V4L2_CID_MPEG_AUDIO_EMPHASIS 256,10868
enum v4l2_mpeg_audio_emphasis 257,10932
	V4L2_MPEG_AUDIO_EMPHASIS_NONE 258,10964
	V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS 259,11008
	V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 260,11052
#define V4L2_CID_MPEG_AUDIO_CRC 262,11099
enum v4l2_mpeg_audio_crc 263,11158
	V4L2_MPEG_AUDIO_CRC_NONE 264,11185
	V4L2_MPEG_AUDIO_CRC_CRC16 265,11217
#define V4L2_CID_MPEG_AUDIO_MUTE 267,11252
#define V4L2_CID_MPEG_AUDIO_AAC_BITRATE	268,11312
#define V4L2_CID_MPEG_AUDIO_AC3_BITRATE	269,11378
enum v4l2_mpeg_audio_ac3_bitrate 270,11444
	V4L2_MPEG_AUDIO_AC3_BITRATE_32K 271,11479
	V4L2_MPEG_AUDIO_AC3_BITRATE_40K 272,11518
	V4L2_MPEG_AUDIO_AC3_BITRATE_48K 273,11557
	V4L2_MPEG_AUDIO_AC3_BITRATE_56K 274,11596
	V4L2_MPEG_AUDIO_AC3_BITRATE_64K 275,11635
	V4L2_MPEG_AUDIO_AC3_BITRATE_80K 276,11674
	V4L2_MPEG_AUDIO_AC3_BITRATE_96K 277,11713
	V4L2_MPEG_AUDIO_AC3_BITRATE_112K 278,11752
	V4L2_MPEG_AUDIO_AC3_BITRATE_128K 279,11791
	V4L2_MPEG_AUDIO_AC3_BITRATE_160K 280,11830
	V4L2_MPEG_AUDIO_AC3_BITRATE_192K 281,11869
	V4L2_MPEG_AUDIO_AC3_BITRATE_224K 282,11909
	V4L2_MPEG_AUDIO_AC3_BITRATE_256K 283,11949
	V4L2_MPEG_AUDIO_AC3_BITRATE_320K 284,11989
	V4L2_MPEG_AUDIO_AC3_BITRATE_384K 285,12029
	V4L2_MPEG_AUDIO_AC3_BITRATE_448K 286,12069
	V4L2_MPEG_AUDIO_AC3_BITRATE_512K 287,12109
	V4L2_MPEG_AUDIO_AC3_BITRATE_576K 288,12149
	V4L2_MPEG_AUDIO_AC3_BITRATE_640K 289,12189
#define V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK	291,12232
enum v4l2_mpeg_audio_dec_playback 292,12298
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO	293,12334
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO	294,12378
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT	295,12424
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT	296,12468
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO	297,12513
	V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO 298,12557
#define V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK 300,12610
#define V4L2_CID_MPEG_VIDEO_ENCODING 303,12749
enum v4l2_mpeg_video_encoding 304,12813
	V4L2_MPEG_VIDEO_ENCODING_MPEG_1 305,12845
	V4L2_MPEG_VIDEO_ENCODING_MPEG_2 306,12887
	V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC 307,12929
#define V4L2_CID_MPEG_VIDEO_ASPECT 309,12974
enum v4l2_mpeg_video_aspect 310,13036
	V4L2_MPEG_VIDEO_ASPECT_1x1 311,13066
	V4L2_MPEG_VIDEO_ASPECT_4x3 312,13103
	V4L2_MPEG_VIDEO_ASPECT_16x9 313,13140
	V4L2_MPEG_VIDEO_ASPECT_221x100 314,13177
#define V4L2_CID_MPEG_VIDEO_B_FRAMES 316,13217
#define V4L2_CID_MPEG_VIDEO_GOP_SIZE 317,13281
#define V4L2_CID_MPEG_VIDEO_GOP_CLOSURE 318,13345
#define V4L2_CID_MPEG_VIDEO_PULLDOWN 319,13411
#define V4L2_CID_MPEG_VIDEO_BITRATE_MODE 320,13475
enum v4l2_mpeg_video_bitrate_mode 321,13542
	V4L2_MPEG_VIDEO_BITRATE_MODE_VBR 322,13578
	V4L2_MPEG_VIDEO_BITRATE_MODE_CBR 323,13617
#define V4L2_CID_MPEG_VIDEO_BITRATE 325,13659
#define V4L2_CID_MPEG_VIDEO_BITRATE_PEAK 326,13722
#define V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION 327,13789
#define V4L2_CID_MPEG_VIDEO_MUTE 328,13862
#define V4L2_CID_MPEG_VIDEO_MUTE_YUV 329,13922
#define V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE	330,13986
#define V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER	331,14064
#define V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB	332,14146
#define V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE	333,14224
#define V4L2_CID_MPEG_VIDEO_HEADER_MODE	334,14295
enum v4l2_mpeg_video_header_mode 335,14363
	V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE	336,14398
	V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME	337,14443
#define V4L2_CID_MPEG_VIDEO_MAX_REF_PIC	340,14503
#define V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE	341,14570
#define V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES	342,14637
#define V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB	343,14712
#define V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE	344,14785
enum v4l2_mpeg_video_multi_slice_mode 345,14856
	V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE	346,14896
	V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB	347,14943
	V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES	348,14989
#define V4L2_CID_MPEG_VIDEO_VBV_SIZE	350,15040
#define V4L2_CID_MPEG_VIDEO_DEC_PTS	351,15104
#define V4L2_CID_MPEG_VIDEO_DEC_FRAME	352,15167
#define V4L2_CID_MPEG_VIDEO_VBV_DELAY	353,15232
#define V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP	355,15298
#define V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP	356,15368
#define V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP	357,15438
#define V4L2_CID_MPEG_VIDEO_H263_MIN_QP	358,15508
#define V4L2_CID_MPEG_VIDEO_H263_MAX_QP	359,15575
#define V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP	360,15642
#define V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP	361,15712
#define V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP	362,15782
#define V4L2_CID_MPEG_VIDEO_H264_MIN_QP	363,15852
#define V4L2_CID_MPEG_VIDEO_H264_MAX_QP	364,15919
#define V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM	365,15986
#define V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE	366,16059
#define V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE	367,16127
enum v4l2_mpeg_video_h264_entropy_mode 368,16199
	V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC	369,16240
	V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC	370,16286
#define V4L2_CID_MPEG_VIDEO_H264_I_PERIOD	372,16335
#define V4L2_CID_MPEG_VIDEO_H264_LEVEL	373,16403
enum v4l2_mpeg_video_h264_level 374,16469
	V4L2_MPEG_VIDEO_H264_LEVEL_1_0	375,16503
	V4L2_MPEG_VIDEO_H264_LEVEL_1B	376,16540
	V4L2_MPEG_VIDEO_H264_LEVEL_1_1	377,16576
	V4L2_MPEG_VIDEO_H264_LEVEL_1_2	378,16613
	V4L2_MPEG_VIDEO_H264_LEVEL_1_3	379,16650
	V4L2_MPEG_VIDEO_H264_LEVEL_2_0	380,16687
	V4L2_MPEG_VIDEO_H264_LEVEL_2_1	381,16724
	V4L2_MPEG_VIDEO_H264_LEVEL_2_2	382,16761
	V4L2_MPEG_VIDEO_H264_LEVEL_3_0	383,16798
	V4L2_MPEG_VIDEO_H264_LEVEL_3_1	384,16835
	V4L2_MPEG_VIDEO_H264_LEVEL_3_2	385,16872
	V4L2_MPEG_VIDEO_H264_LEVEL_4_0	386,16910
	V4L2_MPEG_VIDEO_H264_LEVEL_4_1	387,16948
	V4L2_MPEG_VIDEO_H264_LEVEL_4_2	388,16986
	V4L2_MPEG_VIDEO_H264_LEVEL_5_0	389,17024
	V4L2_MPEG_VIDEO_H264_LEVEL_5_1	390,17062
#define V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA	392,17103
#define V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA	393,17179
#define V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE	394,17254
enum v4l2_mpeg_video_h264_loop_filter_mode 395,17329
	V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED	396,17374
	V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED	397,17429
	V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY	398,17485
#define V4L2_CID_MPEG_VIDEO_H264_PROFILE	400,17559
enum v4l2_mpeg_video_h264_profile 401,17626
	V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE	402,17662
	V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE	403,17708
	V4L2_MPEG_VIDEO_H264_PROFILE_MAIN	404,17764
	V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED	405,17806
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH	406,17852
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10	407,17894
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422	408,17939
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE	409,17985
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA	410,18040
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA	411,18090
	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA	412,18141
	V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA	413,18193
	V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE	414,18246
	V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH	415,18301
	V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA	416,18352
	V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH	417,18408
	V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH	418,18457
#define V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT	420,18512
#define V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH	421,18589
#define V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE	422,18665
#define V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC	423,18739
enum v4l2_mpeg_video_h264_vui_sar_idc 424,18810
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED	425,18850
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1	426,18901
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11	427,18945
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11	428,18991
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11	429,19037
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33	430,19083
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11	431,19129
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11	432,19175
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11	433,19221
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33	434,19267
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11	435,19313
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11	436,19360
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33	437,19407
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99	438,19454
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3	439,19502
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2	440,19547
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1	441,19592
	V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED	442,19637
#define V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING	444,19689
#define V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0	445,19766
#define V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE	446,19848
enum v4l2_mpeg_video_h264_sei_fp_arrangement_type 447,19930
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD	448,19982
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN	449,20046
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW	450,20105
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE	451,20161
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM	452,20225
	V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL	453,20288
#define V4L2_CID_MPEG_VIDEO_H264_FMO	455,20352
#define V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE	456,20416
enum v4l2_mpeg_video_h264_fmo_map_type 457,20488
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES	458,20529
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES	459,20589
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER	460,20647
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT	461,20713
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN	462,20763
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN	463,20817
	V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT	464,20869
#define V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP	466,20923
#define V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION	467,20997
enum v4l2_mpeg_video_h264_fmo_change_dir 468,21076
	V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT	469,21119
	V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT	470,21167
#define V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE	472,21217
#define V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH	473,21291
#define V4L2_CID_MPEG_VIDEO_H264_ASO	474,21365
#define V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER	475,21429
#define V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING	476,21503
#define V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE	477,21582
enum v4l2_mpeg_video_h264_hierarchical_coding_type 478,21665
	V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B	479,21718
	V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P	480,21767
#define V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER	482,21819
#define V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP	483,21903
#define V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP	484,21990
#define V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP	485,22060
#define V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP	486,22130
#define V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP	487,22200
#define V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP	488,22266
#define V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL	489,22332
enum v4l2_mpeg_video_mpeg4_level 490,22398
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_0	491,22433
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B	492,22469
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_1	493,22506
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_2	494,22542
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_3	495,22578
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B	496,22614
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_4	497,22651
	V4L2_MPEG_VIDEO_MPEG4_LEVEL_5	498,22687
#define V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE	500,22726
enum v4l2_mpeg_video_mpeg4_profile 501,22793
	V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE	502,22830
	V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE	503,22876
	V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE	504,22930
	V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE	505,22974
	V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY	506,23028
#define V4L2_CID_MPEG_VIDEO_MPEG4_QPEL	508,23094
#define V4L2_CID_MPEG_CX2341X_BASE 511,23240
#define V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE 512,23311
enum v4l2_mpeg_cx2341x_video_spatial_filter_mode 513,23399
	V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL 514,23450
	V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO 515,23507
#define V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER 517,23567
#define V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE 518,23651
enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type 519,23744
	V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF 520,23800
	V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR 521,23876
	V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT 522,23952
	V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE 523,24028
	V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE 524,24104
#define V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE 526,24183
enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type 527,24278
	V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF 528,24336
	V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR 529,24400
#define V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE 531,24467
enum v4l2_mpeg_cx2341x_video_temporal_filter_mode 532,24556
	V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL 533,24608
	V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO 534,24666
#define V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER 536,24727
#define V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE 537,24812
enum v4l2_mpeg_cx2341x_video_median_filter_type 538,24900
	V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF 539,24950
	V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR 540,25008
	V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT 541,25066
	V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT 542,25124
	V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG 543,25182
#define V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM 545,25243
#define V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP 546,25337
#define V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM	547,25428
#define V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP 548,25523
#define V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS 549,25617
#define V4L2_CID_MPEG_MFC51_BASE	552,25795
#define V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY	554,25864
#define V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE	555,25955
#define V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE	556,26052
enum v4l2_mpeg_mfc51_video_frame_skip_mode 557,26133
	V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED	558,26178
	V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT	559,26232
	V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT	560,26288
#define V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE	562,26346
enum v4l2_mpeg_mfc51_video_force_frame_type 563,26428
	V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED	564,26474
	V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME	565,26529
	V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED	566,26583
#define V4L2_CID_MPEG_MFC51_VIDEO_PADDING	568,26641
#define V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV	569,26715
#define V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT	570,26793
#define V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF	571,26878
#define V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY	572,26961
#define V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK	573,27052
#define V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH	574,27140
#define V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC	575,27229
#define V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P	576,27318
#define V4L2_CID_CAMERA_CLASS_BASE 581,27441
#define V4L2_CID_CAMERA_CLASS 582,27510
#define V4L2_CID_EXPOSURE_AUTO	584,27572
enum  v4l2_exposure_auto_type 585,27636
	V4L2_EXPOSURE_AUTO 586,27668
	V4L2_EXPOSURE_MANUAL 587,27693
	V4L2_EXPOSURE_SHUTTER_PRIORITY 588,27720
	V4L2_EXPOSURE_APERTURE_PRIORITY 589,27757
#define V4L2_CID_EXPOSURE_ABSOLUTE	591,27797
#define V4L2_CID_EXPOSURE_AUTO_PRIORITY	592,27864
#define V4L2_CID_PAN_RELATIVE	594,27937
#define V4L2_CID_TILT_RELATIVE	595,28000
#define V4L2_CID_PAN_RESET	596,28064
#define V4L2_CID_TILT_RESET	597,28124
#define V4L2_CID_PAN_ABSOLUTE	599,28186
#define V4L2_CID_TILT_ABSOLUTE	600,28249
#define V4L2_CID_FOCUS_ABSOLUTE	602,28314
#define V4L2_CID_FOCUS_RELATIVE	603,28380
#define V4L2_CID_FOCUS_AUTO	604,28446
#define V4L2_CID_ZOOM_ABSOLUTE	606,28509
#define V4L2_CID_ZOOM_RELATIVE	607,28574
#define V4L2_CID_ZOOM_CONTINUOUS	608,28639
#define V4L2_CID_PRIVACY	610,28706
#define V4L2_CID_IRIS_ABSOLUTE	612,28766
#define V4L2_CID_IRIS_RELATIVE	613,28831
#define V4L2_CID_AUTO_EXPOSURE_BIAS	615,28897
#define V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE	617,28967
enum v4l2_auto_n_preset_white_balance 618,29044
	V4L2_WHITE_BALANCE_MANUAL	619,29084
	V4L2_WHITE_BALANCE_AUTO	620,29117
	V4L2_WHITE_BALANCE_INCANDESCENT	621,29149
	V4L2_WHITE_BALANCE_FLUORESCENT	622,29188
	V4L2_WHITE_BALANCE_FLUORESCENT_H	623,29226
	V4L2_WHITE_BALANCE_HORIZON	624,29265
	V4L2_WHITE_BALANCE_DAYLIGHT	625,29299
	V4L2_WHITE_BALANCE_FLASH	626,29334
	V4L2_WHITE_BALANCE_CLOUDY	627,29366
	V4L2_WHITE_BALANCE_SHADE	628,29399
#define V4L2_CID_WIDE_DYNAMIC_RANGE	631,29435
#define V4L2_CID_IMAGE_STABILIZATION	632,29504
#define V4L2_CID_ISO_SENSITIVITY	634,29575
#define V4L2_CID_ISO_SENSITIVITY_AUTO	635,29641
enum v4l2_iso_sensitivity_auto_type 636,29712
	V4L2_ISO_SENSITIVITY_MANUAL	637,29750
	V4L2_ISO_SENSITIVITY_AUTO	638,29785
#define V4L2_CID_EXPOSURE_METERING	641,29822
enum v4l2_exposure_metering 642,29890
	V4L2_EXPOSURE_METERING_AVERAGE	643,29920
	V4L2_EXPOSURE_METERING_CENTER_WEIGHTED	644,29958
	V4L2_EXPOSURE_METERING_SPOT	645,30003
#define V4L2_CID_SCENE_MODE	648,30042
enum v4l2_scene_mode 649,30104
	V4L2_SCENE_MODE_NONE	650,30127
	V4L2_SCENE_MODE_BACKLIGHT	651,30156
	V4L2_SCENE_MODE_BEACH_SNOW	652,30189
	V4L2_SCENE_MODE_CANDLE_LIGHT	653,30223
	V4L2_SCENE_MODE_DAWN_DUSK	654,30259
	V4L2_SCENE_MODE_FALL_COLORS	655,30292
	V4L2_SCENE_MODE_FIREWORKS	656,30327
	V4L2_SCENE_MODE_LANDSCAPE	657,30360
	V4L2_SCENE_MODE_NIGHT	658,30393
	V4L2_SCENE_MODE_PARTY_INDOOR	659,30423
	V4L2_SCENE_MODE_PORTRAIT	660,30459
	V4L2_SCENE_MODE_SPORTS	661,30492
	V4L2_SCENE_MODE_SUNSET	662,30524
	V4L2_SCENE_MODE_TEXT	663,30556
#define V4L2_CID_3A_LOCK	666,30590
#define V4L2_LOCK_EXPOSURE	667,30649
#define V4L2_LOCK_WHITE_BALANCE	668,30687
#define V4L2_LOCK_FOCUS	669,30730
#define V4L2_CID_AUTO_FOCUS_START	671,30767
#define V4L2_CID_AUTO_FOCUS_STOP	672,30834
#define V4L2_CID_AUTO_FOCUS_STATUS	673,30900
#define V4L2_AUTO_FOCUS_STATUS_IDLE	674,30968
#define V4L2_AUTO_FOCUS_STATUS_BUSY	675,31014
#define V4L2_AUTO_FOCUS_STATUS_REACHED	676,31060
#define V4L2_AUTO_FOCUS_STATUS_FAILED	677,31109
#define V4L2_CID_AUTO_FOCUS_RANGE	679,31158
enum v4l2_auto_focus_range 680,31225
	V4L2_AUTO_FOCUS_RANGE_AUTO	681,31254
	V4L2_AUTO_FOCUS_RANGE_NORMAL	682,31288
	V4L2_AUTO_FOCUS_RANGE_MACRO	683,31324
	V4L2_AUTO_FOCUS_RANGE_INFINITY	684,31359
#define V4L2_CID_FM_TX_CLASS_BASE	690,31440
#define V4L2_CID_FM_TX_CLASS	691,31507
#define V4L2_CID_RDS_TX_DEVIATION	693,31567
#define V4L2_CID_RDS_TX_PI	694,31634
#define V4L2_CID_RDS_TX_PTY	695,31695
#define V4L2_CID_RDS_TX_PS_NAME	696,31757
#define V4L2_CID_RDS_TX_RADIO_TEXT	697,31823
#define V4L2_CID_AUDIO_LIMITER_ENABLED	699,31892
#define V4L2_CID_AUDIO_LIMITER_RELEASE_TIME	700,31965
#define V4L2_CID_AUDIO_LIMITER_DEVIATION	701,32042
#define V4L2_CID_AUDIO_COMPRESSION_ENABLED	703,32117
#define V4L2_CID_AUDIO_COMPRESSION_GAIN	704,32193
#define V4L2_CID_AUDIO_COMPRESSION_THRESHOLD	705,32267
#define V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME	706,32345
#define V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME	707,32425
#define V4L2_CID_PILOT_TONE_ENABLED	709,32507
#define V4L2_CID_PILOT_TONE_DEVIATION	710,32577
#define V4L2_CID_PILOT_TONE_FREQUENCY	711,32649
#define V4L2_CID_TUNE_PREEMPHASIS	713,32722
enum v4l2_preemphasis 714,32791
	V4L2_PREEMPHASIS_DISABLED	715,32815
	V4L2_PREEMPHASIS_50_uS	716,32847
	V4L2_PREEMPHASIS_75_uS	717,32877
#define V4L2_CID_TUNE_POWER_LEVEL	719,32910
#define V4L2_CID_TUNE_ANTENNA_CAPACITOR	720,32979
#define V4L2_CID_FLASH_CLASS_BASE	725,33108
#define V4L2_CID_FLASH_CLASS	726,33175
#define V4L2_CID_FLASH_LED_MODE	728,33235
enum v4l2_flash_led_mode 729,33301
	V4L2_FLASH_LED_MODE_NONE,730,33328
	V4L2_FLASH_LED_MODE_FLASH,731,33355
	V4L2_FLASH_LED_MODE_TORCH,732,33383
#define V4L2_CID_FLASH_STROBE_SOURCE	735,33415
enum v4l2_flash_strobe_source 736,33485
	V4L2_FLASH_STROBE_SOURCE_SOFTWARE,737,33517
	V4L2_FLASH_STROBE_SOURCE_EXTERNAL,738,33553
#define V4L2_CID_FLASH_STROBE	741,33593
#define V4L2_CID_FLASH_STROBE_STOP	742,33657
#define V4L2_CID_FLASH_STROBE_STATUS	743,33725
#define V4L2_CID_FLASH_TIMEOUT	745,33796
#define V4L2_CID_FLASH_INTENSITY	746,33861
#define V4L2_CID_FLASH_TORCH_INTENSITY	747,33927
#define V4L2_CID_FLASH_INDICATOR_INTENSITY	748,33999
#define V4L2_CID_FLASH_FAULT	750,34075
#define V4L2_FLASH_FAULT_OVER_VOLTAGE	751,34139
#define V4L2_FLASH_FAULT_TIMEOUT	752,34187
#define V4L2_FLASH_FAULT_OVER_TEMPERATURE	753,34230
#define V4L2_FLASH_FAULT_SHORT_CIRCUIT	754,34281
#define V4L2_FLASH_FAULT_OVER_CURRENT	755,34330
#define V4L2_FLASH_FAULT_INDICATOR	756,34378
#define V4L2_CID_FLASH_CHARGE	758,34424
#define V4L2_CID_FLASH_READY	759,34489
#define V4L2_CID_JPEG_CLASS_BASE	764,34585
#define V4L2_CID_JPEG_CLASS	765,34650
#define	V4L2_CID_JPEG_CHROMA_SUBSAMPLING	767,34708
enum v4l2_jpeg_chroma_subsampling 768,34780
	V4L2_JPEG_CHROMA_SUBSAMPLING_444	769,34816
	V4L2_JPEG_CHROMA_SUBSAMPLING_422	770,34855
	V4L2_JPEG_CHROMA_SUBSAMPLING_420	771,34894
	V4L2_JPEG_CHROMA_SUBSAMPLING_411	772,34933
	V4L2_JPEG_CHROMA_SUBSAMPLING_410	773,34972
	V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY	774,35011
#define	V4L2_CID_JPEG_RESTART_INTERVAL	776,35054
#define	V4L2_CID_JPEG_COMPRESSION_QUALITY	777,35125
#define	V4L2_CID_JPEG_ACTIVE_MARKER	779,35199
#define	V4L2_JPEG_ACTIVE_MARKER_APP0	780,35267
#define	V4L2_JPEG_ACTIVE_MARKER_APP1	781,35314
#define	V4L2_JPEG_ACTIVE_MARKER_COM	782,35361
#define	V4L2_JPEG_ACTIVE_MARKER_DQT	783,35408
#define	V4L2_JPEG_ACTIVE_MARKER_DHT	784,35455
#define V4L2_CID_IMAGE_SOURCE_CLASS_BASE	788,35532
#define V4L2_CID_IMAGE_SOURCE_CLASS	789,35612
#define V4L2_CID_VBLANK	791,35685
#define V4L2_CID_HBLANK	792,35751
#define V4L2_CID_ANALOGUE_GAIN	793,35817
#define V4L2_CID_IMAGE_PROC_CLASS_BASE	798,35924
#define V4L2_CID_IMAGE_PROC_CLASS	799,36001
#define V4L2_CID_LINK_FREQ	801,36070
#define V4L2_CID_PIXEL_RATE	802,36136
#define V4L2_CID_TEST_PATTERN	803,36203
#define V4L2_CID_DV_CLASS_BASE	807,36318
#define V4L2_CID_DV_CLASS	808,36380
#define	V4L2_CID_DV_TX_HOTPLUG	810,36434
#define	V4L2_CID_DV_TX_RXSENSE	811,36496
#define	V4L2_CID_DV_TX_EDID_PRESENT	812,36558
#define	V4L2_CID_DV_TX_MODE	813,36624
enum v4l2_dv_tx_mode 814,36683
	V4L2_DV_TX_MODE_DVI_D	815,36706
	V4L2_DV_TX_MODE_HDMI	816,36734
#define V4L2_CID_DV_TX_RGB_RANGE	818,36764
enum v4l2_dv_rgb_range 819,36827
	V4L2_DV_RGB_RANGE_AUTO	820,36852
	V4L2_DV_RGB_RANGE_LIMITED 821,36883
	V4L2_DV_RGB_RANGE_FULL	822,36915
#define	V4L2_CID_DV_RX_POWER_PRESENT	825,36950
#define V4L2_CID_DV_RX_RGB_RANGE	826,37019

control/win_msg.c,424
#define VLC_MODULE_LICENSE 28,1209
struct intf_sys_t38,1476
    HWND window;40,1496
    HANDLE ready;41,1513
    vlc_thread_t thread;42,1531
    int argc;48,1623
    int enqueue;49,1637
    char data[data50,1654
} vlc_ipc_data_t;51,1671
static LRESULT CALLBACK WMCOPYWNDPROC(53,1690
static void *HelperThread(HelperThread122,4177
static int Open(157,5607
static void Close(183,6263
vlc_module_begin(193,6482

demux/mpeg/ts_metadata.h,34
#define VLC_TS_METADATA_H20,1017

stream_out/transcode/transcode.h,2729
#define MASTER_SYNC_MAX_DRIFT 15,266
struct sout_stream_sys_t17,304
    sout_stream_id_sys_t *id_video;id_video19,331
    block_t         *p_buffers;p_buffers20,367
    vlc_mutex_t     lock_out;21,399
    vlc_cond_t      cond;22,429
    bool            b_abort;23,455
    picture_fifo_t *pp_pics;pp_pics24,484
    vlc_sem_t       picture_pool_has_room;25,513
    uint32_t        pool_size;26,556
    vlc_thread_t    thread;27,587
    vlc_fourcc_t    i_acodec;30,632
    char            *psz_aenc;psz_aenc31,703
    char            *psz_alang;psz_alang32,734
    config_chain_t  *p_audio_cfg;p_audio_cfg33,766
    uint32_t        i_sample_rate;34,800
    uint32_t        i_channels;35,835
    int             i_abitrate;36,867
    char            *psz_af;psz_af38,900
    vlc_fourcc_t    i_vcodec;41,946
    char            *psz_venc;psz_venc42,1017
    config_chain_t  *p_video_cfg;p_video_cfg43,1048
    int             i_vbitrate;44,1082
    double          f_scale;45,1114
    unsigned int    i_width,46,1143
    unsigned int    i_width, i_maxwidth;46,1143
    unsigned int    i_height,47,1184
    unsigned int    i_height, i_maxheight;47,1184
    bool            b_deinterlace;48,1227
    char            *psz_deinterlace;psz_deinterlace49,1262
    config_chain_t  *p_deinterlace_cfg;p_deinterlace_cfg50,1300
    int             i_threads;51,1340
    bool            b_high_priority;52,1371
    bool            b_hurry_up;53,1408
    unsigned int    fps_num,54,1440
    unsigned int    fps_num,fps_den;54,1440
    char            *psz_vf2;psz_vf256,1478
    vlc_fourcc_t    i_scodec;59,1523
    char            *psz_senc;psz_senc60,1592
    bool            b_soverlay;61,1623
    config_chain_t  *p_spu_cfg;p_spu_cfg62,1655
    spu_t           *p_spu;p_spu63,1687
    filter_t        *p_spu_blend;p_spu_blend64,1715
    vlc_fourcc_t    i_osdcodec;67,1769
    char            *psz_osdenc;psz_osdenc68,1843
    config_chain_t  *p_osd_cfg;p_osd_cfg69,1876
    bool            b_osd;70,1908
    bool            b_master_sync;73,1990
    mtime_t         i_master_drift;75,2102
struct sout_stream_id_sys_t80,2164
    bool            b_transcode;82,2194
    void *id;id85,2259
    decoder_t       *p_decoder;p_decoder88,2292
             filter_chain_t  *p_f_chain;p_f_chain94,2368
             filter_chain_t  *p_uf_chain;p_uf_chain95,2431
             video_format_t  fmt_input_video;96,2510
             struct aout_filters    *p_af_chain;p_af_chain100,2595
             audio_format_t  fmt_audio;101,2666
    encoder_t       *p_encoder;p_encoder107,2745
    date_t          next_input_pts;110,2793
    date_t          next_output_pts;111,2861

video_output/android/utils.h,2935
typedef struct AWindowHandler AWindowHandler;36,1414
enum AWindow_ID 38,1461
    AWindow_Video,39,1479
    AWindow_Subtitles,40,1498
    AWindow_Max,41,1521
typedef int32_t (*ptr_ANativeWindow_lock)ptr_ANativeWindow_lock48,1610
typedef void (*ptr_ANativeWindow_unlockAndPost)ptr_ANativeWindow_unlockAndPost49,1700
typedef int32_t (*ptr_ANativeWindow_setBuffersGeometry)ptr_ANativeWindow_setBuffersGeometry50,1765
    ptr_ANativeWindow_lock winLock;54,1883
    ptr_ANativeWindow_unlockAndPost unlockAndPost;55,1919
    ptr_ANativeWindow_setBuffersGeometry setBuffersGeometry;56,1970
} native_window_api_t;57,2049
typedef struct native_window_priv native_window_priv;63,2160
typedef native_window_priv *(*ptr_ANativeWindowPriv_connect)ptr_ANativeWindowPriv_connect64,2214
typedef int (*ptr_ANativeWindowPriv_disconnect)ptr_ANativeWindowPriv_disconnect65,2294
typedef int (*ptr_ANativeWindowPriv_setUsage)ptr_ANativeWindowPriv_setUsage66,2366
typedef int (*ptr_ANativeWindowPriv_setBuffersGeometry)ptr_ANativeWindowPriv_setBuffersGeometry67,2448
typedef int (*ptr_ANativeWindowPriv_getMinUndequeued)ptr_ANativeWindowPriv_getMinUndequeued68,2544
typedef int (*ptr_ANativeWindowPriv_getMaxBufferCount)ptr_ANativeWindowPriv_getMaxBufferCount69,2638
typedef int (*ptr_ANativeWindowPriv_setBufferCount)ptr_ANativeWindowPriv_setBufferCount70,2733
typedef int (*ptr_ANativeWindowPriv_setCrop)ptr_ANativeWindowPriv_setCrop71,2824
typedef int (*ptr_ANativeWindowPriv_dequeue)ptr_ANativeWindowPriv_dequeue72,2913
typedef int (*ptr_ANativeWindowPriv_lock)ptr_ANativeWindowPriv_lock73,2991
typedef int (*ptr_ANativeWindowPriv_queue)ptr_ANativeWindowPriv_queue74,3065
typedef int (*ptr_ANativeWindowPriv_cancel)ptr_ANativeWindowPriv_cancel75,3140
typedef int (*ptr_ANativeWindowPriv_lockData)ptr_ANativeWindowPriv_lockData76,3216
typedef int (*ptr_ANativeWindowPriv_unlockData)ptr_ANativeWindowPriv_unlockData77,3319
typedef int (*ptr_ANativeWindowPriv_setOrientation)ptr_ANativeWindowPriv_setOrientation78,3414
    ptr_ANativeWindowPriv_connect connect;82,3513
    ptr_ANativeWindowPriv_disconnect disconnect;83,3556
    ptr_ANativeWindowPriv_setUsage setUsage;84,3605
    ptr_ANativeWindowPriv_setBuffersGeometry setBuffersGeometry;85,3650
    ptr_ANativeWindowPriv_getMinUndequeued getMinUndequeued;86,3715
    ptr_ANativeWindowPriv_getMaxBufferCount getMaxBufferCount;87,3776
    ptr_ANativeWindowPriv_setBufferCount setBufferCount;88,3839
    ptr_ANativeWindowPriv_setCrop setCrop;89,3896
    ptr_ANativeWindowPriv_dequeue dequeue;90,3939
    ptr_ANativeWindowPriv_lock lock;91,3982
    ptr_ANativeWindowPriv_lockData lockData;92,4019
    ptr_ANativeWindowPriv_unlockData unlockData;93,4064
    ptr_ANativeWindowPriv_queue queue;94,4113
    ptr_ANativeWindowPriv_cancel cancel;95,4152
    ptr_ANativeWindowPriv_setOrientation setOrientation;96,4193
} native_window_priv_api_t;97,4250

misc/rtsp.c,3246
#define VLC_MODULE_LICENSE 33,1407
#define THROTTLE_TEXT 62,2088
#define THROTTLE_LONGTEXT 63,2148
#define RAWMUX_TEXT 66,2287
#define SESSION_TIMEOUT_TEXT 68,2343
#define SESSION_TIMEOUT_LONGTEXT 70,2440
vlc_module_begin 75,2756
typedef struct media_es_t media_es_t;95,3537
    media_es_t *p_media_es;p_media_es99,3593
    int i_port;100,3621
} rtsp_client_es_t;102,3638
    char *psz_session;psz_session106,3676
    bool b_playing;108,3700
    int i_port_raw;109,3748
    int i_es;111,3769
    rtsp_client_es_t **es;es112,3783
} rtsp_client_t;114,3811
struct media_es_t116,3829
    vod_t *p_vod;p_vod119,3870
    httpd_url_t *p_rtsp_url;p_rtsp_url122,3911
    vod_media_t *p_media;p_media124,3941
    es_format_t fmt;126,3968
    uint8_t     i_payload_type;127,3989
    const char  *psz_ptname;psz_ptname128,4021
    unsigned    i_clock_rate;129,4050
    unsigned    i_channels;130,4080
    char        *psz_fmtp;psz_fmtp131,4108
struct vod_media_t135,4140
    int id;137,4161
    vod_t *p_vod;p_vod140,4195
    httpd_url_t  *p_rtsp_url;p_rtsp_url143,4236
    char         *psz_rtsp_control_v4;psz_rtsp_control_v4144,4266
    char         *psz_rtsp_control_v6;psz_rtsp_control_v6145,4305
    char         *psz_rtsp_path;psz_rtsp_path146,4344
    vlc_mutex_t lock;148,4378
    int        i_es;151,4419
    media_es_t **es;es152,4440
    const char *psz_mux;psz_mux153,4461
    bool  b_raw;154,4486
    int           i_rtsp;157,4526
    rtsp_client_t **rtsp;rtsp158,4552
    mtime_t i_length;161,4595
struct vod_sys_t164,4621
    httpd_host_t *p_rtsp_host;p_rtsp_host167,4662
    char *psz_path;psz_path168,4693
    int i_throttle_users;169,4713
    int i_connections;170,4739
    char *psz_raw_mux;psz_raw_mux172,4763
    int i_session_timeout;174,4787
    int i_media_id;177,4839
    int i_media;178,4859
    vod_media_t **media;media179,4876
    vlc_thread_t thread;182,4912
    block_fifo_t *p_fifo_cmd;p_fifo_cmd183,4937
    RTSP_CMD_TYPE_NONE,189,5051
    RTSP_CMD_TYPE_PLAY,191,5098
    RTSP_CMD_TYPE_PAUSE,192,5122
    RTSP_CMD_TYPE_STOP,193,5147
    RTSP_CMD_TYPE_SEEK,194,5171
    RTSP_CMD_TYPE_REWIND,195,5195
    RTSP_CMD_TYPE_FORWARD,196,5221
    RTSP_CMD_TYPE_ADD,198,5249
    RTSP_CMD_TYPE_DEL,199,5272
} rtsp_cmd_type_t;200,5295
    int i_type;205,5338
    int i_media_id;206,5354
    vod_media_t *p_media;p_media207,5374
    char *psz_session;psz_session208,5400
    char *psz_arg;psz_arg209,5423
    int64_t i_arg;210,5442
    double f_arg;211,5461
} rtsp_cmd_t;212,5479
static void sprintf_hexa(236,6616
static int Open(251,7099
static void Close(316,8978
static vod_media_t *MediaNew(MediaNew356,10319
static void MediaAskDel 438,12953
static void MediaDel(443,13095
static int MediaAddES(470,13821
static void MediaDelES(712,22446
static void CommandPush(741,23242
static void* CommandThread(765,23943
static rtsp_client_t *RtspClientNew(RtspClientNew859,26524
static rtsp_client_t *RtspClientGet(RtspClientGet877,27029
static void RtspClientDel(888,27316
static int64_t ParseNPT 908,27827
static int RtspCallback(930,28302
static int RtspCallbackES(1264,40375
static char *SDPGenerate(SDPGenerate1500,49007

gui/minimal_macosx/VLCMinimalVoutWindow.m,99
- (id)initWithContentRect:35,1571
- (void)enterFullscreen48,1978
- (void)leaveFullscreen63,2500

demux/mpeg/es.c,3342
#define FPS_TEXT 51,2007
#define FPS_LONGTEXT 52,2048
vlc_module_begin 55,2171
    vlc_fourcc_t i_codec;88,3174
    bool       b_use_word;89,3200
    const char *psz_name;psz_name90,3227
    int  (*pf_probe)pf_probe91,3253
    int  (*pf_init)pf_init92,3315
} codec_t;93,3356
    char  psz_version[psz_version97,3385
    int   i_lowpass;98,3412
    float pf_replay_gain[pf_replay_gain99,3433
    float pf_replay_peak[pf_replay_peak100,3482
} lame_extra_t;101,3531
    mtime_t i_time;105,3565
    uint64_t i_pos;106,3585
    bs_t br;107,3605
} sync_table_ctx_t;108,3618
    uint16_t i_frames_btw_refs;112,3656
    uint32_t i_bytes_btw_refs;113,3688
    uint32_t i_ms_btw_refs;114,3719
    uint8_t i_bits_per_bytes_dev;115,3747
    uint8_t i_bits_per_ms_dev;116,3781
    uint8_t *p_bits;p_bits117,3812
    size_t i_bits;118,3833
    sync_table_ctx_t current;119,3852
} sync_table_t;120,3882
struct demux_sys_t122,3899
    codec_t codec;124,3920
    es_out_id_t *p_es;p_es126,3940
    bool  b_start;128,3964
    decoder_t   *p_packetizer;p_packetizer129,3983
    block_t     *p_packetized_data;p_packetized_data130,4014
    mtime_t     i_pts;132,4051
    mtime_t     i_time_offset;133,4074
    int64_t     i_bytes;134,4105
    bool        b_big_endian;136,4131
    bool        b_estimate_bitrate;137,4161
    int         i_bitrate_avg;138,4197
    bool b_initial_sync_failed;140,4263
    int i_packet_size;142,4296
    int64_t i_stream_offset;144,4320
    float   f_fps;146,4350
        int i_frames;151,4411
        int i_bytes;152,4433
        int i_bitrate_avg;153,4454
        int i_frame_samples;154,4481
        lame_extra_t lame;155,4510
        bool b_lame;156,4537
    } xing;157,4558
    sync_table_t mllt;159,4571
static const codec_t p_codecs[p_codecs182,5365
static const codec_t codec_m4v 196,5942
static int OpenCommon(203,6241
static int OpenAudio(275,8280
static int OpenVideo(286,8619
static int Demux(314,9774
static void Close(369,11570
static int Control(385,12103
static bool Parse(479,15792
static int GenericFormatCheck(554,18365
#define WAV_PROBE_SIZE 569,18879
static int WavSkipHeader(570,18913
static int GenericProbe(636,21056
static int MpgaCheckSync(726,23928
#define MPGA_VERSION(742,24470
#define MPGA_MODE(743,24523
static int MpgaGetFrameSamples(745,24569
static int MpgaProbe(761,24852
static void MpgaXingSkip(813,26206
static uint32_t MpgaXingGetDWBE(822,26401
static uint16_t MpgaXingGetWBE(834,26644
static double MpgaXingLameConvertGain(846,26885
static double MpgaXingLameConvertPeak(853,27018
static uint64_t SeekByMlltTable(858,27118
static int ID3TAG_Parse_Handler(885,28117
static int ID3Parse(919,29633
static int MpgaInit(948,30586
static int AacProbe(1041,33753
static int AacInit(1075,34732
static int A52CheckSync(1088,35043
static int EA52CheckSyncProbe(1109,35644
static int EA52Probe(1115,35802
static int A52CheckSyncProbe(1124,36153
static int A52Probe(1130,36311
static int A52Init(1139,36666
static int DtsCheckSync(1159,37236
static int DtsProbe(1171,37556
static int DtsInit(1178,37842
static int MlpCheckSync(1190,38153
static int ThdCheckSync(1202,38464
static int MlpProbe(1214,38775
static int ThdProbe(1222,39090
static int MlpInit(1230,39405
static int VideoInit(1243,39718

codec/vpx.c,842
static const char *const ppsz_sout_options[ppsz_sout_options48,1816
#define QUALITY_MODE_TEXT 53,2033
#define QUALITY_MODE_LONGTEXT 54,2078
vlc_module_begin 64,2451
#   define ENC_CFG_PREFIX 77,2880
#define VPX_ERR(94,3434
struct decoder_sys_t99,3722
    struct vpx_codec_ctx ctx;101,3745
    vlc_fourcc_t     i_chroma;106,3801
    enum vpx_img_fmt i_chroma_id;107,3832
    uint8_t          i_bitdepth;108,3866
    uint8_t          i_needs_hack;109,3899
} chroma_table[chroma_table111,3935
static vlc_fourcc_t FindVlcChroma(146,5200
static picture_t *Decode(Decode162,5818
static int OpenDecoder(278,8935
static void CloseDecoder(332,10415
struct encoder_sys_t356,11032
    struct vpx_codec_ctx ctx;358,11055
static int OpenEncoder(364,11282
static block_t *Encode(Encode423,13037
static void CloseEncoder(499,15522

demux/playlist/gvp.c,104
#define MAX_LINE 60,2454
int Import_GVP(70,2889
static int Demux(98,3618
#define SADD_INFO(169,5764

access_output/udp.c,918
#define MAX_EMPTY_BLOCKS 52,1716
#define SOUT_CFG_PREFIX 60,2001
#define CACHING_TEXT 62,2038
#define CACHING_LONGTEXT 63,2084
#define GROUP_TEXT 67,2223
#define GROUP_LONGTEXT 68,2262
vlc_module_begin 74,2611
static const char *const ppsz_core_options[ppsz_core_options99,3435
struct sout_access_out_sys_t113,3803
    mtime_t       i_caching;115,3834
    int           i_handle;116,3863
    bool          b_mtu_warning;117,3891
    size_t        i_mtu;118,3924
    block_fifo_t *p_fifo;p_fifo120,3950
    block_fifo_t *p_empty_blocks;p_empty_blocks121,3976
    block_t      *p_buffer;p_buffer122,4010
    vlc_thread_t  thread;124,4039
#define DEFAULT_PORT 127,4069
static int Open(132,4278
static void Close(238,7555
static int Control(254,7995
static ssize_t Write(273,8516
static int Seek(357,11432
static block_t *NewUDPPacket(NewUDPPacket367,11809
static void* ThreadWrite(398,12737

access/http/h1conn_test.c,352
#undef NDEBUG25,1117
static struct vlc_http_conn *conn;conn40,1368
static int external_fd;41,1403
static void conn_create(43,1428
static void conn_send_raw(59,1756
static void conn_send(65,1896
static void conn_shutdown(70,1984
static void conn_destroy(75,2056
static struct vlc_http_stream *stream_open(stream_open82,2181
int main(93,2504

access/rar/module.c,26
vlc_module_begin(30,1183

demux/mkv/util.cpp,439
int32_t zlib_decompress_extra(33,1471
block_t *block_zlib_decompress(block_zlib_decompress107,3596
block_t *MemToBlock(MemToBlock159,5113
void handle_real_audio(173,5435
void send_Block(248,7809
int32_t Cook_PrivateTrackData::Init(275,8754
Cook_PrivateTrackData::~Cook_PrivateTrackData(289,9087
static inline void fill_wvpk_block(298,9290
block_t * packetize_wavpack(317,10271
void MkvTree_va(389,11988
void MkvTree(424,13016

mux/wav.c,792
vlc_module_begin 45,1791
#define MAX_CHANNELS 62,2414
struct sout_mux_sys_t64,2438
    bool b_used;66,2462
    bool b_header;67,2479
    bool b_ext;68,2498
    uint32_t i_data;70,2515
    uint32_t waveheader[waveheader73,2579
    WAVEFORMATEXTENSIBLE waveformat;74,2607
    uint32_t waveheader2[waveheader275,2644
    uint32_t i_channel_mask;77,2674
    uint8_t i_chans_to_reorder;78,2703
    uint8_t pi_chan_table[pi_chan_table79,2782
static const uint32_t pi_channels_in[pi_channels_in82,2828
static const uint32_t pi_channels_out[pi_channels_out87,3128
static int Open(97,3604
static void Close(122,4282
static int Control(129,4436
static int AddStream(156,5121
static block_t *GetHeader(GetHeader238,8343
static void DelStream(258,9089
static int Mux(270,9417

lua/libs/configuration.c,434
#   define  _GNU_SOURCE28,1365
static int vlclua_config_get(43,1692
static int vlclua_config_set(76,2520
static int vlclua_datadir(108,3509
static int vlclua_userdatadir(116,3669
static int vlclua_homedir(124,3832
static int vlclua_configdir(132,3994
static int vlclua_cachedir(140,4157
static int vlclua_datadir_list(148,4318
static const luaL_Reg vlclua_config_reg[vlclua_config_reg171,4980
void luaopen_config(183,5351

codec/avcodec/avcommon.h,309
#define AVCOMMON_H 25,1187
#define AV_OPTIONS_TEXT 45,1542
#define AV_OPTIONS_LONGTEXT 46,1589
static inline AVDictionary *vlc_av_get_options(vlc_av_get_options48,1671
static inline void vlc_init_avutil(64,2108
static inline void vlc_init_avformat(92,2802
static inline void vlc_init_avcodec(108,3068

codec/substtml.c,1728
#define ALIGN_TEXT 40,1445
#define ALIGN_LONGTEXT 41,1493
vlc_module_begin 51,1927
    char*           psz_styleid;67,2481
    text_style_t*   font_style;68,2514
    int             i_align;69,2546
    int             i_margin_h;70,2575
    int             i_margin_v;71,2607
    int             i_margin_percent_h;72,2639
    int             i_margin_percent_v;73,2679
    int             i_direction;74,2719
    bool            b_direction_set;75,2752
}  ttml_style_t;76,2789
struct decoder_sys_t78,2807
    int                     i_align;80,2830
    ttml_style_t**          pp_styles;81,2867
    size_t                  i_styles;82,2906
    UNICODE_BIDI_LTR 87,2955
    UNICODE_BIDI_RTL 88,2981
    UNICODE_BIDI_EMBEDDED 89,3007
    UNICODE_BIDI_OVERRIDE 90,3038
static int tagnamecmp(93,3073
static void MergeTTMLStyle(101,3252
static ttml_style_t* DuplicateStyle(126,4007
static void CleanupStyle(150,4641
static ttml_style_t *FindTextStyle(FindTextStyle157,4817
typedef struct  style_stack_t170,5150
    ttml_style_t*  p_style;172,5182
    struct style_stack_t* p_next;173,5210
} style_stack_t 174,5244
static bool PushStyle(176,5263
static void PopStyle(187,5567
static void ClearStack(197,5803
static text_style_t* CurrentStyle(208,6040
static ttml_style_t* ParseTTMLStyle(216,6252
static void ParseTTMLStyles(518,18757
static text_segment_t *ParseTTMLSubtitles(ParseTTMLSubtitles567,20746
                    const char* psz_uni_start;662,24419
                    const char* psz_uni_end;663,24466
static subpicture_t *ParseText(ParseText751,27668
static subpicture_t *DecodeBlock(DecodeBlock808,29341
static int OpenDecoder(825,29853
static void CloseDecoder(851,30712

stream_out/chromecast/chromecast_common.h,643
#define VLC_CHROMECAST_COMMON_H26,1267
static const char *CC_SHARED_VAR_NAME CC_SHARED_VAR_NAME34,1366
    void *p_opaque;p_opaque38,1435
    void (*pf_set_length)pf_set_length40,1456
    mtime_t (*pf_get_time)pf_get_time41,1506
    double (*pf_get_position)pf_get_position42,1541
    void (*pf_wait_app_started)pf_wait_app_started44,1580
    void (*pf_request_seek)pf_request_seek46,1621
    void (*pf_wait_seek_done)pf_wait_seek_done47,1670
    void (*pf_set_pause_state)pf_set_pause_state49,1709
    void (*pf_set_title)pf_set_title51,1762
    void (*pf_set_artwork)pf_set_artwork52,1818
} chromecast_common;54,1879

codec/avcodec/encoder.c,3468
#define HURRY_UP_GUARD1 55,1993
#define HURRY_UP_GUARD2 56,2026
#define HURRY_UP_GUARD3 57,2059
#define MAX_FRAME_DELAY 59,2093
#define RAW_AUDIO_FRAME_SIZE 61,2140
struct thread_context_t77,2778
    AVCodecContext  *p_context;p_context81,2828
    int             (* pf_func)82,2860
    void            *arg;arg83,2923
    int             i_ret;84,2949
    vlc_mutex_t     lock;86,2977
    vlc_cond_t      cond;87,3003
    bool            b_work,88,3029
    bool            b_work, b_done;88,3029
struct encoder_sys_t94,3277
    AVCodec         *p_codec;p_codec99,3344
    AVCodecContext  *p_context;p_context100,3374
    uint8_t *p_buffer;p_buffer105,3509
    size_t i_buffer_out;106,3532
    uint8_t *p_interleave_buf;p_interleave_buf107,3557
    mtime_t i_last_ref_pts;112,3628
    mtime_t i_buggy_pts_detect;113,3656
    mtime_t i_last_pts;114,3688
    bool    b_inited;115,3712
    size_t i_sample_bytes;120,3774
    size_t i_frame_size;121,3801
    size_t i_samples_delay;122,3826
    bool b_planar;123,3889
    bool b_variable;124,3908
    mtime_t i_pts;125,3994
    date_t  buffer_date;126,4013
    uint8_t    i_channels_to_reorder;129,4086
    uint8_t    pi_reorder_layout[pi_reorder_layout130,4124
    int        i_key_int;133,4202
    int        i_b_frames;134,4228
    int        i_vtolerance;135,4255
    int        i_qmin;136,4284
    int        i_qmax;137,4307
    int        i_hq;138,4330
    int        i_rc_buffer_size;139,4351
    float      f_rc_buffer_aggressivity;140,4384
    bool       b_pre_me;141,4425
    bool       b_hurry_up;142,4450
    bool       b_interlace,143,4477
    bool       b_interlace, b_interlace_me;143,4477
    float      f_i_quant_factor;144,4521
    int        i_noise_reduction;145,4554
    bool       b_mpeg4_matrix;146,4588
    bool       b_trellis;147,4619
    int        i_quality;148,4645
    float      f_lumi_masking,149,4685
    float      f_lumi_masking, f_dark_masking,149,4685
    float      f_lumi_masking, f_dark_masking, f_p_masking,149,4685
    float      f_lumi_masking, f_dark_masking, f_p_masking, f_border_masking;149,4685
    int        i_aac_profile;150,4763
    AVFrame    *frame;frame152,4819
static const uint64_t pi_channels_map[pi_channels_map157,4871
static const uint32_t channel_mask[channel_mask181,5796
static const char *const ppsz_enc_options[ppsz_enc_options194,6259
static const uint16_t mpa_bitrate_tab[mpa_bitrate_tab204,6670
static const uint16_t mpa_freq_tab[mpa_freq_tab210,6863
static const uint16_t mpeg4_default_intra_matrix[mpeg4_default_intra_matrix213,6950
static const uint16_t mpeg4_default_non_intra_matrix[mpeg4_default_non_intra_matrix224,7275
static const int DEFAULT_ALIGN 235,7604
static void probe_video_frame_rate(241,7835
static void set_video_color_settings(280,9856
int OpenEncoder(329,11351
                vlc_fourcc_t value;923,34968
                char txt[txt924,35004
    block_t self;1080,40467
    AVPacket packet;1081,40485
} vlc_av_packet_t;1082,40506
static void vlc_av_packet_Release(1084,40526
static block_t *vlc_av_packet_Wrap(vlc_av_packet_Wrap1092,40669
static void check_hurry_up(1118,41587
static block_t *encode_avframe(encode_avframe1155,42713
static block_t *EncodeVideo(EncodeVideo1189,43761
static block_t *handle_delay_buffer(handle_delay_buffer1276,46599
static block_t *EncodeAudio(EncodeAudio1339,49249
void CloseEncoder(1464,54167

stream_out/chromaprint_data.h,205
struct chromaprint_fingerprint_t21,1094
    char *psz_fingerprint;psz_fingerprint23,1129
    unsigned int i_duration;24,1156
typedef struct chromaprint_fingerprint_t chromaprint_fingerprint_t;27,1189

demux/playlist/dvb.c,593
int Import_DVB(45,1554
static int Demux(81,2435
static int cmp(104,3004
static const char *ParseFEC(ParseFEC109,3079
     static const struct fec111,3126
         char dvb[dvb113,3162
         char vlc[vlc114,3184
static const char *ParseModulation(ParseModulation131,3716
     static const struct mod133,3770
         char dvb[dvb135,3806
         char vlc[vlc136,3828
static const char *ParseGuard(ParseGuard151,4426
     static const struct guard153,4475
         char dvb[dvb155,4513
         char vlc[vlc156,4535
static input_item_t *ParseLine(ParseLine174,5168

demux/adaptive/playlist/Url.hpp,804
#define URL_HPP21,980
namespace adaptive27,1058
    namespace playlistadaptive::playlist29,1079
        class Urladaptive::playlist::Url34,1179
                class Componentadaptive::playlist::Url::Component37,1227
                        std::string component;adaptive::playlist::Url::Component::component44,1468
                        const MediaSegmentTemplate *templ;adaptive::playlist::Url::Component::templ45,1515
                        bool b_scheme;adaptive::playlist::Url::Component::b_scheme48,1604
                        bool b_dir;adaptive::playlist::Url::Component::b_dir49,1643
                        bool b_absolute;adaptive::playlist::Url::Component::b_absolute50,1679
                std::vector<Component> components;adaptive::playlist::Url::components66,2264

access/http.c,1616
#define PROXY_TEXT 58,2154
#define PROXY_LONGTEXT 59,2190
#define PROXY_PASS_TEXT 64,2393
#define PROXY_PASS_LONGTEXT 65,2443
#define RECONNECT_TEXT 68,2539
#define RECONNECT_LONGTEXT 69,2584
vlc_module_begin 73,2712
struct access_sys_t96,3569
    int fd;98,3591
    vlc_url_t url;101,3623
    char    *psz_user_agent;psz_user_agent102,3642
    char    *psz_referrer;psz_referrer103,3671
    char    *psz_username;psz_username104,3698
    char    *psz_password;psz_password105,3725
    vlc_http_auth_t auth;106,3752
    bool b_proxy;109,3795
    vlc_url_t  proxy;110,3813
    vlc_http_auth_t proxy_auth;111,3835
    char       *psz_proxy_passbuf;psz_proxy_passbuf112,3867
    int        i_code;115,3913
    char       *psz_mime;psz_mime117,3937
    char       *psz_location;psz_location118,3963
    bool b_icecast;119,3993
    int        i_icy_meta;121,4014
    uint64_t   i_icy_offset;122,4041
    char       *psz_icy_name;psz_icy_name123,4070
    char       *psz_icy_genre;psz_icy_genre124,4100
    char       *psz_icy_title;psz_icy_title125,4131
    uint64_t offset;127,4163
    uint64_t size;128,4184
    bool b_reconnect;130,4204
    bool b_continuous;131,4226
    bool b_has_size;132,4249
static int Open(153,4947
static void Close(387,12290
static int ReadData(416,12997
static ssize_t Read(432,13656
static int ReadICYMeta(483,14863
static int Seek(562,17253
static int Control(571,17543
static int WriteHeaders(636,19483
static int Connect(658,20055
static void Disconnect(974,30672
static void AuthReply(987,31024
static int AuthCheckReply(1004,31644

access/dshow/access.h,1055
typedef struct dshow_stream_t dshow_stream_t;31,1411
#define MAX_CROSSBAR_DEPTH 36,1633
typedef struct CrossbarRouteRec38,1664
    IAMCrossbar *pXbar;pXbar40,1698
    LONG        VideoInputIndex;41,1722
    LONG        VideoOutputIndex;42,1755
    LONG        AudioInputIndex;43,1789
    LONG        AudioOutputIndex;44,1822
} CrossbarRoute;46,1857
struct access_sys_t55,2224
    vlc_mutex_t lock;58,2294
    vlc_cond_t  wait;59,2316
    IFilterGraph           *p_graph;p_graph61,2339
    ICaptureGraphBuilder2  *p_capture_graph_builder2;p_capture_graph_builder262,2376
    IMediaControl          *p_control;p_control63,2430
    int                     i_crossbar_route_depth;65,2470
    CrossbarRoute           crossbar_routes[crossbar_routes66,2522
    dshow_stream_t **pp_streams;pp_streams69,2625
    int            i_streams;70,2658
    int            i_current_stream;71,2688
    int            i_width;74,2752
    int            i_height;75,2780
    int            i_chroma;76,2809
    bool           b_chroma;77,2838

video_output/aa.c,450
vlc_module_begin(55,1974
struct vout_display_sys_t 77,2784
    struct aa_context*  aa_context;78,2812
    aa_palette          palette;79,2848
    vout_display_cfg_t  state;81,2882
    picture_pool_t      *pool;pool82,2913
static int Open(88,3017
static void Close(158,4823
static picture_pool_t *Pool(Pool172,5108
static void Prepare(196,5747
static void PictureDisplay(222,6409
static int Control(234,6672
static void Manage(268,7523

video_chroma/i420_rgb_mmx.h,1302
static const uint64_t mmx_80w 28,1345
static const uint64_t mmx_10w 29,1449
static const uint64_t mmx_00ffw 30,1523
static const uint64_t mmx_Y_coeff 31,1597
static const uint64_t mmx_U_green 33,1672
static const uint64_t mmx_U_blue 34,1746
static const uint64_t mmx_V_red 35,1820
static const uint64_t mmx_V_green 36,1895
static const uint64_t mmx_mask_f8 38,1971
static const uint64_t mmx_mask_fc 39,2046
#define MMX_CALL(45,2173
#define MMX_END 61,2832
#define MMX_INIT_16 63,2881
#define MMX_INIT_16_GRAY 70,3284
#define MMX_INIT_32 75,3527
#define MMX_YUV_MUL 91,4249
#define MMX_YUV_ADD 126,6390
#define MMX_YUV_GRAY 158,8511
#define MMX_UNPACK_16_GRAY 173,9512
#define MMX_UNPACK_15 203,11241
#define MMX_UNPACK_16 239,13518
#define MMX_UNPACK_32_ARGB 272,15651
#define MMX_UNPACK_32_RGBA 292,17094
#define MMX_UNPACK_32_BGRA 312,18537
#define MMX_UNPACK_32_ABGR 332,19980
#define MMX_CALL(358,21504
#define MMX_END 365,21710
#define MMX_INIT_16 367,21740
#define MMX_INIT_32 373,21944
#define MMX_YUV_MUL 380,22190
#define MMX_YUV_ADD 404,23382
#define MMX_UNPACK_15 427,24195
#define MMX_UNPACK_16 452,25401
#define MMX_UNPACK_32_ARGB 476,26553
#define MMX_UNPACK_32_RGBA 495,27453
#define MMX_UNPACK_32_BGRA 514,28353
#define MMX_UNPACK_32_ABGR 533,29253

access/qtsound.m,947
#define QTKIT_VERSION_MIN_REQUIRED 42,1644
vlc_module_begin(58,2234
@interface VLCDecompressedAudioOutput 72,2670
@implementation VLCDecompressedAudioOutput : QTCaptureDecompressedAudioOutput93,3269
- (id)initWithDemux:94,3347
- (void)dealloc106,3619
- (void)outputAudioSampleBuffer:(QTSampleBuffer *)sampleBuffer fromConnection:outputAudioSampleBuffer:fromConnection:111,3661
- (BOOL)checkCurrentAudioBuffer177,6092
- (void)freeAudioMem182,6170
- (mtime_t)getCurrentPts187,6224
- (void *)getCurrentAudioBufferData202,6526
- (UInt32)getCurrentTotalDataSize207,6605
- (UInt32)getNumberOfSamples212,6690
struct demux_sys_t 223,6928
    QTCaptureSession * session;224,6949
    QTCaptureDevice * audiodevice;225,6981
    VLCDecompressedAudioOutput * audiooutput;226,7016
    es_out_id_t *p_es_audio;p_es_audio227,7062
static int Open(233,7284
static void Close(478,19273
static int Demux(495,19952
static int Control(539,21370

control/netsync.c,739
#define VLC_MODULE_LICENSE 33,1460
#define NETSYNC_PORT 48,1750
#define NETSYNC_TEXT 56,2028
#define NETSYNC_LONGTEXT 57,2076
#define MIP_TEXT 61,2221
#define MIP_LONGTEXT 62,2269
#define NETSYNC_TIMEOUT_TEXT 65,2381
#define NETSYNC_TIMEOUT_LONGTEXT 66,2436
vlc_module_begin(69,2537
struct intf_sys_t 89,3272
    int            fd;90,3292
    int            timeout;91,3315
    bool           is_master;92,3343
    playlist_t     *playlist;playlist93,3373
    input_thread_t *input;input96,3414
    vlc_thread_t   thread;97,3441
static int Open(106,3809
void Close(150,5157
static mtime_t GetPcrSystem(166,5502
static void *Master(Master178,5760
static void *Slave(Slave220,7064
static int PlaylistEvent(276,8830

demux/mp4/meta.c,849
    const uint32_t xa9_type;35,1304
    const vlc_meta_type_t meta_type;36,1333
} xa9typetometa[xa9typetometa37,1370
    const uint32_t xa9_type;62,2412
    const char metadata[metadata63,2441
} xa9typetoextrameta[xa9typetoextrameta64,2470
    const char *psz_naming;psz_naming113,4354
    const vlc_meta_type_t meta_type;114,4382
} com_apple_quicktime_tometa[com_apple_quicktime_tometa115,4419
    const char *psz_naming;psz_naming133,5062
    const char *psz_metadata;psz_metadata134,5090
} com_apple_quicktime_toextrameta[com_apple_quicktime_toextrameta135,5120
inline static char * StringConvert(142,5327
static char * ExtractString(162,5900
static bool MatchXA9Type(181,6433
static bool Matchcom_apple_quicktime(218,7437
static void SetupmdirMeta(255,8576
static void SetupmdtaMeta(358,12123
void SetupMeta(392,13269

audio_output/jack.c,1060
typedef jack_default_audio_sample_t jack_sample_t;46,1763
struct aout_sys_t54,2215
    jack_ringbuffer_t *p_jack_ringbuffer;p_jack_ringbuffer56,2235
    jack_client_t  *p_jack_client;p_jack_client57,2277
    jack_port_t   **p_jack_ports;p_jack_ports58,2312
    jack_sample_t **p_jack_buffers;p_jack_buffers59,2346
    unsigned int    i_channels;60,2382
    unsigned int    i_rate;61,2414
    jack_nframes_t latency;62,2442
    float soft_gain;63,2470
    bool soft_mute;64,2491
    mtime_t paused;65,2511
#define AUTO_CONNECT_OPTION 82,3253
#define AUTO_CONNECT_TEXT 83,3301
#define AUTO_CONNECT_LONGTEXT 84,3375
#define CONNECT_REGEX_OPTION 88,3535
#define CONNECT_REGEX_TEXT 89,3585
#define CONNECT_REGEX_LONGTEXT 90,3646
#define JACK_NAME_TEXT 94,3832
vlc_module_begin 99,4061
static void Play 285,9950
static void Pause(317,10924
static void Flush(330,11223
static int TimeGet(347,11617
int Process(363,12196
static int GraphChange(413,13850
static void Stop(438,14608
static int Open(459,15161
static void Close(473,15485

demux/hls/playlist/HLSSegment.cpp,269
SegmentEncryption::SegmentEncryption(36,1279
HLSSegment::HLSSegment(41,1361
HLSSegment::~HLSSegment(51,1539
void HLSSegment::onChunkDownload(59,1640
mtime_t HLSSegment::getUTCTime(130,4074
void HLSSegment::setEncryption(135,4138
int HLSSegment::compare(140,4220

demux/adaptive/playlist/SegmentTimeline.cpp,961
SegmentTimeline::SegmentTimeline(33,1336
SegmentTimeline::SegmentTimeline(38,1424
SegmentTimeline::~SegmentTimeline(44,1528
void SegmentTimeline::addElement(51,1687
mtime_t SegmentTimeline::getMinAheadScaledTime(65,2070
uint64_t SegmentTimeline::getElementNumberByScaledPlaybackTime(89,2649
bool SegmentTimeline::getScaledPlaybackTimeDurationBySegmentNumber(118,3343
stime_t SegmentTimeline::getScaledPlaybackTimeByElementNumber(154,4261
uint64_t SegmentTimeline::maxElementNumber(161,4479
uint64_t SegmentTimeline::minElementNumber(170,4648
void SegmentTimeline::pruneByPlaybackTime(177,4784
size_t SegmentTimeline::pruneBySequenceNumber(184,5012
void SegmentTimeline::mergeWith(214,5670
mtime_t SegmentTimeline::start(251,6620
mtime_t SegmentTimeline::end(258,6766
void SegmentTimeline::debug(267,6996
SegmentTimeline::Element::Element(278,7328
bool SegmentTimeline::Element::contains(286,7480
void SegmentTimeline::Element::debug(293,7637

services_discovery/avahi.c,598
#define VLC_MODULE_LICENSE 32,1387
VLC_SD_PROBE_HELPER(52,1999
struct services_discovery_sys_t70,2583
    AvahiThreadedPoll   *poll;poll72,2617
    AvahiClient         *client;client73,2648
    vlc_dictionary_t    services_name_to_input_item;74,2681
    const char *psz_protocol;psz_protocol79,2760
    const char *psz_service_name;psz_service_name80,2790
} protocols[protocols81,2824
#define NB_PROTOCOLS 88,2993
static void client_callback(93,3234
static void resolve_callback(110,3870
static void browse_callback(219,7203
static int Open(267,8961
static void Close(328,10829

mux/mpeg/tsutil.c,22
void PEStoTS(29,1169

demux/smooth/SmoothStream.hpp,177
#define SMOOTHSTREAM_HPP21,998
namespace smooth25,1060
    class SmoothStream smooth::SmoothStream29,1110
    class SmoothStreamFactory smooth::SmoothStreamFactory39,1397

demux/tta.c,501
vlc_module_begin 43,1774
#define TTA_FRAMETIME 54,2048
struct demux_sys_t62,2354
    es_out_id_t *p_es;p_es65,2385
    uint32_t i_totalframes;68,2419
    uint32_t i_currentframe;69,2447
    uint32_t *pi_seektable;pi_seektable70,2476
    uint32_t i_datalength;71,2504
    int      i_framelength;72,2531
    vlc_meta_t     *p_meta;p_meta75,2570
    int64_t        i_start;76,2598
static int Open(82,2824
static void Close(179,5856
static int Demux(193,6359
static int Control(217,7152

mux/mpeg/tsutil.h,90
#define VLC_MPEG_TSUTIL_H_21,1077
typedef void(*PEStoTSCallback)PEStoTSCallback23,1105

access_output/livehttp.c,3228
#   define O_LARGEFILE 53,1803
#define STR_ENDLIST 56,1836
#define MAX_RENAME_RETRIES 58,1876
#define SOUT_CFG_PREFIX 66,2169
#define SEGLEN_TEXT 67,2210
#define SEGLEN_LONGTEXT 68,2251
#define SPLITANYWHERE_TEXT 70,2311
#define SPLITANYWHERE_LONGTEXT 71,2368
#define NUMSEGS_TEXT 74,2518
#define NUMSEGS_LONGTEXT 75,2564
#define NOCACHE_TEXT 77,2635
#define NOCACHE_LONGTEXT 78,2674
#define INDEX_TEXT 80,2778
#define INDEX_LONGTEXT 81,2814
#define INDEXURL_TEXT 83,2877
#define INDEXURL_LONGTEXT 84,2935
#define DELSEGS_TEXT 87,3065
#define DELSEGS_LONGTEXT 88,3108
#define RATECONTROL_TEXT 90,3187
#define KEYURI_TEXT 92,3253
#define KEYFILE_TEXT 94,3313
#define KEYFILE_LONGTEXT 95,3353
#define KEYLOADFILE_TEXT 97,3429
#define KEYLOADFILE_LONGTEXT 98,3510
#define RANDOMIV_TEXT 102,3776
#define RANDOMIV_LONGTEXT 103,3837
#define INTITIAL_SEG_TEXT 105,3917
#define INITIAL_SEG_LONGTEXT 106,3973
vlc_module_begin 108,4051
typedef struct output_segment166,6341
    char *psz_filename;psz_filename168,6373
    char *psz_uri;psz_uri169,6397
    char *psz_key_uri;psz_key_uri170,6416
    char *psz_duration;psz_duration171,6439
    float f_seglength;172,6463
    uint32_t i_segment_number;173,6486
    uint8_t aes_ivs[aes_ivs174,6517
} output_segment_t;175,6542
struct sout_access_out_sys_t177,6563
    char *psz_cursegPath;psz_cursegPath179,6594
    char *psz_indexPath;psz_indexPath180,6620
    char *psz_indexUrl;psz_indexUrl181,6645
    char *psz_keyfile;psz_keyfile182,6669
    mtime_t i_keyfile_modification;183,6692
    mtime_t i_opendts;184,6728
    mtime_t i_dts_offset;185,6751
    mtime_t  i_seglenm;186,6777
    uint32_t i_segment;187,6801
    size_t  i_seglen;188,6825
    float   f_seglen;189,6847
    block_t *full_segments;full_segments190,6869
    block_t **full_segments_end;full_segments_end191,6897
    block_t *ongoing_segment;ongoing_segment192,6930
    block_t **ongoing_segment_end;ongoing_segment_end193,6960
    int i_handle;194,6995
    unsigned i_numsegs;195,7013
    unsigned i_initial_segment;196,7037
    bool b_delsegs;197,7069
    bool b_ratecontrol;198,7089
    bool b_splitanywhere;199,7113
    bool b_caching;200,7139
    bool b_generate_iv;201,7159
    bool b_segment_has_data;202,7183
    uint8_t aes_ivs[aes_ivs203,7212
    gcry_cipher_hd_t aes_ctx;204,7237
    char *key_uri;key_uri205,7267
    uint8_t stuffing_bytes[stuffing_bytes206,7286
    ssize_t stuffing_size;207,7318
    vlc_array_t *segments_t;segments_t208,7345
static int Open(219,7916
static int CryptSetup(315,11232
static int LoadCryptFile(389,13401
static int CryptKey(453,15294
#define SEG_NUMBER_PLACEHOLDER 479,16127
static char *formatSegmentPath(formatSegmentPath483,16383
static void destroySegment(509,17102
static uint32_t segmentAmountNeeded(522,17631
static bool isFirstItemRemovable(543,18519
static int updateIndexAndDel(563,19514
static void closeCurrentSegment(713,24602
static void Close(762,26399
static int Control(830,28538
static ssize_t openNextFile(853,29172
static int CheckSegmentChange(911,31212
static ssize_t writeSegment(947,32380
static ssize_t Write(1028,35051
static int Seek(1066,36471

access/pulse.c,864
#define HELP_TEXT 34,1221
vlc_module_begin 41,1442
struct demux_sys_t53,1778
    pa_stream *stream;stream55,1799
    pa_context *context;context56,1864
    pa_threaded_mainloop *mainloop;mainloop57,1927
    es_out_id_t *es;es59,1990
    bool discontinuity;60,2011
    unsigned framesize;61,2087
    mtime_t caching;62,2141
static void stream_state_cb(66,2209
static void stream_success_cb 80,2550
static void stream_buffer_attr_cb(89,2757
static void stream_moved_cb(98,3056
static void stream_overflow_cb(108,3351
static void stream_started_cb(116,3495
static void stream_suspended_cb(124,3637
static void stream_underflow_cb(132,3783
static int stream_wait(140,3929
static void stream_read_cb(152,4269
static int Control(198,5495
static const vlc_fourcc_t fourccs[fourccs238,6445
static int Open(254,7064
static void Close 377,11346

packetizer/mpeg4audio.c,2524
    int i_object_type;62,2247
    int i_samplerate;63,2270
    int i_channel;64,2292
    int i_sbr;65,2311
    int i_ps;66,2369
        int i_object_type;70,2445
        int i_samplerate;71,2472
    } extension;72,2498
    int i_frame_length;75,2537
} mpeg4_cfg_t;77,2579
#define LATM_MAX_EXTRA_SIZE 79,2595
    int i_program;82,2643
    int i_layer;83,2662
    int i_frame_length_type;85,2680
    int i_frame_length;86,2709
    int i_frame_length_index;87,2751
    mpeg4_cfg_t cfg;89,2802
    int     i_extra;92,2852
    uint8_t extra[extra93,2873
} latm_stream_t;95,2914
#define LATM_MAX_LAYER 97,2932
#define LATM_MAX_PROGRAM 98,2959
    int b_same_time_framing;101,3006
    int i_sub_frames;102,3035
    int i_programs;103,3057
    int pi_layers[pi_layers105,3078
    int pi_stream[pi_stream107,3116
    int i_streams;109,3170
    latm_stream_t stream[stream110,3189
    int i_other_data;112,3249
    int i_crc;113,3271
} latm_mux_t;114,3307
struct decoder_sys_t116,3322
    int i_state;121,3384
    int i_type;122,3401
    block_bytestream_t bytestream;124,3418
    date_t  end_date;129,3494
    mtime_t i_pts;130,3516
    int i_frame_size;132,3536
    unsigned int i_channels;133,3558
    unsigned int i_rate,134,3587
    unsigned int i_rate, i_frame_length,134,3587
    unsigned int i_rate, i_frame_length, i_header_size;134,3587
    int i_input_rate;136,3644
    bool b_latm_cfg;139,3682
    latm_mux_t latm;140,3703
    int i_warnings;142,3725
    WARN_CRC_UNSUPPORTED 147,3756
#define WARN_ONCE(150,3789
    TYPE_NONE,159,4006
    TYPE_RAW,160,4021
    TYPE_ADTS,161,4035
    TYPE_LOAS162,4050
static const int pi_sample_rates[pi_sample_rates165,4068
#define ADTS_HEADER_SIZE 171,4228
#define LOAS_HEADER_SIZE 172,4255
vlc_module_begin 188,4953
static void ClosePacketizer(284,8394
static void FlushRawBlock(296,8778
static block_t *PacketizeRawBlock(PacketizeRawBlock308,9228
static int ADTSSyncInfo(347,10502
static int LOASSyncInfo(441,13813
static int Mpeg4GAProgramConfigElement(447,13987
static int Mpeg4GASpecificConfig(480,14957
static int Mpeg4ReadAudioObjectType(505,15865
static int Mpeg4ReadAudioSamplerate(513,16025
static int Mpeg4ReadAudioSpecificInfo(521,16201
static int LatmGetValue(662,20397
static int LatmReadStreamMuxConfiguration(672,20574
static int LOASParse(771,23608
static void SetupOutput(919,29479
static void FlushStreamBlock(951,30679
static block_t *PacketizeStreamBlock(PacketizeStreamBlock963,31106

video_chroma/i420_nv12.c,238
struct filter_sys_t44,1894
    copy_cache_t cache;46,1916
static int Create(54,2281
static void Delete(102,3783
VIDEO_FILTER_WRAPPER(110,3990
static void I420_NV12(141,5079
static void YV12_NV12(150,5473
vlc_module_begin 160,5835

demux/dash/mpd/TrickModeType.h,169
#define TRICKMODETYPE_H_26,1176
        class TrickModeType32,1243
                TrickModeType 35,1301
                int         getAlternatePlayoutRate(37,1346

video_filter/puzzle_bezier.c,411
point_t *puzzle_scale_curve_H(puzzle_scale_curve_H41,1726
point_t *puzzle_H_2_scale_curve_V(puzzle_H_2_scale_curve_V123,4798
point_t *puzzle_curve_H_2_V(puzzle_curve_H_2_V138,5413
point_t *puzzle_curve_H_2_negative(puzzle_curve_H_2_negative159,6035
point_t *puzzle_curve_V_2_negative(puzzle_curve_V_2_negative179,6662
point_t *puzzle_rand_bezier(puzzle_rand_bezier199,7271
#define NB_PRIM 201,7320

demux/mkv/matroska_segment.hpp,4328
#define VLC_MKV_MATROSKA_SEGMENT_HPP_26,1262
    WHOLE_SEGMENT,::WHOLE_SEGMENT47,1579
    TRACK_UID,::TRACK_UID48,1598
    EDITION_UID,::EDITION_UID49,1613
    CHAPTER_UID,::CHAPTER_UID50,1630
    ATTACHMENT_UID::ATTACHMENT_UID51,1647
} tag_target_type;52,1666
class SimpleTag54,1686
    typedef std::vector<SimpleTag> sub_tags_t;SimpleTag::sub_tags_t57,1712
    std::string tag_name;SimpleTag::tag_name58,1759
    std::string lang;SimpleTag::lang59,1785
    std::string value;SimpleTag::value60,1807
    sub_tags_t sub_tags;SimpleTag::sub_tags61,1830
class Tag64,1859
    typedef std::vector<SimpleTag> simple_tags_t;Tag::simple_tags_t67,1879
    Tag(Tag::Tag68,1929
    tag_target_type i_tag_type;Tag::i_tag_type69,1994
    uint64_t        i_target_type;Tag::i_target_type70,2026
    uint64_t        i_uid;Tag::i_uid71,2061
    simple_tags_t   simple_tags;Tag::simple_tags72,2088
class matroska_segment_c75,2125
    typedef std::map<mkv_track_t::track_id_t,matroska_segment_c::mkv_track_t::track_id_t78,2160
    typedef std::map<mkv_track_t::track_id_t, mkv_track_t> tracks_map_t;matroska_segment_c::tracks_map_t78,2160
    typedef std::vector<Tag>            tags_t;matroska_segment_c::tags_t79,2233
    KaxSegment              *segment;matroska_segment_c::segment84,2389
    EbmlStream              & es;matroska_segment_c::es85,2427
    uint64_t                i_timescale;matroska_segment_c::i_timescale88,2483
    mtime_t                 i_duration;matroska_segment_c::i_duration91,2559
    mtime_t                 i_mk_start_time;matroska_segment_c::i_mk_start_time92,2599
    tracks_map_t tracks;matroska_segment_c::tracks95,2666
    std::vector<mkv_track_t::track_id_t> priority_tracks;matroska_segment_c::priority_tracks96,2691
    int                     i_seekhead_count;matroska_segment_c::i_seekhead_count99,2774
    int64_t                 i_seekhead_position;matroska_segment_c::i_seekhead_position100,2820
    int64_t                 i_cues_position;matroska_segment_c::i_cues_position101,2869
    int64_t                 i_tracks_position;matroska_segment_c::i_tracks_position102,2914
    int64_t                 i_info_position;matroska_segment_c::i_info_position103,2961
    int64_t                 i_chapters_position;matroska_segment_c::i_chapters_position104,3006
    int64_t                 i_attachments_position;matroska_segment_c::i_attachments_position105,3055
    KaxCluster              *cluster;matroska_segment_c::cluster107,3108
    uint64                  i_block_pos;matroska_segment_c::i_block_pos108,3146
    KaxSegmentUID           *p_segment_uid;matroska_segment_c::p_segment_uid109,3187
    KaxPrevUID              *p_prev_segment_uid;matroska_segment_c::p_prev_segment_uid110,3231
    KaxNextUID              *p_next_segment_uid;matroska_segment_c::p_next_segment_uid111,3280
    bool                    b_cues;matroska_segment_c::b_cues113,3330
    char                    *psz_muxing_application;matroska_segment_c::psz_muxing_application116,3382
    char                    *psz_writing_application;matroska_segment_c::psz_writing_application117,3435
    char                    *psz_segment_filename;matroska_segment_c::psz_segment_filename118,3489
    char                    *psz_title;matroska_segment_c::psz_title119,3540
    char                    *psz_date_utc;matroska_segment_c::psz_date_utc120,3580
    std::vector<chapter_edition_c*> stored_editions;matroska_segment_c::stored_editions125,3824
    std::vector<chapter_edition_c*>::size_type i_default_edition;matroska_segment_c::i_default_edition126,3877
    std::vector<chapter_translation_c*> translations;matroska_segment_c::translations128,3944
    std::vector<KaxSegmentFamily*>  families;matroska_segment_c::families129,3998
    tags_t                          tags;matroska_segment_c::tags130,4044
    demux_sys_t                    & sys;matroska_segment_c::sys132,4087
    EbmlParser                     *ep;matroska_segment_c::ep133,4129
    bool                           b_preloaded;matroska_segment_c::b_preloaded134,4169
    bool                           b_ref_external_segments;matroska_segment_c::b_ref_external_segments135,4217
    SegmentSeeker _seeker;matroska_segment_c::_seeker174,5882

access/archive/stream.c,398
struct stream_sys_t30,1206
    struct archive *p_archive;p_archive32,1228
    bool b_source_canseek;33,1259
    uint8_t buffer[buffer34,1286
static ssize_t NoRead(37,1329
static int Control(43,1459
static ssize_t ReadCallback(65,1987
static ssize_t SkipCallback(75,2314
static ssize_t SeekCallback(104,3164
static int Browse(132,3841
int StreamOpen(167,4957
void StreamClose(214,6375

access/concat.c,751
struct access_entry32,1221
    struct access_entry *next;next34,1243
    char mrl[mrl35,1274
struct access_sys_t38,1295
    access_t *access;access40,1317
    struct access_entry *next;next41,1339
    struct access_entry *first;first42,1370
    bool can_seek;43,1402
    bool can_seek_fast;44,1421
    bool can_pause;45,1445
    bool can_control_pace;46,1465
    uint64_t size;47,1492
    int64_t caching;48,1511
static access_t *GetAccess(GetAccess51,1536
static ssize_t Read(77,2023
static block_t *Block(Block92,2495
static int Seek(104,2707
static int Control(146,3559
static int Open(183,4621
static void Close(286,7318
#define INPUT_LIST_TEXT 304,7693
#define INPUT_LIST_LONGTEXT 305,7735
vlc_module_begin(308,7828

gui/minimal_macosx/intf.h,59
struct intf_sys_t40,1763
    int nothing_for_now;42,1783

demux/adaptive/logic/AbstractAdaptationLogic.cpp,175
AbstractAdaptationLogic::AbstractAdaptationLogic 32,1284
AbstractAdaptationLogic::~AbstractAdaptationLogic 36,1344
void AbstractAdaptationLogic::updateDownloadRate 40,1404

stream_out/raop.c,2955
#define RAOP_PORT 48,1712
#define RAOP_USER_AGENT 49,1735
static const char ps_raop_rsa_pubkey[ps_raop_rsa_pubkey52,1776
static const char ps_raop_rsa_exp[ps_raop_rsa_exp70,2955
static const char psz_delim_space[psz_delim_space72,3010
static const char psz_delim_colon[psz_delim_colon73,3053
static const char psz_delim_equal[psz_delim_equal74,3096
static const char psz_delim_semicolon[psz_delim_semicolon75,3139
    JACK_TYPE_NONE 94,3835
    JACK_TYPE_ANALOG,95,3859
    JACK_TYPE_DIGITAL,96,3881
} jack_type_t;97,3904
struct sout_stream_sys_t99,3920
    char *psz_host;psz_host102,3974
    char *psz_password;psz_password103,3994
    int i_volume;104,4018
    sout_stream_id_sys_t *p_audio_stream;p_audio_stream107,4061
    bool b_alac_warning;108,4103
    bool b_volume_callback;109,4128
    int i_control_fd;112,4184
    int i_stream_fd;113,4206
    uint8_t ps_aes_key[ps_aes_key115,4228
    uint8_t ps_aes_iv[ps_aes_iv116,4256
    gcry_cipher_hd_t aes_ctx;117,4283
    char *psz_url;psz_url119,4314
    char *psz_client_instance;psz_client_instance120,4333
    char *psz_session;psz_session121,4364
    char *psz_last_status_line;psz_last_status_line122,4387
    int i_cseq;124,4420
    int i_server_port;125,4436
    int i_audio_latency;126,4459
    int i_jack_type;127,4484
    vlc_http_auth_t auth;129,4506
    size_t i_sendbuf_len;132,4555
    uint8_t *p_sendbuf;p_sendbuf133,4581
struct sout_stream_id_sys_t136,4609
    es_format_t fmt;138,4639
#define SOUT_CFG_PREFIX 145,4845
#define HOST_TEXT 147,4883
#define HOST_LONGTEXT 148,4912
#define VOLUME_TEXT 150,4981
#define VOLUME_LONGTEXT 151,5014
#define PASSWORD_TEXT 154,5165
#define PASSWORD_LONGTEXT 155,5202
#define PASSWORD_FILE_TEXT 157,5263
#define PASSWORD_FILE_LONGTEXT 158,5310
    set_shortname(161,5411
static void FreeSys(190,6464
static void FreeId(215,7231
static void RemoveBase64Padding(220,7299
static int CheckForGcryptErrorWithLine(227,7438
#define CheckForGcryptError(242,7895
static int MGF1(248,8117
static int AddOaepPadding(311,9937
static int EncryptAesKeyBase64(435,13179
static char *ReadPasswordFile(ReadPasswordFile545,17074
static int SplitHeader(601,18565
static void FreeHeader(621,19080
static int ReadStatusLine(627,19186
static int ReadHeader(670,20280
static int WriteAuxHeaders(720,21496
static int SendRequest(755,22396
static int ParseAuthenticateHeader(824,24350
static int ExecRequest(848,25069
static int AnnounceSDP(951,28191
static int SendSetup(1043,31055
static int SendRecord(1120,33275
static int SendFlush(1156,34431
static int SendTeardown(1181,35110
static int UpdateVolume(1202,35659
static void LogInfo(1251,37058
static void SendAudio(1278,37695
static int Open(1370,40628
static void Close(1546,45911
static sout_stream_id_sys_t *Add(Add1561,46313
static void Del(1622,48053
static int Send(1636,48441
static int VolumeCallback(1658,49092

video_filter/puzzle_bezier.h,141
#define VLC_LIB_BEZIER_H 25,1201
        float f_x,28,1246
        float f_x, f_y;28,1246
 } point_t;29,1270
#define bezier_val(38,1786

demux/adaptive/playlist/BaseRepresentation.h,651
#define BASEREPRESENTATION_H_26,1182
        class BaseRepresentation 43,1503
                BaseRepresentation(47,1662
                virtual ~BaseRepresentation 48,1721
                virtual StreamFormat getStreamFormat(50,1770
                BaseAdaptationSet                  *adaptationSet;BaseRepresentation::adaptationSet80,3504
                uint64_t                            bandwidth;BaseRepresentation::bandwidth81,3571
                std::list<std::string>              codecs;BaseRepresentation::codecs82,3634
                bool                                b_consistent;BaseRepresentation::b_consistent83,3694

stream_filter/aribcam.c,839
vlc_module_begin 40,1470
struct error_messages_s49,1739
    const int8_t i_error;51,1765
    const char * const psz_error;52,1791
static const struct error_messages_s const b25_errors[b25_errors55,1829
static const struct error_messages_s const bcas_errors[bcas_errors76,3001
struct stream_sys_t87,3498
    ARIB_STD_B25 *p_b25;p_b2589,3520
    B_CAS_CARD   *p_bcas;p_bcas90,3545
        uint8_t *p_buf;p_buf93,3588
        size_t   i_size;94,3612
        block_t *p_list;p_list95,3637
    } remain;96,3662
static const char * GetErrorMessage(99,3680
static size_t RemainRead(112,4047
static bool RemainAdd(142,4950
static void RemainFlush(157,5404
#define ALL_READY 164,5567
static ssize_t Read(166,5624
static int Seek(234,7558
static int Control(245,7780
static int Open(250,7923
static void Close 335,10740

demux/adaptive/playlist/SegmentBase.h,149
#define SEGMENTBASE_H_26,1172
        class SegmentBase 37,1389
                SegmentBase 42,1576
                virtual ~SegmentBase 43,1635

audio_output/waveout.c,1832
#define UNICODE35,1446
#define FRAME_SIZE 43,1636
struct lkwavehdr55,2251
    WAVEHDR hdr;57,2270
    struct lkwavehdr * p_next;58,2287
static const wchar_t device_name_fmt[device_name_fmt86,3389
struct aout_sys_t95,3875
    HWAVEOUT h_waveout;97,3895
    WAVEFORMATEXTENSIBLE waveformat;99,3976
    size_t i_frames;101,4057
    int i_repeat_counter;103,4079
    int i_buffer_size;105,4106
    int i_rate;107,4130
    uint8_t *p_silence_buffer;p_silence_buffer109,4147
    float f_volume;111,4228
    bool b_spdif;113,4249
    bool b_mute;114,4267
    bool b_soft;115,4284
    uint8_t chans_to_reorder;116,4352
    uint8_t chan_table[chan_table118,4432
    vlc_fourcc_t format;119,4471
    mtime_t i_played_length;121,4497
    struct lkwavehdr * p_free_list;123,4527
    vlc_mutex_t lock;125,4564
    vlc_cond_t cond;126,4586
    vlc_timer_t volume_poll_timer;127,4607
#define DEVICE_TEXT 133,4826
#define DEVICE_LONG 134,4872
#define AUDIO_CHAN_TEXT 138,5050
#define AUDIO_CHAN_LONGTEXT 139,5102
#define VOLUME_TEXT 143,5326
vlc_module_begin 145,5366
static void Play(338,12532
static void Stop(378,13840
static int OpenWaveOut(424,15435
#define waveformat 432,15681
#undef waveformat543,20083
static int OpenWaveOutPCM(550,20314
static int PlayWaveOut(583,21448
static void CALLBACK WaveOutCallback(645,23650
static void WaveOutClean(664,24325
static void WaveOutClearBuffer(682,24727
static int ReloadWaveoutDevices(695,25149
static uint32_t findDeviceID(734,26312
static int DeviceSelect 764,27085
static int Open(772,27327
static void Close(825,28777
static int WaveOutTimeGet(839,29089
static void WaveOutFlush(859,29613
static void WaveOutPause(880,30157
static int WaveoutVolumeSet(906,30874
static int WaveoutMuteSet(951,31959
static void WaveoutPollVolume(986,32816

gui/minimal_macosx/intf.m,310
int OpenIntf 51,2208
void CloseIntf 70,2753
typedef struct CPSProcessSerNum78,2897
        UInt32                lo;80,2931
        UInt32                hi;81,2965
} CPSProcessSerNum;82,2999
static void Run(92,3444
int WindowOpen(109,4055
static int WindowControl(137,5067
void WindowClose(184,6620

codec/araw.c,1943
vlc_module_begin 49,1878
struct decoder_sys_t72,2631
    void (*decode)decode74,2654
    size_t framebits;75,2710
    date_t end_date;76,2732
static const uint16_t pi_channels_maps[pi_channels_maps79,2757
static int DecoderOpen(110,4348
static void Flush(306,9923
static block_t *DecodeBlock(DecodeBlock318,10379
static void S8Decode(377,12026
static void U16BDecode(385,12202
static void U16LDecode(396,12421
static void S16IDecode(407,12640
static void S20BDecode(412,12752
static void U24BDecode(431,13215
static void U24LDecode(443,13496
static void S24BDecode(455,13777
static void S24LDecode(467,14045
static void S24B32Decode(479,14313
static void S24L32Decode(490,14531
static void U32BDecode(501,14749
static void U32LDecode(512,14973
static void S32IDecode(523,15197
static void F32NDecode(538,15477
static void F32IDecode(552,15784
        union { float f;558,15932
        union { float f; uint32_t u;558,15932
static void F64NDecode(572,16181
static void F64IDecode(586,16492
        union { double d;592,16641
        union { double d; uint64_t u;592,16641
static int16_t dat12tos16(606,16892
static void DAT12Decode(620,17306
static void DecoderClose(639,17857
static void U16IEncode(651,18235
static void U16NEncode(660,18481
static void U24BEncode(669,18716
static void U24LEncode(683,19051
static void S24BEncode(697,19386
static void S24LEncode(711,19714
static void U32IEncode(725,20042
static void U32NEncode(734,20292
static void S32IEncode(743,20531
static void F32IEncode(752,20764
        union { float f;759,20957
        union { float f; uint32_t u;759,20957
        union { float f; uint32_t u; char b[b759,20957
static void F64IEncode(768,21122
        union { double d;775,21317
        union { double d; uint64_t u;775,21317
        union { double d; uint64_t u; char b[b775,21317
static block_t *Encode(Encode784,21483
static int EncoderOpen(814,22377

access/dc1394.c,1221
#define MAX_IEEE1394_HOSTS 41,1657
#define MAX_CAMERA_NODES 42,1687
vlc_module_begin(50,1971
struct demux_sys_t57,2182
    dc1394_t            *p_dccontext;p_dccontext60,2225
    uint32_t            num_cameras;61,2263
    dc1394camera_t      *camera;camera62,2300
    int                 selected_camera;63,2333
    uint64_t            selected_uid;64,2374
    uint32_t            dma_buffers;65,2412
    dc1394featureset_t  features;66,2449
    bool                reset_bus;67,2483
    char                *video_device;video_device70,2540
    dc1394video_mode_t  video_mode;71,2579
    int                 width;72,2615
    int                 height;73,2646
    int                 frame_size;74,2678
    int                 frame_rate;75,2714
    unsigned int        brightness;76,2750
    unsigned int        focus;77,2786
    es_out_id_t         *p_es_video;p_es_video78,2817
    dc1394video_frame_t *frame;frame79,2854
static int FindCamera(93,3423
static int Open(162,5343
static void Close(376,11910
static void MovePixelUYVY(397,12459
static block_t *GrabVideo(GrabVideo433,13126
static int Demux(468,14059
static int Control(496,14789
static int process_options(524,15529

video_filter/dynamicoverlay/dynamicoverlay_commands.c,1641
overlay_t *OverlayCreate(OverlayCreate48,1706
int OverlayDestroy(65,2169
static int skip_space(76,2493
static int parse_digit(92,2788
static int parse_char(104,3055
static int parser_DataSharedMem(116,3351
static int parser_Id(155,4629
static int parser_None(168,4990
static int parser_SetAlpha(177,5209
static int parser_SetPosition(196,5787
static int parser_SetTextAlpha(221,6566
static int parser_SetTextColor(240,7166
static int parser_SetTextSize(274,8207
static int parser_SetVisibility(293,8804
static int unparse_default(318,9655
static int unparse_GenImage(326,9848
static int unparse_GetAlpha(336,10104
static int unparse_GetPosition(346,10363
static int unparse_GetTextAlpha(360,10733
static int unparse_GetTextColor(370,11015
static int unparse_GetTextSize(388,11599
static int unparse_GetVisibility(398,11878
static int exec_DataSharedMem(411,12341
static int exec_DeleteImage(548,16717
static int exec_EndAtomic(559,17066
static int exec_GenImage(571,17453
static int exec_GetAlpha(590,17948
static int exec_GetPosition(603,18359
static int exec_GetTextAlpha(617,18804
static int exec_GetTextColor(631,19321
static int exec_GetTextSize(645,19838
static int exec_GetVisibility(658,20289
static int exec_SetAlpha(672,20727
static int exec_SetPosition(688,21205
static int exec_SetTextAlpha(706,21717
static int exec_SetTextColor(723,22300
static int exec_SetTextSize(740,22883
static int exec_SetVisibility(756,23403
static int exec_StartAtomic(772,23906
static const commanddesc_static_t p_commands[p_commands787,24425
void RegisterCommand(893,27676
void UnregisterCommand(917,28849

codec/gstreamer/gstvlcvideopool.c,651
#define gst_vlc_video_pool_parent_class 34,1457
static const gchar** gst_vlc_video_pool_get_options 38,1590
static gboolean gst_vlc_video_pool_set_config(49,1852
static GstFlowReturn gst_vlc_video_pool_acquire_buffer(157,5231
static void gst_vlc_video_pool_release_buffer(174,5773
static void gst_vlc_video_pool_free_buffer(186,6117
static GstFlowReturn gst_vlc_video_pool_alloc_buffer(200,6516
static gboolean gst_vlc_video_pool_start(232,7549
static void gst_vlc_video_pool_class_init(243,7892
static void gst_vlc_video_pool_init(259,8688
static void gst_vlc_video_pool_finalize(264,8782
GstVlcVideoPool* gst_vlc_video_pool_new(273,9020

visualization/goom.c,996
#define WIDTH_TEXT 46,1952
#define HEIGHT_TEXT 47,1996
#define RES_LONGTEXT 48,2042
#define SPEED_TEXT 51,2196
#define SPEED_LONGTEXT 52,2242
#define MAX_SPEED 55,2357
vlc_module_begin 57,2379
#define MAX_BLOCKS 76,3124
#define GOOM_DELAY 77,3147
    vlc_thread_t  thread;81,3191
    int           i_width;83,3218
    int           i_height;84,3245
    vout_thread_t *p_vout;p_vout85,3273
    int           i_speed;86,3300
    vlc_mutex_t   lock;88,3328
    vlc_cond_t    wait;89,3352
    bool          b_exit;90,3376
    unsigned i_channels;93,3430
    block_t       *pp_blocks[pp_blocks96,3486
    int           i_blocks;97,3528
    date_t        date;99,3557
} goom_thread_t;101,3582
struct filter_sys_t103,3600
    goom_thread_t *p_thread;p_thread105,3622
static int Open(116,3934
static block_t *DoWork(DoWork183,6324
static inline int16_t FloatToInt16(216,7312
static int FillBuffer(229,7675
static void *Thread(Thread286,9455
static void Close(348,11651

audio_filter/equalizer_presets.h,601
#define VLC_EQUALIZER_PRESETS_H_25,1185
#define EQZ_BANDS_MAX 34,1542
static const float f_vlc_frequency_table_10b[f_vlc_frequency_table_10b37,1595
static const float f_iso_frequency_table_10b[f_iso_frequency_table_10b42,1725
#define NB_PRESETS 47,1856
static const char *const preset_list[preset_list48,1878
static const char *const preset_list_text[preset_list_text53,2132
    const char psz_name[psz_name62,2497
    int  i_band;63,2526
    float f_preamp;64,2543
    float f_amp[f_amp65,2563
} eqz_preset_t;66,2595
static const eqz_preset_t eqz_preset_10b[eqz_preset_10b68,2612

video_output/xcb/xcb_keysym.h,686
        { XK_BackSpace,5,224
        { XK_BackSpace,     KEY_BACKSPACE,5,224
        { XK_KP_Tab,26,1046
        { XK_KP_Tab,        KEY_TAB,26,1046
        { XK_KP_Add,44,1815
        { XK_KP_Separator,45,1851
        { XK_KP_Subtract,46,1887
        { XK_KP_Decimal,47,1923
        { XK_KP_Divide,48,1994
        { XK_KP_0,49,2030
        { XK_KP_1,50,2066
        { XK_KP_2,51,2102
        { XK_KP_3,52,2138
        { XK_KP_4,53,2174
        { XK_KP_5,54,2210
        { XK_KP_6,55,2246
        { XK_KP_7,56,2282
        { XK_KP_8,57,2318
        { XK_KP_9,58,2354
        { XK_KP_Equal,59,2390
        { XK_F1,61,2427
        { XK_F1,            KEY_F1,61,2427

video_filter/filter_event_info.h,598
#define FILTER_EVENT_INFO_H_25,1126
#define VIDEO_FILTER_EVENT_VARIABLE 27,1156
typedef struct video_filter_region_info_t29,1214
    int i_x;31,1258
    int i_y;32,1327
    int i_width;34,1428
    int i_height;35,1474
    int i_id;37,1524
    int i_type;38,1538
    char *p_description;p_description40,1556
    float *pf_param;pf_param41,1581
    int i_param_size;42,1602
} video_filter_region_info_t;43,1624
typedef struct video_filter_event_info_t45,1655
   video_filter_region_info_t *p_region;p_region47,1698
   int i_region_size;48,1739
} video_filter_event_info_t;49,1761

visualization/visual/effects.c,1211
#define PEAK_SPEED 42,1607
#define BAR_DECREASE_SPEED 43,1628
#define GRAD_ANGLE_MIN 45,1658
#define GRAD_ANGLE_MAX 46,1685
#define GRAD_INCR 47,1712
static int dummy_Run(52,1908
static void dummy_Free(60,2166
typedef struct spectrum_data69,2425
    int *peaks;peaks71,2456
    int *prev_heights;prev_heights72,2472
    unsigned i_prev_nb_samples;74,2496
    int16_t *p_prev_s16_buff;p_prev_s16_buff75,2528
    window_param wind_param;77,2559
} spectrum_data;78,2588
static int spectrum_Run(80,2606
        union { float f;181,6260
        union { float f; int32_t i;181,6260
static void spectrum_Free(371,12689
    int *peaks;peaks390,13167
    unsigned i_prev_nb_samples;392,13184
    int16_t *p_prev_s16_buff;p_prev_s16_buff393,13216
    window_param wind_param;395,13247
} spectrometer_data;396,13276
static int spectrometer_Run(398,13298
#define Y(401,13456
#define U(402,13525
#define V(403,13602
        union { float f;529,19024
        union { float f; int32_t i;529,19024
static void spectrometer_Free(868,30659
static int scope_Run(884,31067
static int vuMeter_Run(941,33044
const struct visual_cb_t effectv[effectv1078,37563
const unsigned effectc 1085,37910

codec/gstreamer/gstvlcvideopool.h,743
#define VLC_GST_VIDEO_POOL_H28,1351
typedef struct _GstVlcVideoPool GstVlcVideoPool;35,1491
typedef struct _GstVlcVideoPoolClass GstVlcVideoPoolClass;36,1540
#define GST_TYPE_VLC_VIDEO_POOL 39,1628
#define GST_IS_VLC_VIDEO_POOL(40,1697
#define GST_VLC_VIDEO_POOL(42,1838
#define GST_VLC_VIDEO_POOL_CAST(45,2038
struct _GstVlcVideoPool47,2102
    GstBufferPool bufferpool;49,2128
    GstVlcPicturePlaneAllocator *p_allocator;p_allocator50,2158
    GstCaps *p_caps;p_caps52,2205
    GstVideoInfo info;53,2226
    GstVideoAlignment align;54,2249
    bool b_add_metavideo;55,2278
    bool b_need_aligned;56,2304
    decoder_t *p_dec;p_dec58,2330
struct _GstVlcVideoPoolClass61,2356
    GstBufferPoolClass parent_class;63,2387

access/alsa.c,947
#define HELP_TEXT 35,1297
#define STEREO_TEXT 38,1448
#define RATE_TEXT 39,1481
static const int rate_values[rate_values44,1589
static const char *const rate_names[rate_names49,1729
vlc_module_begin 55,1994
#define Dump(96,3228
static void DumpDevice 99,3330
static void DumpDeviceStatus 114,3797
#define DumpDeviceStatus(122,4034
struct demux_sys_t125,4102
    snd_pcm_t *pcm;pcm127,4123
    es_out_id_t *es;es128,4143
    vlc_thread_t thread;129,4164
    mtime_t start;131,4190
    mtime_t caching;132,4209
    snd_pcm_uframes_t period_size;133,4230
    unsigned rate;134,4265
static void Poll 137,4288
static void *Thread Thread154,4702
static int Control 238,7121
static const vlc_fourcc_t formats[formats270,7870
# define C(312,10245
# define C(314,10278
static const uint8_t choices[choices318,10361
static uint16_t channel_maps[channel_maps335,10780
static int Open 341,11004
static void Close 517,16211

video_filter/puzzle_lib.c,404
const char *ppsz_shuffle_button[ppsz_shuffle_button44,1702
const char *ppsz_rot_arrow_sign[ppsz_rot_arrow_sign61,2861
const char *ppsz_mir_arrow_sign[ppsz_mir_arrow_sign78,3134
void puzzle_preset_desk_background(98,3602
void puzzle_draw_borders(123,4476
void puzzle_draw_preview(154,6189
void puzzle_draw_sign(203,8450
void puzzle_draw_rectangle(230,9907
void puzzle_fill_rectangle(267,11681

text_renderer/sapi.cpp,371
#define INITGUID40,1687
struct filter_sys_t64,2303
    ISpVoice* cpVoice;filter_sys_t::cpVoice66,2325
    char* lastString;filter_sys_t::lastString67,2348
static int TryEnterMTA(71,2394
#define TryEnterMTA(81,2642
static void EnterMTA(83,2693
static void LeaveMTA(90,2833
static int Create 95,2887
static void Destroy(169,5094
static int RenderText(181,5336

video_filter/puzzle_lib.h,200
#define VLC_LIB_PUZZLE_H 27,1338
static inline int32_t init_countdown(52,2403
#define SHUFFLE_WIDTH 55,2590
#define SHUFFLE_LINES 56,2615
#define ARROW_WIDTH 59,2696
#define ARROW_LINES 60,2719

demux/mjpeg.c,848
#define FPS_TEXT 46,1877
#define FPS_LONGTEXT 47,1918
vlc_module_begin 51,2096
struct demux_sys_t68,2727
    es_format_t     fmt;70,2748
    es_out_id_t     *p_es;p_es71,2773
    bool            b_still;73,2801
    mtime_t         i_still_end;74,2830
    mtime_t         i_time;75,2863
    mtime_t         i_frame_length;76,2891
    char            *psz_separator;psz_separator77,2927
    int             i_frame_size_estimate;78,2963
    const uint8_t   *p_peek;p_peek79,3006
    int             i_data_peeked;80,3035
    int             i_level;81,3070
static bool Peek(88,3378
static char* GetLine(120,4309
static bool CheckMimeHeader(170,5689
static int SendBlock(260,8054
static int Open(295,8996
static int MjpgDemux(402,12068
static int MimeDemux(456,13441
static void Close 540,15624
static int Control(552,15985

demux/adaptive/plumbing/Demuxer.cpp,610
AbstractDemuxer::AbstractDemuxer(35,1205
AbstractDemuxer::~AbstractDemuxer(42,1335
bool AbstractDemuxer::alwaysStartsFromZero(47,1377
bool AbstractDemuxer::needsRestartOnSwitch(52,1462
void AbstractDemuxer::setCanDetectSwitches(57,1551
bool AbstractDemuxer::needsRestartOnSeek(62,1638
Demuxer::Demuxer(67,1720
Demuxer::~Demuxer(83,2064
bool Demuxer::create(89,2136
void Demuxer::destroy(106,2512
void Demuxer::drain(116,2651
int Demuxer::demux(121,2745
SlaveDemuxer::SlaveDemuxer(131,2951
SlaveDemuxer::~SlaveDemuxer(139,3209
bool SlaveDemuxer::create(144,3245
int SlaveDemuxer::demux(156,3491

video_filter/adjust_sat_hue.c,452
#define I_RANGE(34,1407
#define I_MAX(35,1445
#define I_MID(36,1491
#define PLANAR_WRITE_UV_CLIP(38,1539
#define PLANAR_WRITE_UV(45,1933
#define PACKED_WRITE_UV_CLIP(52,2262
#define PACKED_WRITE_UV(61,2645
#define ADJUST_8_TIMES(70,2981
int planar_sat_hue_clip_C(76,3232
int planar_sat_hue_C(122,4585
int planar_sat_hue_clip_C_16(168,5923
int planar_sat_hue_C_16(227,7654
int packed_sat_hue_clip_C(286,9380
int packed_sat_hue_C(339,10859

stream_filter/accesstweaks.c,244
vlc_module_begin 36,1461
struct stream_sys_t52,2043
    bool b_seek;54,2065
    bool b_fastseek;55,2082
static int Control(61,2118
static ssize_t Read(89,2745
static int Seek(94,2873
static int Open(102,3043
static void Close 120,3537

lua/libs/equalizer.c,442
#   define  _GNU_SOURCE28,1340
static int vlclua_preamp_get(60,1959
static int vlclua_preamp_set(85,2717
static int vlclua_equalizer_get(123,3816
static int vlclua_equalizer_set(187,5548
static int vlclua_equalizer_setpreset(244,7083
static int vlclua_equalizer_enable 270,7934
static int vlclua_equalizer_get_presets(280,8357
static const luaL_Reg vlclua_equalizer_reg[vlclua_equalizer_reg294,8714
void luaopen_equalizer(306,9099

demux/dash/mpd/DASHCommonAttributesElements.h,1289
#define DASHCOMMONATTRIBUTESELEMENTS_H25,1234
        class DASHCommonAttributesElements36,1387
                DASHCommonAttributesElements(39,1460
                virtual ~DASHCommonAttributesElements(40,1508
                int                             getParX(41,1565
                int                                 parX;DASHCommonAttributesElements::parX61,3055
                int                                 parY;DASHCommonAttributesElements::parY62,3113
                int                                 frameRate;DASHCommonAttributesElements::frameRate63,3171
                std::list<std::string>              channels;DASHCommonAttributesElements::channels64,3234
                std::list<int>                      sampleRates;DASHCommonAttributesElements::sampleRates65,3296
                std::list<ContentDescription*>      contentProtections;DASHCommonAttributesElements::contentProtections66,3361
                std::list<ContentDescription*>      accessibilities;DASHCommonAttributesElements::accessibilities67,3433
                std::list<ContentDescription*>      ratings;DASHCommonAttributesElements::ratings68,3502
                std::list<ContentDescription*>      viewpoints;DASHCommonAttributesElements::viewpoints69,3563

codec/videotoolbox.m,2157
#define CPUFAMILY_ARM_TWISTER 52,1689
const CFStringRef kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder 63,1903
const CFStringRef kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder 64,2038
#define VT_ZERO_COPY 67,2183
#define VT_REQUIRE_HW_DEC 69,2256
#define VT_TEMPO_DEINTERLACE 71,2322
#define VT_TEMPO_DEINTERLACE_LONG 72,2371
vlc_module_begin(74,2517
struct picture_sys_t 103,3750
    CFTypeRef pixelBuffer;104,3773
struct decoder_sys_t109,3838
    CMVideoCodecType            codec;111,3861
    uint8_t                     i_nal_length_size;112,3900
    bool                        b_started;114,3952
    bool                        b_is_restarting;115,3995
    bool                        b_is_avcc;116,4044
    VTDecompressionSessionRef   session;117,4087
    CMVideoFormatDescriptionRef videoFormatDescription;118,4128
    CFMutableDictionaryRef      decoderConfiguration;119,4184
    CFMutableDictionaryRef      destinationPixelBufferAttributes;120,4238
    NSMutableArray              *outputTimeStamps;outputTimeStamps122,4305
    NSMutableDictionary         *outputFrames;outputFrames123,4356
    bool                        b_zero_copy;124,4403
    bool                        b_enable_temporal_processing;125,4448
    bool                        b_format_propagated;127,4511
static CMVideoCodecType CodecPrecheck(132,4597
static int StartVideoToolboxSession(276,9472
static int StartVideoToolbox(338,11873
static void StopVideoToolbox(646,25429
static void RestartVideoToolbox(682,26539
static int OpenDecoder(712,27220
static void CloseDecoder(773,29040
static BOOL deviceSupportsAdvancedProfiles(788,29374
static BOOL deviceSupportsAdvancedLevels(810,29812
static inline void bo_add_mp4_tag_descr(834,30288
static CFDataRef ESDSCreate(842,30507
static block_t *H264ProcessBlock(H264ProcessBlock885,31888
static CMSampleBufferRef VTSampleBufferCreate(895,32185
void VTDictionarySetInt32(950,35017
static void copy420YpCbCr8Planar(958,35261
static void Flush(983,36014
static picture_t *DecodeBlock(DecodeBlock997,36361
static void DecoderCallback(1170,43231

stream_out/display.c,570
#define AUDIO_TEXT 40,1644
#define AUDIO_LONGTEXT 41,1682
#define VIDEO_TEXT 42,1745
#define VIDEO_LONGTEXT 43,1783
#define DELAY_TEXT 44,1846
#define DELAY_LONGTEXT 45,1882
#define SOUT_CFG_PREFIX 50,2038
vlc_module_begin 52,2079
struct sout_stream_sys_t81,3170
    bool     b_audio;83,3197
    bool     b_video;84,3219
    mtime_t        i_delay;86,3242
    input_resource_t *p_resource;p_resource87,3270
static int Open(93,3476
static void Close(129,4615
static sout_stream_id_sys_t * Add(139,4889
static void Del(160,5528
static int Send(166,5667

demux/adaptive/tools/Helper.h,51
#define HELPER_H_26,1162
    class Helper33,1237

access/rtp/session.c,1061
typedef struct rtp_source_t rtp_source_t;36,1174
struct rtp_session_t39,1249
    rtp_source_t **srcv;srcv41,1272
    unsigned       srcc;42,1297
    uint8_t        ptc;43,1322
    rtp_pt_t      *ptv;ptv44,1346
rtp_session_create 58,1684
void rtp_session_destroy 77,2000
static void *no_init no_init88,2272
static void no_destroy 94,2349
static void no_decode 99,2439
int rtp_add_type 108,2621
struct rtp_source_t137,3451
    uint32_t ssrc;139,3473
    uint32_t jitter;140,3492
    mtime_t  last_rx;141,3555
    uint32_t last_ts;142,3620
    uint32_t ref_rtp;144,3684
    mtime_t  ref_ntp;145,3743
    uint16_t bad_seq;147,3803
    uint16_t max_seq;148,3877
    uint16_t last_seq;150,3929
    block_t *blocks;blocks151,3995
    void    *opaque[opaque152,4046
rtp_source_create 159,4196
rtp_source_destroy 190,5066
static inline uint16_t rtp_seq 201,5413
static inline uint32_t rtp_timestamp 207,5548
rtp_find_ptype 214,5722
rtp_queue 239,6366
bool rtp_dequeue 393,11094
void rtp_dequeue_force 468,14144
rtp_decode 484,14503

video_output/flaschen.c,450
#define T_FLDISPLAY 43,1715
#define LT_FLDISPLAY 44,1774
#define T_WIDTH 48,1916
#define LT_WIDTH 49,1944
#define T_HEIGHT 51,1980
#define LT_HEIGHT 52,2010
vlc_module_begin 57,2121
struct vout_display_sys_t 75,2818
    int             fd;76,2846
    picture_pool_t *pool;pool78,2871
static int Open(87,3314
static void Close(153,5004
static picture_pool_t *Pool(Pool165,5240
static void Display(173,5455
static int Control(229,7078

demux/adaptive/xml/DOMParser.h,706
#define DOMPARSER_H_26,1168
        class DOMParser37,1303
                DOMParser 40,1357
                DOMParser 41,1397
                virtual ~DOMParser 42,1453
                bool                parse 44,1494
                bool                reset 45,1550
                Node*               getRootNode 46,1612
                void                print 47,1664
                Node                *root;root50,1738
                stream_t            *stream;stream51,1781
                xml_reader_t        *vlc_reader;vlc_reader53,1827
                Node*   processNode 55,1877
                void    addAttributesToNode 56,1933
                void    print 57,1995

stream_out/stats.c,675
#define OUTPUT_TEXT 40,1647
#define OUTPUT_LONGTEXT 41,1685
#define PREFIX_TEXT 43,1762
#define SOUT_CFG_PREFIX 48,1900
vlc_module_begin(50,1939
struct sout_stream_sys_t74,2906
    FILE *output;output76,2933
    char *prefix;prefix77,2951
struct sout_stream_id_sys_t80,2973
    int id;82,3003
    uint64_t segment_number;83,3015
    void *next_id;next_id84,3044
    const char *type;type85,3063
    mtime_t previous_dts,86,3085
    mtime_t previous_dts,track_duration;86,3085
    struct md5_s hash;87,3126
static int Open(93,3321
static void Close(139,4641
static sout_stream_id_sys_t * Add(151,4921
static void Del(190,5861
static int Send(212,6914

access/v4l2/linux/v4l2-common.h,868
#define __V4L2_COMMON__30,1025
#define V4L2_SEL_TGT_CROP	39,1127
#define V4L2_SEL_TGT_CROP_DEFAULT	41,1189
#define V4L2_SEL_TGT_CROP_BOUNDS	43,1252
#define V4L2_SEL_TGT_COMPOSE	45,1321
#define V4L2_SEL_TGT_COMPOSE_DEFAULT	47,1387
#define V4L2_SEL_TGT_COMPOSE_BOUNDS	49,1454
#define V4L2_SEL_TGT_COMPOSE_PADDED	51,1550
#define V4L2_SEL_TGT_CROP_ACTIVE	54,1661
#define V4L2_SEL_TGT_COMPOSE_ACTIVE	55,1712
#define V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL	56,1769
#define V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL 57,1827
#define V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS	58,1891
#define V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS 59,1956
#define V4L2_SEL_FLAG_GE	62,2050
#define V4L2_SEL_FLAG_LE	63,2085
#define V4L2_SEL_FLAG_KEEP_CONFIG	64,2120
#define V4L2_SUBDEV_SEL_FLAG_SIZE_GE	67,2229
#define V4L2_SUBDEV_SEL_FLAG_SIZE_LE	68,2283
#define V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG 69,2337

packetizer/hxxx_common.c,426
struct cc_storage_t33,1416
    uint32_t i_flags;35,1438
    mtime_t i_dts;36,1460
    mtime_t i_pts;37,1479
    cc_data_t current;38,1498
    cc_data_t next;39,1521
cc_storage_t * cc_storage_new(42,1545
void cc_storage_delete(56,1869
void cc_storage_reset(63,2000
void cc_storage_append(68,2080
void cc_storage_commit(74,2294
block_t * cc_storage_get_current(83,2528
block_t *PacketizeXXC1(PacketizeXXC1111,3554

stream_filter/cache_read.c,1217
#   define STREAM_CACHE_TRACK 45,1541
#   define STREAM_CACHE_SIZE 47,1621
#   define STREAM_CACHE_TRACK 49,1687
#   define STREAM_CACHE_SIZE 51,1765
#define STREAM_CACHE_PREBUFFER_SIZE 57,1973
#define STREAM_READ_ATONCE 72,2639
#define STREAM_CACHE_TRACK_SIZE 73,2671
    mtime_t date;77,2760
    uint64_t i_start;79,2779
    uint64_t i_end;80,2801
    uint8_t *p_buffer;p_buffer82,2822
} stream_track_t;84,2846
struct stream_sys_t86,2865
    uint64_t     i_pos;88,2887
    unsigned     i_offset;90,2946
    int          i_tk;91,3016
    stream_track_t tk[tk92,3065
    uint8_t     *p_buffer;p_buffer95,3133
    unsigned     i_used;98,3171
    unsigned     i_read_size;99,3223
        uint64_t i_read_count;104,3309
        uint64_t i_bytes;105,3340
        uint64_t i_read_time;106,3366
    } stat;107,3396
static int AStreamRefillStream(110,3412
static void AStreamPrebufferStream(170,5026
static void AStreamControlReset(225,6733
static ssize_t AStreamReadNoSeekStream(247,7176
static int AStreamSeekStream(294,8627
static ssize_t AStreamReadStream(448,13159
static int AStreamControl(469,13755
static int Open(509,14969
static void Close(573,16542
vlc_module_begin(582,16694

video_output/wayland/scaler-protocol.c,347
static const struct wl_interface *types[types35,1429
static const struct wl_message wl_scaler_requests[wl_scaler_requests46,1570
WL_EXPORT const struct wl_interface wl_scaler_interface 51,1699
static const struct wl_message wl_viewport_requests[wl_viewport_requests57,1814
WL_EXPORT const struct wl_interface wl_viewport_interface 64,2021

access/dtv/dtv.h,2207
# define VLC_DTV_H 24,1027
    DTV_DELIVERY_NONE 30,1105
    DTV_DELIVERY_NONE   = 0x00000000,x0000000030,1105
    DTV_DELIVERY_ATSC 31,1143
    DTV_DELIVERY_ATSC   = 0x00000001,x0000000131,1143
    DTV_DELIVERY_CQAM 32,1181
    DTV_DELIVERY_CQAM   = 0x00000002,x0000000232,1181
    DTV_DELIVERY_DVB_C 34,1220
    DTV_DELIVERY_DVB_C  = 0x00000010,x0000001034,1220
    DTV_DELIVERY_DVB_C2 35,1258
    DTV_DELIVERY_DVB_C2 = 0x00000020,x0000002035,1258
    DTV_DELIVERY_DVB_S 36,1296
    DTV_DELIVERY_DVB_S  = 0x00000040,x0000004036,1296
    DTV_DELIVERY_DVB_S2 37,1334
    DTV_DELIVERY_DVB_S2 = 0x00000080,x0000008037,1334
    DTV_DELIVERY_DVB_T 38,1372
    DTV_DELIVERY_DVB_T  = 0x00000100,x0000010038,1372
    DTV_DELIVERY_DVB_T2 39,1410
    DTV_DELIVERY_DVB_T2 = 0x00000200,x0000020039,1410
    DTV_DELIVERY_ISDB_C 41,1449
    DTV_DELIVERY_ISDB_C = 0x00001000,x0000100041,1449
    DTV_DELIVERY_ISDB_S 42,1487
    DTV_DELIVERY_ISDB_S = 0x00002000,x0000200042,1487
    DTV_DELIVERY_ISDB_T 43,1525
    DTV_DELIVERY_ISDB_T = 0x00004000,x0000400043,1525
} dtv_delivery_t;44,1563
#define DTV_DELGROUP_G2 46,1582
#define DTV_DELGROUP_SAT 49,1719
#define DTV_DELGROUP_CABLE 52,1855
#define DTV_DELGROUP_TERRES 55,2012
typedef struct dvb_device dvb_device_t;58,2169
typedef int (* tuner_setup_t)60,2210
typedef struct en50221_capmt_info_s en50221_capmt_info_t;75,2765
        unsigned min;85,2997
        unsigned max;86,3019
        unsigned step;87,3041
    } frequency;88,3064
        unsigned min;91,3098
        unsigned max;92,3120
        unsigned step;93,3142
    } symbolrate;94,3165
    bool b_can_cam_auto;95,3183
} dvb_device_caps_t;96,3208
#define VLC_FEC(100,3296
#define VLC_FEC_AUTO 101,3340
#define VLC_GUARD(102,3374
#define VLC_GUARD_AUTO 103,3418
typedef struct isdbt_layer138,4773
    const char *modulation;modulation140,4802
    uint32_t code_rate;141,4830
    uint8_t segment_count;142,4854
    uint8_t time_interleaving;143,4881
} isdbt_layer_t;144,4912
typedef struct isdbt_sound149,5079
    uint8_t subchannel_id;151,5108
    uint8_t segment_index;152,5135
    uint8_t segment_count;153,5162
} isdbt_sound_t;154,5189

demux/adaptive/http/HTTPConnection.cpp,1422
AbstractConnection::AbstractConnection(34,1231
AbstractConnection::~AbstractConnection(42,1390
bool AbstractConnection::prepare(47,1438
size_t AbstractConnection::getContentLength(56,1613
HTTPConnection::HTTPConnection(61,1696
HTTPConnection::~HTTPConnection(71,1993
bool HTTPConnection::canReuse(77,2076
bool HTTPConnection::connect(85,2350
bool HTTPConnection::connected(91,2509
void HTTPConnection::disconnect(96,2585
int HTTPConnection::request(105,2744
ssize_t HTTPConnection::read(157,4066
bool HTTPConnection::send(189,4728
bool HTTPConnection::send(194,4830
int HTTPConnection::parseReply(199,4937
std::string HTTPConnection::readLine(238,5775
void HTTPConnection::setUsed(243,5858
void HTTPConnection::onHeader(260,6259
std::string HTTPConnection::buildRequestHeader(277,6666
std::string HTTPConnection::extraRequestHeaders(289,7106
StreamUrlConnection::StreamUrlConnection(303,7455
StreamUrlConnection::~StreamUrlConnection(311,7626
void StreamUrlConnection::reset(316,7688
bool StreamUrlConnection::canReuse(326,7884
int StreamUrlConnection::request(331,7978
ssize_t StreamUrlConnection::read(365,8954
void StreamUrlConnection::setUsed(394,9553
ConnectionFactory::ConnectionFactory(401,9686
ConnectionFactory::~ConnectionFactory(405,9730
AbstractConnection * ConnectionFactory::createConnection(409,9775
AbstractConnection * StreamUrlConnectionFactory::createConnection(433,10663

demux/hls/playlist/Tags.cpp,1074
Attribute::Attribute(32,1128
uint64_t Attribute::decimal(38,1245
double Attribute::floatingPoint(47,1401
std::vector<uint8_t> Attribute::hexSequence(56,1559
std::pair<std::size_t,std::size_t> Attribute::getByteRange(73,2026
std::pair<int, int> Attribute::getResolution(94,2458
Attribute Attribute::unescapeQuotes(114,2822
std::string Attribute::quotedString(119,2921
Tag::Tag(142,3286
Tag::~Tag(147,3329
int Tag::getType(151,3346
SingleValueTag::SingleValueTag(156,3393
SingleValueTag::~SingleValueTag(161,3490
const Attribute &SingleValueTag::getValue(SingleValueTag::getValue166,3530
AttributesTag::AttributesTag(171,3602
AttributesTag::~AttributesTag(176,3704
const Attribute * AttributesTag::getAttributeByName(183,3871
void AttributesTag::addAttribute(193,4136
void AttributesTag::parseAttributes(198,4223
ValuesListTag::ValuesListTag(258,5599
ValuesListTag::~ValuesListTag(263,5714
void ValuesListTag::parseAttributes(267,5751
Tag * TagFactory::createTagByName(282,6164
        const char *psz;::psz286,6268
        const int i;::i287,6293

services_discovery/microdns.c,1797
VLC_SD_PROBE_HELPER(44,1605
#define CFG_PREFIX 47,1748
#define LISTEN_INTERVAL 49,1783
#define TIMEOUT 50,1842
    const char *psz_protocol;psz_protocol76,2662
    const char *psz_service_name;psz_service_name77,2692
    bool        b_renderer;78,2726
    int         i_renderer_flags;79,2754
} protocols[protocols80,2788
#define NB_PROTOCOLS 88,3115
struct discovery_sys90,3178
    vlc_thread_t        thread;92,3201
    atomic_bool         stop;93,3233
    struct mdns_ctx *   p_microdns;94,3263
    const char *        ppsz_service_names[ppsz_service_names95,3299
    unsigned int        i_nb_service_names;96,3357
    vlc_array_t         items;97,3401
struct services_discovery_sys_t100,3436
    struct discovery_sys s;102,3470
struct vlc_renderer_discovery_sys105,3502
    struct discovery_sys s;107,3538
struct item110,3570
    char *              psz_uri;112,3584
    input_item_t *      p_input_item;113,3617
    vlc_renderer_item_t*p_renderer_item;p_renderer_item114,3655
    mtime_t             i_last_seen;115,3696
struct srv118,3737
    const char *psz_protocol;psz_protocol120,3750
    char *      psz_device_name;121,3780
    uint16_t    i_port;122,3813
    int         i_renderer_flags;123,3837
static const char *const ppsz_options[ppsz_options126,3875
print_error(131,3944
strrcmp(143,4287
items_add_input(154,4472
items_add_renderer(184,5256
items_release(216,6300
items_exists(234,6688
items_timeout(249,7081
items_clear(272,7860
parse_entries(283,8148
create_uri(351,10387
new_entries_sd_cb(362,10707
stop_sd_cb(405,11912
RunSD(420,12222
new_entries_rd_cb(438,12800
stop_rd_cb(525,15528
RunRD(540,15817
OpenCommon(558,16373
CleanCommon(605,17763
OpenSD(615,17965
CloseSD(629,18320
OpenRD(638,18496
CloseRD(652,18860

packetizer/dts.c,443
vlc_module_begin 44,1667
struct decoder_sys_t52,1903
    int i_state;57,1965
    block_bytestream_t bytestream;59,1983
    date_t  end_date;64,2059
    bool    b_date_set;65,2081
    mtime_t i_pts;67,2106
    vlc_dts_header_t dts;69,2126
static void PacketizeFlush(72,2156
static block_t *GetOutBuffer(GetOutBuffer81,2371
static block_t *PacketizeBlock(PacketizeBlock120,3811
static void Close(282,9262
static int Open(292,9465

demux/mpeg/ps.c,841
#define TIME_TEXT 44,1558
#define TIME_LONGTEXT 45,1604
vlc_module_begin 56,2140
struct demux_sys_t80,2877
    ps_psm_t    psm;82,2898
    ps_track_t  tk[tk83,2919
    int64_t     i_scr;85,2953
    int64_t     i_last_scr;86,2976
    int         i_mux_rate;87,3004
    int64_t     i_length;88,3032
    int         i_time_track;89,3058
    int64_t     i_current_pts;90,3088
    int         i_aob_mlp_count;92,3120
    bool  b_lost_sync;94,3154
    bool  b_have_pack;95,3177
    bool  b_seekable;96,3200
static int OpenCommon(108,3630
static int OpenForce(160,4914
static int Open(165,5003
static void Close(173,5268
static int Demux2(194,5707
static bool FindLength(242,6914
static int Demux(294,8622
static int Control(465,13900
static int ps_pkt_resynch(584,17830
static block_t *ps_pkt_read(ps_pkt_read627,18755

packetizer/hxxx_common.h,159
#define HXXX_COMMON_H21,1105
typedef struct cc_storage_t cc_storage_t;26,1159
typedef block_t * (*pf_annexb_nal_packetizer)pf_annexb_nal_packetizer40,1629

codec/spudec/parse.c,611
    int i_width;44,1763
    int i_height;45,1780
    int i_x;46,1798
    int i_y;47,1811
} spu_properties_t;48,1824
    int   pi_offset[pi_offset52,1862
    uint16_t *p_data;p_data53,1942
    bool b_palette;56,1993
    uint8_t    pi_alpha[pi_alpha57,2013
    uint8_t    pi_yuv[pi_yuv58,2041
    bool b_auto_crop;61,2112
    int i_y_top_offset;62,2134
    int i_y_bottom_offset;63,2158
} subpicture_data_t;65,2186
static inline unsigned int AddNibble(77,2845
subpicture_t * ParsePacket(96,3579
static int ParseControlSeq(158,5865
static int ParseRLE(449,16154
static void Render(684,23302

video_output/xcb/xvideo.c,1108
#define ADAPTOR_TEXT 44,1384
#define ADAPTOR_LONGTEXT 45,1433
#define FORMAT_TEXT 49,1568
#define FORMAT_LONGTEXT 50,1611
vlc_module_begin 61,1942
#define MAX_PICTURES 78,2544
struct vout_display_sys_t80,2572
    xcb_connection_t *conn;conn82,2600
    vout_window_t *embed;embed83,2628
    xcb_cursor_t cursor;85,2671
    xcb_window_t window;86,2715
    xcb_gcontext_t gc;87,2764
    xcb_xv_port_t port;88,2817
    uint32_t id;89,2860
    uint16_t width;90,2905
    uint16_t height;91,2950
    uint32_t data_size;92,2996
    bool     swap_uv;93,3059
    bool shm;94,3131
    bool visible;95,3185
    xcb_xv_query_image_attributes_reply_t *att;att97,3255
    picture_pool_t *pool;pool98,3303
static bool CheckXVideo 109,3648
static vlc_fourcc_t ParseFormat 137,4473
static bool BetterFormat 242,8398
FindFormat 255,8740
static int Open 353,11681
static void Close 588,19116
static void PoolAlloc 607,19660
static picture_pool_t *Pool Pool668,21655
static void Display 681,21908
static int Control 723,23528
static void Manage 781,25542
static int EnumAdaptors 788,25683

packetizer/mpegvideo.c,1658
#define SYNC_INTRAFRAME_TEXT 58,2506
#define SYNC_INTRAFRAME_LONGTEXT 59,2561
vlc_module_begin 69,3009
struct decoder_sys_t84,3595
    packetizer_t packetizer;89,3657
    block_t *p_seq;p_seq92,3727
    block_t *p_ext;p_ext93,3747
    block_t    *p_frame;p_frame96,3804
    block_t    **pp_last;pp_last97,3829
    bool b_frame_slice;99,3856
    mtime_t i_pts;100,3880
    mtime_t i_dts;101,3899
    int         i_frame_rate;104,3949
    int         i_frame_rate_base;105,3979
    bool  b_seq_progressive;106,4014
    bool  b_low_delay;107,4043
    int         i_aspect_ratio_info;108,4066
    bool  b_inited;109,4103
    int i_temporal_ref;112,4153
    int i_picture_type;113,4177
    int i_picture_structure;114,4201
    int i_top_field_first;115,4230
    int i_repeat_first_field;116,4257
    int i_progressive_frame;117,4287
    mtime_t i_interpolated_dts;119,4317
    mtime_t i_last_ref_pts;120,4349
    bool b_second_field;121,4377
    int i_seq_old;124,4459
    bool  b_sync_on_intra_frame;127,4504
    bool  b_discontinuity;128,4537
    bool b_cc_reset;131,4575
    uint32_t i_cc_flags;132,4596
    mtime_t i_cc_pts;133,4621
    mtime_t i_cc_dts;134,4643
    cc_data_t cc;135,4665
static const uint8_t p_mp2v_startcode[p_mp2v_startcode148,5110
static int Open(153,5344
static void Close(223,7506
static block_t *Packetize(Packetize250,8173
static void PacketizeFlush(257,8351
static block_t *GetCc(GetCc267,8658
static void PacketizeReset(294,9538
static block_t *PacketizeParse(PacketizeParse314,10054
static int PacketizeValidate(325,10323
static block_t *ParseMPEGBlock(ParseMPEGBlock364,11854

audio_filter/spatializer/revmodel.cpp,537
revmodel::revmodel(18,328
void revmodel::mute(67,2281
void revmodel::processreplace(92,2968
void revmodel::processmix(126,3961
void revmodel::update(158,4867
void revmodel::setroomsize(196,5681
float revmodel::getroomsize(202,5787
void revmodel::setdamp(207,5866
float revmodel::getdamp(213,5949
void revmodel::setwet(218,6007
float revmodel::getwet(224,6087
void revmodel::setdry(229,6142
float revmodel::getdry(234,6208
void revmodel::setwidth(239,6263
float revmodel::getwidth(245,6338
void revmodel::setmode(250,6388

keystore/keychain.m,1279
static const int sync_list[sync_list36,1367
static const char *const sync_list_text[sync_list_text38,1411
static const int accessibility_list[accessibility_list42,1496
static const char *const accessibility_list_text[accessibility_list_text44,1564
#define SYNC_ITEMS_TEXT 55,1907
#define SYNC_ITEMS_LONGTEXT 56,1962
#define ACCESSIBILITY_TYPE_TEXT 58,2127
#define ACCESS_GROUP_TEXT 60,2232
#define ACCESS_GROUP_LONGTEXT 61,2286
#define kSecAttrSynchronizable 67,2621
#define kSecAttrSynchronizableAny 71,2708
#define kSecAttrAccessGroup 75,2792
#define kSecAttrAccessibleAfterFirstUnlock 79,2885
#define kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly 83,3005
#define kSecAttrAccessibleAlways 87,3116
#define kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly 91,3225
#define kSecAttrAccessibleAlwaysThisDeviceOnly 95,3350
#define kSecAttrAccessibleWhenUnlocked 99,3457
#define kSecAttrAccessibleWhenUnlockedThisDeviceOnly 103,3569
vlc_module_begin(106,3643
static NSString * ErrorForStatus(148,5319
static void SetAccessibilityForQuery(206,6749
static void SetAttributesForQuery(237,8146
static int CopyEntryValues(265,9325
static int Store(279,9668
static unsigned int Find(334,11488
static unsigned int Remove(426,14724
static int Open(466,16011

access_output/http.c,1352
#define SOUT_CFG_PREFIX 50,1815
#define USER_TEXT 52,1853
#define USER_LONGTEXT 53,1886
#define PASS_TEXT 55,1999
#define PASS_LONGTEXT 56,2032
#define MIME_TEXT 58,2145
#define MIME_LONGTEXT 59,2174
#define METACUBE_TEXT 61,2293
#define METACUBE_LONGTEXT 62,2330
vlc_module_begin 66,2472
struct sout_access_out_sys_t96,3600
    httpd_host_t        *p_httpd_host;p_httpd_host99,3646
    httpd_stream_t      *p_httpd_stream;p_httpd_stream102,3703
    int                 i_header_allocated;105,3781
    int                 i_header_size;106,3825
    uint8_t             *p_header;p_header107,3864
    bool                b_header_complete;108,3899
    bool                b_metacube;109,3942
    bool                b_has_keyframes;110,3978
static const uint8_t METACUBE2_SYNC[METACUBE2_SYNC115,4104
#define METACUBE_FLAGS_HEADER 116,4187
#define METACUBE_FLAGS_NOT_SUITABLE_FOR_STREAM_START 117,4221
struct metacube2_block_header119,4279
    char sync[sync121,4311
    uint32_t size;122,4353
    uint16_t flags;123,4425
    uint16_t csum;124,4490
#define METACUBE2_CRC_POLYNOMIAL 137,4887
#define METACUBE2_CRC_START 140,4995
static uint16_t metacube2_compute_crc(143,5084
static int Open(175,6024
static void Close(304,10431
static int Control(319,10781
static ssize_t Write(338,11265
static int Seek(466,15916

video_filter/canvas.c,553
#define WIDTH_TEXT 82,3280
#define WIDTH_LONGTEXT 83,3320
#define HEIGHT_TEXT 85,3385
#define HEIGHT_LONGTEXT 86,3427
#define ASPECT_TEXT 88,3494
#define ASPECT_LONGTEXT 89,3550
#define PADD_TEXT 92,3704
#define PADD_LONGTEXT 93,3740
#define CANVAS_HELP 96,3915
#define CFG_PREFIX 98,3981
vlc_module_begin 103,4191
struct filter_sys_t129,5040
    filter_chain_t *p_chain;p_chain131,5062
static picture_t *video_new(video_new134,5095
static int Activate(142,5365
static void Destroy(378,14567
static picture_t *Filter(Filter388,14905

access/rtp/xiph.c,408
typedef struct rtp_xiph_t38,1261
    es_out_id_t *id;id40,1289
    block_t     *block;block41,1310
    uint32_t     ident;42,1334
    bool         vorbis;43,1358
} rtp_xiph_t;44,1383
static void *xiph_init xiph_init46,1398
static void *vorbis_init vorbis_init64,1751
void *theora_init theora_init74,1898
void xiph_destroy 80,1985
static ssize_t xiph_header 96,2343
void xiph_decode 146,3460

demux/mpeg/ps.h,1288
#define PS_TK_COUNT 30,1362
#define PS_ID_TO_TK(32,1411
static inline int ps_id_to_tk(35,1551
#define PS_ID_TO_TK(46,1867
typedef struct ps_psm_t ps_psm_t;49,1919
    bool  b_seen;55,2098
    int         i_skip;56,2116
    int         i_id;57,2140
    es_out_id_t *es;es58,2162
    es_format_t fmt;59,2183
    mtime_t     i_first_pts;60,2204
    mtime_t     i_last_pts;61,2233
} ps_track_t;63,2262
static inline void ps_track_init(66,2303
static inline int ps_track_fill(82,2702
static inline int ps_pkt_id(255,8544
static inline int ps_pkt_size(336,11268
static inline int ps_pkt_parse_pack(366,11837
static inline int ps_pkt_parse_system(388,12520
static inline int ps_pkt_parse_pes(420,13498
typedef struct ps_es_t458,14580
    int i_type;460,14605
    int i_id;461,14621
    int i_descriptor;463,14636
    uint8_t *p_descriptor;p_descriptor464,14658
    uint8_t lang[lang467,14718
} ps_es_t;469,14740
struct ps_psm_t471,14752
    int i_version;473,14770
    int     i_es;475,14790
    ps_es_t **es;es476,14808
static inline int ps_id_to_type(479,14830
static inline const uint8_t *ps_id_to_lang(ps_id_to_lang489,15057
static inline void ps_psm_init(499,15293
static inline void ps_psm_destroy(506,15419
static inline int ps_psm_fill(519,15674

demux/dirac.c,639
#define DEMUX_CFG_PREFIX 38,1539
#define DEMUX_DTSOFFSET 40,1574
#define DEMUX_DTSOFFSET_TEXT 41,1611
#define DEMUX_DTSOFFSET_LONGTEXT 42,1669
    add_integer(56,2188
struct demux_sys_t65,2575
    mtime_t i_dts;67,2596
    mtime_t i_dtsoffset;68,2615
    mtime_t i_pts_offset_lowtide;69,2640
    es_out_id_t *p_es;p_es70,2674
        DIRAC_DEMUX_DISCONT 74,2767
        DIRAC_DEMUX_FIRST,75,2843
        DIRAC_DEMUX_STEADY,76,2923
    decoder_t *p_packetizer;p_packetizer79,2990
#define DIRAC_PACKET_SIZE 85,3102
static int Open(90,3331
static void Close(133,4714
static int Demux(154,5510
static int Control(217,7467

demux/adaptive/plumbing/FakeESOut.hpp,842
#define FAKEESOUT_HPP21,994
namespace adaptive26,1058
    class ExtraFMTInfoInterfaceadaptive::ExtraFMTInfoInterface28,1079
    class FakeESOutadaptive::FakeESOut37,1260
            vlc_mutex_t lock;adaptive::FakeESOut::lock68,2511
            es_out_t *real_es_out;adaptive::FakeESOut::real_es_out69,2541
            ExtraFMTInfoInterface *extrainfo;adaptive::FakeESOut::extrainfo71,2638
            CommandsQueue *commandsqueue;adaptive::FakeESOut::commandsqueue73,2732
            es_out_t *fakeesout;adaptive::FakeESOut::fakeesout74,2774
            mtime_t timestamps_offset;adaptive::FakeESOut::timestamps_offset75,2807
            std::list<FakeESOutID *> fakeesidlist;adaptive::FakeESOut::fakeesidlist76,2846
            std::list<FakeESOutID *> recycle_candidates;adaptive::FakeESOut::recycle_candidates77,2897

demux/windows_audio_commons.h,219
#define DMX_WINDOWS_AUDIO_COMMONS_H24,1205
static const uint32_t pi_channels_src[pi_channels_src29,1289
static const uint32_t pi_channels_aout[pi_channels_aout34,1581
static inline unsigned getChannelMask(38,1814

demux/mxpeg_helper.h,70
static uint8_t find_jpeg_marker(27,1210
static bool IsMxpeg(43,1608

codec/mft.c,2344
#undef WINVER27,1194
#define WINVER 28,1208
#define COBJMACROS31,1267
#define INITGUID34,1339
# define STDCALL 37,1373
#undef WINAPI_FAMILY41,1434
#define WINAPI_FAMILY 42,1455
#define _VIDEOINFOHEADER_50,1632
vlc_module_begin(61,1842
    HINSTANCE mfplat_dll;72,2115
    HRESULT 73,2141
    HRESULT 77,2451
    HRESULT 78,2520
    HRESULT 79,2616
} MFHandle;80,2742
struct decoder_sys_t82,2755
    MFHandle mf_handle;84,2778
    IMFTransform *mft;mft86,2803
    const GUID* major_type;88,2827
    const GUID* subtype;89,2855
    bool is_async;92,2912
    IMFMediaEventGenerator *event_generator;event_generator93,2931
    int pending_input_events;94,2976
    int pending_output_events;95,3006
    DWORD input_stream_id;98,3061
    IMFMediaType *input_type;input_type99,3088
    DWORD output_stream_id;102,3143
    IMFSample *output_sample;output_sample103,3171
    IMFMediaType *output_type;output_type104,3201
    uint8_t nal_length_size;107,3254
static const int pi_channels_maps[pi_channels_maps110,3287
# define MF_E_TRANSFORM_NEED_MORE_INPUT 132,4175
# define MF_E_TRANSFORM_STREAM_CHANGE 136,4290
# define MF_E_NO_EVENTS_AVAILABLE 140,4399
# define MF_EVENT_FLAG_NO_WAIT 144,4502
    VLC_METransformUnknown 153,4683
    VLC_METransformNeedInput,154,4717
    VLC_METransformHaveOutput,155,4747
    VLC_METransformDrainComplete,156,4778
    VLC_METransformMarker,157,4812
    vlc_fourcc_t fourcc;162,4860
    const GUID   *guid;guid163,4885
} pair_format_guid;164,4909
static const pair_format_guid video_format_table[video_format_table170,5063
static const pair_format_guid audio_format_table[audio_format_table188,5713
static const GUID *FormatToGUID(FormatToGUID199,6088
static int SetInputType(216,6695
static int SetOutputType(340,10664
static int AllocateInputSample(457,14566
static int AllocateOutputSample(500,15732
static int ProcessInputStream(558,17502
static void CopyPackedBufferToPicture(619,19253
static int ProcessOutputStream(643,20027
static void *DecodeSync(DecodeSync780,24480
static HRESULT DequeueMediaEvent(818,25341
static void *DecodeAsync(DecodeAsync843,26054
static int InitializeMFT(916,27962
static void DestroyMFT(1023,31623
static int FindMFT(1051,32494
static int LoadMFTLibrary(1106,34338
int Open(1129,35328
void Close(1180,36678

arm_neon/deinterleave_chroma.S,59
deinterleave_chroma_neon:deinterleave_chroma_neon40,1435

stream_out/mosaic_bridge.c,1793
struct sout_stream_sys_t49,1862
    bridged_es_t *p_es;p_es51,1889
    decoder_t       *p_decoder;p_decoder53,1914
    image_handler_t *p_image;p_image54,1946
    int i_height,55,2002
    int i_height, i_width;55,2002
    unsigned int i_sar_num,56,2029
    unsigned int i_sar_num, i_sar_den;56,2029
    char *psz_id;psz_id57,2068
    bool b_inited;58,2086
    int i_chroma;60,2106
    filter_chain_t *p_vf2;p_vf262,2157
struct decoder_owner_sys_t65,2188
    video_format_t video;68,2263
#define ID_TEXT 100,3861
#define ID_LONGTEXT 101,3886
#define WIDTH_TEXT 104,3970
#define WIDTH_LONGTEXT 105,4007
#define HEIGHT_TEXT 107,4064
#define HEIGHT_LONGTEXT 108,4103
#define RATIO_TEXT 110,4162
#define RATIO_LONGTEXT 111,4207
#define VFILTER_TEXT 114,4301
#define VFILTER_LONGTEXT 115,4341
#define CHROMA_TEXT 118,4432
#define CHROMA_LONGTEXT 119,4471
#define ALPHA_TEXT 123,4632
#define ALPHA_LONGTEXT 124,4670
#define X_TEXT 127,4744
#define X_LONGTEXT 128,4774
#define Y_TEXT 131,4877
#define Y_LONGTEXT 132,4907
#define CFG_PREFIX 135,5010
vlc_module_begin 137,5052
static int Open(172,6446
#define INT_COMMAND(233,8381
#undef INT_COMMAND242,8711
static void Close(255,9058
static sout_stream_id_sys_t * Add(272,9668
static void Del(412,13922
static void PushPicture(487,15890
static int Send(501,16243
inline static int video_update_format_decoder(595,19383
inline static picture_t *video_new_buffer_decoder(video_new_buffer_decoder602,19629
inline static picture_t *video_new_buffer_filter(video_new_buffer_filter607,19763
static int video_update_format(618,20166
static int HeightCallback(653,21508
static int WidthCallback(670,22136
static int alphaCallback(687,22762
static int xCallback(701,23204
static int yCallback(715,23630

demux/adaptive/playlist/SegmentInformation.hpp,2498
#define SEGMENTINFORMATION_HPP21,1010
namespace adaptive29,1180
    namespace playlistadaptive::playlist31,1201
        class SegmentInformation adaptive::playlist::SegmentInformation42,1513
                typedef enum SwitchPolicyadaptive::playlist::SegmentInformation::SwitchPolicy50,1884
                    SWITCH_UNKNOWN,adaptive::playlist::SegmentInformation::SwitchPolicy::SWITCH_UNKNOWN52,1944
                    SWITCH_UNAVAILABLE,adaptive::playlist::SegmentInformation::SwitchPolicy::SWITCH_UNAVAILABLE53,1980
                    SWITCH_SEGMENT_ALIGNED,adaptive::playlist::SegmentInformation::SwitchPolicy::SWITCH_SEGMENT_ALIGNED54,2020
                    SWITCH_BITSWITCHEABLEadaptive::playlist::SegmentInformation::SwitchPolicy::SWITCH_BITSWITCHEABLE55,2064
                } SwitchPolicy;adaptive::playlist::SegmentInformation::SwitchPolicy56,2106
                class SplitPointadaptive::playlist::SegmentInformation::SplitPoint61,2312
                        size_t offset;adaptive::playlist::SegmentInformation::SplitPoint::offset64,2391
                        mtime_t time;adaptive::playlist::SegmentInformation::SplitPoint::time65,2430
                        mtime_t duration;adaptive::playlist::SegmentInformation::SplitPoint::duration66,2468
                enum SegmentInfoTypeadaptive::playlist::SegmentInformation::SegmentInfoType70,2594
                    INFOTYPE_INIT adaptive::playlist::SegmentInformation::SegmentInfoType::INFOTYPE_INIT72,2649
                    INFOTYPE_MEDIA,adaptive::playlist::SegmentInformation::SegmentInfoType::INFOTYPE_MEDIA73,2688
                    INFOTYPE_INDEXadaptive::playlist::SegmentInformation::SegmentInfoType::INFOTYPE_INDEX74,2724
                std::vector<SegmentInformation *> childs;adaptive::playlist::SegmentInformation::childs92,3845
                SegmentInformation *parent;adaptive::playlist::SegmentInformation::parent94,3968
                SwitchPolicy switchpolicy;adaptive::playlist::SegmentInformation::switchpolicy95,4012
                Property<Url *> baseUrl;adaptive::playlist::SegmentInformation::baseUrl103,4359
                SegmentBase     *segmentBase;adaptive::playlist::SegmentInformation::segmentBase111,4647
                SegmentList     *segmentList;adaptive::playlist::SegmentInformation::segmentList112,4693
                MediaSegmentTemplate *mediaSegmentTemplate;adaptive::playlist::SegmentInformation::mediaSegmentTemplate113,4739

access/attachment.c,274
vlc_module_begin(43,1745
struct access_sys_t61,2348
    input_attachment_t *attachment;attachment63,2370
    size_t offset;64,2406
static int Open(68,2435
static void Close(103,3280
static ssize_t Read(113,3483
static int Seek(128,3873
static int Control(141,4135

demux/playlist/playlist.c,869
#define SHOW_ADULT_TEXT 46,1821
#define SHOW_ADULT_LONGTEXT 47,1882
#define SKIP_ADS_TEXT 50,2008
#define SKIP_ADS_LONGTEXT 51,2047
static const char *const psz_recursive_list[psz_recursive_list54,2204
static const char *const psz_recursive_list_text[psz_recursive_list_text55,2286
#define RECURSIVE_TEXT 58,2418
#define RECURSIVE_LONGTEXT 59,2469
static const char *const psz_sort_list[psz_sort_list65,2764
static const char *const psz_sort_list_text[psz_sort_list_text66,2841
#define SORT_TEXT 71,3167
#define SORT_LONGTEXT 72,3212
#define IGNORE_TEXT 75,3316
#define IGNORE_LONGTEXT 76,3361
#define SHOW_HIDDENFILES_TEXT 82,3650
#define SHOW_HIDDENFILES_LONGTEXT 83,3704
vlc_module_begin 86,3788
input_item_t * GetCurrentItem(215,8791
char *FindPrefix(FindPrefix227,9059
char *ProcessMRL(ProcessMRL243,9406
bool CheckContentType(288,11096

access/decklink.cpp,2666
#define CARD_INDEX_TEXT 44,1551
#define CARD_INDEX_LONGTEXT 45,1599
#define MODE_TEXT 49,1730
#define MODE_LONGTEXT 50,1811
#define AUDIO_CONNECTION_TEXT 55,1980
#define AUDIO_CONNECTION_LONGTEXT 56,2033
#define RATE_TEXT 61,2217
#define RATE_LONGTEXT 62,2263
#define CHANNELS_TEXT 66,2386
#define CHANNELS_LONGTEXT 67,2439
#define VIDEO_CONNECTION_TEXT 71,2586
#define VIDEO_CONNECTION_LONGTEXT 72,2639
static const char *const ppsz_videoconns[ppsz_videoconns78,2859
static const char *const ppsz_videoconns_text[ppsz_videoconns_text81,2977
static const char *const ppsz_audioconns[ppsz_audioconns85,3127
static const char *const ppsz_audioconns_text[ppsz_audioconns_text88,3212
#define ASPECT_RATIO_TEXT 92,3316
#define ASPECT_RATIO_LONGTEXT 93,3361
struct demux_sys_t129,4785
    IDeckLink *card;demux_sys_t::card131,4806
    IDeckLinkInput *input;demux_sys_t::input132,4827
    DeckLinkCaptureDelegate *delegate;demux_sys_t::delegate133,4854
    IDeckLinkConfiguration *config;demux_sys_t::config137,5064
    IDeckLinkAttributes *attributes;demux_sys_t::attributes138,5100
    bool autodetect;demux_sys_t::autodetect140,5138
    es_out_id_t *video_es;demux_sys_t::video_es142,5160
    es_out_id_t *audio_es;demux_sys_t::audio_es143,5187
    es_out_id_t *cc_es;demux_sys_t::cc_es144,5214
    vlc_mutex_t pts_lock;demux_sys_t::pts_lock146,5239
    int last_pts;demux_sys_t::last_pts147,5265
    uint32_t dominance_flags;demux_sys_t::dominance_flags149,5315
    int channels;demux_sys_t::channels150,5345
    bool tenbits;demux_sys_t::tenbits152,5364
static const char *GetFieldDominance(GetFieldDominance155,5386
static es_format_t GetModeSettings(175,5983
class DeckLinkCaptureDelegate 211,7289
    DeckLinkCaptureDelegate(DeckLinkCaptureDelegate::DeckLinkCaptureDelegate214,7361
    virtual HRESULT STDMETHODCALLTYPE QueryInterface(DeckLinkCaptureDelegate::QueryInterface219,7459
    virtual ULONG STDMETHODCALLTYPE AddRef(DeckLinkCaptureDelegate::AddRef221,7557
    virtual ULONG STDMETHODCALLTYPE Release(DeckLinkCaptureDelegate::Release226,7655
    virtual HRESULT STDMETHODCALLTYPE VideoInputFormatChanged(DeckLinkCaptureDelegate::VideoInputFormatChanged234,7842
    std::atomic_uint m_ref_;DeckLinkCaptureDelegate::m_ref_267,9082
    demux_t *demux_;DeckLinkCaptureDelegate::demux_268,9111
HRESULT DeckLinkCaptureDelegate::VideoInputFrameArrived(271,9136
static int GetAudioConn(376,13181
static int GetVideoConn(405,13983
static int Open(441,15021
        BMDDisplayMode id;::id530,17818
        char str[::str531,17845
static void Close(665,22304
static int Control(691,22806

gui/ncurses.c,4775
#define _XOPEN_SOURCE_EXTENDED 37,1590
#define VLC_MODULE_LICENSE 45,1723
#define BROWSE_TEXT 71,2503
#define BROWSE_LONGTEXT 72,2556
vlc_module_begin 76,2699
    BOX_NONE,94,3301
    BOX_HELP,95,3315
    BOX_INFO,96,3329
    BOX_LOG,97,3343
    BOX_PLAYLIST,98,3356
    BOX_SEARCH,99,3374
    BOX_OPEN,100,3390
    BOX_BROWSE,101,3404
    BOX_META,102,3420
    BOX_OBJECTS,103,3434
    BOX_STATS104,3451
static const char box_title[box_title107,3469
    C_DEFAULT 123,3905
    C_TITLE,124,3924
    C_PLAYLIST_1,125,3937
    C_PLAYLIST_2,126,3955
    C_PLAYLIST_3,127,3973
    C_BOX,128,3991
    C_STATUS,129,4002
    C_INFO,130,4016
    C_ERROR,131,4028
    C_WARNING,132,4041
    C_DEBUG,133,4056
    C_CATEGORY,134,4069
    C_FOLDER,135,4085
    C_MAX138,4135
static const struct { short f;142,4220
static const struct { short f; short b;142,4220
static const struct { short f; short b; } color_pairs[color_pairs142,4220
struct dir_entry_t169,5302
    bool        file;171,5323
    char        *path;path172,5345
struct pl_item_t175,5372
    playlist_item_t *item;item177,5391
    char            *display;display178,5418
struct intf_sys_t181,5452
    vlc_thread_t    thread;183,5472
    bool            color;185,5501
    bool            exit;186,5528
    short           yellow_r;189,5597
    short           yellow_g;190,5627
    short           yellow_b;191,5657
    int             box_type;193,5688
    int             box_y;194,5718
    int             box_height;195,5780
    int             box_lines_total;196,5812
    int             box_start;197,5880
    int             box_idx;198,5949
        int              type;202,6022
        vlc_log_t       *item;item203,6053
        char            *msg;msg204,6084
    } msgs[msgs205,6114
    int                 i_msgs;206,6150
    int                 verbosity;207,6182
    vlc_mutex_t         msg_lock;208,6217
    char            search_chain[search_chain211,6281
    char            open_chain[open_chain214,6347
    char            *current_dir;current_dir217,6415
    int             n_dir_entries;218,6449
    struct dir_entry_t  **dir_entries;dir_entries219,6484
    bool            show_hidden_files;220,6523
    struct pl_item_t    **plist;plist223,6590
    int             plist_entries;224,6623
    bool            need_update;225,6658
    vlc_mutex_t     pl_lock;226,6691
    bool            plidx_follow;227,6720
    playlist_item_t *node;node228,6754
static void DirsDestroy(236,6987
static int comdir_entries(247,7265
static bool IsFile(258,7601
static void ReadDir(272,7921
static void CheckIdx(316,9303
static void PlaylistDestroy(348,10372
static bool PlaylistAddChild(359,10637
static void PlaylistAddNode(393,11396
static void PlaylistRebuild(417,12098
static int ItemChanged(426,12316
static int PlaylistChanged(441,12734
static int SubSearchPlaylist(459,13330
static void SearchPlaylist(469,13603
static inline bool IsIndex(489,14042
static void FindIndex(509,14621
static void start_color_and_pairs(533,15213
static void DrawBox(554,15831
static void DrawEmptyLine(585,16604
static void DrawLine(592,16708
static void mvnprintw(601,16855
static void MainBoxWrite(691,19341
static int SubDrawObject(713,19914
static int DrawObjects(729,20507
static int DrawMeta(735,20676
static int DrawInfo(761,21373
static int DrawStats(788,22202
static int DrawHelp(864,25070
#define H(869,25187
#undef H942,28645
static int DrawBrowse(947,28689
static int DrawPlaylist(964,29170
static int DrawMessages(1010,30491
static int DrawStatus(1040,31238
static void FillTextBox(1148,34947
static void FillBox(1159,35226
static void Redraw(1181,35946
static void ChangePosition(1209,36694
static inline void RemoveLastUTF8Entity(1224,37034
static char *GetDiscDevice(GetDiscDevice1231,37211
    static const struct { const char *s;s1233,37279
    static const struct { const char *s; size_t n;1233,37279
    static const struct { const char *s; size_t n; const char *v;v1233,37279
static void Eject(1259,38010
static void PlayPause(1286,38581
static inline void BoxSwitch(1296,38892
static bool HandlePlaylistKey(1303,39059
static bool HandleBrowseKey(1394,41722
static void OpenSelection(1460,43538
static void HandleEditBoxKey(1494,44490
static void InputNavigate(1555,46139
static void CycleESTrack(1561,46272
static void HandleCommonKey(1583,46788
static bool HandleListKey(1668,49400
static void HandleKey(1701,50365
static vlc_log_t *msg_Copy msg_Copy1743,51389
static void msg_Free 1753,51737
static void MsgCallback(1760,51868
static void cleanup_run(1786,52601
static void *Run(Run1798,53117
static int Open(1825,53984
static void Close(1879,55675

packetizer/packetizer_helper.h,1238
#define VLC_PACKETIZER_HELPER_H_25,1206
    STATE_NOSYNC,31,1271
    STATE_SYNC,32,1289
    STATE_HEADER,33,1305
    STATE_NEXT_SYNC,34,1323
    STATE_GET_DATA,35,1344
    STATE_SEND_DATA36,1364
typedef void (*packetizer_reset_t)packetizer_reset_t39,1388
typedef block_t *(*packetizer_parse_t)packetizer_parse_t40,1458
typedef int (*packetizer_validate_t)packetizer_validate_t41,1546
    int i_state;45,1632
    block_bytestream_t bytestream;46,1649
    size_t i_offset;47,1684
    bool   b_flushing;48,1705
    int i_startcode;50,1729
    const uint8_t *p_startcode;p_startcode51,1750
    block_startcode_helper_t pf_startcode_helper;52,1782
    int i_au_prepend;54,1833
    const uint8_t *p_au_prepend;p_au_prepend55,1855
    unsigned i_au_min_size;57,1889
    void *p_private;p_private59,1918
    packetizer_reset_t    pf_reset;60,1939
    packetizer_parse_t    pf_parse;61,1975
    packetizer_validate_t pf_validate;62,2011
} packetizer_t;64,2051
static inline void packetizer_Init(66,2068
static inline void packetizer_Clean(94,3227
static inline void packetizer_Flush(99,3344
static inline block_t *packetizer_Packetize(packetizer_Packetize107,3570
static inline void packetizer_Header(227,7828

demux/adaptive/playlist/CommonAttributesElements.cpp,573
CommonAttributesElements::CommonAttributesElements(35,1374
CommonAttributesElements::~CommonAttributesElements(41,1468
const std::string& CommonAttributesElements::getMimeType(45,1527
void CommonAttributesElements::setMimeType(50,1618
int     CommonAttributesElements::getWidth 55,1728
void    CommonAttributesElements::setWidth(60,1818
int     CommonAttributesElements::getHeight 66,1929
void    CommonAttributesElements::setHeight(71,2020
const std::list<std::string>& CommonAttributesElements::getLang(77,2136
void    CommonAttributesElements::addLang(82,2230

demux/adaptive/logic/RateBasedAdaptationLogic.h,1209
#define RATEBASEDADAPTATIONLOGIC_H_26,1198
        class RateBasedAdaptationLogic 36,1359
                RateBasedAdaptationLogic 39,1461
                virtual ~RateBasedAdaptationLogic 40,1541
                BaseRepresentation *getNextRepresentation(getNextRepresentation42,1598
                virtual void updateDownloadRate(43,1700
                virtual void trackerEvent(44,1791
                int                     width;47,1898
                int                     height;48,1945
                size_t                  bpsAvg;49,1993
                size_t                  currentBps;50,2041
                size_t                  usedBps;51,2093
                vlc_object_t *          p_obj;52,2142
                MovingAverage<size_t>   average;54,2190
                size_t                  dlsize;56,2240
                mtime_t                 dllength;57,2288
                vlc_mutex_t             lock;59,2339
        class FixedRateAdaptationLogic 62,2397
                FixedRateAdaptationLogic(65,2499
                BaseRepresentation *getNextRepresentation(getNextRepresentation67,2550
                size_t                  currentBps;70,2674

services_discovery/podcast.c,895
#define VLC_MODULE_LICENSE 32,1393
#define URLS_TEXT 55,2103
#define URLS_LONGTEXT 56,2145
vlc_module_begin 59,2270
  UPDATE_URLS,81,2838
  UPDATE_REQUEST82,2853
struct services_discovery_sys_t85,2951
    input_thread_t **pp_input;pp_input88,3009
    int i_input;89,3040
    char **ppsz_urls;ppsz_urls91,3058
    int i_urls;92,3080
    input_item_t **pp_items;pp_items94,3097
    int i_items;95,3126
    vlc_thread_t thread;97,3144
    vlc_mutex_t lock;98,3169
    vlc_cond_t  wait;99,3191
    bool b_update;100,3213
    bool b_savedurls_loaded;101,3232
    char *psz_request;psz_request102,3261
    int update_type;103,3284
static int Open(121,4111
static void Close(169,5761
static void *Run(Run208,7000
static int UrlsChange(256,8411
static int Request(272,8949
static void ParseUrls(292,9645
static void ParseRequest(364,11875
static void SaveUrls(427,13892

demux/real.c,3052
#define VLC_MODULE_LICENSE 54,2001
vlc_module_begin 70,2452
    int         i_id;85,2902
    es_format_t fmt;86,2924
    es_out_id_t *p_es;p_es88,2946
    unsigned    i_frame_size;90,2970
    int         i_frame_num;92,3001
    unsigned    i_frame_pos;93,3030
    int         i_frame_slice;94,3059
    int         i_frame_slice_count;95,3090
    block_t     *p_frame;p_frame96,3127
    int         i_subpacket_h;98,3154
    int         i_subpacket_size;99,3185
    int         i_coded_frame_size;100,3219
    int         i_subpacket;102,3256
    int         i_subpackets;103,3285
    block_t     **p_subpackets;p_subpackets104,3315
    mtime_t     *p_subpackets_timecode;p_subpackets_timecode105,3347
    int         i_out_subpacket;106,3387
    block_t     *p_sipr_packet;p_sipr_packet108,3421
    int         i_sipr_subpacket_count;109,3453
    mtime_t     i_last_dts;110,3493
} real_track_t;111,3521
    uint32_t i_file_offset;115,3555
    uint32_t i_time_offset;116,3583
    uint32_t i_frame_index;117,3611
} real_index_t;118,3639
struct demux_sys_t120,3656
    int64_t  i_data_offset;122,3677
    int64_t  i_data_size;123,3705
    uint32_t i_data_packets_count;124,3731
    uint32_t i_data_packets;125,3766
    int64_t  i_data_offset_next;126,3795
    bool     b_real_audio;128,3829
    int64_t i_our_duration;130,3857
    char* psz_title;132,3886
    char* psz_artist;133,3907
    char* psz_copyright;134,3929
    char* psz_description;135,3954
    int          i_track;137,3982
    real_track_t **track;track138,4008
    size_t     i_buffer;140,4035
    uint8_t buffer[buffer141,4060
    int64_t     i_pcr;143,4088
    int64_t     i_index_offset;145,4112
    bool        b_seek;146,4144
    real_index_t *p_index;p_index147,4168
static const unsigned char i_subpacket_size_sipr[i_subpacket_size_sipr150,4199
static int Open(175,5346
static void Close(236,6937
static int Demux(277,8031
static int Control(365,10700
static void CheckPcr(498,15117
static void DemuxVideo(512,15480
static void DemuxAudioMethod1(632,19212
static void DemuxAudioMethod2(749,22968
static void DemuxAudioMethod3(782,23876
static const uint8_t sipr_swap_index_table[sipr_swap_index_table820,24822
static void SiprPacketReorder(833,25375
static void DemuxAudioSipr(855,26125
static void DemuxAudio(889,27145
static int ControlGoToIndex(913,27874
static int ControlSeekTime(923,28229
static int ControlSeekByte(942,28742
static char *StreamReadString2(StreamReadString2972,29568
static char *MemoryReadString1(MemoryReadString1998,30151
static int HeaderRMF(1031,30834
static int HeaderPROP(1045,31204
static int HeaderCONT(1083,32633
static int HeaderMDPR(1112,33492
static int HeaderDATA(1169,35357
static void HeaderINDX(1192,36118
static int HeaderRead(1270,38456
static void CodecMetaRead(1356,41025
static int CodecVideoParse(1381,41892
static int CodecAudioParse(1454,43979
static int CodecParse(1716,51804
static void RVoid(1738,52546
#define RX(1746,52725
RX(1754,53022

demux/playlist/playlist.h,212
#define CHECK_FILE(83,2541
#define STANDARD_DEMUX_INIT_MSG(91,2761
#define DEMUX_BY_EXTENSION_MSG(95,2900
#define DEMUX_BY_EXTENSION_OR_FORCED_MSG(102,3128
#define CHECK_PEEK(109,3412
#define POKE(113,3602

codec/spdif.c,47
vlc_module_begin(33,1277
OpenDecoder(56,1767

video_filter/bluescreen.c,817
#define BLUESCREEN_HELP 36,1515
#define BLUESCREENU_TEXT 42,1815
#define BLUESCREENU_LONGTEXT 43,1865
#define BLUESCREENV_TEXT 46,2024
#define BLUESCREENV_LONGTEXT 47,2074
#define BLUESCREENUTOL_TEXT 50,2232
#define BLUESCREENUTOL_LONGTEXT 51,2289
#define BLUESCREENVTOL_TEXT 55,2480
#define BLUESCREENVTOL_LONGTEXT 56,2537
#define CFG_PREFIX 61,2729
vlc_module_begin 76,3393
struct filter_sys_t102,4425
    vlc_mutex_t lock;104,4447
    int i_u,105,4469
    int i_u, i_v,105,4469
    int i_u, i_v, i_ut,105,4469
    int i_u, i_v, i_ut, i_vt;105,4469
    uint8_t *p_at;p_at106,4499
static int Create(109,4522
#define GET_VAR(134,5270
#undef GET_VAR144,5733
static void Destroy(151,5817
static picture_t *Filter(Filter166,6345
static int BluescreenCallback(259,9729
#define VAR_IS(267,10054

demux/adaptive/playlist/Url.cpp,326
Url::Url(30,1132
Url::Url(34,1148
Url::Url(39,1205
bool Url::hasScheme(44,1272
bool Url::empty(52,1390
Url & Url::prepend(57,1450
Url & Url::append(63,1565
Url & Url::prepend(71,1749
Url & Url::append(77,1896
std::string Url::toString(103,2808
std::string Url::toString(108,2877
Url::Component::Component(123,3310

demux/mkv/dispatcher.hpp,1120
#define VLC_MKV_DISPATCHER_HPP_24,1208
  class Dispatcher ::Dispatcher36,1629
      Dispatcher(::Dispatcher::Dispatcher38,1665
      void iterate ::Dispatcher::iterate41,1751
      void set_default_handler ::Dispatcher::set_default_handler46,1931
      void on_create ::Dispatcher::on_create50,2038
      Processor _default_handler;::Dispatcher::_default_handler54,2116
  template<class T, T*::T60,2197
  class DispatchContainer ::DispatchContainer61,2243
    public:    static DispatcherType dispatcher;::DispatchContainer::dispatcher62,2271
    protected: static vlc_mutex_t   _dispatcher_lock;::DispatchContainer::_dispatcher_lock63,2320
  template<class T, T* P,::P66,2380
  DT DispatchContainer<::DispatchContainer67,2416
  DT DispatchContainer<T, P, DT>::dispatcher;::dispatcher67,2416
  template<class T, T* P,::P69,2463
  vlc_mutex_t DispatchContainer<::DispatchContainer70,2499
  vlc_mutex_t DispatchContainer<T, P, DT>::_dispatcher_lock ::_dispatcher_lock70,2499
#define MKV_SWITCH_CREATE(90,3494
#define MKV_SWITCH_INIT(110,4681
#define MKV_SWITCH_CASE_DEFINITION(148,6627

demux/dash/mpd/Profile.hpp,773
#define PROFILE_HPP21,993
namespace dash25,1033
    namespace mpddash::mpd27,1050
        class Profiledash::mpd::Profile29,1074
                enum Namedash::mpd::Profile::Name32,1126
                    Unknown,dash::mpd::Profile::Name::Unknown34,1170
                    Full,dash::mpd::Profile::Name::Full35,1199
                    ISOOnDemand,dash::mpd::Profile::Name::ISOOnDemand36,1225
                    ISOMain,dash::mpd::Profile::Name::ISOMain37,1258
                    ISOLive,dash::mpd::Profile::Name::ISOLive38,1287
                    MPEG2TSMain,dash::mpd::Profile::Name::MPEG2TSMain39,1316
                    MPEG2TSSimple,dash::mpd::Profile::Name::MPEG2TSSimple40,1349
                Name type;dash::mpd::Profile::type50,1698

access/avcapture.m,1099
vlc_module_begin 54,2220
@interface VLCAVDecompressedVideoOutput 68,2716
@implementation VLCAVDecompressedVideoOutput : AVCaptureVideoDataOutput93,3491
- (id)initWithDemux:95,3564
- (void)dealloc110,3863
- (long)timeScale121,4060
- (int)width126,4105
- (int)height131,4162
- (size_t)bytesPerRow136,4221
- (void)getVideoDimensions:141,4272
-(mtime_t)currentPts153,4831
       fromConnection:captureOutput:didOutputSampleBuffer:fromConnection:170,5164
- (mtime_t)copyCurrentFrameToBuffer:190,5884
struct demux_sys_t229,6906
    CFTypeRef _Nullable             session;231,6927
    CFTypeRef _Nullable             device;232,6998
    CFTypeRef _Nullable             output;233,7068
    es_out_id_t                     *p_es_video;p_es_video234,7151
    es_format_t                     fmt;235,7200
    int                             height,236,7241
    int                             height, width;236,7241
    BOOL                            b_es_setup;237,7292
static int Open(243,7510
static void Close(370,12587
static int Demux(391,13387
static int Control(438,15355

access/nfs.c,1675
#define AUTO_GUID_TEXT 49,1605
#define AUTO_GUID_LONGTEXT 50,1665
vlc_module_begin(56,1871
struct access_sys_t67,2208
    struct rpc_context *    p_mount;69,2230
    struct nfs_context *    p_nfs;70,2308
    struct nfs_url *        p_nfs_url;71,2343
    struct nfs_stat_64      stat;72,2382
    struct nfsfh *          p_nfsfh;73,2416
    struct nfsdir *         p_nfsdir;74,2453
    vlc_url_t               encoded_url;75,2491
    char *                  psz_url_decoded;76,2532
    char *                  psz_url_decoded_slash;77,2577
    bool                    b_eof;78,2628
    bool                    b_error;79,2663
    bool                    b_auto_guid;80,2700
            char **         ppsz_names;85,2779
            int             i_count;86,2819
        } exports;87,2856
            uint8_t *p_buf;p_buf90,2900
            size_t i_len;91,2928
        } read;92,2954
            bool b_done;95,2995
        } seek;96,3020
    } res;97,3036
nfs_check_status(101,3063
#define NFS_CHECK_STATUS(125,3776
vlc_rpc_mainloop(129,3916
vlc_nfs_mainloop(160,4848
vlc_mount_mainloop(169,5126
nfs_read_cb(177,5362
nfs_read_finished_cb(197,5865
FileRead(204,6023
nfs_seek_cb(227,6558
nfs_seek_finished_cb(242,6943
FileSeek(249,7078
FileControl(268,7552
NfsGetUrl(308,8491
DirRead(325,9134
MountRead(375,10448
DirControl(405,11296
nfs_opendir_cb(420,11617
nfs_open_cb(434,11984
nfs_stat64_cb(448,12344
nfs_mount_cb(495,13753
nfs_mount_open_finished_cb(542,15370
nfs_mount_open_slash_finished_cb(550,15587
mount_export_cb(557,15762
mount_getexports_finished_cb(608,17280
NfsInit(615,17433
Open(636,18012
Close(759,21835

misc/webservices/json.c,699
      #define _CRT_SECURE_NO_WARNINGS34,1505
   const struct _json_value json_value_none;39,1580
   const struct _json_value json_value_none 41,1652
typedef unsigned short json_uchar;50,1827
static unsigned char hex_value 52,1863
   json_settings settings;68,2116
   int first_pass;69,2143
   unsigned long used_memory;71,2163
   unsigned int uint_max;73,2194
   unsigned long ulong_max;74,2220
} json_state;76,2249
static void * json_alloc 78,2264
static int new_value97,2655
#define e_off 176,4426
#define whitespace 179,4475
#define string_add(183,4581
   flag_next 187,4716
json_value * json_parse_ex 192,5009
json_value * json_parse 780,22058
void json_value_free 788,22236

access/dcp/dcpparser.cpp,2885
    CHUNK_UNKNOWN ::CHUNK_UNKNOWN53,1674
    CHUNK_PATH,::CHUNK_PATH54,1697
    CHUNK_VOL_INDEX,::CHUNK_VOL_INDEX55,1713
    CHUNK_OFFSET,::CHUNK_OFFSET56,1734
    CHUNK_LENGTH::CHUNK_LENGTH57,1752
} ChunkTag_t;58,1769
    ASSET_UNKNOWN ::ASSET_UNKNOWN62,1800
    ASSET_ID,::ASSET_ID63,1823
    ASSET_ANNOTATION_TEXT,::ASSET_ANNOTATION_TEXT64,1837
    ASSET_PACKING_LIST,::ASSET_PACKING_LIST65,1864
    ASSET_CHUNK_LIST,::ASSET_CHUNK_LIST66,1888
    ASSET_HASH,::ASSET_HASH67,1910
    ASSET_SIZE,::ASSET_SIZE68,1926
    ASSET_TYPE,::ASSET_TYPE69,1942
    ASSET_ORIGINAL_FILENAME::ASSET_ORIGINAL_FILENAME70,1958
} AssetTag_t;71,1986
static const string g_asset_names[g_asset_names73,2001
    PKL_UNKNOWN ::PKL_UNKNOWN86,2188
    PKL_ID,::PKL_ID87,2209
    PKL_ISSUE_DATE,::PKL_ISSUE_DATE88,2221
    PKL_ISSUER,::PKL_ISSUER89,2241
    PKL_CREATOR,::PKL_CREATOR90,2257
    PKL_ASSET_LIST,::PKL_ASSET_LIST91,2274
    PKL_ANNOTATION_TEXT,::PKL_ANNOTATION_TEXT92,2294
    PKL_ICON_ID,::PKL_ICON_ID93,2348
    PKL_GROUP_ID,::PKL_GROUP_ID94,2365
    PKL_SIGNER,::PKL_SIGNER95,2383
    PKL_SIGNATURE,::PKL_SIGNATURE96,2399
} PKLTag_t;97,2418
    CPL_UNKNOWN ::CPL_UNKNOWN100,2446
    CPL_ID,::CPL_ID101,2467
    CPL_ANNOTATION_TEXT,::CPL_ANNOTATION_TEXT102,2479
    CPL_ICON_ID,::CPL_ICON_ID103,2526
    CPL_ISSUE_DATE,::CPL_ISSUE_DATE104,2573
    CPL_ISSUER,::CPL_ISSUER105,2593
    CPL_CREATOR,::CPL_CREATOR106,2640
    CPL_CONTENT_TITLE,::CPL_CONTENT_TITLE107,2687
    CPL_CONTENT_KIND,::CPL_CONTENT_KIND108,2710
    CPL_CONTENT_VERSION,::CPL_CONTENT_VERSION109,2732
    CPL_RATING_LIST,::CPL_RATING_LIST110,2806
    CPL_REEL_LIST,::CPL_REEL_LIST111,2856
    CPL_SIGNER,::CPL_SIGNER112,2875
    CPL_SIGNATURE ::CPL_SIGNATURE113,2936
} CPLTag_t;114,2997
class ChunkList:ChunkList117,3011
int Chunk::Parse(126,3124
AssetMap::~AssetMap(201,5996
int AssetMap::Parse 203,6023
Asset::~Asset(400,12219
int Asset::Parse(402,12239
int Asset::ParsePKL(511,17405
void Asset::Dump(603,21690
int Asset::parseChunkList(615,22330
AESKey * Asset::getAESKeyById(654,23567
int AssetMap::ParseAssetList 668,23939
Asset * AssetMap::getAssetById(708,25206
XmlFile::~XmlFile(720,25521
int XmlFile::OpenXml(722,25545
int XmlFile::ReadNextNode(741,25982
int XmlFile::ReadEndNode(768,26640
int XmlFile::isCPL(794,27326
void XmlFile::CloseXml(817,27836
PKL::~PKL(828,28032
int PKL::Parse(832,28078
int PKL::FindCPLs(953,33071
int PKL::ParseAssetList(992,34102
int PKL::ParseAsset(1024,34970
int PKL::ParseSigner(1070,36164
int PKL::ParseSignature(1090,36695
int Reel::Parse(1112,37258
Asset * Reel::getTrack(1159,38881
int Reel::ParseAssetList(1175,39248
int Reel::ParseAsset(1219,40758
CPL::~CPL(1321,44861
int CPL::Parse(1325,44908
int CPL::ParseReelList(1455,50203
int CPL::DummyParse(1495,51378

audio_filter/karaoke.c,67
vlc_module_begin 34,1252
static block_t *Process Process62,1962

access/rtsp/real_sdpplin.c,276
#define BUFLEN 28,933
static inline char *nl(nl30,955
static inline int line_length(35,1083
static int filter(43,1223
static sdpplin_stream_t *sdpplin_parse_stream(sdpplin_parse_stream67,1831
sdpplin_t *sdpplin_parse(sdpplin_parse190,5288
void sdpplin_free(299,8211

codec/fluidsynth.c,684
# define FLUIDSYNTH_NOT_A_DLL38,1434
#define SOUNDFONT_TEXT 47,1558
#define SOUNDFONT_LONGTEXT 48,1599
#define CHORUS_TEXT 51,1696
#define GAIN_TEXT 53,1730
#define GAIN_LONGTEXT 54,1769
#define POLYPHONY_TEXT 57,1921
#define POLYPHONY_LONGTEXT 58,1960
#define REVERB_TEXT 62,2118
#define SAMPLE_RATE_TEXT 64,2152
vlc_module_begin 69,2269
struct decoder_sys_t91,3166
    fluid_settings_t *settings;settings93,3189
    fluid_synth_t    *synth;synth94,3221
    int               soundfont;95,3250
    date_t            end_date;96,3283
static int Open 103,3422
static void Close 190,6581
static void Flush 200,6849
static block_t *DecodeBlock DecodeBlock212,7246

video_filter/posterize.c,596
static const char *const ppsz_filter_options[ppsz_filter_options53,2207
#define POSTERIZE_LEVEL_TEXT 60,2460
#define POSTERIZE_LEVEL_LONGTEXT 61,2511
#define CFG_PREFIX 64,2633
vlc_module_begin 66,2666
struct filter_sys_t88,3697
    atomic_int i_level;90,3719
static int Create(98,4111
static void Destroy(147,5739
static picture_t *Filter(Filter163,6422
#define POSTERIZE_PIXEL(205,7675
static void PlanarYUVPosterize(215,8279
static void PackedYUVPosterize(275,10907
static void RVPosterize(368,14427
static void YuvPosterization(409,16040
static int FilterCallback 437,17408

video_output/win32/direct3d9.c,3247
#define DESKTOP_LONGTEXT 60,2435
#define HW_BLENDING_TEXT 63,2538
#define HW_BLENDING_LONGTEXT 64,2599
#define PIXEL_SHADER_TEXT 67,2701
#define PIXEL_SHADER_LONGTEXT 68,2746
#define PIXEL_SHADER_FILE_TEXT 70,2824
#define PIXEL_SHADER_FILE_LONGTEXT 71,2879
#define SELECTED_SHADER_FILE 73,3054
#define D3D9_HELP 75,3100
vlc_module_begin 80,3301
struct picture_sys_t107,4224
    LPDIRECT3DSURFACE9 surface;109,4247
    picture_t          *fallback;fallback110,4279
    FLOAT       x,131,4979
    FLOAT       x,y,131,4979
    FLOAT       x,y,z;131,4979
    FLOAT       rhw;132,5040
    D3DCOLOR    diffuse;133,5084
    FLOAT       tu,134,5129
    FLOAT       tu, tv;134,5129
} CUSTOMVERTEX;135,5189
#define D3DFVF_CUSTOMVERTEX 136,5205
typedef struct d3d_region_t 138,5277
    D3DFORMAT          format;139,5307
    unsigned           width;140,5338
    unsigned           height;141,5368
    CUSTOMVERTEX       vertex[vertex142,5399
    LPDIRECT3DTEXTURE9 texture;143,5433
} d3d_region_t;144,5465
static bool is_d3d9_opaque(156,5931
static int Open(171,6187
static void Close(270,9366
static void DestroyPicture(286,9664
static picture_pool_t *Pool(Pool295,9824
static void Prepare(359,11978
static void Display(406,13849
static int ControlResetDevice(443,14982
static int ControlReopenDevice(447,15067
static int Control(519,17394
static void Manage 544,18170
static HINSTANCE Direct3D9LoadShaderLibrary(584,19326
static int Direct3D9Create(600,19696
static void Direct3D9Destroy(681,22471
static int Direct3D9FillPresentationParameters(702,22943
static int Direct3D9Open(752,24839
static void Direct3D9Close(829,27531
static int Direct3D9Reset(844,27811
static int Direct3D9CreateResources(891,29169
static void Direct3D9DestroyResources(927,30523
static int Direct3D9CheckConversion(937,30748
    const char   *name;name967,31862
    D3DFORMAT    format;968,31886
    vlc_fourcc_t fourcc;969,31931
    uint32_t     rmask;970,31976
    uint32_t     gmask;971,32000
    uint32_t     bmask;972,32024
} d3d_format_t;973,32048
static const d3d_format_t d3d_formats[d3d_formats975,32065
static const d3d_format_t *Direct3DFindFormat(Direct3DFindFormat996,33340
static int Direct3D9LockSurface(1038,34779
static void Direct3D9UnlockSurface(1054,35361
static int Direct3D9CreatePool(1071,35943
static void Direct3D9DestroyPool(1162,39230
static int Direct3D9CreateScene(1181,39728
static void Direct3D9DestroyScene(1304,44641
static int Direct3D9CompileShader(1327,45198
#define MAX_SHADER_FILE_SIZE 1381,47021
static int Direct3D9CreateShaders(1383,47061
static void Direct3D9DestroyShaders(1458,49347
static void orientationVertexOrder(1483,50095
static void Direct3D9SetupVertices(1537,51704
static int Direct3D9ImportPicture(1586,53225
static void Direct3D9DeleteRegions(1622,54448
static void Direct3D9ImportSubpicture(1631,54672
static int Direct3D9RenderRegion(1740,59567
static void Direct3D9RenderScene(1825,62515
static int DesktopCallback(1875,64234
    char **values;values1895,64840
    char **descs;descs1896,64859
    size_t count;1897,64877
} enum_context_t;1898,64895
static void ListShaders(1900,64914
static int FindShadersCallback(1916,65605

mux/mpjpeg.c,228
#define SOUT_CFG_PREFIX 43,1782
vlc_module_begin 45,1822
#define BOUNDARY 65,2606
static void Close(89,3339
static int Control(96,3558
static int AddStream(124,4278
static void DelStream(139,4617
static int Mux(145,4753

misc/webservices/json.h,1507
#define VLC_WEBSERVICES_JSON_H_32,1468
   #define json_char 35,1519
#define json_int_t 40,1594
   unsigned long max_memory;54,1718
   int settings;55,1747
} json_settings;57,1765
#define json_relaxed_commas 59,1783
   json_none,63,1829
   json_object,64,1843
   json_array,65,1859
   json_integer,66,1874
   json_double,67,1891
   json_string,68,1907
   json_boolean,69,1923
   json_null70,1940
} json_type;72,1954
typedef struct _json_value76,2018
   struct _json_value * parent;78,2047
   json_type type;80,2080
      int boolean;84,2114
      json_int_t integer;85,2133
      double dbl;86,2159
         unsigned int length;90,2199
         json_char * ptr;91,2229
      } string;93,2278
         unsigned int length;97,2316
            json_char * name;101,2374
            struct _json_value * value;102,2404
         } * values;104,2445
      } object;106,2467
         unsigned int length;110,2505
         struct _json_value ** values;111,2535
      } array;113,2575
   } u;115,2591
      struct _json_value * next_alloc;119,2614
      void * object_mem;120,2653
   } _reserved;122,2679
         inline _json_value 131,2769
         inline const struct _json_value &operator operator135,2864
         inline const struct _json_value &operator operator146,3185
         inline operator const char 158,3582
         inline operator json_int_t 170,3833
         inline operator bool 185,4158
         inline operator double 193,4323
} json_value;210,4651

demux/avformat/avformat.c,26
vlc_module_begin 36,1424

demux/smooth/SmoothStream.cpp,187
SmoothStream::SmoothStream(29,1100
AbstractDemuxer * SmoothStream::createDemux(34,1175
block_t * SmoothStream::checkBlock(58,1677
AbstractStream * SmoothStreamFactory::create(63,1761

access/rtsp/real_sdpplin.h,1896
#define HAVE_SDPPLIN_H27,914
  char *id;id31,956
  char *bandwidth;bandwidth32,968
  uint16_t stream_id;34,988
  char *range;range35,1010
  char *length;length36,1025
  char *rtpmap;rtpmap37,1041
  char *mimetype;mimetype38,1057
  int min_switch_overlap;39,1075
  int start_time;40,1101
  int end_one_rule_end_all;41,1119
  int avg_bit_rate;42,1147
  int max_bit_rate;43,1167
  int avg_packet_size;44,1187
  int max_packet_size;45,1210
  int end_time;46,1233
  int seek_greater_on_switch;47,1249
  int preroll;48,1279
  int duration;50,1295
  char *stream_name;stream_name51,1311
  int stream_name_size;52,1332
  char *mime_type;mime_type53,1356
  int mime_type_size;54,1375
  char *mlti_data;mlti_data55,1397
  int mlti_data_size;56,1416
  int  rmff_flags_length;57,1438
  char *rmff_flags;rmff_flags58,1464
  int  asm_rule_book_length;59,1484
  char *asm_rule_book;asm_rule_book60,1513
} sdpplin_stream_t;62,1537
  int sdp_version,66,1576
  int sdp_version, sdpplin_version;66,1576
  char *owner;owner67,1612
  char *session_name;session_name68,1627
  char *session_info;session_info69,1649
  char *uri;uri70,1671
  char *email;email71,1684
  char *phone;phone72,1699
  char *connection;connection73,1714
  char *bandwidth;bandwidth74,1734
  int flags;76,1754
  int is_real_data_type;77,1767
  uint16_t stream_count;78,1792
  char *title;title79,1817
  char *author;author80,1832
  char *copyright;copyright81,1848
  char *keywords;keywords82,1867
  int  asm_rule_book_length;83,1885
  char *asm_rule_book;asm_rule_book84,1914
  char *abstract;abstract85,1937
  char *range;range86,1955
  int avg_bit_rate;87,1970
  int max_bit_rate;88,1990
  int avg_packet_size;89,2010
  int max_packet_size;90,2033
  int preroll;91,2056
  int duration;92,2071
  sdpplin_stream_t **stream;stream94,2088
} sdpplin_t;96,2118

keystore/file_crypt.h,206
# define CRYPTFILE22,1157
struct crypt24,1177
    void *  p_ctx;26,1192
    size_t  (*pf_encrypt)pf_encrypt27,1211
    size_t  (*pf_decrypt)pf_decrypt28,1299
    void    (*pf_clean)pf_clean29,1387

demux/caf.c,1873
vlc_module_begin 50,1947
typedef struct frame_span_t65,2443
    uint64_t i_frames;67,2473
    uint64_t i_samples;68,2496
    uint64_t i_bytes;69,2520
    uint64_t i_desc_bytes;70,2542
} frame_span_t;71,2569
typedef struct packet_table_t73,2586
    uint64_t i_num_packets;75,2618
    uint64_t i_num_valid_frames;76,2646
    uint32_t i_num_priming_frames;77,2679
    uint32_t i_num_remainder_frames;78,2714
    uint64_t i_descriptions_start;79,2751
} packet_table_t;80,2786
struct demux_sys_t82,2805
    es_format_t  fmt;84,2826
    es_out_id_t *es;es85,2848
    uint64_t i_data_offset;87,2870
    uint64_t i_data_size;88,2898
    frame_span_t position;90,2925
    packet_table_t packet_table;91,2952
static const uint64_t kCHUNK_SIZE_EOF 97,3083
static int ParseVarLenInteger(107,3584
static inline double GetDBLBE(144,4378
        uint64_t uint64;148,4446
        double dbl;149,4471
static inline int ReadBEInt32ToUInt32(160,4731
static inline int ReadBEInt64ToUInt64(174,5117
static inline bool NeedsPacketTable(184,5333
static uint64_t TotalNumFrames(189,5484
static uint64_t TotalNumSamples(218,6215
static inline vlc_fourcc_t ReadFOURCC(233,6618
static inline void FrameSpanAddSpan(248,7237
static int FrameSpanAddDescription(258,7555
static inline mtime_t FrameSpanGetTime(332,9614
static int SetSpanWithSample(346,10131
static int NextChunk(404,12208
static int ReadDescChunk(429,12825
static int ProcessALACCookie(522,16294
static inline bool AACCookieGetTag(565,17391
static inline bool AACCookieTagLen(576,17631
static inline bool AACCookieChkLen(588,17934
static int ProcessAACCookie(596,18278
static int ReadKukiChunk(682,20866
static int ReadDataChunk(725,22036
static int ReadPaktChunk(738,22392
static int Open(779,23815
static int Demux(923,27635
static int Control(1000,30144
static void Close(1059,32146

demux/adaptive/logic/AlwaysBestAdaptationLogic.cpp,189
AlwaysBestAdaptationLogic::AlwaysBestAdaptationLogic 34,1363
BaseRepresentation *AlwaysBestAdaptationLogic::getNextRepresentation(AlwaysBestAdaptationLogic::getNextRepresentation39,1488

codec/substx3g.c,669
vlc_module_begin 39,1547
#define FONT_FACE_BOLD 79,2836
#define FONT_FACE_ITALIC 80,2868
#define FONT_FACE_UNDERLINE 81,2900
static int ConvertFlags(83,2933
static size_t str8len(95,3299
static char * str8indup(107,3520
typedef struct tx3g_segment_t tx3g_segment_t;125,3970
struct tx3g_segment_t127,4017
    text_segment_t *s;s129,4041
    size_t i_size;130,4064
    tx3g_segment_t *p_next3g;p_next3g131,4083
static tx3g_segment_t * tx3g_segment_New(134,4117
static void SegmentDoSplit(151,4504
static bool SegmentSplit(211,6772
static void ApplySegmentStyle(252,8302
static void FontSizeConvert(282,9354
static subpicture_t *Decode(Decode303,9996

demux/avformat/avformat.h,118
#define MUX_TEXT 35,1480
#define MUX_LONGTEXT 36,1516
#define FORMAT_TEXT 37,1583
#define FORMAT_LONGTEXT 38,1623

codec/omxil/vout.c,850
#define OMX_IndexConfigDisplayRegion 37,1374
vlc_module_begin(45,1674
struct vout_display_sys_t 63,2323
    picture_pool_t *pool;pool64,2351
    OMX_HANDLETYPE omx_handle;66,2378
    char psz_component[psz_component68,2410
    OmxPort port;70,2460
    OmxEventQueue event_queue;72,2479
struct picture_sys_t 75,2514
    OMX_BUFFERHEADERTYPE *buf;buf76,2537
    vout_display_sys_t *sys;sys77,2568
static OMX_ERRORTYPE OmxEventHandler(90,3080
static OMX_ERRORTYPE OmxEmptyBufferDone(103,3540
static OMX_ERRORTYPE OmxFillBufferDone(120,3991
static void UpdateDisplaySize(130,4209
static int Open(146,4850
#define ALIGN(204,7011
static void Close(344,12443
static picture_pool_t *Pool(Pool383,13943
static int LockSurface(390,14062
static void UnlockSurface(416,14936
static void Display(428,15276
static int Control(444,15824

video_filter/remoteosd.c,2263
#define READ_BUFFER_SIZE 68,3054
#define RMTOSD_HOST_TEXT 70,3088
#define RMTOSD_HOST_LONGTEXT 71,3128
#define RMTOSD_PORT_TEXT 74,3200
#define RMTOSD_PORT_LONGTEXT 75,3240
#define RMTOSD_PASSWORD_TEXT 78,3301
#define RMTOSD_PASSWORD_LONGTEXT 79,3349
#define RMTOSD_UPDATE_TEXT 82,3411
#define RMTOSD_UPDATE_LONGTEXT 83,3463
#define RMTOSD_POLL_TEXT 86,3581
#define RMTOSD_POLL_LONGTEXT 87,3624
#define RMTOSD_MOUSE_TEXT 90,3738
#define RMTOSD_MOUSE_LONGTEXT 91,3783
#define RMTOSD_KEYS_TEXT 94,3902
#define RMTOSD_KEYS_LONGTEXT 95,3944
#define RMTOSD_ALPHA_TEXT 98,4017
#define RMTOSD_ALPHA_LONGTEXT 99,4088
#define RMTOSD_CFG 105,4413
#define RMTOSD_UPDATE_MIN 107,4443
#define RMTOSD_UPDATE_DEFAULT 108,4477
#define RMTOSD_UPDATE_MAX 109,4512
vlc_module_begin 114,4638
#define CHALLENGESIZE 147,6094
#define MAX_VNC_SERVER_NAME_LENGTH 148,6119
struct filter_sys_t195,7922
    vlc_mutex_t   lock;197,7944
    bool          b_need_update;199,8024
    uint8_t       i_alpha;200,8110
    char          *psz_host;psz_host202,8181
    char          *psz_passwd;psz_passwd204,8236
    picture_t     *p_pic;p_pic206,8295
    int           i_socket;208,8376
    uint16_t      i_vnc_width;210,8442
    uint16_t      i_vnc_height;211,8515
    bool          b_vnc_key_events;213,8591
    bool    b_alpha_from_vnc;214,8653
    char          read_buffer[read_buffer216,8734
    vlc_thread_t  worker_thread;218,8784
    uint8_t       ar_color_table_yuv[ar_color_table_yuv220,8818
static int CreateFilter 226,9091
static void DestroyFilter(302,11391
static bool read_exact(326,12051
static bool write_exact(332,12186
static int vnc_connect(337,12328
static int write_update_request(554,19090
static void update_thread_cleanup(573,19662
static void dummy_cleanup(581,19789
static void* vnc_worker_thread(586,19845
static void* update_request_thread(696,22925
static bool process_server_message 714,23352
static subpicture_t *Filter(Filter972,33788
static inline void rgb_to_yuv(1043,35630
static inline bool fill_rect(1051,35953
static inline bool copy_rect(1086,37307
static inline bool raw_line(1145,39423
static int MouseEvent(1179,40689
static int KeyEvent(1236,42321
static void vnc_encrypt_bytes(1314,44429

video_output/win32/builtin_shaders.h,885
static const char shader_disabled_source[shader_disabled_source23,1176
static const char shader_invert_source[shader_invert_source30,1391
static const char shader_grayscale_source[shader_grayscale_source41,1739
static const char shader_convert601to709_source[shader_convert601to709_source51,2109
static const char shader_gammacorrection18_source[shader_gammacorrection18_source84,3117
static const char shader_gammacorrection22_source[shader_gammacorrection22_source93,3407
static const char shader_gammacorrectionbt709_source[shader_gammacorrectionbt709_source102,3697
static const char shader_widencolorspace_source[shader_widencolorspace_source122,4411
    const char *name;name135,4922
    const char *code;code136,4944
} builtin_shader_t;137,4966
static const builtin_shader_t builtin_shaders[builtin_shaders139,4987
#define BUILTIN_SHADERS_COUNT 150,5480

video_filter/puzzle_mgt.c,731
int puzzle_bake(50,1997
void puzzle_free_ps_puzzle_array(174,9698
int puzzle_bake_piece(200,10546
void puzzle_set_left_top_shapes(300,15581
void puzzle_random_rotate(323,16909
void puzzle_free_ps_pieces(348,17945
int puzzle_allocate_ps_pieces(371,18498
bool puzzle_is_valid(411,20110
int puzzle_shuffle(434,20735
int puzzle_generate_rand_pce_list(465,21534
bool puzzle_is_finished(486,22160
int puzzle_piece_foreground(495,22387
void puzzle_count_pce_group(528,23528
void puzzle_solve_pces_group(540,24174
void puzzle_solve_pces_accuracy(637,29215
int puzzle_sort_layers(677,31048
void puzzle_auto_solve(731,33941
void puzzle_auto_shuffle(771,35831
save_game_t* puzzle_save(879,42061
void puzzle_load(916,44073

demux/playlist/b4s.c,85
int Import_B4S(48,1986
static int Demux(63,2301
static bool IsWhitespace(239,7885

codec/omxil/omxil.c,2566
# define OMX_DBG(52,1848
# define OMX_DBG(54,1906
#define SENTINEL_FLAG 57,1936
#define OMX_IndexConfigRequestCallback 60,2020
#define OMX_IndexParamBrcmPixelAspectRatio 61,2070
#define OMX_IndexParamBrcmVideoDecodeErrorConcealment 62,2124
#define OMX_EventParamOrConfigChanged 65,2242
#define THREAD_NAME 69,2372
#define HWBUFFER_LOCK(109,4385
#define HWBUFFER_UNLOCK(110,4458
#define HWBUFFER_WAIT(111,4535
#define HWBUFFER_BROADCAST(113,4680
static inline int HwBuffer_dummy(116,4769
#define HwBuffer_Init(120,4823
#define HwBuffer_Destroy(121,4877
#define HwBuffer_AllocateBuffers(122,4934
#define HwBuffer_FreeBuffers(123,4999
#define HwBuffer_Start(124,5060
#define HwBuffer_Stop(125,5115
#define HwBuffer_Join(126,5169
#define HwBuffer_GetPic(127,5223
#define HwBuffer_SetCrop(128,5287
#define HWBUFFER_LOCK(130,5353
#define HWBUFFER_UNLOCK(131,5400
#define HWBUFFER_WAIT(132,5449
#define HWBUFFER_BROADCAST(133,5496
#define DIRECTRENDERING_TEXT 139,5736
#define DIRECTRENDERING_LONGTEXT 140,5792
#define CFG_PREFIX 143,5871
vlc_module_begin 144,5899
static OMX_ERRORTYPE SetPortDefinition(247,10071
static OMX_ERRORTYPE UpdatePixelAspect(407,17026
static OMX_ERRORTYPE AllocateBuffers(433,17956
#define ALIGN(454,18580
static OMX_ERRORTYPE FreeBuffers(513,20970
static OMX_ERRORTYPE GetPortDefinition(578,23311
static OMX_ERRORTYPE DeinitialiseComponent(729,30050
static OMX_ERRORTYPE InitialiseComponent(817,33259
static int OpenDecoder(1006,40506
static int OpenEncoder(1032,41261
static int OpenGeneric(1051,41850
static OMX_ERRORTYPE PortReconfigure(1270,50618
static int DecodeVideoOutput(1369,54601
static int DecodeVideoInput(1447,57059
static void Flush(1526,59967
static picture_t *DecodeVideo(DecodeVideo1541,60487
block_t *DecodeAudio DecodeAudio1655,64544
static block_t *EncodeVideo(EncodeVideo1801,69245
static void CloseGeneric(1899,72384
static OMX_ERRORTYPE OmxEventHandler(1919,72951
static OMX_ERRORTYPE OmxEmptyBufferDone(1972,74638
static OMX_ERRORTYPE OmxFillBufferDone(1994,75343
static void HwBuffer_ChangeState(2034,76479
static void HwBuffer_Init(2051,77102
static void HwBuffer_Destroy(2128,79800
static int HwBuffer_AllocateBuffers(2158,80876
static int HwBuffer_FreeBuffers(2301,86025
static int HwBuffer_Start(2343,87239
static int HwBuffer_Stop(2389,88858
static int HwBuffer_Join(2420,89807
static int HwBuffer_GetPic(2435,90253
static void HwBuffer_SetCrop(2485,91529
static void *DequeueThread(DequeueThread2498,92070
static void ReleasePicture(2575,94405

codec/cvdsub.c,1270
#define DEBUG_CVDSUB 40,1632
vlc_module_begin 49,1976
#define SUBTITLE_BLOCK_EMPTY 71,2911
#define SUBTITLE_BLOCK_PARTIAL 72,2942
#define SUBTITLE_BLOCK_COMPLETE 73,2975
struct decoder_sys_t75,3010
  int      b_packetizer;77,3033
  int      i_state;79,3059
  block_t  *p_spu;p_spu81,3128
  size_t   i_spu_size;83,3177
  uint16_t i_image_offset;86,3317
  size_t i_image_length;88,3441
  size_t first_field_offset;89,3516
  size_t second_field_offset;90,3585
  size_t metadata_offset;91,3653
  size_t metadata_length;92,3730
  mtime_t i_duration;94,3791
  uint16_t i_x_start,97,3915
  uint16_t i_x_start, i_y_start;97,3915
  uint16_t i_width,99,4045
  uint16_t i_width, i_height;99,4045
  uint8_t p_palette[p_palette101,4115
  uint8_t p_palette_highlight[p_palette_highlight102,4189
static int DecoderOpen(108,4441
static int PacketizerOpen(137,5255
void DecoderClose(151,5701
static subpicture_t *Decode(Decode163,6085
static block_t *Packetize(Packetize187,6722
#define SPU_HEADER_LEN 218,7619
static block_t *Reassemble(Reassemble220,7645
static void ParseHeader(304,10765
#define ExtractXY(333,11666
static void ParseMetaInfo(336,11780
static subpicture_t *DecodePacket(DecodePacket496,17332
static void RenderImage(572,20304

video_filter/puzzle_mgt.h,2071
#define VLC_LIB_PUZZLE_MGT_H 29,1442
#define NO_PCE 46,1737
    int32_t i_preview_width,54,1954
    int32_t i_preview_width, i_preview_lines;54,1954
    int32_t i_border_width,55,2000
    int32_t i_border_width, i_border_lines;55,2000
    int32_t i_pce_max_width,56,2044
    int32_t i_pce_max_width, i_pce_max_lines;56,2044
    int32_t i_width,57,2090
    int32_t i_width, i_lines,57,2090
    int32_t i_width, i_lines, i_pitch,57,2090
    int32_t i_width, i_lines, i_pitch, i_visible_pitch;57,2090
    uint8_t i_pixel_pitch;58,2146
} puzzle_plane_t;59,2173
    int32_t i_x,62,2209
    int32_t i_x, i_y;62,2209
    int32_t i_width,63,2231
    int32_t i_width, i_lines;63,2231
} puzzle_array_t;64,2261
    int32_t i_original_row,67,2297
    int32_t i_original_row, i_original_col;67,2297
    int32_t i_top_shape,68,2341
    int32_t i_top_shape, i_btm_shape,68,2341
    int32_t i_top_shape, i_btm_shape, i_right_shape,68,2341
    int32_t i_top_shape, i_btm_shape, i_right_shape, i_left_shape;68,2341
    float f_pos_x,69,2408
    float f_pos_x, f_pos_y;69,2408
    int8_t i_actual_angle;70,2436
    int32_t i_actual_mirror;71,2540
} save_piece_t;72,2644
    int32_t i_rows,75,2678
    int32_t i_rows, i_cols;75,2678
    uint8_t i_rotate;76,2706
    save_piece_t *ps_pieces;ps_pieces77,2728
} save_game_t;78,2757
    int32_t i_rows,81,2790
    int32_t i_rows, i_cols;81,2790
    int32_t i_pict_width,82,2818
    int32_t i_pict_width, i_pict_height;82,2818
    int32_t i_desk_width,83,2859
    int32_t i_desk_width, i_desk_height;83,2859
    int32_t i_piece_types;84,2900
    uint32_t i_pieces_nbr;85,2927
    int32_t i_preview_size;86,2954
    int32_t i_shape_size;87,2982
    int32_t i_border;88,3008
    uint8_t i_planes;89,3030
    bool    b_preview;91,3076
    bool b_blackslot;92,3099
    bool b_near;93,3121
    bool b_advanced;94,3138
    uint8_t i_mode;95,3159
    uint8_t i_rotate;96,3179
    int32_t i_auto_shuffle_speed,97,3267
    int32_t i_auto_shuffle_speed, i_auto_solve_speed;97,3267
} param_t;98,3321

codec/oggspots.c,432
struct decoder_sys_t42,1727
    bool b_packetizer;45,1772
    bool b_has_headers;50,1835
    image_handler_t* p_image;55,1896
    mtime_t i_pts;60,1967
vlc_module_begin 81,2739
static int OpenPacketizer(140,4487
static void* DecodeBlock(159,5089
static int ProcessHeader(180,5705
static void Flush(270,8807
static void* ProcessPacket(280,9132
static picture_t* DecodePacket(325,10397
static void CloseDecoder(386,12142

demux/mkv/matroska_segment.cpp,2043
matroska_segment_c::matroska_segment_c(34,1396
matroska_segment_c::~matroska_segment_c(66,2203
void matroska_segment_c::LoadCues(103,3418
    vlc_meta_type_t type;::type246,9092
    const char *key;::key247,9118
    int target_type;::target_type248,9139
} metadata_map[metadata_map249,9197
bool matroska_segment_c::ParseSimpleTags(270,10393
void matroska_segment_c::LoadTags(352,13533
void matroska_segment_c::InformationCreate(459,18225
void matroska_segment_c::IndexAppendCluster(475,18583
bool matroska_segment_c::PreloadClusters(480,18691
    struct ClusterHandlerPayload482,18756
        matroska_segment_c * const obj;ClusterHandlerPayload::obj484,18795
        bool stop_parsing;ClusterHandlerPayload::stop_parsing485,18835
bool matroska_segment_c::PreloadFamily(520,19671
bool matroska_segment_c::CompareSegmentUIDs(531,19884
bool matroska_segment_c::SameFamily(558,20659
bool matroska_segment_c::Preload(571,20994
bool matroska_segment_c::LoadSeekHeadItem(695,24957
void matroska_segment_c::FastSeek(793,27976
void matroska_segment_c::Seek(801,28223
int matroska_segment_c::FindTrackByBlock(868,30240
void matroska_segment_c::ComputeTrackPriority(888,30821
void matroska_segment_c::EnsureDuration(973,33649
bool matroska_segment_c::ESCreate(1069,36923
void matroska_segment_c::ESDestroy(1103,38044
int matroska_segment_c::BlockGet(1119,38401
    struct BlockPayload 1130,38753
        matroska_segment_c * const obj;BlockPayload::obj1131,38779
        EbmlParser         * const ep;BlockPayload::ep1132,38819
        demux_t            * const p_demuxer;BlockPayload::p_demuxer1133,38858
        KaxBlock          *& block;BlockPayload::block1134,38904
        KaxSimpleBlock    *& simpleblock;BlockPayload::simpleblock1135,38940
        int64_t            & i_duration;BlockPayload::i_duration1137,38983
        bool               & b_key_picture;BlockPayload::b_key_picture1138,39024
        bool               & b_discardable_picture;BlockPayload::b_discardable_picture1139,39068

demux/mkv/mkv.hpp,3969
#define VLC_MKV_MKV_HPP_26,1242
#define MATROSKA_COMPRESSION_NONE 101,3016
#define MATROSKA_COMPRESSION_ZLIB 102,3054
#define MATROSKA_COMPRESSION_BLIB 103,3092
#define MATROSKA_COMPRESSION_LZOX 104,3130
#define MATROSKA_COMPRESSION_HEADER 105,3168
    MATROSKA_ENCODING_SCOPE_ALL_FRAMES ::MATROSKA_ENCODING_SCOPE_ALL_FRAMES109,3214
    MATROSKA_ENCODING_SCOPE_PRIVATE ::MATROSKA_ENCODING_SCOPE_PRIVATE110,3258
    MATROSKA_ENCODING_SCOPE_NEXT ::MATROSKA_ENCODING_SCOPE_NEXT111,3299
#define MKVD_TIMECODESCALE 114,3358
#define MKV_IS_ID(116,3394
#define MKV_CHECKED_PTR_DECL(117,3468
class attachment_c126,3830
    attachment_c(attachment_c::attachment_c129,3859
    ~attachment_c(attachment_c::~attachment_c136,4101
    bool init(attachment_c::init139,4210
    const char* fileName(attachment_c::fileName145,4307
    const char* mimeType(attachment_c::mimeType146,4374
    int         size(attachment_c::size147,4441
    void          *p_data;attachment_c::p_data149,4493
    int            i_size;attachment_c::i_size151,4529
    std::string    psz_file_name;attachment_c::psz_file_name152,4556
    std::string    psz_mime_type;attachment_c::psz_mime_type153,4590
struct matroska_stream_c157,4654
    matroska_stream_c(matroska_stream_c::matroska_stream_c159,4681
    ~matroska_stream_c(matroska_stream_c::~matroska_stream_c160,4746
    IOCallback         *p_io_callback;matroska_stream_c::p_io_callback166,4840
    EbmlStream         *p_estream;matroska_stream_c::p_estream167,4879
    std::vector<matroska_segment_c*> segments;matroska_stream_c::segments169,4915
class PrivateTrackData176,5190
    virtual ~PrivateTrackData(PrivateTrackData::~PrivateTrackData179,5223
    virtual int32_t Init(PrivateTrackData::Init180,5258
class mkv_track_t183,5303
        typedef unsigned int track_id_t;mkv_track_t::track_id_t186,5335
        bool         b_default;mkv_track_t::b_default188,5377
        bool         b_enabled;mkv_track_t::b_enabled189,5409
        bool         b_forced;mkv_track_t::b_forced190,5441
        track_id_t   i_number;mkv_track_t::i_number191,5472
        unsigned int i_extra_data;mkv_track_t::i_extra_data193,5504
        uint8_t      *p_extra_data;mkv_track_t::p_extra_data194,5539
        std::string  codec;mkv_track_t::codec196,5576
        bool         b_dts_only;mkv_track_t::b_dts_only197,5604
        bool         b_pts_only;mkv_track_t::b_pts_only198,5637
        bool         b_no_duration;mkv_track_t::b_no_duration200,5671
        uint64_t     i_default_duration;mkv_track_t::i_default_duration201,5707
        float        f_timecodescale;mkv_track_t::f_timecodescale202,5748
        mtime_t      i_last_dts;mkv_track_t::i_last_dts203,5786
        uint64_t     i_skip_until_fpos;mkv_track_t::i_skip_until_fpos204,5819
        es_format_t fmt;mkv_track_t::fmt207,5880
        float       f_fps;mkv_track_t::f_fps208,5905
        es_out_id_t *p_es;mkv_track_t::p_es209,5932
        unsigned int i_original_rate;mkv_track_t::i_original_rate212,5980
        uint8_t i_chans_to_reorder;mkv_track_t::i_chans_to_reorder213,6018
        uint8_t pi_chan_table[mkv_track_t::pi_chan_table214,6101
        PrivateTrackData *p_sys;mkv_track_t::p_sys218,6187
        bool            b_inited;mkv_track_t::b_inited220,6221
        int             i_data_init;mkv_track_t::i_data_init222,6291
        uint8_t         *p_data_init;mkv_track_t::p_data_init223,6328
        std::string str_codec_name;mkv_track_t::str_codec_name226,6393
        int                    i_compression_type;mkv_track_t::i_compression_type229,6467
        uint32_t               i_encoding_scope;mkv_track_t::i_encoding_scope230,6518
        KaxContentCompSettings *p_compression_data;mkv_track_t::p_compression_data231,6567
        mtime_t i_seek_preroll;mkv_track_t::i_seek_preroll234,6671
        mtime_t i_codec_delay;mkv_track_t::i_codec_delay235,6703

video_chroma/cvpx_i420.c,128
struct picture_sys_t 36,1402
    CVPixelBufferRef pixelBuffer;37,1425
vlc_module_begin 44,1627
VIDEO_FILTER_WRAPPER(68,2334

codec/omxil/omxil.h,2247
#define OMX_SKIP64BIT25,1173
    BUF_STATE_NOT_OWNED 45,1603
    BUF_STATE_OWNED,46,1632
typedef struct OmxFifo52,1860
    vlc_mutex_t lock;54,1885
    vlc_cond_t  wait;55,1907
    OMX_BUFFERHEADERTYPE *p_first;p_first57,1930
    OMX_BUFFERHEADERTYPE **pp_last;pp_last58,1965
    int offset;60,2002
} OmxFifo;62,2019
typedef struct HwBuffer64,2031
    vlc_thread_t    dequeue_thread;66,2057
    bool            b_run;67,2093
    vlc_mutex_t     lock;68,2120
    vlc_cond_t      wait;69,2146
    picture_sys_t** inflight_picture;70,2172
    unsigned int    i_buffers;72,2278
    void            **pp_handles;pp_handles73,2309
    int             *i_states;i_states74,2343
    unsigned int    i_max_owned;75,2374
    unsigned int    i_owned;76,2407
    AWindowHandler *p_awh;p_awh79,2459
    native_window_priv_api_t *anwpriv;anwpriv80,2486
    native_window_priv *window_priv;window_priv81,2525
} HwBuffer;84,2570
typedef struct OmxPort86,2583
    bool b_valid;88,2608
    OMX_U32 i_port_index;89,2626
    OMX_HANDLETYPE omx_handle;90,2652
    OMX_PARAM_PORTDEFINITIONTYPE definition;91,2683
    es_format_t *p_fmt;p_fmt92,2728
    unsigned int i_frame_size;94,2753
    unsigned int i_frame_stride;95,2784
    unsigned int i_frame_stride_chroma_div;96,2817
    unsigned int i_buffers;98,2862
    OMX_BUFFERHEADERTYPE **pp_buffers;pp_buffers99,2890
    OmxFifo fifo;101,2930
    OmxFormatParam format_param;103,2949
    OMX_BOOL b_reconfigure;105,2983
    OMX_BOOL b_update_def;106,3011
    OMX_BOOL b_direct;107,3038
    OMX_BOOL b_flushed;108,3061
    HwBuffer *p_hwbuf;p_hwbuf110,3086
} OmxPort;112,3110
struct decoder_sys_t114,3122
    OMX_HANDLETYPE omx_handle;116,3145
    bool b_enc;118,3177
    char psz_component[psz_component120,3194
    char ppsz_components[ppsz_components121,3243
    unsigned int components;122,3320
    int i_quirks;123,3349
    OmxEventQueue event_queue;125,3368
    OmxPort *p_ports;p_ports127,3400
    unsigned int ports;128,3422
    OmxPort in;129,3446
    OmxPort out;130,3462
    bool b_error;132,3480
    bool b_aspect_ratio_handled;134,3499
    date_t end_date;136,3533
    uint8_t i_nal_size_length;138,3555
    int b_use_pts;139,3630

text_renderer/tdummy.c,59
vlc_module_begin 34,1358
static int OpenRenderer(51,1893

audio_output/sndio.c,541
vlc_module_begin 37,1309
struct aout_sys_t54,1898
    struct sio_hdl *hdl;hdl56,1918
    int started;57,1943
    int delay;58,1960
    unsigned rate;59,1975
    unsigned volume;60,1994
    bool mute;61,2015
static int Start 65,2078
static void Stop 206,5544
static void PositionChanged 213,5649
static int TimeGet 222,5818
static void Play 232,6039
static void Flush 241,6260
static void VolumeChanged 252,6460
static int VolumeSet 263,6786
static int MuteSet 279,7129
static int Open 290,7333
static void Close 304,7660

demux/adaptive/playlist/Segment.cpp,1072
const int ISegment::SEQUENCE_INVALID 42,1541
const int ISegment::SEQUENCE_FIRST 43,1583
ISegment::ISegment(45,1626
ISegment::~ISegment(60,1955
void ISegment::onChunkDownload(65,2016
SegmentChunk* ISegment::toChunk(70,2103
bool ISegment::isTemplate(94,2895
void ISegment::setByteRange(99,2956
void ISegment::setSequenceNumber(105,3059
uint64_t ISegment::getSequenceNumber(110,3148
size_t ISegment::getOffset(115,3219
void ISegment::debug(120,3281
bool ISegment::contains(134,3764
int ISegment::compare(142,3942
int ISegment::getClassId(162,4325
Segment::Segment(167,4383
void Segment::addSubSegment(174,4501
Segment::~Segment(186,4869
void                    Segment::setSourceUrl 193,5016
void Segment::debug(199,5164
Url Segment::getUrlSegment(216,5600
std::vector<ISegment*> Segment::subSegments(231,5857
InitSegment::InitSegment(247,6193
IndexSegment::IndexSegment(254,6334
SubSegment::SubSegment(261,6479
Url SubSegment::getUrlSegment(269,6678
std::vector<ISegment*> SubSegment::subSegments(274,6755
void SubSegment::addSubSegment(281,6885

video_chroma/i420_rgb_sse2.h,1666
#define SSE2_CALL(26,1191
#define SSE2_END 38,1647
#define SSE2_INIT_16_ALIGNED 40,1713
#define SSE2_INIT_16_UNALIGNED 47,2116
#define SSE2_INIT_32_ALIGNED 55,2599
#define SSE2_INIT_32_UNALIGNED 62,3002
#define SSE2_YUV_MUL 70,3485
#define SSE2_YUV_ADD 121,7408
#define SSE2_UNPACK_15_ALIGNED 149,9491
#define SSE2_UNPACK_15_UNALIGNED 178,11654
#define SSE2_UNPACK_16_ALIGNED 207,13817
#define SSE2_UNPACK_16_UNALIGNED 238,16140
#define SSE2_UNPACK_32_ARGB_ALIGNED 269,18463
#define SSE2_UNPACK_32_ARGB_UNALIGNED 289,19906
#define SSE2_UNPACK_32_RGBA_ALIGNED 309,21349
#define SSE2_UNPACK_32_RGBA_UNALIGNED 329,22792
#define SSE2_UNPACK_32_BGRA_ALIGNED 349,24235
#define SSE2_UNPACK_32_BGRA_UNALIGNED 369,25678
#define SSE2_UNPACK_32_ABGR_ALIGNED 389,27121
#define SSE2_UNPACK_32_ABGR_UNALIGNED 409,28564
#define SSE2_CALL(435,30091
#define SSE2_END 442,30337
#define SSE2_INIT_16_ALIGNED 444,30369
#define SSE2_INIT_16_UNALIGNED 450,30597
#define SSE2_INIT_32_ALIGNED 457,30870
#define SSE2_INIT_32_UNALIGNED 463,31098
#define SSE2_YUV_MUL 470,31371
#define SSE2_YUV_ADD 502,32752
#define SSE2_UNPACK_15_ALIGNED 525,33641
#define SSE2_UNPACK_15_UNALIGNED 548,34732
#define SSE2_UNPACK_16_ALIGNED 571,35824
#define SSE2_UNPACK_16_UNALIGNED 594,36915
#define SSE2_UNPACK_32_ARGB_ALIGNED 617,38006
#define SSE2_UNPACK_32_ARGB_UNALIGNED 636,38978
#define SSE2_UNPACK_32_RGBA_ALIGNED 655,39950
#define SSE2_UNPACK_32_RGBA_UNALIGNED 674,40922
#define SSE2_UNPACK_32_BGRA_ALIGNED 693,41894
#define SSE2_UNPACK_32_BGRA_UNALIGNED 712,42866
#define SSE2_UNPACK_32_ABGR_ALIGNED 731,43838
#define SSE2_UNPACK_32_ABGR_UNALIGNED 750,44810

codec/wmafixed/wmadec.h,2744
#define _WMADEC_H21,831
#undef TRACE30,974
#define BLOCK_MIN_BITS 33,1009
#define BLOCK_MAX_BITS 34,1034
#define BLOCK_MAX_SIZE 35,1060
#define BLOCK_NB_SIZES 37,1106
#define HIGH_BAND_MAX_SIZE 40,1199
#define NB_LSP_COEFS 42,1230
#define MAX_CODED_SUPERFRAME_SIZE 45,1291
#define M_PI_F 47,1332
#define TWO_M_PI_F 48,1378
#define MAX_CHANNELS 50,1423
#define NOISE_TAB_SIZE 52,1447
#define LSP_POW_BITS 54,1476
typedef struct WMADecodeContext56,1500
    GetBitContext gb;58,1534
    int nb_block_sizes;60,1557
    int sample_rate;62,1611
    int nb_channels;63,1632
    int bit_rate;64,1653
    int version;65,1671
    int block_align;66,1731
    int use_bit_reservoir;67,1752
    int use_variable_block_len;68,1779
    int use_exp_vlc;69,1811
    int use_noise_coding;70,1881
    int byte_offset_bits;71,1947
    VLC exp_vlc;72,1973
    int exponent_sizes[exponent_sizes73,1990
    uint16_t exponent_bands[exponent_bands74,2030
    int high_band_start[high_band_start75,2079
    int coefs_start;76,2159
    int coefs_end[coefs_end77,2217
    int exponent_high_sizes[exponent_high_sizes78,2291
    int exponent_high_bands[exponent_high_bands79,2336
    VLC hgain_vlc;80,2401
    int high_band_coded[high_band_coded83,2458
    int high_band_values[high_band_values84,2517
    VLC coef_vlc[coef_vlc87,2644
    uint16_t *run_table[run_table88,2665
    uint16_t *level_table[level_table89,2693
    int frame_len;91,2744
    int frame_len_bits;92,2799
    int reset_block_lengths;95,2884
    int block_len_bits;96,2913
    int next_block_len_bits;97,2972
    int prev_block_len_bits;98,3033
    int block_len;99,3094
    int block_num;100,3143
    int block_pos;101,3198
    uint8_t ms_stereo;102,3249
    uint8_t channel_coded[channel_coded103,3307
    int exponents_bsize[exponents_bsize104,3379
    int32_t exponents[exponents105,3455
    int32_t max_exponent[max_exponent106,3508
    int16_t coefs1[coefs1107,3548
    int32_t (*coefs)coefs108,3598
    MDCTContext mdct_ctx[mdct_ctx109,3650
    int32_t *windows[windows110,3692
    int32_t frame_out[frame_out112,3801
    uint8_t last_superframe[last_superframe114,3884
    int last_bitoffset;115,3964
    int last_superframe_len;116,3988
    int32_t *noise_table;noise_table117,4017
    int noise_index;118,4043
    int32_t noise_mult;119,4064
    int32_t lsp_cos_table[lsp_cos_table121,4179
    int64_t lsp_pow_e_table[lsp_pow_e_table122,4222
    int32_t lsp_pow_m_table1[lsp_pow_m_table1123,4256
    int32_t lsp_pow_m_table2[lsp_pow_m_table2124,4307
    int bit_offset;127,4406
    int nb_frames;128,4426
    int current_frame;129,4445
    int frame_count;133,4483
WMADecodeContext;136,4513

video_filter/rss.c,2893
static const int pi_color_values[pi_color_values65,2452
static const char *const ppsz_color_descriptions[ppsz_color_descriptions70,2756
typedef struct rss_item_t81,3309
    char *psz_title;psz_title83,3337
    char *psz_description;psz_description84,3358
    char *psz_link;psz_link85,3385
} rss_item_t;86,3405
typedef struct rss_feed_t88,3420
    char *psz_url;psz_url90,3448
    char *psz_title;psz_title91,3467
    char *psz_description;psz_description92,3488
    char *psz_link;psz_link93,3515
    char *psz_image;psz_image94,3535
    picture_t *p_pic;p_pic95,3556
    int i_items;97,3579
    rss_item_t *p_items;p_items98,3596
} rss_feed_t;99,3621
struct filter_sys_t101,3636
    vlc_mutex_t lock;103,3658
    vlc_timer_t timer;104,3680
    bool b_fetched;105,3741
    int i_xoff,107,3762
    int i_xoff, i_yoff;107,3762
    int i_pos;108,3844
    int i_speed;109,3928
    int i_length;110,3945
    char *psz_marquee;psz_marquee112,3964
    text_style_t *p_style;p_style114,4012
    mtime_t last_date;116,4059
    int i_feeds;118,4083
    rss_feed_t *p_feeds;p_feeds119,4100
    bool b_images;121,4126
    int i_title;122,4145
    int i_cur_feed;124,4163
    int i_cur_item;125,4183
    int i_cur_char;126,4203
#define MSG_TEXT 129,4227
#define MSG_LONGTEXT 130,4260
#define SPEED_TEXT 131,4328
#define SPEED_LONGTEXT 132,4368
#define LENGTH_TEXT 133,4461
#define LENGTH_LONGTEXT 134,4498
#define TTL_TEXT 136,4604
#define TTL_LONGTEXT 137,4640
#define IMAGE_TEXT 139,4783
#define IMAGE_LONGTEXT 140,4820
#define POSX_TEXT 142,4884
#define POSX_LONGTEXT 143,4917
#define POSY_TEXT 144,4983
#define POSY_LONGTEXT 145,5016
#define OPACITY_TEXT 146,5074
#define OPACITY_LONGTEXT 147,5109
#define SIZE_TEXT 150,5241
#define SIZE_LONGTEXT 151,5283
#define COLOR_TEXT 154,5382
#define COLOR_LONGTEXT 155,5413
#define POS_TEXT 160,5723
#define POS_LONGTEXT 161,5760
#define TITLE_TEXT 166,5965
#define TITLE_LONGTEXT 167,6009
#define RSS_HELP 169,6148
static const int pi_pos_values[pi_pos_values171,6213
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions172,6280
enum title_modes 176,6482
    default_title=177,6501
    hide_title,178,6523
    prepend_title,179,6539
    scroll_title 180,6558
static const int pi_title_modes[pi_title_modes182,6579
static const char *const ppsz_title_modes[ppsz_title_modes183,6675
#define CFG_PREFIX 186,6809
vlc_module_begin 191,7016
static int CreateFilter(239,9165
static void DestroyFilter(336,12536
static subpicture_t *Filter(Filter355,13224
#undef LoadImage 550,19731
static picture_t *LoadImage(LoadImage555,19990
static char *removeWhiteChars(removeWhiteChars605,21576
static int ParseUrls(631,22413
static bool ParseFeed(686,23790
static rss_feed_t* FetchRSS(887,30292
static void FreeRSS(970,32760
static void Fetch(994,33510

demux/gme.c,499
vlc_module_begin 41,1326
#define RATE 50,1565
struct demux_sys_t52,1585
    Music_Emu   *emu;emu54,1606
    unsigned     track_id;55,1628
    es_out_id_t *es;es57,1656
    date_t       pts;58,1677
    input_title_t **titlev;titlev60,1700
    unsigned        titlec;61,1728
static int Open 70,1943
static void Close 164,4462
static gme_err_t ReaderStream 177,4751
static gme_err_t ReaderBlock 185,4943
#define SAMPLES 198,5258
static int Demux 200,5287
static int Control 237,6267

audio_output/pulse.c,1878
vlc_module_begin 41,1507
struct sink57,2133
    struct sink *next;next59,2147
    uint32_t index;60,2170
    char name[name61,2190
struct aout_sys_t64,2212
    pa_stream *stream;stream66,2232
    pa_context *context;context67,2297
    pa_threaded_mainloop *mainloop;mainloop68,2360
    pa_time_event *trigger;trigger69,2422
    pa_cvolume cvolume;70,2482
    mtime_t first_pts;71,2539
    pa_volume_t volume_force;73,2597
    pa_stream_flags_t flags_force;74,2671
    char *sink_force;sink_force75,2749
    struct sink *sinks;sinks77,2819
static void VolumeReport(80,2884
static void sink_add_cb(89,3102
static void sink_mod_cb(117,3831
static void sink_del(131,4190
static void sink_event(149,4623
static void stream_start_now(174,5388
static void stream_stop(188,5721
static void stream_trigger_cb(203,6062
static void stream_start(224,6731
static void stream_latency_cb(254,7636
static void stream_state_cb(268,8028
static void stream_buffer_attr_cb(282,8369
static void stream_event_cb(292,8714
static void stream_moved_cb(313,9385
static void stream_overflow_cb(322,9623
static void stream_started_cb(336,9975
static void stream_suspended_cb(344,10122
static void stream_underflow_cb(352,10273
static int stream_wait(360,10424
static void sink_input_info_cb(374,10786
static void sink_input_event(389,11175
static void context_cb(413,11854
static int TimeGet(441,12699
static void data_free(462,13306
static void *data_convert(data_convert470,13449
static void Play(488,13952
static void Pause(531,15261
static void Flush(554,15855
static int VolumeSet(575,16368
static int MuteSet(622,17895
static int StreamMove(646,18579
static int strcmp_void(677,19465
static const char *str_map(str_map683,19587
static int Start(693,19887
static void Stop(957,29672
static int Open(983,30551
static void Close(1039,32179

stream_out/record.c,1339
#define DST_PREFIX_TEXT 50,2002
#define DST_PREFIX_LONGTEXT 51,2051
#define SOUT_CFG_PREFIX 54,2149
vlc_module_begin 56,2189
struct sout_stream_id_sys_t83,2929
    es_format_t fmt;85,2959
    block_t *p_first;p_first87,2981
    block_t **pp_last;pp_last88,3003
    sout_stream_id_sys_t *id;id90,3027
    bool b_wait_key;92,3058
    bool b_wait_start;93,3079
struct sout_stream_sys_t96,3106
    char *psz_prefix;psz_prefix98,3133
    sout_stream_t *p_out;p_out100,3156
    mtime_t     i_date_start;102,3183
    size_t      i_size;103,3213
    mtime_t     i_max_wait;105,3238
    size_t      i_max_size;106,3266
    bool        b_drop;108,3295
    int              i_id;110,3320
    sout_stream_id_sys_t **id;id111,3347
    mtime_t     i_dts_start;112,3378
static int Open(121,3720
static void Close(167,5031
static sout_stream_id_sys_t *Add(Add183,5521
static void Del(204,5992
static int Send(231,6546
    const char  psz_muxer[psz_muxer257,7365
    const char  psz_extension[psz_extension258,7395
    int         i_es_max;259,7429
    vlc_fourcc_t codec[codec260,7455
} muxer_properties_t;261,7484
#define M(263,7507
static const muxer_properties_t p_muxers[p_muxers267,7768
#undef M308,9926
static int OutputNew(310,9936
static void OutputStart(374,11456
static void OutputSend(574,17172

demux/adaptive/tools/MovingAverage.hpp,843
#define MOVINGAVERAGE_HPP21,997
namespace adaptive26,1062
    class MovingAverageSumadaptive::MovingAverageSum29,1106
            MovingAverageSum<adaptive::MovingAverageSum::MovingAverageSum32,1155
            void operator()(adaptive::MovingAverageSum::operator()33,1213
            T sum;adaptive::MovingAverageSum::sum37,1345
            T prev;adaptive::MovingAverageSum::prev39,1381
    class MovingAverageadaptive::MovingAverage43,1432
            std::list<T> values;adaptive::MovingAverage::values50,1561
            T previous;adaptive::MovingAverage::previous51,1594
            unsigned maxobs;adaptive::MovingAverage::maxobs52,1618
            T avg;adaptive::MovingAverage::avg53,1647
    MovingAverage<T>::MovingAverage(adaptive::MovingAverage57,1697
    T MovingAverage<T>::push(adaptive::push66,1899

codec/omxil/OMX_Broadcom.h,50550
#define OMX_Broadcom_h31,1597
#define OMX_BUFFERFLAG_TIME_UNKNOWN 37,1732
#define OMX_BUFFERFLAG_CAPTURE_PREVIEW 42,1954
#define OMX_BUFFERFLAG_ENDOFNAL 46,2068
#define OMX_BUFFERFLAG_FRAGMENTLIST 50,2219
#define OMX_BUFFERFLAG_DISCONTINUITY 54,2354
#define OMX_BUFFERFLAG_CODECSIDEINFO 63,2740
   #define omx_ticks_from_s64(71,3063
   #define omx_ticks_to_s64(72,3100
   static inline OMX_TICKS omx_ticks_from_s64(74,3141
   #define omx_ticks_to_s64(75,3291
typedef struct OMX_BUFFERFRAGMENTTYPE 79,3434
   OMX_PTR pBuffer;80,3474
   OMX_U32 nLen;81,3574
} OMX_BUFFERFRAGMENTTYPE;82,3632
typedef struct OMX_PARAM_IJGSCALINGTYPE 85,3734
   OMX_U32 nSize;86,3776
   OMX_VERSIONTYPE nVersion;87,3794
   OMX_U32 nPortIndex;88,3823
   OMX_BOOL bEnabled;89,3846
} OMX_PARAM_IJGSCALINGTYPE;90,3868
typedef enum OMX_DISPLAYTRANSFORMTYPE{OMX_DISPLAYTRANSFORMTYPE201,8296
   OMX_DISPLAY_ROT0 202,8335
   OMX_DISPLAY_MIRROR_ROT0 203,8360
   OMX_DISPLAY_MIRROR_ROT180 204,8392
   OMX_DISPLAY_ROT180 205,8426
   OMX_DISPLAY_MIRROR_ROT90 206,8453
   OMX_DISPLAY_ROT270 207,8486
   OMX_DISPLAY_ROT90 208,8513
   OMX_DISPLAY_MIRROR_ROT270 209,8539
   OMX_DISPLAY_DUMMY 210,8573
   OMX_DISPLAY_DUMMY = 0x7FFFFFFFx7FFFFFFF210,8573
} OMX_DISPLAYTRANSFORMTYPE;211,8607
typedef struct OMX_DISPLAYRECTTYPE 213,8636
   OMX_S16 x_offset;214,8673
   OMX_S16 y_offset;215,8694
   OMX_S16 width;216,8715
   OMX_S16 height;217,8733
} OMX_DISPLAYRECTTYPE;218,8752
typedef enum OMX_DISPLAYMODETYPE 220,8776
   OMX_DISPLAY_MODE_FILL 221,8811
   OMX_DISPLAY_MODE_LETTERBOX 222,8841
   OMX_DISPLAY_MODE_DUMMY 223,8876
   OMX_DISPLAY_MODE_DUMMY = 0x7FFFFFFFx7FFFFFFF223,8876
} OMX_DISPLAYMODETYPE;224,8915
typedef enum OMX_DISPLAYSETTYPE 226,8939
   OMX_DISPLAY_SET_NONE 227,8973
   OMX_DISPLAY_SET_NUM 228,9002
   OMX_DISPLAY_SET_FULLSCREEN 229,9030
   OMX_DISPLAY_SET_TRANSFORM 230,9065
   OMX_DISPLAY_SET_DEST_RECT 231,9099
   OMX_DISPLAY_SET_SRC_RECT 232,9133
   OMX_DISPLAY_SET_SRC_RECT = 0x10,x10232,9133
   OMX_DISPLAY_SET_MODE 233,9169
   OMX_DISPLAY_SET_MODE = 0x20,x20233,9169
   OMX_DISPLAY_SET_PIXEL 234,9201
   OMX_DISPLAY_SET_PIXEL = 0x40,x40234,9201
   OMX_DISPLAY_SET_NOASPECT 235,9234
   OMX_DISPLAY_SET_NOASPECT = 0x80,x80235,9234
   OMX_DISPLAY_SET_LAYER 236,9270
   OMX_DISPLAY_SET_LAYER = 0x100,x100236,9270
   OMX_DISPLAY_SET_COPYPROTECT 237,9304
   OMX_DISPLAY_SET_COPYPROTECT = 0x200,x200237,9304
   OMX_DISPLAY_SET_ALPHA 238,9344
   OMX_DISPLAY_SET_ALPHA = 0x400,x400238,9344
   OMX_DISPLAY_SET_DUMMY 239,9378
   OMX_DISPLAY_SET_DUMMY = 0x7FFFFFFFx7FFFFFFF239,9378
} OMX_DISPLAYSETTYPE;240,9416
typedef struct OMX_CONFIG_DISPLAYREGIONTYPE 242,9439
   OMX_U32 nSize;243,9485
   OMX_VERSIONTYPE nVersion;244,9503
   OMX_U32 nPortIndex;245,9532
   OMX_DISPLAYSETTYPE set;246,9555
   OMX_U32 num;247,9582
   OMX_BOOL fullscreen;248,9598
   OMX_DISPLAYTRANSFORMTYPE transform;249,9622
   OMX_DISPLAYRECTTYPE dest_rect;250,9661
   OMX_DISPLAYRECTTYPE src_rect;251,9695
   OMX_BOOL noaspect;252,9728
   OMX_DISPLAYMODETYPE mode;253,9750
   OMX_U32 pixel_x;254,9779
   OMX_U32 pixel_y;255,9799
   OMX_S32 layer;256,9819
   OMX_BOOL copyprotect_required;257,9837
   OMX_U32 alpha;258,9871
   OMX_U32 wfc_context_width;259,9889
   OMX_U32 wfc_context_height;260,9919
} OMX_CONFIG_DISPLAYREGIONTYPE;261,9950
typedef enum OMX_SOURCETYPE 305,11634
   OMX_SOURCE_WHITE 306,11664
   OMX_SOURCE_BLACK 307,11712
   OMX_SOURCE_DIAGONAL 308,11760
   OMX_SOURCE_NOISE 309,11818
   OMX_SOURCE_RANDOM 310,11869
   OMX_SOURCE_COLOUR 311,11935
   OMX_SOURCE_BLOCKS 312,12002
   OMX_SOURCE_SWIRLY,313,12070
   OMX_SOURCE_DUMMY 314,12142
   OMX_SOURCE_DUMMY = 0x7FFFFFFFx7FFFFFFF314,12142
} OMX_SOURCETYPE;315,12175
typedef struct OMX_PARAM_SOURCETYPE 317,12194
   OMX_U32 nSize;318,12232
   OMX_VERSIONTYPE nVersion;319,12250
   OMX_U32 nPortIndex;320,12279
   OMX_SOURCETYPE eType;321,12302
   OMX_U32 nParam;322,12327
   OMX_U32 nFrameCount;323,12346
   OMX_U32 xFrameRate;324,12370
} OMX_PARAM_SOURCETYPE;325,12393
typedef struct OMX_PARAM_SOURCESEEDTYPE 348,13453
   OMX_U32 nSize;349,13495
   OMX_VERSIONTYPE nVersion;350,13513
   OMX_U32 nPortIndex;351,13542
   OMX_U16 nData[nData352,13565
} OMX_PARAM_SOURCESEEDTYPE;353,13587
typedef enum OMX_RESIZEMODETYPE 361,13824
   OMX_RESIZE_NONE,362,13858
   OMX_RESIZE_CROP,363,13878
   OMX_RESIZE_BOX,364,13898
   OMX_RESIZE_BYTES,365,13917
   OMX_RESIZE_DUMMY 366,13938
   OMX_RESIZE_DUMMY = 0x7FFFFFFFx7FFFFFFF366,13938
} OMX_RESIZEMODETYPE;367,13971
typedef struct OMX_PARAM_RESIZETYPE 369,13994
   OMX_U32 nSize;370,14032
   OMX_VERSIONTYPE nVersion;371,14050
   OMX_U32 nPortIndex;372,14079
   OMX_RESIZEMODETYPE eMode;373,14102
   OMX_U32 nMaxWidth;374,14131
   OMX_U32 nMaxHeight;375,14153
   OMX_U32 nMaxBytes;376,14176
   OMX_BOOL bPreserveAspectRatio;377,14198
   OMX_BOOL bAllowUpscaling;378,14232
} OMX_PARAM_RESIZETYPE;379,14261
typedef struct OMX_PARAM_TESTINTERFACETYPE 393,14877
   OMX_U32 nSize;394,14922
   OMX_VERSIONTYPE nVersion;395,14940
   OMX_BOOL bTest;396,14969
   OMX_BOOL bSetExtra;397,14988
   OMX_U32 nExtra;398,15011
   OMX_BOOL bSetError;399,15030
   OMX_BOOL stateError[stateError400,15053
} OMX_PARAM_TESTINTERFACETYPE;401,15080
typedef struct OMX_CONFIG_VISUALISATIONTYPE 404,15167
   OMX_U32 nSize;405,15213
   OMX_VERSIONTYPE nVersion;406,15231
   OMX_U32 nPortIndex;407,15260
   OMX_U8 name[name408,15283
   OMX_U8 property[property409,15303
} OMX_CONFIG_VISUALISATIONTYPE;410,15327
typedef struct OMX_CONFIG_BRCMAUDIODESTINATIONTYPE 432,16247
   OMX_U32 nSize;433,16300
   OMX_VERSIONTYPE nVersion;434,16318
   OMX_U8 sName[sName435,16347
} OMX_CONFIG_BRCMAUDIODESTINATIONTYPE;436,16368
typedef struct OMX_CONFIG_BRCMAUDIOSOURCETYPE 446,16703
   OMX_U32 nSize;447,16751
   OMX_VERSIONTYPE nVersion;448,16769
   OMX_U8 sName[sName449,16798
} OMX_CONFIG_BRCMAUDIOSOURCETYPE;450,16819
typedef struct OMX_CONFIG_BRCMAUDIODOWNMIXCOEFFICIENTS 460,17168
   OMX_U32 nSize;461,17225
   OMX_VERSIONTYPE nVersion;462,17243
   OMX_U32 nPortIndex;463,17272
   OMX_U32 coeff[coeff464,17295
} OMX_CONFIG_BRCMAUDIODOWNMIXCOEFFICIENTS;465,17317
typedef enum OMX_PLAYMODETYPE 480,18127
   OMX_PLAYMODE_NORMAL,481,18159
   OMX_PLAYMODE_FF,482,18183
   OMX_PLAYMODE_REW,483,18203
   OMX_PLAYMODE_DUMMY 484,18224
   OMX_PLAYMODE_DUMMY = 0x7FFFFFFFx7FFFFFFF484,18224
} OMX_PLAYMODETYPE;485,18259
typedef struct OMX_CONFIG_PLAYMODETYPE 487,18280
   OMX_U32 nSize;488,18321
   OMX_VERSIONTYPE nVersion;489,18339
   OMX_PLAYMODETYPE eMode;490,18368
} OMX_CONFIG_PLAYMODETYPE;491,18395
typedef enum OMX_DELIVERYFORMATTYPE 502,18817
   OMX_DELIVERYFORMAT_STREAM,503,18855
   OMX_DELIVERYFORMAT_SINGLE_PACKET,504,18928
   OMX_DELIVERYFORMAT_DUMMY 505,19010
   OMX_DELIVERYFORMAT_DUMMY = 0x7FFFFFFFx7FFFFFFF505,19010
} OMX_DELIVERYFORMATTYPE;506,19051
typedef struct OMX_PARAM_DELIVERYFORMATTYPE 508,19078
   OMX_U32 nSize;509,19124
   OMX_VERSIONTYPE nVersion;510,19142
   OMX_U32 nPortIndex;511,19171
   OMX_DELIVERYFORMATTYPE eFormat;512,19194
} OMX_PARAM_DELIVERYFORMATTYPE;513,19229
typedef struct OMX_PARAM_CODECCONFIGTYPE 517,19316
   OMX_U32 nSize;518,19359
   OMX_VERSIONTYPE nVersion;519,19377
   OMX_U32 nPortIndex;520,19406
   OMX_U32 bCodecConfigIsComplete;521,19429
   OMX_U8 nData[nData522,19464
} OMX_PARAM_CODECCONFIGTYPE;523,19484
typedef struct OMX_PARAM_STILLSFUNCTIONTYPE 536,19940
   OMX_U32 nSize;537,19986
   OMX_VERSIONTYPE nVersion;538,20004
   OMX_BOOL bBuffer;539,20033
   OMX_PTR (*pOpenFunc)pOpenFunc540,20054
   OMX_PTR (*pCloseFunc)pCloseFunc541,20085
   OMX_PTR (*pReadFunc)pReadFunc542,20117
   OMX_PTR (*pSeekFunc)pSeekFunc543,20148
   OMX_PTR (*pWriteFunc)pWriteFunc544,20179
} OMX_PARAM_STILLSFUNCTIONTYPE;545,20211
typedef void* OMX_BUFFERADDRESSHANDLETYPE;547,20244
typedef struct OMX_PARAM_BUFFERADDRESSTYPE 549,20288
   OMX_U32 nSize;550,20333
   OMX_VERSIONTYPE nVersion;551,20351
   OMX_U32 nPortIndex;552,20380
   OMX_U32 nAllocLen;553,20403
   OMX_BUFFERADDRESSHANDLETYPE handle;554,20425
} OMX_PARAM_BUFFERADDRESSTYPE;555,20464
typedef struct OMX_PARAM_TUNNELSETUPTYPE 557,20496
   OMX_U32 nSize;558,20539
   OMX_VERSIONTYPE nVersion;559,20557
   OMX_U32 nPortIndex;560,20586
   OMX_TUNNELSETUPTYPE sSetup;561,20609
} OMX_PARAM_TUNNELSETUPTYPE;562,20640
typedef struct OMX_PARAM_BRCMPORTEGLTYPE 565,20759
   OMX_U32 nSize;566,20802
   OMX_VERSIONTYPE nVersion;567,20820
   OMX_U32 nPortIndex;568,20849
   OMX_BOOL bPortIsEGL;569,20872
} OMX_PARAM_BRCMPORTEGLTYPE;570,20896
typedef struct OMX_CONFIG_IMAGEFILTERPARAMSTYPE 575,21009
   OMX_U32 nSize;576,21059
   OMX_VERSIONTYPE nVersion;577,21077
   OMX_U32 nPortIndex;578,21106
   OMX_IMAGEFILTERTYPE eImageFilter;579,21129
   OMX_U32 nNumParams;580,21166
   OMX_U32 nParams[nParams581,21189
} OMX_CONFIG_IMAGEFILTERPARAMSTYPE;582,21212
typedef struct OMX_CONFIG_TRANSITIONCONTROLTYPE 626,22462
   OMX_U32 nSize;627,22512
   OMX_VERSIONTYPE nVersion;628,22530
   OMX_U32 nPortIndex;629,22559
   OMX_U32 nPosStart;630,22582
   OMX_U32 nPosEnd;631,22604
   OMX_S32 nPosIncrement;632,22624
   OMX_TICKS nFrameIncrement;633,22650
   OMX_BOOL bSwapInputs;634,22680
   OMX_U8 name[name635,22705
   OMX_U8 property[property636,22725
} OMX_CONFIG_TRANSITIONCONTROLTYPE;637,22749
typedef enum OMX_AUDIOMONOTRACKOPERATIONSTYPE 668,24086
   OMX_AUDIOMONOTRACKOPERATIONS_NOP,669,24134
   OMX_AUDIOMONOTRACKOPERATIONS_L_TO_R,670,24171
   OMX_AUDIOMONOTRACKOPERATIONS_R_TO_L,671,24211
   OMX_AUDIOMONOTRACKOPERATIONS_DUMMY 672,24251
   OMX_AUDIOMONOTRACKOPERATIONS_DUMMY = 0x7FFFFFFFx7FFFFFFF672,24251
} OMX_AUDIOMONOTRACKOPERATIONSTYPE 673,24302
typedef struct OMX_CONFIG_AUDIOMONOTRACKCONTROLTYPE 675,24340
   OMX_U32 nSize;676,24394
   OMX_VERSIONTYPE nVersion;677,24412
   OMX_U32 nPortIndex;678,24441
   OMX_AUDIOMONOTRACKOPERATIONSTYPE eMode;679,24464
} OMX_CONFIG_AUDIOMONOTRACKCONTROLTYPE;680,24507
typedef enum OMX_CAMERAIMAGEPOOLINPUTMODETYPE 691,25000
   OMX_CAMERAIMAGEPOOLINPUTMODE_ONEPOOL,692,25048
   OMX_CAMERAIMAGEPOOLINPUTMODE_TWOPOOLS,700,25708
} OMX_CAMERAIMAGEPOOLINPUTMODETYPE;706,26182
typedef struct OMX_PARAM_CAMERAIMAGEPOOLTYPE 708,26219
   OMX_U32 nSize;709,26266
   OMX_VERSIONTYPE nVersion;710,26284
   OMX_U32 nNumHiResVideoFrames;711,26313
   OMX_U32 nHiResVideoWidth;712,26346
   OMX_U32 nHiResVideoHeight;713,26375
   OMX_COLOR_FORMATTYPE eHiResVideoType;714,26405
   OMX_U32 nNumHiResStillsFrames;715,26446
   OMX_U32 nHiResStillsWidth;716,26480
   OMX_U32 nHiResStillsHeight;717,26510
   OMX_COLOR_FORMATTYPE eHiResStillsType;718,26541
   OMX_U32 nNumLoResFrames;719,26583
   OMX_U32 nLoResWidth;720,26611
   OMX_U32 nLoResHeight;721,26635
   OMX_COLOR_FORMATTYPE eLoResType;722,26660
   OMX_U32 nNumSnapshotFrames;723,26696
   OMX_COLOR_FORMATTYPE eSnapshotType;724,26727
   OMX_CAMERAIMAGEPOOLINPUTMODETYPE eInputPoolMode;725,26766
   OMX_U32 nNumInputVideoFrames;726,26818
   OMX_U32 nInputVideoWidth;727,26851
   OMX_U32 nInputVideoHeight;728,26880
   OMX_COLOR_FORMATTYPE eInputVideoType;729,26910
   OMX_U32 nNumInputStillsFrames;730,26951
   OMX_U32 nInputStillsWidth;731,26985
   OMX_U32 nInputStillsHeight;732,27015
   OMX_COLOR_FORMATTYPE eInputStillsType;733,27046
} OMX_PARAM_CAMERAIMAGEPOOLTYPE;734,27088
typedef struct OMX_PARAM_IMAGEPOOLSIZETYPE 751,27873
   OMX_U32 nSize;752,27918
   OMX_VERSIONTYPE nVersion;753,27936
   OMX_U32 width;754,27965
   OMX_U32 height;755,27983
   OMX_U32 num_pages;756,28002
} OMX_PARAM_IMAGEPOOLSIZETYPE;757,28024
typedef struct opaque_vc_pool_s OMX_BRCM_POOL_T;768,28371
typedef struct OMX_PARAM_IMAGEPOOLEXTERNALTYPE 770,28421
   OMX_U32 nSize;771,28470
   OMX_VERSIONTYPE nVersion;772,28488
   OMX_BRCM_POOL_T *image_pool;image_pool773,28517
   OMX_BRCM_POOL_T *image_pool2;image_pool2774,28549
   OMX_BRCM_POOL_T *image_pool3;image_pool3775,28582
   OMX_BRCM_POOL_T *image_pool4;image_pool4776,28615
   OMX_BRCM_POOL_T *image_pool5;image_pool5777,28648
} OMX_PARAM_IMAGEPOOLEXTERNALTYPE;778,28681
typedef struct OMX_PARAM_RUTILFIFOINFOTYPE 786,28851
   OMX_U32 nSize;787,28896
   OMX_VERSIONTYPE nVersion;788,28914
   OMX_U32 nPortIndex;789,28943
   struct _IL_FIFO_T *pILFifo;pILFifo790,28966
} OMX_PARAM_RUTILFIFOINFOTYPE;791,28997
typedef struct OMX_PARAM_ILFIFOCONFIG 794,29106
   OMX_U32 nSize;795,29146
   OMX_VERSIONTYPE nVersion;796,29164
   OMX_U32 nPortIndex;797,29193
   OMX_U32 nDataSize;798,29216
   OMX_U32 nHeaderCount;799,29287
} OMX_PARAM_ILFIFOCONFIG;800,29357
typedef struct OMX_CONFIG_CAMERASENSORMODETYPE 806,29517
   OMX_U32 nSize;807,29566
   OMX_VERSIONTYPE nVersion;808,29584
   OMX_U32 nPortIndex;809,29613
   OMX_U32 nModeIndex;810,29636
   OMX_U32 nNumModes;811,29659
   OMX_U32 nWidth;812,29681
   OMX_U32 nHeight;813,29700
   OMX_U32 nPaddingRight;814,29720
   OMX_U32 nPaddingDown;815,29746
   OMX_COLOR_FORMATTYPE eColorFormat;816,29771
   OMX_U32 nFrameRateMax;817,29809
   OMX_U32 nFrameRateMin;818,29835
} OMX_CONFIG_CAMERASENSORMODETYPE;819,29861
typedef struct OMX_BRCMBUFFERSTATSTYPE 840,30841
   OMX_U32 nOrdinal;841,30882
   OMX_TICKS nTimeStamp;842,30903
   OMX_U32 nFilledLen;843,30928
   OMX_U32 nFlags;844,30951
      OMX_U32 nU32;847,30984
         OMX_U32 nYpart;850,31025
         OMX_U32 nUVpart;851,31050
      } image;852,31076
   } crc;853,31091
} OMX_BRCMBUFFERSTATSTYPE;854,31101
typedef struct OMX_CONFIG_BRCMPORTBUFFERSTATSTYPE 874,31680
   OMX_U32 nSize;875,31732
   OMX_VERSIONTYPE nVersion;876,31750
   OMX_U32 nPortIndex;877,31779
   OMX_U32 nCount;878,31802
   OMX_BRCMBUFFERSTATSTYPE sData[sData879,31821
} OMX_CONFIG_BRCMPORTBUFFERSTATSTYPE;880,31858
typedef struct OMX_CONFIG_BRCMPORTSTATSTYPE 891,32202
   OMX_U32 nSize;892,32248
   OMX_VERSIONTYPE nVersion;893,32266
   OMX_U32 nPortIndex;894,32295
   OMX_U32 nImageCount;895,32318
   OMX_U32 nBufferCount;896,32342
   OMX_U32 nFrameCount;897,32367
   OMX_U32 nFrameSkips;898,32391
   OMX_U32 nDiscards;899,32415
   OMX_U32 nEOS;900,32437
   OMX_U32 nMaxFrameSize;901,32454
   OMX_TICKS nByteCount;903,32481
   OMX_TICKS nMaxTimeDelta;904,32506
   OMX_U32 nCorruptMBs;905,32534
} OMX_CONFIG_BRCMPORTSTATSTYPE;906,32612
typedef struct OMX_CONFIG_BRCMCAMERASTATSTYPE 930,33561
   OMX_U32 nSize;931,33609
   OMX_VERSIONTYPE nVersion;932,33627
   OMX_U32 nOutFrameCount;933,33656
   OMX_U32 nDroppedFrameCount;934,33683
} OMX_CONFIG_BRCMCAMERASTATSTYPE;935,33714
typedef struct OMX_CONFIG_BRCMCAMERASTATSTYPE OMX_CONFIG_BRCMCAMERASTATS;938,33779
#define OMX_BRCM_MAXIOPERFBANDS 941,33855
   OMX_U32 count[count943,33907
   OMX_U32 num[num944,33950
} OMX_BRCM_PERFSTATS;945,33991
typedef struct OMX_CONFIG_BRCMIOPERFSTATSTYPE 948,34085
   OMX_U32 nSize;949,34133
   OMX_VERSIONTYPE nVersion;950,34151
   OMX_BOOL bEnabled;951,34180
   OMX_BRCM_PERFSTATS write;952,34281
   OMX_BRCM_PERFSTATS flush;953,34351
   OMX_BRCM_PERFSTATS wait;954,34443
} OMX_CONFIG_BRCMIOPERFSTATSTYPE;955,34541
typedef struct OMX_CONFIG_SHARPNESSTYPE 962,34799
   OMX_U32 nSize;963,34841
   OMX_VERSIONTYPE nVersion;964,34859
   OMX_U32 nPortIndex;965,34888
   OMX_S32 nSharpness;966,34911
} OMX_CONFIG_SHARPNESSTYPE;967,34934
typedef enum OMX_COMMONFLICKERCANCELTYPE 970,35032
   OMX_COMMONFLICKERCANCEL_OFF,971,35075
   OMX_COMMONFLICKERCANCEL_AUTO,972,35107
   OMX_COMMONFLICKERCANCEL_50,973,35140
   OMX_COMMONFLICKERCANCEL_60,974,35171
   OMX_COMMONFLICKERCANCEL_DUMMY 975,35202
   OMX_COMMONFLICKERCANCEL_DUMMY = 0x7FFFFFFFx7FFFFFFF975,35202
} OMX_COMMONFLICKERCANCELTYPE;976,35248
typedef struct OMX_CONFIG_FLICKERCANCELTYPE 978,35280
   OMX_U32 nSize;979,35326
   OMX_VERSIONTYPE nVersion;980,35344
   OMX_U32 nPortIndex;981,35373
   OMX_COMMONFLICKERCANCELTYPE eFlickerCancel;982,35396
} OMX_CONFIG_FLICKERCANCELTYPE;983,35443
typedef enum OMX_REDEYEREMOVALTYPE 991,35770
   OMX_RedEyeRemovalNone,992,35807
   OMX_RedEyeRemovalOn,993,35886
   OMX_RedEyeRemovalAuto,994,35965
   OMX_RedEyeRemovalKhronosExtensions 995,36082
   OMX_RedEyeRemovalKhronosExtensions = 0x6F000000,x6F000000995,36082
   OMX_RedEyeRemovalVendorStartUnused 996,36202
   OMX_RedEyeRemovalVendorStartUnused = 0x7F000000,x7F000000996,36202
   OMX_RedEyeRemovalSimple,997,36312
   OMX_RedEyeRemovalMax 998,36437
   OMX_RedEyeRemovalMax = 0x7FFFFFFFx7FFFFFFF998,36437
} OMX_REDEYEREMOVALTYPE;999,36474
typedef struct OMX_CONFIG_REDEYEREMOVALTYPE 1001,36500
   OMX_U32 nSize;1002,36546
   OMX_VERSIONTYPE nVersion;1003,36564
   OMX_U32 nPortIndex;1004,36593
   OMX_REDEYEREMOVALTYPE eMode;1005,36616
} OMX_CONFIG_REDEYEREMOVALTYPE;1006,36648
typedef enum OMX_FACEDETECTIONCONTROLTYPE 1015,36967
   OMX_FaceDetectionControlNone,1016,37011
   OMX_FaceDetectionControlOn,1017,37102
   OMX_FaceDetectionControlKhronosExtensions 1018,37192
   OMX_FaceDetectionControlKhronosExtensions = 0x6F000000,x6F0000001018,37192
   OMX_FaceDetectionControlVendorStartUnused 1019,37319
   OMX_FaceDetectionControlVendorStartUnused = 0x7F000000,x7F0000001019,37319
   OMX_FaceDetectionControlMax 1020,37436
   OMX_FaceDetectionControlMax = 0x7FFFFFFFx7FFFFFFF1020,37436
} OMX_FACEDETECTIONCONTROLTYPE;1021,37480
typedef struct OMX_CONFIG_FACEDETECTIONCONTROLTYPE 1023,37513
   OMX_U32 nSize;1024,37566
   OMX_VERSIONTYPE nVersion;1025,37584
   OMX_U32 nPortIndex;1026,37613
   OMX_FACEDETECTIONCONTROLTYPE eMode;1027,37636
   OMX_U32 nFrames;1028,37675
   OMX_U32 nMaxRegions;1030,37798
   OMX_U32 nQuality;1031,37884
} OMX_CONFIG_FACEDETECTIONCONTROLTYPE;1033,38043
typedef enum OMX_FACEREGIONFLAGSTYPE 1035,38083
   OMX_FaceRegionFlagsNone 1036,38122
   OMX_FaceRegionFlagsBlink 1037,38157
   OMX_FaceRegionFlagsSmile 1038,38192
   OMX_FaceRegionFlagsKhronosExtensions 1039,38227
   OMX_FaceRegionFlagsKhronosExtensions = 0x6F000000,x6F0000001039,38227
   OMX_FaceRegionFlagsVendorStartUnused 1040,38349
   OMX_FaceRegionFlagsVendorStartUnused = 0x7F000000,x7F0000001040,38349
   OMX_FaceRegionFlagsMax 1041,38461
   OMX_FaceRegionFlagsMax = 0x7FFFFFFFx7FFFFFFF1041,38461
} OMX_FACEREGIONFLAGSTYPE;1042,38500
typedef struct OMX_FACEREGIONTYPE 1044,38528
   OMX_S16 nLeft;1045,38564
   OMX_S16 nTop;1046,38656
   OMX_U16 nWidth;1047,38748
   OMX_U16 nHeight;1048,38810
   OMX_FACEREGIONFLAGSTYPE nFlags;1049,38873
   OMX_U64 nFaceRecognitionId;1051,38960
      OMX_U32 nLowPart;1055,39066
      OMX_U32 nHighPart;1056,39136
   } nFaceRecognitionId;1057,39207
} OMX_FACEREGIONTYPE;1059,39239
typedef struct OMX_CONFIG_FACEDETECTIONREGIONTYPE 1061,39262
   OMX_U32 nSize;1062,39314
   OMX_VERSIONTYPE nVersion;1063,39332
   OMX_U32 nPortIndex;1064,39361
   OMX_U32 nIndex;1065,39445
   OMX_U32 nDetectedRegions;1067,39614
   OMX_S32 nValidRegions;1068,39689
   OMX_U32 nImageWidth;1072,40060
   OMX_U32 nImageHeight;1073,40163
   OMX_FACEREGIONTYPE sRegion[sRegion1074,40267
} OMX_CONFIG_FACEDETECTIONREGIONTYPE;1075,40347
typedef enum OMX_INTERLACETYPE 1077,40386
   OMX_InterlaceProgressive,1078,40419
   OMX_InterlaceFieldSingleUpperFirst,1079,40526
   OMX_InterlaceFieldSingleLowerFirst,1081,40724
   OMX_InterlaceFieldsInterleavedUpperFirst,1083,40922
   OMX_InterlaceFieldsInterleavedLowerFirst,1085,41138
   OMX_InterlaceMixed,1087,41354
   OMX_InterlaceKhronosExtensions 1089,41533
   OMX_InterlaceKhronosExtensions = 0x6F000000,x6F0000001089,41533
   OMX_InterlaceVendorStartUnused 1090,41649
   OMX_InterlaceVendorStartUnused = 0x7F000000,x7F0000001090,41649
   OMX_InterlaceMax 1091,41755
   OMX_InterlaceMax = 0x7FFFFFFFx7FFFFFFF1091,41755
} OMX_INTERLACETYPE;1092,41788
typedef struct OMX_CONFIG_INTERLACETYPE 1094,41810
   OMX_U32 nSize;1095,41852
   OMX_VERSIONTYPE nVersion;1096,41870
   OMX_U32 nPortIndex;1097,41899
   OMX_INTERLACETYPE eMode;1098,41989
   OMX_BOOL bRepeatFirstField;1099,42065
} OMX_CONFIG_INTERLACETYPE;1100,42141
typedef struct OMX_PARAM_CAMERAISPTUNERTYPE 1103,42217
   OMX_U32 nSize;1104,42263
   OMX_VERSIONTYPE nVersion;1105,42281
   OMX_U8 tuner_name[tuner_name1106,42310
} OMX_PARAM_CAMERAISPTUNERTYPE;1107,42336
typedef struct OMX_CONFIG_IMAGEPTRTYPE 1115,42607
   OMX_U32 nSize;1116,42648
   OMX_VERSIONTYPE nVersion;1117,42666
   OMX_PTR pImage;1118,42695
} OMX_CONFIG_IMAGEPTRTYPE;1119,42714
typedef enum OMX_AFASSISTTYPE 1126,42909
   OMX_AFAssistAuto,1127,42941
   OMX_AFAssistOn,1128,42962
   OMX_AFAssistOff,1129,42981
   OMX_AFAssistTorch,1130,43001
   OMX_AFAssistKhronosExtensions 1131,43023
   OMX_AFAssistKhronosExtensions = 0x6F000000,x6F0000001131,43023
   OMX_AFAssistVendorStartUnused 1132,43070
   OMX_AFAssistVendorStartUnused = 0x7F000000,x7F0000001132,43070
   OMX_AFAssistMax 1133,43117
   OMX_AFAssistMax = 0x7FFFFFFFx7FFFFFFF1133,43117
} OMX_AFASSISTTYPE;1134,43149
typedef struct OMX_CONFIG_AFASSISTTYPE 1136,43170
   OMX_U32 nSize;1137,43211
   OMX_VERSIONTYPE nVersion;1138,43229
   OMX_U32 nPortIndex;1139,43258
   OMX_AFASSISTTYPE eMode;1140,43281
} OMX_CONFIG_AFASSISTTYPE;1141,43308
typedef struct OMX_CONFIG_INPUTCROPTYPE 1149,43579
   OMX_U32 nSize;1150,43621
   OMX_VERSIONTYPE nVersion;1151,43639
   OMX_U32 nPortIndex;1152,43668
   OMX_U32 xLeft;1153,43691
   OMX_U32 xTop;1154,43784
   OMX_U32 xWidth;1155,43878
   OMX_U32 xHeight;1156,43944
} OMX_CONFIG_INPUTCROPTYPE;1157,44011
typedef struct OMX_PARAM_CODECREQUIREMENTSTYPE 1167,44381
   OMX_U32 nSize;1168,44430
   OMX_VERSIONTYPE nVersion;1169,44448
   OMX_U32 nCallbackID;1170,44477
   OMX_BOOL bTryHWCodec;1171,44501
} OMX_PARAM_CODECREQUIREMENTSTYPE;1172,44526
typedef struct OMX_CONFIG_BRCMEGLIMAGEMEMHANDLETYPE 1182,44962
   OMX_U32 nSize;1183,45016
   OMX_VERSIONTYPE nVersion;1184,45034
   OMX_U32 nPortIndex;1185,45063
   OMX_PTR eglImage;1186,45086
   OMX_PTR memHandle;1187,45107
} OMX_CONFIG_BRCMEGLIMAGEMEMHANDLETYPE;1188,45129
typedef enum OMX_PRIVACYINDICATORTYPE 1196,45409
   OMX_PrivacyIndicatorOff,1197,45449
   OMX_PrivacyIndicatorOn,1198,45477
   OMX_PrivacyIndicatorForceOn,1199,45504
   OMX_PrivacyIndicatorKhronosExtensions 1200,45536
   OMX_PrivacyIndicatorKhronosExtensions = 0x6F000000,x6F0000001200,45536
   OMX_PrivacyIndicatorVendorStartUnused 1201,45591
   OMX_PrivacyIndicatorVendorStartUnused = 0x7F000000,x7F0000001201,45591
   OMX_PrivacyIndicatorMax 1202,45646
   OMX_PrivacyIndicatorMax = 0x7FFFFFFFx7FFFFFFF1202,45646
} OMX_PRIVACYINDICATORTYPE;1203,45686
typedef struct OMX_CONFIG_PRIVACYINDICATORTYPE 1205,45715
   OMX_U32 nSize;1206,45764
   OMX_VERSIONTYPE nVersion;1207,45782
   OMX_PRIVACYINDICATORTYPE ePrivacyIndicatorMode;1208,45811
} OMX_CONFIG_PRIVACYINDICATORTYPE;1209,45862
typedef enum OMX_CAMERAFLASHTYPE 1230,46644
   OMX_CameraFlashDefault,1231,46679
   OMX_CameraFlashXenon,1232,46706
   OMX_CameraFlashLED,1233,46731
   OMX_CameraFlashNone,1234,46754
   OMX_CameraFlashKhronosExtensions 1235,46778
   OMX_CameraFlashKhronosExtensions = 0x6F000000,x6F0000001235,46778
   OMX_CameraFlashVendorStartUnused 1236,46828
   OMX_CameraFlashVendorStartUnused = 0x7F000000,x7F0000001236,46828
   OMX_CameraFlashMax 1237,46878
   OMX_CameraFlashMax = 0x7FFFFFFFx7FFFFFFF1237,46878
} OMX_CAMERAFLASHTYPE;1238,46913
typedef struct OMX_PARAM_CAMERAFLASHTYPE 1240,46937
   OMX_U32 nSize;1241,46980
   OMX_VERSIONTYPE nVersion;1242,46998
   OMX_U32 nPortIndex;1243,47027
   OMX_CAMERAFLASHTYPE eFlashType;1244,47050
   OMX_BOOL bRedEyeUsesTorchMode;1245,47085
} OMX_PARAM_CAMERAFLASHTYPE;1246,47119
typedef enum OMX_CAMERAFLASHCONFIGSYNCTYPE 1258,47618
   OMX_CameraFlashConfigSyncFrontSlow,1259,47663
   OMX_CameraFlashConfigSyncRearSlow,1260,47702
   OMX_CameraFlashConfigSyncFrontFast,1261,47740
   OMX_CameraFlashConfigSyncKhronosExtensions 1262,47779
   OMX_CameraFlashConfigSyncKhronosExtensions = 0x6F000000,x6F0000001262,47779
   OMX_CameraFlashConfigSyncVendorStartUnused 1263,47839
   OMX_CameraFlashConfigSyncVendorStartUnused = 0x7F000000,x7F0000001263,47839
   OMX_CameraFlashConfigSyncMax 1264,47899
   OMX_CameraFlashConfigSyncMax = 0x7FFFFFFFx7FFFFFFF1264,47899
} OMX_CAMERAFLASHCONFIGSYNCTYPE;1265,47944
typedef struct OMX_CONFIG_CAMERAFLASHCONFIGTYPE 1267,47978
   OMX_U32 nSize;1268,48028
   OMX_VERSIONTYPE nVersion;1269,48046
   OMX_U32 nPortIndex;1270,48075
   OMX_BOOL bUsePreFlash;1271,48098
   OMX_BOOL bUseFocusDistanceInfo;1272,48124
   OMX_CAMERAFLASHCONFIGSYNCTYPE eFlashSync;1273,48159
   OMX_BOOL bIgnoreChargeState;1274,48204
} OMX_CONFIG_CAMERAFLASHCONFIGTYPE;1275,48236
typedef struct OMX_CONFIG_BRCMAUDIOTRACKGAPLESSPLAYBACKTYPE 1293,49030
   OMX_U32 nSize;1294,49092
   OMX_VERSIONTYPE nVersion;1295,49110
   OMX_U32 nPortIndex;1296,49139
   OMX_U32 nDelay;1297,49162
   OMX_U32 nPadding;1298,49234
} OMX_CONFIG_BRCMAUDIOTRACKGAPLESSPLAYBACKTYPE;1299,49305
typedef struct OMX_CONFIG_BRCMAUDIOTRACKCHANGECONTROLTYPE 1306,49544
   OMX_U32 nSize;1307,49604
   OMX_VERSIONTYPE nVersion;1308,49622
   OMX_U32 nSrcPortIndex;1309,49651
   OMX_U32 nDstPortIndex;1310,49677
   OMX_U32 nXFade;1311,49703
} OMX_CONFIG_BRCMAUDIOTRACKCHANGECONTROLTYPE;1312,49722
typedef enum OMX_BRCMPIXELVALUERANGETYPE1321,50082
   OMX_PixelValueRangeUnspecified 1323,50125
   OMX_PixelValueRangeITU_R_BT601,1324,50164
   OMX_PixelValueRangeFull8Bit,1325,50199
   OMX_PixelValueRangeKhronosExtensions 1326,50231
   OMX_PixelValueRangeKhronosExtensions = 0x6F000000,x6F0000001326,50231
   OMX_PixelValueRangeVendorStartUnused 1327,50353
   OMX_PixelValueRangeVendorStartUnused = 0x7F000000,x7F0000001327,50353
   OMX_PixelValueRangeMax 1328,50465
   OMX_PixelValueRangeMax = 0x7FFFFFFFx7FFFFFFF1328,50465
} OMX_BRCMPIXELVALUERANGETYPE;1329,50504
typedef struct OMX_PARAM_BRCMPIXELVALUERANGETYPE1331,50536
   OMX_U32 nSize;1333,50587
   OMX_VERSIONTYPE nVersion;1334,50605
   OMX_U32 nPortIndex;1335,50634
   OMX_BRCMPIXELVALUERANGETYPE ePixelValueRange;1336,50657
} OMX_PARAM_BRCMPIXELVALUERANGETYPE;1337,50706
typedef enum OMX_CAMERADISABLEALGORITHMTYPE 1346,51065
      OMX_CameraDisableAlgorithmFacetracking,1347,51111
      OMX_CameraDisableAlgorithmRedEyeReduction,1348,51157
      OMX_CameraDisableAlgorithmVideoStabilisation,1349,51206
      OMX_CameraDisableAlgorithmWriteRaw,1350,51258
      OMX_CameraDisableAlgorithmVideoDenoise,1351,51300
      OMX_CameraDisableAlgorithmStillsDenoise,1352,51346
      OMX_CameraDisableAlgorithmAntiShake,1353,51393
      OMX_CameraDisableAlgorithmImageEffects,1354,51436
      OMX_CameraDisableAlgorithmDarkSubtract,1355,51482
      OMX_CameraDisableAlgorithmDynamicRangeExpansion,1356,51528
      OMX_CameraDisableAlgorithmFaceRecognition,1357,51583
      OMX_CameraDisableAlgorithmFaceBeautification,1358,51632
      OMX_CameraDisableAlgorithmSceneDetection,1359,51684
      OMX_CameraDisableAlgorithmHighDynamicRange,1360,51732
   OMX_CameraDisableAlgorithmKhronosExtensions 1361,51782
   OMX_CameraDisableAlgorithmKhronosExtensions = 0x6F000000,x6F0000001361,51782
   OMX_CameraDisableAlgorithmVendorStartUnused 1362,51911
   OMX_CameraDisableAlgorithmVendorStartUnused = 0x7F000000,x7F0000001362,51911
   OMX_CameraDisableAlgorithmMax 1363,52030
   OMX_CameraDisableAlgorithmMax = 0x7FFFFFFFx7FFFFFFF1363,52030
} OMX_CAMERADISABLEALGORITHMTYPE;1364,52076
typedef struct OMX_PARAM_CAMERADISABLEALGORITHMTYPE1366,52111
   OMX_U32 nSize;1368,52165
   OMX_VERSIONTYPE nVersion;1369,52183
   OMX_CAMERADISABLEALGORITHMTYPE eAlgorithm;1370,52212
   OMX_BOOL bDisabled;1371,52258
} OMX_PARAM_CAMERADISABLEALGORITHMTYPE;1372,52281
typedef struct OMX_CONFIG_BRCMAUDIOEFFECTCONTROLTYPE 1379,52477
   OMX_U32 nSize;1380,52532
   OMX_VERSIONTYPE nVersion;1381,52550
   OMX_U32 nPortIndex;1382,52579
   OMX_BOOL bEnable;1383,52602
   OMX_U8 name[name1384,52623
   OMX_U8 property[property1385,52643
} OMX_CONFIG_BRCMAUDIOEFFECTCONTROLTYPE;1386,52668
typedef struct OMX_CONFIG_BRCMMINIMUMPROCESSINGLATENCY 1396,53091
   OMX_U32 nSize;1397,53148
   OMX_VERSIONTYPE nVersion;1398,53166
   OMX_TICKS nOffset;1399,53195
} OMX_CONFIG_BRCMMINIMUMPROCESSINGLATENCY;1400,53217
typedef struct OMX_PARAM_BRCMVIDEOAVCSEIENABLETYPE 1413,53738
   OMX_U32 nSize;1414,53791
   OMX_VERSIONTYPE nVersion;1415,53809
   OMX_U32 nPortIndex;1416,53838
   OMX_BOOL bEnable;1417,53861
} OMX_PARAM_BRCMVIDEOAVCSEIENABLETYPE;1418,53882
typedef struct OMX_PARAM_BRCMALLOWMEMCHANGETYPE 1421,54018
   OMX_U32 nSize;1422,54068
   OMX_VERSIONTYPE nVersion;1423,54086
   OMX_BOOL bEnable;1424,54115
} OMX_PARAM_BRCMALLOWMEMCHANGETYPE;1425,54136
typedef enum OMX_CONFIG_CAMERAUSECASE 1436,54608
   OMX_CameraUseCaseAuto,1437,54648
   OMX_CameraUseCaseVideo,1438,54674
   OMX_CameraUseCaseStills,1439,54701
   OMX_CameraUseCaseKhronosExtensions 1440,54729
   OMX_CameraUseCaseKhronosExtensions = 0x6F000000,x6F0000001440,54729
   OMX_CameraUseCaseVendorStartUnused 1441,54849
   OMX_CameraUseCaseVendorStartUnused = 0x7F000000,x7F0000001441,54849
   OMX_CameraUseCaseMax 1442,54959
   OMX_CameraUseCaseMax = 0x7FFFFFFFx7FFFFFFF1442,54959
} OMX_CONFIG_CAMERAUSECASE;1443,54996
typedef struct OMX_CONFIG_CAMERAUSECASETYPE 1445,55025
   OMX_U32 nSize;1446,55071
   OMX_VERSIONTYPE nVersion;1447,55089
   OMX_CONFIG_CAMERAUSECASE eUseCase;1448,55118
} OMX_CONFIG_CAMERAUSECASETYPE;1449,55156
typedef struct OMX_PARAM_BRCMDISABLEPROPRIETARYTUNNELSTYPE 1452,55273
   OMX_U32 nSize;1453,55334
   OMX_VERSIONTYPE nVersion;1454,55352
   OMX_U32 nPortIndex;1455,55381
   OMX_BOOL bUseBuffers;1456,55404
}  OMX_PARAM_BRCMDISABLEPROPRIETARYTUNNELSTYPE;1457,55429
typedef struct OMX_PARAM_BRCMRETAINMEMORYTYPE1468,55738
   OMX_U32 nSize;1470,55786
   OMX_VERSIONTYPE nVersion;1471,55804
   OMX_BOOL bEnable;1472,55833
} OMX_PARAM_BRCMRETAINMEMORYTYPE;1473,55854
typedef struct OMX_PARAM_BRCMOUTPUTBUFFERSIZETYPE 1486,56512
   OMX_U32 nSize;1487,56564
   OMX_VERSIONTYPE nVersion;1488,56582
   OMX_U32 nBufferSize;1489,56611
} OMX_PARAM_BRCMOUTPUTBUFFERSIZETYPE;1490,56635
#define OMX_CONFIG_CAMERAINFOTYPE_NAME_LEN 1493,56740
typedef struct OMX_CONFIG_LENSCALIBRATIONVALUETYPE1494,56786
   OMX_U16  nShutterDelayTime;1496,56839
   OMX_U16  nNdTransparency;1497,56870
   OMX_U16  nPwmPulseNearEnd;1498,56899
   OMX_U16  nPwmPulseFarEnd;1499,56978
   OMX_U16  nVoltagePIOutNearEnd[nVoltagePIOutNearEnd1500,57056
   OMX_U16  nVoltagePIOut10cm[nVoltagePIOut10cm1501,57093
   OMX_U16  nVoltagePIOutInfinity[nVoltagePIOutInfinity1502,57127
   OMX_U16  nVoltagePIOutFarEnd[nVoltagePIOutFarEnd1503,57165
   OMX_U32  nAdcConversionNearEnd;1504,57201
   OMX_U32  nAdcConversionFarEnd;1505,57236
} OMX_CONFIG_LENSCALIBRATIONVALUETYPE;1506,57270
#define OMX_CONFIG_CAMERAINFOTYPE_NAME_LEN 1511,57390
#define OMX_CONFIG_CAMERAINFOTYPE_SERIALNUM_LEN 1512,57436
#define OMX_CONFIG_CAMERAINFOTYPE_EPROMVER_LEN 1513,57487
typedef struct OMX_CONFIG_CAMERAINFOTYPE1514,57536
   OMX_U32 nSize;1516,57579
   OMX_VERSIONTYPE nVersion;1517,57597
   OMX_U8 cameraname[cameraname1518,57626
   OMX_U8 lensname[lensname1519,57684
   OMX_U16 nModelId;1520,57740
   OMX_U8 nManufacturerId;1521,57761
   OMX_U8 nRevNum;1522,57788
   OMX_U8 sSerialNumber[sSerialNumber1523,57807
   OMX_U8 sEpromVersion[sEpromVersion1524,57873
   OMX_CONFIG_LENSCALIBRATIONVALUETYPE sLensCalibration;1525,57938
   OMX_U32 xFNumber;1526,57995
   OMX_U32 xFocalLength;1527,58016
} OMX_CONFIG_CAMERAINFOTYPE;1528,58041
typedef enum OMX_CONFIG_CAMERAFEATURESSHUTTER 1531,58072
   OMX_CameraFeaturesShutterUnknown,1532,58120
   OMX_CameraFeaturesShutterNotPresent,1533,58157
   OMX_CameraFeaturesShutterPresent,1534,58197
   OMX_CameraFeaturesShutterKhronosExtensions 1535,58234
   OMX_CameraFeaturesShutterKhronosExtensions = 0x6F000000,x6F0000001535,58234
   OMX_CameraFeaturesShutterVendorStartUnused 1536,58362
   OMX_CameraFeaturesShutterVendorStartUnused = 0x7F000000,x7F0000001536,58362
   OMX_CameraFeaturesShutterMax 1537,58480
   OMX_CameraFeaturesShutterMax = 0x7FFFFFFFx7FFFFFFF1537,58480
} OMX_CONFIG_CAMERAFEATURESSHUTTER;1538,58525
typedef struct OMX_CONFIG_CAMERAFEATURESTYPE1540,58562
   OMX_U32 nSize;1542,58609
   OMX_VERSIONTYPE nVersion;1543,58627
   OMX_CONFIG_CAMERAFEATURESSHUTTER eHasMechanicalShutter;1544,58656
   OMX_BOOL bHasLens;1545,58715
} OMX_CONFIG_CAMERAFEATURESTYPE;1546,58737
typedef struct OMX_CONFIG_REQUESTCALLBACKTYPE1551,58894
   OMX_U32 nSize;1553,58942
   OMX_VERSIONTYPE nVersion;1554,58960
   OMX_U32 nPortIndex;1555,58989
   OMX_INDEXTYPE nIndex;1556,59012
   OMX_BOOL bEnable;1557,59037
} OMX_CONFIG_REQUESTCALLBACKTYPE;1558,59058
typedef enum OMX_FOCUSREGIONTYPE 1567,59432
   OMX_FocusRegionNormal,1568,59467
   OMX_FocusRegionFace,1569,59493
   OMX_FocusRegionMax1570,59517
} OMX_FOCUSREGIONTYPE;1571,59539
typedef struct OMX_FOCUSREGIONXY 1573,59563
   OMX_U32 xLeft;1574,59598
   OMX_U32 xTop;1575,59616
   OMX_U32 xWidth;1576,59633
   OMX_U32 xHeight;1577,59652
   OMX_U32 nWeight;1578,59672
   OMX_U32 nMask;1579,59692
   OMX_FOCUSREGIONTYPE eType;1580,59710
} OMX_FOCUSREGIONXY;1581,59740
typedef struct OMX_CONFIG_FOCUSREGIONXYTYPE1583,59762
   OMX_U32 nSize;1585,59808
   OMX_VERSIONTYPE nVersion;1586,59826
   OMX_U32 nPortIndex;1587,59855
   OMX_U32 nIndex;1588,59878
   OMX_U32 nTotalRegions;1589,59897
   OMX_S32 nValidRegions;1590,59923
   OMX_BOOL bLockToFaces;1591,59949
   OMX_U32 xFaceTolerance;1592,59975
   OMX_FOCUSREGIONXY sRegion[sRegion1593,60002
} OMX_CONFIG_FOCUSREGIONXYTYPE;1594,60035
typedef struct OMX_CONFIG_U8TYPE 1620,61089
    OMX_U32 nSize;1621,61124
    OMX_VERSIONTYPE nVersion;1622,61203
    OMX_U32 nPortIndex;1623,61287
    OMX_U8  nU8;1624,61369
} OMX_PARAM_U8TYPE;1625,61423
typedef struct OMX_CONFIG_CAMERASETTINGSTYPE 1627,61444
    OMX_U32 nSize;1628,61491
    OMX_VERSIONTYPE nVersion;1629,61510
    OMX_U32 nExposure;1630,61540
    OMX_U32 nAnalogGain;1631,61563
    OMX_U32 nDigitalGain;1632,61588
    OMX_U32 nLux;1633,61614
    OMX_U32 nRedGain;1634,61632
    OMX_U32 nBlueGain;1635,61654
    OMX_U32 nFocusPosition;1636,61677
} OMX_CONFIG_CAMERASETTINGSTYPE;1637,61705
typedef struct OMX_YUVCOLOUR 1640,61806
   OMX_U8 nY;1641,61837
   OMX_U8 nU;1642,61851
   OMX_U8 nV;1643,61865
} OMX_YUVCOLOUR;1644,61879
typedef struct OMX_CONFIG_DRAWBOXLINEPARAMS 1646,61897
    OMX_U32 nSize;1647,61943
    OMX_VERSIONTYPE nVersion;1648,62029
    OMX_U32 nPortIndex;1649,62120
    OMX_U32 xCornerSize;1650,62207
    OMX_U32 nPrimaryFaceLineWidth;1651,62315
    OMX_U32 nOtherFaceLineWidth;1652,62421
    OMX_U32 nFocusRegionLineWidth;1653,62522
    OMX_YUVCOLOUR sPrimaryFaceColour;1654,62625
    OMX_YUVCOLOUR sPrimaryFaceSmileColour;1655,62710
    OMX_YUVCOLOUR sPrimaryFaceBlinkColour;1656,62806
    OMX_YUVCOLOUR sOtherFaceColour;1657,62903
    OMX_YUVCOLOUR sOtherFaceSmileColour;1658,62991
    OMX_YUVCOLOUR sOtherFaceBlinkColour;1659,63090
    OMX_BOOL bShowFocusRegionsWhenIdle;1660,63190
    OMX_YUVCOLOUR sFocusRegionColour;1661,63303
    OMX_BOOL bShowAfState;1662,63385
    OMX_BOOL bShowOnlyPrimaryAfState;1663,63496
    OMX_BOOL bCombineNonFaceRegions;1664,63606
    OMX_YUVCOLOUR sAfLockPrimaryFaceColour;1665,63738
    OMX_YUVCOLOUR sAfLockOtherFaceColour;1666,63823
    OMX_YUVCOLOUR sAfLockFocusRegionColour;1667,63911
    OMX_YUVCOLOUR sAfFailPrimaryFaceColour;1668,63993
    OMX_YUVCOLOUR sAfFailOtherFaceColour;1669,64078
    OMX_YUVCOLOUR sAfFailFocusRegionColour;1670,64166
 } OMX_CONFIG_DRAWBOXLINEPARAMS;1671,64248
 #define OMX_PARAM_CAMERARMITYPE_RMINAME_LEN 1676,64367
 typedef struct OMX_PARAM_CAMERARMITYPE 1678,64449
    OMX_U32 nSize;1679,64491
    OMX_VERSIONTYPE nVersion;1680,64510
    OMX_BOOL bEnabled;1681,64540
    OMX_U8 sRmiName[sRmiName1682,64563
    OMX_U32 nInputBufferHeight;1683,64621
    OMX_U32 nRmiBufferSize;1684,64653
    OMX_BRCM_POOL_T *pImagePool;pImagePool1685,64681
 } OMX_PARAM_CAMERARMITYPE;1686,64714
typedef struct OMX_CONFIG_BRCMSYNCOUTPUTTYPE 1689,64801
    OMX_U32 nSize;1690,64848
    OMX_VERSIONTYPE nVersion;1691,64934
}  OMX_CONFIG_BRCMSYNCOUTPUTTYPE;1692,65025
typedef struct OMX_CONFIG_DRMVIEWTYPE 1698,65195
   OMX_U32 nSize;1699,65235
   OMX_VERSIONTYPE nVersion;1700,65306
   OMX_U32 nCurrentView;1701,65382
   OMX_U32 nMaxView;1702,65439
} OMX_CONFIG_DRMVIEWTYPE;1703,65502
typedef struct OMX_PARAM_BRCMU64TYPE 1712,65817
    OMX_U32 nSize;1713,65856
    OMX_VERSIONTYPE nVersion;1714,65935
    OMX_U32 nPortIndex;1715,66019
    OMX_U32 nLowPart;1716,66101
    OMX_U32 nHighPart;1717,66185
} OMX_PARAM_BRCMU64TYPE;1718,66270
typedef struct OMX_PARAM_BRCMTHUMBNAILTYPE 1727,66528
    OMX_U32 nSize;1728,66573
    OMX_VERSIONTYPE nVersion;1729,66652
    OMX_BOOL bEnable;1730,66736
    OMX_BOOL bUsePreview;1731,66835
    OMX_U32 nWidth;1732,66924
    OMX_U32 nHeight;1733,67001
} OMX_PARAM_BRCMTHUMBNAILTYPE;1734,67079
typedef struct OMX_PARAM_BRCMASPECTRATIOTYPE 1754,67835
    OMX_U32 nSize;1755,67882
    OMX_VERSIONTYPE nVersion;1756,67901
    OMX_U32 nPortIndex;1757,67931
    OMX_U32 nWidth;1758,67955
    OMX_U32 nHeight;1759,67975
} OMX_PARAM_BRCMASPECTRATIOTYPE;1760,67996
typedef struct OMX_PARAM_BRCMVIDEODECODEERRORCONCEALMENTTYPE 1763,68126
   OMX_U32 nSize;1764,68189
   OMX_VERSIONTYPE nVersion;1765,68207
   OMX_BOOL bStartWithValidFrame;1766,68236
} OMX_PARAM_BRCMVIDEODECODEERRORCONCEALMENTTYPE;1767,68345
#define OMX_CONFIG_FLASHINFOTYPE_NAME_LEN 1773,68519
typedef struct OMX_CONFIG_FLASHINFOTYPE1774,68564
   OMX_U32 nSize;1776,68606
   OMX_VERSIONTYPE nVersion;1777,68624
   OMX_U8 sFlashName[sFlashName1778,68653
   OMX_CAMERAFLASHTYPE eFlashType;1779,68710
   OMX_U8 nDeviceId;1780,68745
   OMX_U8 nDeviceVersion;1781,68766
} OMX_CONFIG_FLASHINFOTYPE;1782,68792
typedef enum OMX_DYNAMICRANGEEXPANSIONMODETYPE 1800,69618
   OMX_DynRangeExpOff,1801,69667
   OMX_DynRangeExpLow,1802,69690
   OMX_DynRangeExpMedium,1803,69713
   OMX_DynRangeExpHigh,1804,69739
   OMX_DynRangeExpKhronosExtensions 1805,69763
   OMX_DynRangeExpKhronosExtensions = 0x6F000000,x6F0000001805,69763
   OMX_DynRangeExpVendorStartUnused 1806,69813
   OMX_DynRangeExpVendorStartUnused = 0x7F000000,x7F0000001806,69813
   OMX_DynRangeExpMax 1807,69863
   OMX_DynRangeExpMax = 0x7FFFFFFFx7FFFFFFF1807,69863
} OMX_DYNAMICRANGEEXPANSIONMODETYPE;1808,69898
typedef struct OMX_CONFIG_DYNAMICRANGEEXPANSIONTYPE1810,69936
   OMX_U32 nSize;1812,69990
   OMX_VERSIONTYPE nVersion;1813,70008
   OMX_DYNAMICRANGEEXPANSIONMODETYPE eMode;1814,70037
} OMX_CONFIG_DYNAMICRANGEEXPANSIONTYPE;1815,70081
typedef enum OMX_BRCMTHREADAFFINITYTYPE 1831,70737
   OMX_BrcmThreadAffinityCPU0,1832,70779
   OMX_BrcmThreadAffinityCPU1,1833,70810
   OMX_BrcmThreadAffinityMax 1834,70841
   OMX_BrcmThreadAffinityMax = 0x7FFFFFFFx7FFFFFFF1834,70841
} OMX_BRCMTHREADAFFINITYTYPE;1835,70883
typedef struct OMX_PARAM_BRCMTHREADAFFINITYTYPE 1837,70914
   OMX_U32 nSize;1838,70964
   OMX_VERSIONTYPE nVersion;1839,70982
   OMX_BRCMTHREADAFFINITYTYPE eAffinity;1840,71011
} OMX_PARAM_BRCMTHREADAFFINITYTYPE;1841,71081
typedef enum OMX_SCENEDETECTTYPE 1847,71322
   OMX_SceneDetectUnknown,1848,71357
   OMX_SceneDetectLandscape,1849,71384
   OMX_SceneDetectPortrait,1850,71413
   OMX_SceneDetectMacro,1851,71441
   OMX_SceneDetectNight,1852,71466
   OMX_SceneDetectPortraitNight,1853,71491
   OMX_SceneDetectBacklit,1854,71524
   OMX_SceneDetectPortraitBacklit,1855,71551
   OMX_SceneDetectSunset,1856,71586
   OMX_SceneDetectBeach,1857,71612
   OMX_SceneDetectSnow,1858,71637
   OMX_SceneDetectFireworks,1859,71661
   OMX_SceneDetectMax 1860,71690
   OMX_SceneDetectMax = 0x7FFFFFFFx7FFFFFFF1860,71690
} OMX_SCENEDETECTTYPE;1861,71725
typedef struct OMX_CONFIG_SCENEDETECTTYPE 1864,71855
   OMX_U32 nSize;1865,71899
   OMX_VERSIONTYPE nVersion;1866,71917
   OMX_SCENEDETECTTYPE eScene;1867,71946
} OMX_CONFIG_SCENEDETECTTYPE;1868,72006
typedef enum OMX_INDEXEXTTYPE 1874,72223
    OMX_IndexExtVideoStartUnused 1876,72301
    OMX_IndexExtVideoStartUnused = OMX_IndexKhronosExtensions 1876,72301
    OMX_IndexExtVideoStartUnused = OMX_IndexKhronosExtensions + 0x00600000,x006000001876,72301
    OMX_IndexParamNalStreamFormatSupported,1877,72377
    OMX_IndexParamNalStreamFormat,1878,72472
    OMX_IndexParamNalStreamFormatSelect,1879,72567
    OMX_IndexExtMax 1881,72663
    OMX_IndexExtMax = 0x7FFFFFFFx7FFFFFFF1881,72663
} OMX_INDEXEXTTYPE;1882,72696
typedef enum OMX_NALUFORMATSTYPE 1885,72815
    OMX_NaluFormatStartCodes 1886,72850
    OMX_NaluFormatOneNaluPerBuffer 1887,72884
    OMX_NaluFormatOneByteInterleaveLength 1888,72924
    OMX_NaluFormatTwoByteInterleaveLength 1889,72971
    OMX_NaluFormatFourByteInterleaveLength 1890,73018
    OMX_NaluFormatCodingMax 1891,73067
    OMX_NaluFormatCodingMax = 0x7FFFFFFFx7FFFFFFF1891,73067
} OMX_NALUFORMATSTYPE;1892,73108
typedef struct OMX_NALSTREAMFORMATTYPE{OMX_NALSTREAMFORMATTYPE1895,73230
    OMX_U32 nSize;1896,73270
    OMX_VERSIONTYPE nVersion;1897,73289
    OMX_U32 nPortIndex;1898,73319
    OMX_NALUFORMATSTYPE eNaluFormat;1899,73343
} OMX_NALSTREAMFORMATTYPE;1900,73380
typedef  struct OMX_VIDEO_PARAM_AVCTYPE  OMX_VIDEO_PARAM_MVCTYPE;1906,73547
typedef enum OMX_STATICBOXTYPE 1912,73756
   OMX_StaticBoxNormal,1913,73789
   OMX_StaticBoxPrimaryFaceAfIdle,1914,73813
   OMX_StaticBoxNonPrimaryFaceAfIdle,1915,73848
   OMX_StaticBoxFocusRegionAfIdle,1916,73886
   OMX_StaticBoxPrimaryFaceAfSuccess,1917,73921
   OMX_StaticBoxNonPrimaryFaceAfSuccess,1918,73959
   OMX_StaticBoxFocusRegionAfSuccess,1919,74000
   OMX_StaticBoxPrimaryFaceAfFail,1920,74038
   OMX_StaticBoxNonPrimaryFaceAfFail,1921,74073
   OMX_StaticBoxFocusRegionAfFail,1922,74111
   OMX_StaticBoxMax1923,74146
} OMX_STATICBOXTYPE;1924,74166
typedef struct OMX_STATICBOX 1926,74188
   OMX_U32 xLeft;1927,74219
   OMX_U32 xTop;1928,74237
   OMX_U32 xWidth;1929,74254
   OMX_U32 xHeight;1930,74273
   OMX_STATICBOXTYPE eType;1931,74293
} OMX_STATICBOX;1932,74321
typedef struct OMX_CONFIG_STATICBOXTYPE1934,74339
   OMX_U32 nSize;1936,74381
   OMX_VERSIONTYPE nVersion;1937,74399
   OMX_U32 nPortIndex;1938,74428
   OMX_U32 nIndex;1939,74451
   OMX_U32 nTotalBoxes;1940,74470
   OMX_S32 nValidBoxes;1941,74494
   OMX_BOOL bDrawOtherBoxes;1942,74518
   OMX_STATICBOX sBoxes[sBoxes1943,74547
} OMX_CONFIG_STATICBOXTYPE;1944,74575
typedef struct OMX_CONFIG_PORTBOOLEANTYPE{OMX_CONFIG_PORTBOOLEANTYPE1964,75364
    OMX_U32 nSize;1965,75407
    OMX_VERSIONTYPE nVersion;1966,75426
    OMX_U32 nPortIndex;1967,75456
    OMX_BOOL bEnabled;1968,75480
} OMX_CONFIG_PORTBOOLEANTYPE;1969,75503
typedef enum OMX_CAMERACAPTUREMODETYPE 1976,75704
   OMX_CameraCaptureModeWaitForCaptureEnd,1977,75745
   OMX_CameraCaptureModeWaitForCaptureEndAndUsePreviousInputImage,1978,75788
   OMX_CameraCaptureModeResumeViewfinderImmediately,1979,75855
   OMX_CameraCaptureModeMax,1980,75908
} OMX_CAMERACAPTUREMODETYPE;1981,75937
typedef struct OMX_PARAM_CAMERACAPTUREMODETYPE{OMX_PARAM_CAMERACAPTUREMODETYPE1983,75967
    OMX_U32 nSize;1984,76015
    OMX_VERSIONTYPE nVersion;1985,76034
    OMX_U32 nPortIndex;1986,76064
    OMX_CAMERACAPTUREMODETYPE eMode;1987,76088
} OMX_PARAM_CAMERACAPTUREMODETYPE;1988,76125
typedef enum OMX_BRCMDRMENCRYPTIONTYPE1995,76317
   OMX_DrmEncryptionNone 1997,76358
   OMX_DrmEncryptionHdcp2,1998,76388
   OMX_DrmEncryptionKhronosExtensions 1999,76415
   OMX_DrmEncryptionKhronosExtensions = 0x6F000000,x6F0000001999,76415
   OMX_DrmEncryptionVendorStartUnused 2000,76535
   OMX_DrmEncryptionVendorStartUnused = 0x7F000000,x7F0000002000,76535
   OMX_DrmEncryptionRangeMax 2001,76645
   OMX_DrmEncryptionRangeMax = 0x7FFFFFFFx7FFFFFFF2001,76645
} OMX_BRCMDRMENCRYPTIONTYPE;2002,76687
typedef struct OMX_PARAM_BRCMDRMENCRYPTIONTYPE2004,76717
   OMX_U32 nSize;2006,76766
   OMX_VERSIONTYPE nVersion;2007,76784
   OMX_U32 nPortIndex;2008,76813
   OMX_BRCMDRMENCRYPTIONTYPE eEncryption;2009,76836
   OMX_U32 nConfigDataLen;2010,76878
   OMX_U8 configData[configData2011,76905
} OMX_PARAM_BRCMDRMENCRYPTIONTYPE;2012,76930
typedef struct OMX_CONFIG_BUFFERSTALLTYPE2019,77105
   OMX_U32 nSize;2021,77149
   OMX_VERSIONTYPE nVersion;2022,77167
   OMX_U32 nPortIndex;2023,77196
   OMX_BOOL bStalled;2024,77219
   OMX_U32 nDelay;2025,77277
} OMX_CONFIG_BUFFERSTALLTYPE;2026,77369
typedef struct OMX_CONFIG_LATENCYTARGETTYPE2038,77919
   OMX_U32 nSize;2040,77965
   OMX_VERSIONTYPE nVersion;2041,77983
   OMX_U32 nPortIndex;2042,78012
   OMX_BOOL bEnabled;2043,78035
   OMX_U32 nFilter;2044,78094
   OMX_U32 nTarget;2045,78176
   OMX_U32 nShift;2046,78223
   OMX_S32 nSpeedFactor;2047,78299
   OMX_S32 nInterFactor;2048,78398
   OMX_S32 nAdjCap;2049,78494
} OMX_CONFIG_LATENCYTARGETTYPE;2050,78593
typedef struct OMX_CONFIG_BRCMUSEPROPRIETARYCALLBACKTYPE2057,78820
   OMX_U32 nSize;2059,78879
   OMX_VERSIONTYPE nVersion;2060,78897
   OMX_U32 nPortIndex;2061,78926
   OMX_BOOL bEnable;2062,78949
} OMX_CONFIG_BRCMUSEPROPRIETARYCALLBACKTYPE;2063,78970
typedef enum OMX_TIMESTAMPMODETYPE2069,79176
   OMX_TimestampModeZero 2071,79213
   OMX_TimestampModeRawStc,2072,79278
   OMX_TimestampModeResetStc,2073,79355
   OMX_TimestampModeKhronosExtensions 2074,79495
   OMX_TimestampModeKhronosExtensions = 0x6F000000,x6F0000002074,79495
   OMX_TimestampModeVendorStartUnused 2075,79615
   OMX_TimestampModeVendorStartUnused = 0x7F000000,x7F0000002075,79615
   OMX_TimestampModeMax 2076,79725
   OMX_TimestampModeMax = 0x7FFFFFFFx7FFFFFFF2076,79725
} OMX_TIMESTAMPMODETYPE;2077,79762
typedef struct OMX_PARAM_TIMESTAMPMODETYPE2079,79788
   OMX_U32 nSize;2081,79833
   OMX_VERSIONTYPE nVersion;2082,79851
   OMX_TIMESTAMPMODETYPE eTimestampMode;2083,79880
} OMX_PARAM_TIMESTAMPMODETYPE;2084,79921
typedef struct OMX_BRCMVEGLIMAGETYPE2092,80144
   OMX_U32 nWidth;2095,80240
   OMX_U32 nHeight;2096,80259
   OMX_U32 nStride;2097,80279
   OMX_U32 nUmemHandle;2098,80299
   OMX_U32 nUmemOffset;2099,80323
   OMX_U32 nFlipped;2100,80347
} OMX_BRCMVEGLIMAGETYPE;2101,80414
typedef struct OMX_CONFIG_BRCMFOVTYPE2105,80471
   OMX_U32 nSize;2107,80511
   OMX_VERSIONTYPE nVersion;2108,80529
   OMX_U32 nPortIndex;2109,80558
   OMX_U32 xFieldOfViewHorizontal;2110,80581
   OMX_U32 xFieldOfViewVertical;2111,80674
} OMX_CONFIG_BRCMFOVTYPE;2112,80765
typedef struct OMX_VIDEO_CONFIG_LEVEL_EXTEND 2127,81338
   OMX_U32 nSize;2128,81385
   OMX_VERSIONTYPE nVersion;2129,81404
   OMX_U32 nPortIndex;2130,81433
   OMX_U32 nCustomMaxMBPS;2131,81456
   OMX_U32 nCustomMaxFS;2132,81537
   OMX_U32 nCustomMaxBRandCPB;2133,81630
} OMX_VIDEO_CONFIG_LEVEL_EXTEND;2134,81771
typedef struct OMX_VIDEO_EEDE_ENABLE 2140,81960
    OMX_U32 nSize;2141,81999
    OMX_VERSIONTYPE nVersion;2142,82018
    OMX_U32 nPortIndex;2143,82048
    OMX_U32 enable;2144,82072
} OMX_VIDEO_EEDE_ENABLE;2145,82092
typedef struct OMX_VIDEO_EEDE_LOSSRATE 2151,82282
    OMX_U32 nSize;2152,82323
    OMX_VERSIONTYPE nVersion;2153,82342
    OMX_U32 nPortIndex;2154,82372
   OMX_U32 loss_rate;2155,82396
} OMX_VIDEO_EEDE_LOSSRATE;2156,82448
typedef enum OMX_COLORSPACETYPE2162,82609
   OMX_COLORSPACE_UNKNOWN,2164,82643
   OMX_COLORSPACE_JPEG_JFIF,2165,82670
   OMX_COLORSPACE_ITU_R_BT601,2166,82699
   OMX_COLORSPACE_ITU_R_BT709,2167,82730
   OMX_COLORSPACE_FCC,2168,82761
   OMX_COLORSPACE_SMPTE240M,2169,82784
   OMX_COLORSPACE_BT470_2_M,2170,82813
   OMX_COLORSPACE_BT470_2_BG,2171,82842
   OMX_COLORSPACE_JFIF_Y16_255,2172,82872
   OMX_COLORSPACE_MAX 2173,82904
   OMX_COLORSPACE_MAX = 0x7FFFFFFFx7FFFFFFF2173,82904
} OMX_COLORSPACETYPE;2174,82939
typedef struct OMX_PARAM_COLORSPACETYPE2176,82962
   OMX_U32 nSize;2178,83004
   OMX_VERSIONTYPE nVersion;2179,83022
   OMX_U32 nPortIndex;2180,83051
   OMX_COLORSPACETYPE eColorSpace;2181,83074
} OMX_PARAM_COLORSPACETYPE;2182,83109
typedef enum OMX_CAPTURESTATETYPE2184,83138
   OMX_NotCapturing,2186,83174
   OMX_CaptureStarted,2187,83195
   OMX_CaptureComplete,2188,83218
   OMX_CaptureMax 2189,83242
   OMX_CaptureMax = 0x7FFFFFFFx7FFFFFFF2189,83242
} OMX_CAPTURESTATETYPE;2190,83273
typedef struct OMX_PARAM_CAPTURESTATETYPE2192,83298
   OMX_U32 nSize;2194,83342
   OMX_VERSIONTYPE nVersion;2195,83360
   OMX_U32 nPortIndex;2196,83389
   OMX_CAPTURESTATETYPE eCaptureState;2197,83412
} OMX_PARAM_CAPTURESTATETYPE;2198,83451
typedef struct OMX_PARAM_BRCMCONFIGFILETYPE 2239,84812
   OMX_U32 nSize;2240,84858
   OMX_VERSIONTYPE nVersion;2242,85007
   OMX_U32 fileSize;2243,85092
} OMX_PARAM_BRCMCONFIGFILETYPE;2244,85166
typedef struct OMX_PARAM_BRCMCONFIGFILECHUNKTYPE 2246,85199
   OMX_U32 nSize;2247,85250
   OMX_VERSIONTYPE nVersion;2249,85401
   OMX_U32 size;2250,85486
   OMX_U32 offset;2251,85581
   OMX_U8 data[data2252,85661
} OMX_PARAM_BRCMCONFIGFILECHUNKTYPE;2253,85719
typedef struct OMX_PARAM_BRCMFRAMERATERANGETYPE 2255,85757
   OMX_U32 nSize;2256,85807
   OMX_VERSIONTYPE nVersion;2258,85958
   OMX_U32 nPortIndex;2259,86043
   OMX_U32 xFramerateLow;2260,86066
   OMX_U32 xFramerateHigh;2261,86152
} OMX_PARAM_BRCMFRAMERATERANGETYPE;2262,86239
typedef struct OMX_PARAM_S32TYPE 2264,86276
    OMX_U32 nSize;2265,86311
    OMX_VERSIONTYPE nVersion;2266,86390
    OMX_U32 nPortIndex;2267,86474
    OMX_S32 nS32;2268,86556
} OMX_PARAM_S32TYPE;2269,86612
typedef struct OMX_PARAM_BRCMVIDEODRMPROTECTBUFFERTYPE2271,86634
   OMX_U32 nSize;2273,86691
   OMX_VERSIONTYPE nVersion;2274,86709
   OMX_U32 size_wanted;2276,86739
   OMX_U32 protect;2278,86913
   OMX_U32 mem_handle;2280,86984
   OMX_PTR phys_addr;2281,87056
} OMX_PARAM_BRCMVIDEODRMPROTECTBUFFERTYPE;2282,87144
typedef struct OMX_CONFIG_ZEROSHUTTERLAGTYPE2284,87188
   OMX_U32 nSize;2286,87235
   OMX_VERSIONTYPE nVersion;2287,87253
   OMX_U32 bZeroShutterMode;2289,87283
   OMX_U32 bConcurrentCapture;2290,87360
} OMX_CONFIG_ZEROSHUTTERLAGTYPE;2292,87447
typedef struct OMX_PARAM_BRCMVIDEODECODECONFIGVD3TYPE 2294,87481
   OMX_U32 nSize;2295,87537
   OMX_VERSIONTYPE nVersion;2297,87689
   OMX_U8 config[config2298,87774
} OMX_PARAM_BRCMVIDEODECODECONFIGVD3TYPE;2299,87860

codec/omxil/omxil_utils.h,2914
#define OMX_VERSION_MAJOR 28,1356
#define OMX_VERSION_MINOR 29,1384
#define OMX_VERSION_REV 30,1412
#define OMX_VERSION_STEP 31,1440
#define OMX_VERSION_MAJOR 33,1491
#define OMX_VERSION_MINOR 34,1519
#define OMX_VERSION_REV 35,1547
#define OMX_VERSION_STEP 36,1575
#define OMX_VERSION_MAJOR 38,1609
#define OMX_VERSION_MINOR 39,1637
#define OMX_VERSION_REV 40,1665
#define OMX_VERSION_STEP 41,1693
#define OMX_INIT_COMMON(44,1729
#define OMX_INIT_STRUCTURE(51,1984
#define OMX_ComponentRoleEnum(55,2070
#define CHECK_ERROR(60,2312
static inline int64_t FromOmxTicks(64,2436
static inline OMX_TICKS ToOmxTicks(68,2556
#define FromOmxTicks(76,2702
#define ToOmxTicks(77,2730
#define OMX_FIFO_INIT(83,2949
#define OMX_FIFO_DESTROY(89,3224
#define OMX_FIFO_PEEK(93,3365
#define OMX_FIFO_GET(96,3447
#define OMX_FIFO_GET_TIMEOUT(107,3994
#define OMX_FIFO_PUT(121,4666
    OMX_PARAM_U32TYPE common;134,5291
    OMX_AUDIO_PARAM_PCMMODETYPE pcm;135,5321
    OMX_AUDIO_PARAM_MP3TYPE mp3;136,5358
    OMX_AUDIO_PARAM_AACPROFILETYPE aac;137,5391
    OMX_AUDIO_PARAM_VORBISTYPE vorbis;138,5431
    OMX_AUDIO_PARAM_WMATYPE wma;139,5470
    OMX_AUDIO_PARAM_RATYPE ra;140,5503
    OMX_AUDIO_PARAM_ADPCMTYPE adpcm;141,5534
    OMX_AUDIO_PARAM_G723TYPE g723;142,5571
    OMX_AUDIO_PARAM_G726TYPE g726;143,5606
    OMX_AUDIO_PARAM_G729TYPE g729;144,5641
    OMX_AUDIO_PARAM_AMRTYPE amr;145,5676
    OMX_VIDEO_PARAM_H263TYPE h263;147,5710
    OMX_VIDEO_PARAM_MPEG2TYPE mpeg2;148,5745
    OMX_VIDEO_PARAM_MPEG4TYPE mpeg4;149,5782
    OMX_VIDEO_PARAM_WMVTYPE wmv;150,5819
    OMX_VIDEO_PARAM_RVTYPE rv;151,5852
    OMX_VIDEO_PARAM_AVCTYPE avc;152,5883
} OmxFormatParam;154,5917
typedef struct OmxEvent159,6123
    OMX_EVENTTYPE event;161,6149
    OMX_U32 data_1;162,6174
    OMX_U32 data_2;163,6194
    OMX_PTR event_data;164,6214
    struct OmxEvent *next;next166,6239
} OmxEvent;167,6266
typedef struct OmxEventQueue169,6279
    OmxEvent *p_events;p_events171,6310
    OmxEvent **pp_last_event;pp_last_event172,6334
    vlc_mutex_t mutex;174,6365
    vlc_cond_t cond;175,6388
} OmxEventQueue;176,6409
typedef struct ArchitectureSpecificCopyData193,7244
    void *data;data195,7290
} ArchitectureSpecificCopyData;196,7306
    OMXCODEC_NO_QUIRKS 228,8799
    OMXCODEC_QUIRKS_NEED_CSD 229,8827
    OMXCODEC_QUIRKS_NEED_CSD = 0x1,x1229,8827
    OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING 230,8863
    OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING = 0x2,x2230,8863
    OMXCODEC_AUDIO_QUIRKS_NEED_CHANNELS 231,8911
    OMXCODEC_AUDIO_QUIRKS_NEED_CHANNELS = 0x4,x4231,8911
#define OMX_QCOM_COLOR_FormatYVU420SemiPlanar 276,11442
#define OMX_TI_COLOR_FormatYUV420PackedSemiPlanar 277,11499
#define QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka 278,11560
#define OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m 279,11633
#define OMX_IndexVendorSetYUV420pMode 280,11699

demux/adaptive/playlist/SegmentList.h,230
#define SEGMENTLIST_H_26,1172
        class SegmentList 37,1336
                SegmentList 41,1469
                virtual ~SegmentList 42,1542
                std::vector<ISegment *>  segments;SegmentList::segments54,2239

stream_out/chromecast/cast.cpp,2099
struct sout_stream_sys_t39,1498
    sout_stream_sys_t(sout_stream_sys_t::sout_stream_sys_t41,1525
    ~sout_stream_sys_t(sout_stream_sys_t::~sout_stream_sys_t54,1940
    sout_stream_t     *p_out;sout_stream_sys_t::p_out63,2163
    std::string        sout;sout_stream_sys_t::sout64,2193
    const std::string  default_muxer;sout_stream_sys_t::default_muxer65,2222
    const std::string  default_mime;sout_stream_sys_t::default_mime66,2260
    intf_sys_t * const p_intf;sout_stream_sys_t::p_intf68,2298
    const bool b_has_video;sout_stream_sys_t::b_has_video69,2329
    const int i_port;sout_stream_sys_t::i_port70,2357
    bool                               es_changed;sout_stream_sys_t::es_changed74,2458
    std::vector<sout_stream_id_sys_t*> streams;sout_stream_sys_t::streams75,2509
#define SOUT_CFG_PREFIX 81,2612
static const vlc_fourcc_t DEFAULT_TRANSCODE_AUDIO 83,2656
static const vlc_fourcc_t DEFAULT_TRANSCODE_VIDEO 84,2723
static const char DEFAULT_MUXER[DEFAULT_MUXER85,2791
static const char *const ppsz_sout_options[ppsz_sout_options94,3121
#define HTTP_PORT_TEXT 102,3416
#define HTTP_PORT_LONGTEXT 103,3455
#define HAS_VIDEO_TEXT 105,3611
#define HAS_VIDEO_LONGTEXT 106,3646
#define MUX_TEXT 107,3722
#define MUX_LONGTEXT 108,3751
#define MIME_TEXT 109,3832
#define MIME_LONGTEXT 110,3874
#define IP_ADDR_TEXT 112,3965
#define IP_ADDR_LONGTEXT 113,4003
#define PORT_TEXT 114,4064
#define PORT_LONGTEXT 115,4104
struct sout_stream_id_sys_t137,5013
    es_format_t           fmt;sout_stream_id_sys_t::fmt139,5043
    sout_stream_id_sys_t  *p_sub_id;sout_stream_id_sys_t::p_sub_id140,5074
static sout_stream_id_sys_t *Add(Add146,5292
static void Del(169,5861
bool sout_stream_sys_t::canDecodeVideo(199,6658
bool sout_stream_sys_t::canDecodeAudio(206,6849
int sout_stream_sys_t::UpdateOutput(220,7355
sout_stream_id_sys_t *sout_stream_sys_t::GetSubId(sout_stream_sys_t::GetSubId347,11737
static int Send(367,12238
static void Flush(379,12546
static int Control(393,12906
static int Open(414,13636
static void Close(507,16543

access/file.c,400
struct access_sys_t68,2055
    int fd;70,2077
    bool b_pace_control;72,2090
static bool IsRemote 76,2163
# define IsRemote(110,2867
static bool IsRemote 113,2938
# define IsRemote(124,3226
# define posix_fadvise(128,3303
int FileOpen(139,3727
void FileClose 258,7162
static ssize_t Read 275,7436
static int FileSeek 303,8249
static int NoSeek 312,8460
static int FileControl(322,8790

demux/mkv/stream_io_callback.hpp,411
class vlc_stream_io_callback:vlc_stream_io_callback29,1424
    stream_t       *s;vlc_stream_io_callback::s32,1485
    bool           mb_eof;vlc_stream_io_callback::mb_eof33,1508
    bool           b_owner;vlc_stream_io_callback::b_owner34,1535
    virtual ~vlc_stream_io_callback(vlc_stream_io_callback::~vlc_stream_io_callback39,1623
    virtual void     close vlc_stream_io_callback::close49,2019

demux/mkv/chapter_command.hpp,6240
#define VLC_MKV_CHAPTER_COMMAND_HPP_26,1260
const int MATROSKA_CHAPTER_CODEC_NATIVE 30,1318
const int MATROSKA_CHAPTER_CODEC_DVD 31,1367
const binary MATROSKA_DVD_LEVEL_SS 33,1417
const binary MATROSKA_DVD_LEVEL_LU 34,1462
const binary MATROSKA_DVD_LEVEL_TT 35,1507
const binary MATROSKA_DVD_LEVEL_PGC 36,1552
const binary MATROSKA_DVD_LEVEL_PG 37,1597
const binary MATROSKA_DVD_LEVEL_PTT 38,1642
const binary MATROSKA_DVD_LEVEL_CN 39,1687
class chapter_codec_cmds_c43,1754
    chapter_codec_cmds_c(chapter_codec_cmds_c::chapter_codec_cmds_c46,1791
    virtual ~chapter_codec_cmds_c(chapter_codec_cmds_c::~chapter_codec_cmds_c52,1941
    void SetPrivate(chapter_codec_cmds_c::SetPrivate60,2136
    virtual bool Enter(chapter_codec_cmds_c::Enter68,2420
    virtual bool Leave(chapter_codec_cmds_c::Leave69,2463
    virtual std::string GetCodecName(chapter_codec_cmds_c::GetCodecName70,2506
    virtual int16 GetTitleNumber(chapter_codec_cmds_c::GetTitleNumber71,2572
    KaxChapterProcessPrivate *p_private_data;chapter_codec_cmds_c::p_private_data73,2623
    std::vector<KaxChapterProcessData*> enter_cmds;chapter_codec_cmds_c::enter_cmds76,2681
    std::vector<KaxChapterProcessData*> during_cmds;chapter_codec_cmds_c::during_cmds77,2733
    std::vector<KaxChapterProcessData*> leave_cmds;chapter_codec_cmds_c::leave_cmds78,2786
    int i_codec_id;chapter_codec_cmds_c::i_codec_id80,2839
    demux_sys_t & sys;chapter_codec_cmds_c::sys81,2859
class dvd_command_interpretor_c85,2887
    dvd_command_interpretor_c(dvd_command_interpretor_c::dvd_command_interpretor_c88,2929
    uint16 GetPRM(dvd_command_interpretor_c::GetPRM104,3402
    uint16 GetGPRM(dvd_command_interpretor_c::GetGPRM111,3541
    uint16 GetSPRM(dvd_command_interpretor_c::GetSPRM118,3680
    bool SetPRM(dvd_command_interpretor_c::SetPRM126,3882
    bool SetGPRM(dvd_command_interpretor_c::SetGPRM136,4071
    bool SetSPRM(dvd_command_interpretor_c::SetSPRM146,4261
    std::string GetRegTypeName(dvd_command_interpretor_c::GetRegTypeName157,4498
    uint16       p_PRMs[dvd_command_interpretor_c::p_PRMs190,5361
    demux_sys_t  & sys;dvd_command_interpretor_c::sys191,5391
    static const uint16 CMD_DVD_TEST_VALUE dvd_command_interpretor_c::CMD_DVD_TEST_VALUE197,5511
    static const uint16 CMD_DVD_IF_GPREG_AND dvd_command_interpretor_c::CMD_DVD_IF_GPREG_AND198,5571
    static const uint16 CMD_DVD_IF_GPREG_EQUAL dvd_command_interpretor_c::CMD_DVD_IF_GPREG_EQUAL199,5635
    static const uint16 CMD_DVD_IF_GPREG_NOT_EQUAL dvd_command_interpretor_c::CMD_DVD_IF_GPREG_NOT_EQUAL200,5699
    static const uint16 CMD_DVD_IF_GPREG_SUP_EQUAL dvd_command_interpretor_c::CMD_DVD_IF_GPREG_SUP_EQUAL201,5763
    static const uint16 CMD_DVD_IF_GPREG_SUP dvd_command_interpretor_c::CMD_DVD_IF_GPREG_SUP202,5827
    static const uint16 CMD_DVD_IF_GPREG_INF_EQUAL dvd_command_interpretor_c::CMD_DVD_IF_GPREG_INF_EQUAL203,5891
    static const uint16 CMD_DVD_IF_GPREG_INF dvd_command_interpretor_c::CMD_DVD_IF_GPREG_INF204,5955
    static const uint16 CMD_DVD_NOP dvd_command_interpretor_c::CMD_DVD_NOP206,6020
    static const uint16 CMD_DVD_GOTO_LINE dvd_command_interpretor_c::CMD_DVD_GOTO_LINE207,6085
    static const uint16 CMD_DVD_BREAK dvd_command_interpretor_c::CMD_DVD_BREAK208,6150
    static const uint16 CMD_DVD_NOP2 dvd_command_interpretor_c::CMD_DVD_NOP2210,6228
    static const uint16 CMD_DVD_LINKPGCN dvd_command_interpretor_c::CMD_DVD_LINKPGCN211,6293
    static const uint16 CMD_DVD_LINKPGN dvd_command_interpretor_c::CMD_DVD_LINKPGN212,6358
    static const uint16 CMD_DVD_LINKCN dvd_command_interpretor_c::CMD_DVD_LINKCN213,6423
    static const uint16 CMD_DVD_JUMP_TT dvd_command_interpretor_c::CMD_DVD_JUMP_TT214,6488
    static const uint16 CMD_DVD_JUMPVTS_TT dvd_command_interpretor_c::CMD_DVD_JUMPVTS_TT215,6553
    static const uint16 CMD_DVD_JUMPVTS_PTT dvd_command_interpretor_c::CMD_DVD_JUMPVTS_PTT216,6618
    static const uint16 CMD_DVD_JUMP_SS dvd_command_interpretor_c::CMD_DVD_JUMP_SS217,6683
    static const uint16 CMD_DVD_CALLSS_VTSM1 dvd_command_interpretor_c::CMD_DVD_CALLSS_VTSM1218,6748
    static const uint16 CMD_DVD_SET_HL_BTNN2 dvd_command_interpretor_c::CMD_DVD_SET_HL_BTNN2220,6820
    static const uint16 CMD_DVD_SET_HL_BTNN_LINKPGCN1 dvd_command_interpretor_c::CMD_DVD_SET_HL_BTNN_LINKPGCN1221,6885
    static const uint16 CMD_DVD_SET_STREAM dvd_command_interpretor_c::CMD_DVD_SET_STREAM222,6950
    static const uint16 CMD_DVD_SET_GPRMMD dvd_command_interpretor_c::CMD_DVD_SET_GPRMMD223,7015
    static const uint16 CMD_DVD_SET_HL_BTNN1 dvd_command_interpretor_c::CMD_DVD_SET_HL_BTNN1224,7080
    static const uint16 CMD_DVD_SET_HL_BTNN_LINKPGCN2 dvd_command_interpretor_c::CMD_DVD_SET_HL_BTNN_LINKPGCN2225,7145
    static const uint16 CMD_DVD_SET_HL_BTNN_LINKCN dvd_command_interpretor_c::CMD_DVD_SET_HL_BTNN_LINKCN226,7210
    static const uint16 CMD_DVD_MOV_SPREG_PREG dvd_command_interpretor_c::CMD_DVD_MOV_SPREG_PREG228,7293
    static const uint16 CMD_DVD_GPREG_MOV_VALUE dvd_command_interpretor_c::CMD_DVD_GPREG_MOV_VALUE229,7358
    static const uint16 CMD_DVD_SUB_GPREG dvd_command_interpretor_c::CMD_DVD_SUB_GPREG230,7423
    static const uint16 CMD_DVD_MULT_GPREG dvd_command_interpretor_c::CMD_DVD_MULT_GPREG231,7488
    static const uint16 CMD_DVD_GPREG_DIV_VALUE dvd_command_interpretor_c::CMD_DVD_GPREG_DIV_VALUE232,7553
    static const uint16 CMD_DVD_GPREG_AND_VALUE dvd_command_interpretor_c::CMD_DVD_GPREG_AND_VALUE233,7618
class dvd_chapter_codec_c 250,8806
    dvd_chapter_codec_c(dvd_chapter_codec_c::dvd_chapter_codec_c253,8872
class matroska_script_interpretor_c267,9186
    matroska_script_interpretor_c(matroska_script_interpretor_c::matroska_script_interpretor_c270,9232
    static const std::string CMD_MS_GOTO_AND_PLAY;matroska_script_interpretor_c::CMD_MS_GOTO_AND_PLAY277,9406
    demux_sys_t  & sys;matroska_script_interpretor_c::sys280,9469
class matroska_script_codec_c 284,9498
    matroska_script_codec_c(matroska_script_codec_c::matroska_script_codec_c287,9568
    matroska_script_interpretor_c interpretor;matroska_script_codec_c::interpretor296,9733

control/dbus/dbus.c,1355
#define VLC_MODULE_LICENSE 56,2123
#define DBUS_MPRIS_BUS_NAME 74,2482
#define DBUS_INSTANCE_ID_PREFIX 75,2539
#define SEEK_THRESHOLD 77,2583
static const DBusObjectPathVTable dbus_mpris_vtable 86,2910
    int signal;93,3072
    int i_node;94,3088
    int i_item;95,3104
} callback_info_t;96,3120
    PIPE_OUT 100,3147
    PIPE_IN 101,3165
vlc_module_begin 137,4620
static void Close 293,10283
static dbus_bool_t add_timeout(341,12233
static void remove_timeout(359,12644
static void toggle_timeout(370,12948
static int next_timeout(390,13551
static void process_timeouts(425,14303
static dbus_bool_t add_watch(451,14956
static void remove_watch(463,15280
static void watch_toggled(476,15651
static int GetPollFds(497,16343
static void ProcessEvents(535,17458
static void ProcessWatches(664,22150
static void DispatchDBusMessages(712,23540
MPRISEntryPoint 737,24292
static void *Run(Run784,26037
static void   wakeup_main_loop(865,28583
static int InputCallback(881,29065
static int AllCallback(978,32135
static int TrackChange(1042,34390
int DemarshalSetPropertyValue(1094,35919
#define ADD_META(1119,36753
#define ADD_VLC_META_STRING(1133,37408
#define ADD_META_SINGLETON_STRING_LIST(1141,37618
int GetInputMeta(1163,38640
int AddProperty(1228,41126
#undef ADD_META1263,42318
#undef ADD_VLC_META_STRING1264,42334

demux/smooth/playlist/Parser.hpp,668
#define MANIFESTPARSER_HPP21,993
namespace adaptive30,1138
    namespace playlistadaptive::playlist32,1159
    namespace xmladaptive::xml39,1323
namespace smooth45,1376
    namespace playlistsmooth::playlist47,1395
        class ManifestParsersmooth::playlist::ManifestParser54,1528
                xml::Node       *root;smooth::playlist::ManifestParser::root64,1844
                vlc_object_t    *p_object;smooth::playlist::ManifestParser::p_object65,1883
                stream_t        *p_stream;smooth::playlist::ManifestParser::p_stream66,1926
                std::string      playlisturl;smooth::playlist::ManifestParser::playlisturl67,1969

video_output/evas.c,4100
#undef HAVE_TIZEN_SDK40,1487
#  define HAVE_EVAS_CALLBACK_KEY_UP48,1716
#define CHROMA_TEXT 55,1948
#define CHROMA_LONGTEXT 56,1982
vlc_module_begin(61,2130
struct fifo_item84,2880
    struct fifo_item *p_next;p_next86,2899
struct fifo89,2933
    vlc_mutex_t lock;91,2947
    struct fifo_item *p_first;p_first92,2969
    struct fifo_item *p_last;p_last93,3000
struct buffer96,3034
    struct fifo_item fifo_item;98,3050
    uint8_t *p[p99,3082
    bool b_locked;100,3117
    tbm_surface_h p_tbm_surface;102,3158
struct event106,3202
    struct fifo_item fifo_item;108,3217
    int i_type;109,3249
        int i_key;111,3277
        int i_button;112,3296
            int i_x,114,3335
            int i_x, i_y;114,3335
        } point;115,3361
    } u;116,3378
struct vout_display_sys_t119,3391
    picture_pool_t  *p_pool;p_pool121,3419
    int              i_width,123,3449
    int              i_width, i_height;123,3449
    plane_t          p_planes[p_planes126,3507
    int              i_planes_order[i_planes_order127,3557
    unsigned int     i_nb_planes;128,3613
    struct buffer   *p_buffers;p_buffers131,3681
    unsigned int     i_nb_buffers;132,3713
    struct fifo      buffer_fifo;135,3790
    struct buffer   *p_new_buffer;p_new_buffer138,3857
    struct buffer   *p_current_buffer;p_current_buffer140,3925
    Evas_Object     *p_evas;p_evas143,3980
    Ecore_Animator  *p_anim;p_anim144,4009
    bool             b_evas_changed;147,4106
    bool             b_apply_rotation;149,4188
    struct fifo      event_fifo;152,4253
    vlc_mutex_t      cb_lock;155,4341
    vlc_cond_t       cb_wait;156,4371
        struct evas159,4414
            Evas_Colorspace     i_colorspace;161,4444
            bool                b_yuv;162,4490
        } evas;163,4529
            tbm_format          i_format;166,4584
            int                 i_angle;167,4626
        } tbm;168,4667
    } u;170,4689
    int     (*pf_set_data)pf_set_data173,4756
    int     (*pf_buffers_alloc)pf_buffers_alloc174,4804
    void    (*pf_buffers_free)pf_buffers_free175,4875
struct picture_sys_t178,4931
    vout_display_sys_t *p_vd_sys;p_vd_sys180,4954
    struct buffer *p_buffer;p_buffer181,4988
fifo_push(185,5033
fifo_pop(204,5406
fifo_init(225,5798
fifo_deinit(232,5930
#define BUFFER_FIFO_PUSH(237,6010
#define BUFFER_FIFO_POP(238,6106
#define EVENT_FIFO_PUSH(239,6180
#define EVENT_FIFO_POP(240,6272
typedef int (*mainloop_cb)mainloop_cb242,6344
struct mainloop_cb_args244,6395
    vout_display_t *vd;vd246,6421
    mainloop_cb p_cb;247,6445
    int i_ret;248,6467
    bool b_signal;249,6482
EcoreMainLoopCb(253,6517
EcoreMainLoopCallSync(267,6855
EventSendKey(283,7342
EvasKeyUpCb(296,7648
EventSendMouseMoved(306,7873
EventSendMouseButton(322,8422
EventMouseDownCb(335,8741
EvasMouseUpCb(345,9054
EvasMouseMoveCb(355,9357
EvasMultiDownCb(364,9662
EvasMultiUpCb(371,9860
EvasMultiMoveCb(378,10057
FmtUpdate(388,10363
mainloop_evas_anim_cb(417,11240
EvasResizeCb(428,11472
EvasDisplayMainloopCb(438,11698
EvasInitMainloopCb(461,12331
EvasDeinitMainloopCb(498,13813
EvasResetMainloopCb(538,15373
BuffersSetup(565,16070
BuffersClean(584,16567
PictureAlloc(594,16790
PoolLockPicture(624,17475
PoolUnlockPicture(640,17882
PoolAlloc(653,18166
Pool(712,19700
Display(722,19924
Control(739,20332
Manage(799,22052
Close(826,22903
Open(853,23450
EvasImageSetData(924,25265
EvasImageBuffersFree(954,26065
EvasImageBuffersAlloc(967,26370
EvasImageSetup(1032,28093
struct tbm_format_to_vlc1097,30019
   tbm_format  i_tbm_format;1099,30046
   vlc_fourcc_t i_vlc_chroma;1100,30075
struct tbm_format_to_vlc tbm_format_to_vlc_list[tbm_format_to_vlc_list1103,30109
#define TBM_FORMAT_TO_VLC_LIST_COUNT 1108,30293
EvasIsOpenGLSupported(1112,30417
TbmSurfaceBufferLock(1143,31197
TbmSurfaceBufferUnlock(1156,31577
TbmSurfaceSetData(1164,31734
TbmSurfaceBuffersFree(1185,32336
TbmSurfaceBuffersAllocMainloopCb(1202,32781
TbmSurfaceBuffersAlloc(1248,34296
TbmSurfaceSetup(1255,34472

access/dcp/dcpparser.h,6631
#define VLC_DCP_DCPPARSER_H_35,1384
using namespace std;55,1701
    TRACK_UNKNOWN 57,1737
    TRACK_PICTURE,58,1760
    TRACK_SOUND,59,1779
    TRACK_SUBTITLE60,1796
} TrackType_t;61,1815
class AssetList:AssetList64,1844
class AESKeyList:AESKeyList67,1916
struct info_reel70,2035
    string filename;info_reel::filename72,2054
    int i_entrypoint;info_reel::i_entrypoint73,2075
    int i_duration;info_reel::i_duration74,2097
    int i_correction;info_reel::i_correction75,2117
    uint32_t i_absolute_end;info_reel::i_absolute_end76,2190
    AESKey * p_key;info_reel::p_key77,2251
struct dcp_t81,2345
    string path;dcp_t::path83,2360
    vector<PKL *> pkls;dcp_t::pkls85,2425
    AssetList *p_asset_list;dcp_t::p_asset_list86,2449
    AESKeyList *p_key_list;dcp_t::p_key_list87,2478
    vector<info_reel> audio_reels;dcp_t::audio_reels89,2507
    vector<info_reel> video_reels;dcp_t::video_reels90,2542
    dcp_t(dcp_t::dcp_t92,2578
    ~dcp_t(dcp_t::~dcp_t95,2641
class XmlFile109,2942
    XmlFile(XmlFile::XmlFile112,2966
    demux_t      *p_demux;XmlFile::p_demux126,3394
    string       s_path;XmlFile::s_path127,3421
    stream_t     *p_stream;XmlFile::p_stream128,3446
    xml_reader_t *p_xmlReader;XmlFile::p_xmlReader130,3475
class Chunk 136,3551
    Chunk(Chunk::Chunk138,3573
    string getPath(Chunk::getPath142,3747
    string s_path;Chunk::s_path144,3803
    int i_vol_index;Chunk::i_vol_index145,3822
    int i_offset;Chunk::i_offset146,3843
    int i_length;Chunk::i_length147,3861
    demux_t      *p_demux;Chunk::p_demux148,3879
class Asset 151,3910
    Asset Asset::Asset154,3954
    void setId(Asset::setId160,4145
    void setPath(Asset::setPath161,4206
    void setAnnotation(Asset::setAnnotation162,4270
    void setKeyId(Asset::setKeyId168,4486
    void setPackingList(Asset::setPackingList169,4553
    void setEntryPoint(Asset::setEntryPoint170,4618
    void setDuration Asset::setDuration171,4686
    void setIntrinsicDuration Asset::setIntrinsicDuration172,4750
    string getId(Asset::getId173,4832
    string getPath(Asset::getPath174,4882
    string getType(Asset::getType175,4935
    string getOriginalFilename(Asset::getOriginalFilename176,4988
    string getKeyId(Asset::getKeyId177,5066
    int getEntryPoint(Asset::getEntryPoint178,5121
    int getDuration(Asset::getDuration179,5184
    int getIntrinsicDuration(Asset::getIntrinsicDuration180,5242
    bool isPackingList(Asset::isPackingList182,5319
    string      s_id;Asset::s_id193,5619
    string      s_path;Asset::s_path194,5641
    string      s_annotation;Asset::s_annotation195,5665
    bool        b_is_packing_list;Asset::b_is_packing_list196,5695
    string      s_hash;Asset::s_hash197,5730
    uint32_t    ui_size;Asset::ui_size198,5754
    string      s_type;Asset::s_type199,5779
    string      s_original_filename;Asset::s_original_filename200,5803
    TrackType_t e_track_type;Asset::e_track_type201,5840
    string      s_edit_rate;Asset::s_edit_rate202,5870
    int         i_intrisic_duration;Asset::i_intrisic_duration203,5899
    int         i_entry_point;Asset::i_entry_point204,5936
    int         i_duration;Asset::i_duration205,5967
    string      s_key_id;Asset::s_key_id207,6026
    string      s_frame_rate;Asset::s_frame_rate209,6081
    string      s_screen_aspect_ratio;Asset::s_screen_aspect_ratio210,6111
    string      s_language;Asset::s_language212,6179
    demux_t     *p_demux;Asset::p_demux214,6208
    std::vector<Chunk> chunk_vec;Asset::chunk_vec215,6234
class Reel224,6356
    Reel(Reel::Reel227,6377
    AssetList *p_asset_list;Reel::p_asset_list234,6702
    xml_reader_t *p_xmlReader;Reel::p_xmlReader235,6731
    demux_t      *p_demux;Reel::p_demux236,6762
    string s_id;Reel::s_id238,6790
    string s_annotation;Reel::s_annotation239,6807
    Asset  *p_picture_track;Reel::p_picture_track240,6832
    Asset  *p_sound_track;Reel::p_sound_track241,6861
    Asset  *p_subtitle_track;Reel::p_subtitle_track242,6888
class CPL 248,7042
    CPL(CPL::CPL251,7079
    Reel *getReel(CPL::getReel257,7256
    std::vector<Reel *> getReelList(CPL::getReelList258,7317
    AssetList *asset_list;CPL::asset_list261,7395
    string s_id;CPL::s_id263,7423
    string s_annotation;CPL::s_annotation264,7440
    string s_icon_id;CPL::s_icon_id265,7465
    string s_issue_date;CPL::s_issue_date266,7487
    string s_issuer;CPL::s_issuer267,7512
    string s_creator;CPL::s_creator268,7533
    string s_content_title;CPL::s_content_title269,7555
    string s_content_kind;CPL::s_content_kind270,7583
    std::vector<Reel *>   vec_reel;CPL::vec_reel273,7677
class PKL 279,7815
    PKL(PKL::PKL282,7852
    CPL *getCPL(PKL::getCPL289,8081
    AssetList *asset_list;PKL::asset_list292,8148
    string s_id;PKL::s_id294,8176
    string s_annotation;PKL::s_annotation295,8193
    string s_issue_date;PKL::s_issue_date296,8218
    string s_issuer;PKL::s_issuer297,8243
    string s_creator;PKL::s_creator298,8264
    string s_icon_id;PKL::s_icon_id299,8286
    string s_group_id;PKL::s_group_id300,8308
    string s_dcp_path;PKL::s_dcp_path301,8331
    std::vector<CPL *> vec_cpl;PKL::vec_cpl302,8354
class AssetMap 311,8589
    AssetMap(AssetMap::AssetMap314,8632
    dcp_t *p_dcp;AssetMap::p_dcp322,8869
class KDM 327,8977
    KDM(KDM::KDM330,9015
    dcp_t *p_dcp;KDM::p_dcp336,9165
class AESKey341,9245
    AESKey(AESKey::AESKey344,9268
    virtual ~AESKey(AESKey::~AESKey345,9319
    const string getKeyId(AESKey::getKeyId347,9346
    const unsigned char * getKey(AESKey::getKey348,9402
    demux_t *p_demux;AESKey::p_demux353,9546
    string s_key_id;AESKey::s_key_id354,9568
    unsigned char ps_key[AESKey::ps_key355,9589
class RSAKey361,9738
    RSAKey(RSAKey::RSAKey364,9761
    virtual ~RSAKey(RSAKey::~RSAKey366,9838
      TAG_INTEGER RSAKey::TAG_INTEGER371,9939
      TAG_SEQUENCE RSAKey::TAG_SEQUENCE372,9962
    struct tag_infoRSAKey::tag_info376,10027
        int class_;RSAKey::tag_info::class_378,10053
        unsigned long tag;RSAKey::tag_info::tag379,10105
        unsigned long length;RSAKey::tag_info::length380,10166
        int nhdr;RSAKey::tag_info::nhdr381,10226
        unsigned int ndef:RSAKey::tag_info::ndef382,10291
        unsigned int cons:RSAKey::tag_info::cons383,10366
    gcry_sexp_t priv_key;RSAKey::priv_key391,10635
    demux_t *p_demux;RSAKey::p_demux394,10671
    string s_path;RSAKey::s_path395,10693

demux/playlist/xspf.c,1273
#define FREE_VALUE(41,1515
#define SIMPLE_INTERFACE 43,1585
#define COMPLEX_INTERFACE 46,1749
static bool parse_playlist_node COMPLEX_INTERFACE;52,2008
static bool parse_tracklist_node COMPLEX_INTERFACE;53,2059
static bool parse_track_node COMPLEX_INTERFACE;54,2111
static bool parse_extension_node COMPLEX_INTERFACE;55,2159
static bool parse_extitem_node COMPLEX_INTERFACE;56,2211
static bool set_item_info SIMPLE_INTERFACE;57,2261
static bool set_option SIMPLE_INTERFACE;58,2305
static bool skip_element COMPLEX_INTERFACE;59,2346
    const char *name;name64,2424
        bool (*smpl) SIMPLE_INTERFACE;67,2462
        bool (*cmplx) COMPLEX_INTERFACE;68,2501
    } pf_handler;69,2542
    bool cmplx;70,2560
} xml_elem_hnd_t;71,2576
struct demux_sys_t72,2594
    input_item_t **pp_tracklist;pp_tracklist74,2615
    int i_tracklist_entries;75,2648
    int i_track_id;76,2677
    char * psz_base;77,2697
int Import_xspf(85,2809
void Close_xspf(100,3145
static int Demux(115,3542
static const xml_elem_hnd_t *get_handler(get_handler169,5085
#define get_handler(176,5330
static bool parse_playlist_node COMPLEX_INTERFACE185,5621
static bool parse_track_node COMPLEX_INTERFACE352,10791
static bool parse_extension_node COMPLEX_INTERFACE583,18409

demux/mp4/avci.h,1201
# define MP4_AVCI_H21,1083
static const uint8_t AVCi_HIGH_422_1080p_sps[AVCi_HIGH_422_1080p_sps24,1169
static const uint8_t AVCi_HIGH_422_1080i_sps[AVCi_HIGH_422_1080i_sps35,1615
static const uint8_t AVCi_HIGH_422_720p_sps[AVCi_HIGH_422_720p_sps49,2211
static const uint8_t AVCi_HIGH_10_1080p_sps[AVCi_HIGH_10_1080p_sps61,2720
static const uint8_t AVCi_HIGH_10_1080i_sps[AVCi_HIGH_10_1080i_sps72,3190
static const uint8_t AVCi_HIGH_10_720p_sps[AVCi_HIGH_10_720p_sps86,3779
static const uint8_t AVCi_HIGH_422_1080x_pps[AVCi_HIGH_422_1080x_pps97,4235
static const uint8_t AVCi_HIGH_422_720p_pps[AVCi_HIGH_422_720p_pps101,4317
static const uint8_t AVCi_HIGH_10_pps[AVCi_HIGH_10_pps105,4398
#define AVCI_ENTRY(110,4474
#define AVCI_ENTRIES 111,4539
    bool b_interlace;115,4585
    const uint8_t *p_sps;p_sps116,4607
    const uint8_t *p_pps;p_pps117,4633
    uint8_t  i_sps;118,4659
    uint8_t  i_pps;119,4679
    uint16_t i_res;120,4699
} AVCi_lookup_table[AVCi_lookup_table121,4719
static inline bool AVCi_lookup(130,5213
#undef AVCI_ENTRY148,5823
#undef AVCI_ENTRIES149,5841
static uint8_t * AVCi_create_avcC(152,5868
static uint8_t * AVCi_create_AnnexB(182,6980

audio_filter/spatializer/tuning.h,1336
#define _tuning_8,157
const int   numcombs 10,175
const int   numallpasses 11,209
const float muted 12,243
const float fixedgain 13,277
const float scalewet 14,316
const float scaledry 15,350
const float scaledamp 16,384
const float scaleroom 17,421
const float offsetroom 18,459
const float initialroom 19,496
const float initialdamp 20,533
const float initialwet 21,570
const float initialdry 22,613
const float initialwidth 23,647
const float initialmode 24,681
const float freezemode 25,715
const int   stereospread 26,752
const int combtuningL1 32,990
const int combtuningR1 33,1027
const int combtuningL2 34,1077
const int combtuningR2 35,1114
const int combtuningL3 36,1164
const int combtuningR3 37,1201
const int combtuningL4 38,1251
const int combtuningR4 39,1288
const int combtuningL5 40,1338
const int combtuningR5 41,1375
const int combtuningL6 42,1425
const int combtuningR6 43,1462
const int combtuningL7 44,1512
const int combtuningR7 45,1549
const int combtuningL8 46,1599
const int combtuningR8 47,1636
const int allpasstuningL1 48,1686
const int allpasstuningR1 49,1722
const int allpasstuningL2 50,1771
const int allpasstuningR2 51,1807
const int allpasstuningL3 52,1856
const int allpasstuningR3 53,1892
const int allpasstuningL4 54,1941
const int allpasstuningR4 55,1977

text_renderer/freetype/freetype.c,2552
# undef HAVE_FONTCONFIG47,2050
# define HAVE_GET_FONT_BY_FAMILY_NAME48,2074
# undef HAVE_FONTCONFIG53,2146
#  define HAVE_GET_FONT_BY_FAMILY_NAME55,2193
# define HAVE_GET_FONT_BY_FAMILY_NAME61,2288
# define HAVE_GET_FONT_BY_FAMILY_NAME66,2367
#define FONT_TEXT 81,2769
#define MONOSPACE_FONT_TEXT 82,2798
#define FAMILY_LONGTEXT 84,2848
#define FONT_LONGTEXT 85,2919
#define FONTSIZE_TEXT 87,2987
#define FONTSIZE_LONGTEXT 88,3035
#define OPACITY_TEXT 92,3256
#define OPACITY_LONGTEXT 93,3296
#define COLOR_TEXT 96,3472
#define COLOR_LONGTEXT 97,3516
#define FONTSIZER_TEXT 101,3829
#define FONTSIZER_LONGTEXT 102,3877
#define BOLD_TEXT 105,4075
#define BG_OPACITY_TEXT 107,4111
#define BG_COLOR_TEXT 108,4160
#define OUTLINE_OPACITY_TEXT 110,4206
#define OUTLINE_COLOR_TEXT 111,4257
#define OUTLINE_THICKNESS_TEXT 112,4304
#define SHADOW_OPACITY_TEXT 114,4360
#define SHADOW_COLOR_TEXT 115,4409
#define SHADOW_ANGLE_TEXT 116,4454
#define SHADOW_DISTANCE_TEXT 117,4499
#define TEXT_DIRECTION_TEXT 119,4551
#define TEXT_DIRECTION_LONGTEXT 120,4600
static const int pi_sizes[pi_sizes123,4707
static const char *const ppsz_sizes_text[ppsz_sizes_text124,4760
#define YUVP_TEXT 126,4882
#define YUVP_LONGTEXT 127,4924
static const int pi_color_values[pi_color_values130,5076
static const char *const ppsz_color_descriptions[ppsz_color_descriptions135,5316
static const int pi_outline_thickness[pi_outline_thickness140,5586
static const char *const ppsz_outline_thickness[ppsz_outline_thickness143,5649
static const int pi_text_direction[pi_text_direction148,5782
static const char *const ppsz_text_direction[ppsz_text_direction151,5839
vlc_module_begin 156,5959
#define FREETYPE_DEFAULT_FONT_SIZE 170,6586
static void RGBFromRGB(262,10256
static int LoadFontsFromAttachments(274,10780
static int RenderYUVP(405,15240
static void FillYUVAPicture(530,20048
static inline void BlendYUVAPixel(543,20602
static void FillRGBAPicture(575,21773
static inline void BlendRGBAPixel(591,22270
static void FillARGBPicture(620,23232
static inline void BlendARGBPixel(642,23869
static inline void BlendAXYZGlyph(668,24620
static inline void BlendAXYZLine(684,25329
static inline void RenderBackground(705,26237
static inline int RenderAXYZ(807,30919
static void FillDefaultStyles(928,36366
static void FreeStylesArray(969,38722
static uni_char_t* SegmentsToTextAndStyles(983,39047
static int Render(1060,41972
static void FreeFace(1165,45978
static int Create(1177,46458
static void Destroy(1309,51331

demux/vc1.c,399
#define FPS_TEXT 43,1734
#define FPS_LONGTEXT 44,1775
vlc_module_begin 46,1843
struct demux_sys_t60,2363
    mtime_t     i_dts;62,2384
    es_out_id_t *p_es;p_es63,2407
    float       f_fps;65,2431
    decoder_t *p_packetizer;p_packetizer66,2454
#define VC1_PACKET_SIZE 72,2566
static int Open(77,2793
static void Close(126,4288
static int Demux(140,4835
static int Control(192,6639

gui/minimal_macosx/misc.h,66
@interface NSScreen (VLCAdditions)NSScreen(VLCAdditions)28,1324

video_filter/adjust.c,956
#define THRES_TEXT 60,2430
#define THRES_LONGTEXT 61,2476
#define CONT_TEXT 64,2657
#define CONT_LONGTEXT 65,2702
#define HUE_TEXT 66,2786
#define HUE_LONGTEXT 67,2827
#define SAT_TEXT 68,2907
#define SAT_LONGTEXT 69,2953
#define LUM_TEXT 70,3038
#define LUM_LONGTEXT 71,3084
#define GAMMA_TEXT 72,3169
#define GAMMA_LONGTEXT 73,3213
vlc_module_begin 75,3300
struct filter_sys_t113,4761
    vlc_mutex_t lock;115,4783
    float f_contrast;116,4805
    float f_brightness;117,4827
    float f_hue;118,4851
    float f_saturation;119,4868
    float f_gamma;120,4892
    bool  b_brightness_threshold;121,4911
    int (*pf_process_sat_hue)pf_process_sat_hue122,4945
    int (*pf_process_sat_hue_clip)pf_process_sat_hue_clip124,5060
static int Create(131,5389
static void Destroy(208,8431
static picture_t *FilterPlanar(FilterPlanar228,9304
static picture_t *FilterPacked(FilterPacked427,15341
static int AdjustCallback(597,20300

codec/opus.c,1406
vlc_module_begin 58,2107
struct decoder_sys_t80,2799
    bool b_has_headers;85,2861
    OpusHeader header;90,2924
    OpusMSDecoder *p_st;p_st91,2947
    date_t end_date;96,3013
static const int pi_channels_maps[pi_channels_maps99,3038
static const uint32_t pi_8channels_in[pi_8channels_in124,4002
static const uint32_t pi_7channels_in[pi_7channels_in130,4261
static const uint32_t pi_6channels_in[pi_6channels_in136,4502
static const uint32_t pi_5channels_in[pi_5channels_in141,4715
static const uint32_t pi_4channels_in[pi_4channels_in146,4913
static const uint32_t pi_3channels_in[pi_3channels_in150,5091
static int OpenDecoder(168,5919
static block_t *DecodeBlock(DecodeBlock201,6972
static int ProcessHeaders(235,7890
static int ProcessInitialHeader(296,9670
static void Flush(367,12223
static void *ProcessPacket(ProcessPacket377,12547
static block_t *DecodePacket(DecodePacket421,13879
static void CloseDecoder(489,16220
static const unsigned OPUS_FRAME_SIZE 505,16731
struct encoder_sys_t507,16801
    OpusMSEncoder *enc;enc509,16824
    float *buffer;buffer510,16848
    unsigned i_nb_samples;511,16867
    int i_samples_delay;512,16894
    block_t *padding;padding513,16919
    int nb_streams;514,16941
static unsigned fill_buffer(517,16965
static block_t *Encode(Encode535,17552
static int OpenEncoder(612,19981
static void CloseEncoder(718,23068

demux/mp4/mp4.c,4668
vlc_module_begin 46,1848
struct demux_sys_t65,2561
    MP4_Box_t    *p_root;p_root67,2582
    mtime_t      i_pcr;69,2649
    uint64_t     i_overall_duration;71,2674
    uint64_t     i_time;72,2756
    uint32_t     i_timescale;74,2884
    unsigned int i_tracks;75,2940
    mp4_track_t  *track;track76,2996
    float        f_fps;77,3050
    bool         b_fragmented;79,3118
    bool         b_seekable;80,3162
    bool         b_fastseekable;81,3191
    bool         b_seekmode;82,3224
    bool            b_index_probed;84,3254
    bool            b_fragments_probed;85,3290
    mp4_fragments_t fragments;87,3331
        mp4_fragment_t *p_fragment;p_fragment91,3380
        uint32_t        i_current_box_type;92,3416
        uint32_t        i_mdatbytesleft;93,3460
        uint32_t        i_lastseqnumber;94,3501
    } context;95,3542
    MP4_Box_t    *p_tref_chap;p_tref_chap98,3568
    input_title_t *p_title;p_title101,3610
    asf_packet_sys_t asfpacketsys;104,3660
    uint64_t i_preroll;105,3695
    int64_t  i_preroll_start;106,3740
static uint32_t stream_ReadU32(158,6287
static MP4_Box_t * MP4_GetTrexByTrackID(173,6731
static MP4_Box_t * MP4_GetTrakByTrackID(189,7152
static es_out_id_t * MP4_AddTrackES(205,7607
static inline int64_t MP4_TrackGetDTS(216,7990
static inline bool MP4_TrackGetPTSDelta(269,9594
static inline int64_t MP4_GetMoviePTS(299,10496
static int LoadInitFrag(306,10667
static int AllocateTracks(323,11068
static block_t * MP4_EIA608_Convert(345,11669
static block_t * MP4_Block_Read(404,13341
static void MP4_Block_Send(435,14157
static int Open(471,15519
const unsigned int SAMPLEHEADERSIZE 880,29064
const unsigned int RTPPACKETSIZE 881,29105
const unsigned int CONSTRUCTORSIZE 882,29144
static block_t * MP4_RTPHintToFrame(887,29428
static block_t * MP4_RTPHint_Convert(979,32554
static int Demux(1016,33763
static void MP4_UpdateSeekpoint(1211,39758
static int Seek(1235,40471
static int LeafSeekIntoFragment(1258,41121
static int LeafSeekToTime(1307,42809
static int LeafSeekToPos(1379,45531
static int MP4_frg_Seek(1417,46858
static bool imageTypeCompatible(1451,47946
static int Control(1462,48356
static void Close 1769,59730
static void LoadChapterGpac(1798,60485
static void LoadChapterGoPro(1823,61241
static void LoadChapterApple(1843,61983
static void LoadChapter(1893,63943
static bool MP4_TrackIsInterleaved(1940,65494
static int TrackCreateChunksIndex(1956,66099
static int xTTS_CountEntries(2051,69441
static int TrackCreateSamplesIndex(2099,70961
static void TrackGetESSampleRate(2397,83208
static int TrackCreateES(2452,85004
static int TrackGetNearestSeekPoint(2541,87655
static int TrackTimeToSampleChunk(2613,90321
static int TrackGotoChunkSample(2749,94847
static void MP4_TrackRestart(2793,96262
static void MP4_TrackCreate(2869,98811
#define MAX_SELECTABLE 3110,106806
static void DestroyChunk(3137,107848
static void MP4_TrackDestroy(3158,108553
static int MP4_TrackSelect(3186,109277
static void MP4_TrackUnselect(3204,109722
static int MP4_TrackSeek(3226,110224
static inline uint32_t MP4_GetFixedSampleSize(3257,110995
static uint32_t MP4_TrackGetReadSize(3291,111992
static uint64_t MP4_TrackGetPos(3444,117565
static int MP4_TrackNextSample(3498,119354
static void MP4_TrackSetELST(3546,120962
static mp4_track_t *MP4_frg_GetTrackByID(MP4_frg_GetTrackByID3597,122632
static void FlushChunk(3612,123040
static int ReInitDecoder(3656,124392
static int MP4_frg_GetChunk(3678,125133
static int MP4_frg_GetChunks(3856,131738
static int MP4_frg_TrackSelect(3910,133225
int DemuxFrg(3933,133846
static bool BoxExistsInRootTree(4052,137618
static mtime_t SumFragmentsDurations(4066,137929
static bool AddFragment(4082,138419
static int ProbeIndex(4326,147336
static int ProbeFragments(4365,148793
static int LeafParseTRUN(4410,150172
static int LeafGetTrackAndChunkByMOOVPos(4504,153485
static int LeafMOOVGetSamplesSize(4545,154760
static inline mtime_t LeafGetMOOVTimeInChunk(4593,156373
static int LeafParseMDATwithMOOV(4617,156986
static mp4_track_t * LeafGetTrackByTrunPos(4762,162335
static int LeafMapTrafTrunContextes(4800,163685
static int LeafIndexGetMoofPosByTime(4851,165162
static void MP4_GetDefaultSizeAndDuration(4902,167310
static int LeafParseMDATwithMOOF(4928,168374
static void RestartAllTracks(5001,171097
static int DemuxAsLeaf(5015,171468
inline static mp4_track_t *MP4ASF_GetTrack(MP4ASF_GetTrack5178,177888
static asf_track_info_t * MP4ASF_GetTrackInfo(5193,178351
static void MP4ASF_Send(5203,178666
static void MP4ASF_ResetFrames(5222,179219
#undef BOXDATA5235,179555

video_chroma/i420_yuy2.c,1287
#define SRC_FOURCC 44,1680
#    define DEST_FOURCC 47,1757
#    define VLC_TARGET48,1823
#    define DEST_FOURCC 50,1891
#    define VLC_TARGET 51,1952
#    define DEST_FOURCC 53,2029
#    define VLC_TARGET 54,2090
#    define DEST_FOURCC 56,2170
#    define VLC_TARGET57,2226
static const uint64_t i_00ffw 82,3373
static const uint64_t i_80w 83,3428
vlc_module_begin 89,3672
# define vlc_CPU_capable(93,3849
# define vlc_CPU_capable(97,4051
# define vlc_CPU_capable(101,4262
# define vlc_CPU_capable(106,4492
static inline unsigned long long read_cycles(175,6707
VIDEO_FILTER_WRAPPER(186,6896
#define VEC_NEXT_LINES(211,7765
#define VEC_LOAD_UV(217,7925
#define VEC_MERGE(221,8035
#undef VEC_NEXT_LINES288,10786
#undef VEC_LOAD_UV289,10808
#undef VEC_MERGE290,10827
static void I420_YVYU(415,15094
#define VEC_NEXT_LINES(426,15469
#define VEC_LOAD_UV(432,15629
#define VEC_MERGE(436,15739
#undef VEC_NEXT_LINES500,18400
#undef VEC_LOAD_UV501,18422
#undef VEC_MERGE502,18441
static void I420_UYVY(628,22792
#define VEC_NEXT_LINES(639,23167
#define VEC_LOAD_UV(645,23327
#define VEC_MERGE(649,23437
#undef VEC_NEXT_LINES713,26098
#undef VEC_LOAD_UV714,26120
#undef VEC_MERGE715,26139
static void I420_IUYV(841,30538
static void I420_Y211(854,31125

text_renderer/freetype/freetype.h,1261
#define VLC_FREETYPE_H29,1423
#define FT_FLOOR(51,1925
#define FT_CEIL(52,1966
# define FT_MulFix(54,2032
typedef uint16_t uni_char_t;58,2096
# define FREETYPE_TO_UCS 59,2125
typedef uint32_t uni_char_t;61,2169
#  define FREETYPE_TO_UCS 63,2228
#  define FREETYPE_TO_UCS 65,2273
typedef struct vlc_family_t vlc_family_t;75,2737
struct filter_sys_t76,2779
    FT_Library     p_library;78,2801
    FT_Face        p_face;79,2865
    FT_Stroker     p_stroker;80,2929
    text_style_t  *p_default_style;p_default_style82,3002
    text_style_t  *p_forced_style;p_forced_style83,3038
    float          f_shadow_vector_x;86,3127
    float          f_shadow_vector_y;87,3165
    input_attachment_t **pp_font_attachments;pp_font_attachments90,3226
    int                  i_font_attachments;91,3272
    vlc_family_t      *p_families;p_families97,3463
    vlc_dictionary_t  family_map;102,3587
    vlc_dictionary_t  fallback_map;109,3846
    vlc_dictionary_t  face_map;112,3910
    int               i_fallback_counter;114,3943
    int               i_scale;117,4044
    char * (*pf_select)pf_select122,4164
    const vlc_family_t * (*pf_get_family)pf_get_family130,4499
    vlc_family_t * (*pf_get_fallbacks)pf_get_fallbacks138,4839

arm_neon/i420_rgb.S,128
coefficients:coefficients77,1940
i420_rgb_neon:i420_rgb_neon85,2077
loop_row:loop_row115,2739
loop_col:loop_col123,2899

gui/minimal_macosx/misc.m,138
@implementation NSScreen (VLCAdditions)28,1317
- (BOOL)hasMenuBar30,1358
- (BOOL)hasDock35,1465
- (CGDirectDisplayID)displayID50,1960

packetizer/copy.c,342
vlc_module_begin 45,1788
struct decoder_sys_t56,2197
    block_t *p_block;p_block58,2220
    void (*pf_parse)pf_parse59,2242
static int Open(74,2868
static void Close(126,4354
static void Flush(139,4613
static block_t *Packetize Packetize152,5020
static block_t *PacketizeSub(PacketizeSub195,6205
static void ParseWMV3(226,6874

demux/mp4/mp4.h,3372
#define VLC_MP4_MP4_H_22,1111
    uint64_t     i_offset;36,1466
    uint32_t     i_sample_description_index;37,1543
    uint32_t     i_sample_count;38,1623
    uint32_t     i_sample_first;39,1693
    uint32_t     i_sample;40,1772
    uint64_t     i_first_dts;46,2033
    uint64_t     i_last_dts;47,2095
    uint32_t     i_entries_dts;49,2157
    uint32_t     *p_sample_count_dts;p_sample_count_dts50,2189
    uint32_t     *p_sample_delta_dts;p_sample_delta_dts51,2227
    uint32_t     i_entries_pts;53,2284
    uint32_t     *p_sample_count_pts;p_sample_count_pts54,2316
    int32_t      *p_sample_offset_pts;p_sample_offset_pts55,2354
    uint8_t      **p_sample_data;p_sample_data57,2409
    uint32_t     *p_sample_size;p_sample_size58,2483
} mp4_chunk_t;62,2605
typedef enum RTP_timstamp_synchronization_s64,2621
    UNKNOWN_SYNC 66,2667
    UNKNOWN_SYNC = 0, UNSYNCHRONIZED 66,2667
    UNKNOWN_SYNC = 0, UNSYNCHRONIZED = 1, SYNCHRONIZED 66,2667
    UNKNOWN_SYNC = 0, UNSYNCHRONIZED = 1, SYNCHRONIZED = 2, RESERVED 66,2667
} RTP_timstamp_synchronization_t;67,2740
    unsigned int i_track_ID;72,2858
    int b_ok;74,2915
    int b_enable;75,2969
    bool b_selected;76,3033
    bool b_chapters_source;77,3086
    bool b_forced_spu;78,3154
    uint32_t i_switch_group;79,3239
    bool b_mac_encoding;81,3269
    es_format_t fmt;83,3295
    uint32_t    i_block_flags;84,3316
    uint8_t     rgi_chans_reordering[rgi_chans_reordering85,3347
    bool        b_chans_reorder;86,3400
    es_out_id_t *p_es;p_es87,3433
    int i_width;90,3487
    int i_height;91,3504
    float f_rotation;92,3522
    uint32_t        i_timescale;95,3574
    int             i_elst;98,3663
    int64_t         i_elst_time;99,3718
    const MP4_Box_t *p_elst;p_elst100,3805
    uint32_t         i_sample;104,3970
    uint32_t         i_chunk;105,4033
    uint32_t         i_chunk_count;107,4152
    uint32_t         i_sample_count;108,4188
    mp4_chunk_t    *chunk;chunk110,4226
    mp4_chunk_t    *cchunk;cchunk111,4290
    uint32_t         i_sample_size;115,4485
    uint32_t         *p_sample_size;p_sample_size116,4521
    uint32_t     i_sample_first;119,4676
    uint64_t     i_first_dts;121,4805
    const MP4_Box_t *p_track;p_track124,4932
    const MP4_Box_t *p_stbl;p_stbl125,4962
    const MP4_Box_t *p_stsd;p_stsd126,5034
    const MP4_Box_t *p_sample;p_sample127,5114
    bool b_has_non_empty_cchunk;129,5172
    bool b_codec_need_restart;130,5205
    mtime_t i_time;132,5237
    MP4_Box_t *p_sdp;p_sdp135,5310
    RTP_timstamp_synchronization_t sync_mode;136,5394
    int32_t         i_tsro_offset;140,5566
        const MP4_Box_t *p_traf;p_traf145,5650
        const MP4_Box_t *p_tfhd;p_tfhd146,5683
        const MP4_Box_t *p_trun;p_trun147,5716
        uint64_t   i_traf_base_offset;148,5749
    } context;149,5788
    const MP4_Box_t *p_asf;p_asf152,5835
    mtime_t          i_dts_backup;153,5863
    mtime_t          i_pts_backup;154,5898
    asf_track_info_t asfinfo;155,5933
} mp4_track_t;156,5963
    uint8_t  type;167,6433
    int8_t   trackrefindex;168,6452
    uint16_t length;169,6480
    uint32_t samplenumber;170,6501
    uint32_t sampleoffset;171,6528
    uint16_t bytesperblock;172,6614
    uint16_t samplesperblock;173,6642
} mp4_rtpsampleconstructor_t;175,6673

video_chroma/i420_yuy2.h,1124
#define MMX_CALL(31,1322
#define MMX_END 55,2436
#define MMX_YUV420_YUYV 57,2485
#define MMX_YUV420_YVYU 71,3424
#define MMX_YUV420_UYVY 85,4363
#define MMX_YUV420_Y211 101,5445
#define MMX_CALL(125,6854
#define MMX_END 134,7192
#define MMX_YUV420_YUYV 136,7222
#define MMX_YUV420_YVYU 153,7958
#define MMX_YUV420_UYVY 170,8694
#define SSE2_CALL(196,9584
#define SSE2_END 218,10485
#define SSE2_YUV420_YUYV_ALIGNED 220,10551
#define SSE2_YUV420_YUYV_UNALIGNED 236,11646
#define SSE2_YUV420_YVYU_ALIGNED 254,12897
#define SSE2_YUV420_YVYU_UNALIGNED 270,13992
#define SSE2_YUV420_UYVY_ALIGNED 288,15243
#define SSE2_YUV420_UYVY_UNALIGNED 305,16416
#define SSE2_CALL(330,17829
#define SSE2_END 339,18195
#define SSE2_YUV420_YUYV_ALIGNED 341,18227
#define SSE2_YUV420_YUYV_UNALIGNED 358,19090
#define SSE2_YUV420_YVYU_ALIGNED 377,20061
#define SSE2_YUV420_YVYU_UNALIGNED 394,20924
#define SSE2_YUV420_UYVY_ALIGNED 413,21895
#define SSE2_YUV420_UYVY_UNALIGNED 431,22812
#define C_YUV420_YVYU(457,23899
#define C_YUV420_Y211(463,24290
#define C_YUV420_YUYV(472,24838
#define C_YUV420_UYVY(478,25229

demux/adaptive/plumbing/FakeESOut.cpp,909
FakeESOut::FakeESOut(34,1198
es_out_t * FakeESOut::getEsOut(53,1698
FakeESOut::~FakeESOut(58,1758
void FakeESOut::setTimestampOffset(67,1868
void FakeESOut::setExtraInfoProvider(74,2012
FakeESOutID * FakeESOut::createNewID(81,2165
void FakeESOut::createOrRecycleRealEsID(105,2744
mtime_t FakeESOut::getTimestampOffset(146,3997
size_t FakeESOut::esCount(154,4213
void FakeESOut::schedulePCRReset(166,4575
void FakeESOut::scheduleAllForDeletion(173,4778
void FakeESOut::recycleAll(193,5364
void FakeESOut::gc(203,5672
bool FakeESOut::hasSelectedEs(226,6237
bool FakeESOut::drain(241,6742
bool FakeESOut::restarting(260,7217
void FakeESOut::recycle(268,7423
es_out_id_t * FakeESOut::esOutAdd_Callback(278,7704
int FakeESOut::esOutSend_Callback(305,8556
void FakeESOut::esOutDel_Callback(326,9274
int FakeESOut::esOutControl_Callback(338,9686
void FakeESOut::esOutDestroy_Callback(394,11495

codec/stl.c,1045
vlc_module_begin(44,1769
#define GSI_BLOCK_SIZE 55,2184
    CCT_ISO_6937_2 58,2228
    CCT_ISO_6937_2 = 0x3030,x303058,2228
    CCT_ISO_6937_2 = 0x3030, CCT_BEGIN 58,2228
    CCT_ISO_6937_2 = 0x3030, CCT_BEGIN = CCT_ISO_6937_2,58,2228
    CCT_ISO_8859_5 59,2285
    CCT_ISO_8859_5 = 0x3031,x303159,2285
    CCT_ISO_8859_6 60,2314
    CCT_ISO_8859_6 = 0x3032,x303260,2314
    CCT_ISO_8859_7 61,2343
    CCT_ISO_8859_7 = 0x3033,x303361,2343
    CCT_ISO_8859_8 62,2372
    CCT_ISO_8859_8 = 0x3034,x303462,2372
    CCT_ISO_8859_8 = 0x3034, CCT_END 62,2372
    CCT_ISO_8859_8 = 0x3034, CCT_END = CCT_ISO_8859_862,2372
} cct_number_value_t;63,2426
    cct_number_value_t value;66,2466
    const char *str;str67,2496
} cct_number_t;68,2517
struct decoder_sys_t 70,2534
    cct_number_value_t cct;71,2557
static cct_number_t cct_nums[cct_nums74,2589
static char *ParseText(ParseText81,2928
static subpicture_t *Decode(Decode108,3577
static int ExtractCCT(160,5010
static int Open(184,5662
static void Close(211,6226

video_filter/deinterlace/algo_yadif.c,25
int RenderYadif(50,1900

codec/daala.c,1352
struct decoder_sys_t48,1881
    bool b_packetizer;51,1926
    bool b_has_headers;56,1989
    daala_info          di;61,2053
    daala_comment       dc;62,2118
    daala_dec_ctx       *dcx;dcx63,2184
    bool b_decoded_first_keyframe;68,2289
    mtime_t i_pts;73,2365
static const char *const enc_chromafmt_list[enc_chromafmt_list97,3232
static const char *const enc_chromafmt_list_text[enc_chromafmt_list_text100,3302
#define ENC_QUALITY_TEXT 108,3569
#define ENC_QUALITY_LONGTEXT 109,3617
#define ENC_KEYINT_TEXT 111,3714
#define ENC_KEYINT_LONGTEXT 112,3762
vlc_module_begin 115,3851
#   define ENC_CFG_PREFIX 136,4528
#   define ENC_CHROMAFMT_TEXT 142,4830
#   define ENC_CHROMAFMT_LONGTEXT 143,4880
static int OpenDecoder(159,5561
static int OpenPacketizer(198,6626
static void *DecodeBlock(DecodeBlock218,7236
static int ProcessHeaders(261,8631
static void *ProcessPacket(ProcessPacket404,13563
static picture_t *DecodePacket(DecodePacket453,15027
static void ParseDaalaComments(485,15935
static void CloseDecoder(534,18076
static void daala_CopyPicture(549,18614
struct encoder_sys_t571,19445
    daala_info      di;573,19468
    daala_comment   dc;574,19543
    daala_enc_ctx   *dcx;dcx575,19614
static int OpenEncoder(578,19682
static block_t *Encode(Encode708,23698
static void CloseEncoder(766,25463

codec/avcodec/vda.c,300
static void copy420YpCbCr8Planar(54,1994
vlc_module_begin 76,2579
struct vlc_va_sys_t85,2899
    AVVDAContext *vdactx;vdactx87,2921
    int i_height;88,2947
static int Open(91,2969
static void Close(153,4675
static int Get(160,4800
static void Release(169,4975
static int Extract(174,5040

stream_out/delay.c,447
#define ID_TEXT 39,1660
#define ID_LONGTEXT 40,1703
#define DELAY_TEXT 43,1795
#define DELAY_LONGTEXT 44,1841
#define SOUT_CFG_PREFIX 51,2070
vlc_module_begin(53,2109
struct sout_stream_sys_t79,3069
    sout_stream_id_sys_t *id;id81,3096
    int i_id;82,3126
    mtime_t i_delay;83,3140
static int Open(89,3333
static void Close(123,4269
static sout_stream_id_sys_t * Add(131,4464
static void Del(146,4944
static int Send(156,5196

control/dbus/dbus_tracklist.c,758
static int getInputPosition(52,1927
DBUS_METHOD(75,2421
DBUS_METHOD(144,4199
DBUS_METHOD(199,5715
DBUS_METHOD(245,6933
MarshalTracks(293,8050
MarshalCanEditTracks(333,9218
#define PROPERTY_MAPPING_BEGIN 344,9494
#define PROPERTY_GET_FUNC(345,9536
#define PROPERTY_SET_FUNC(357,10102
#define PROPERTY_MAPPING_END 361,10254
DBUS_METHOD(364,10338
#undef PROPERTY_MAPPING_BEGIN404,11404
#undef PROPERTY_GET_FUNC405,11434
#undef PROPERTY_SET_FUNC406,11459
#undef PROPERTY_MAPPING_END407,11484
#define ADD_PROPERTY(409,11513
DBUS_METHOD(416,11780
#undef ADD_PROPERTY453,12779
#define METHOD_FUNC(455,12800
handle_tracklist 460,12995
#undef METHOD_FUNC478,13716
PropertiesChangedSignal(485,13883
int TrackListPropertiesChangedEmit(546,16084

video_filter/deinterlace/algo_yadif.h,46
#define VLC_DEINTERLACE_ALGO_YADIF_H 26,1291

demux/adaptive/playlist/SegmentInformation.cpp,1692
SegmentInformation::SegmentInformation(39,1336
SegmentInformation::SegmentInformation(47,1504
void SegmentInformation::init(55,1657
SegmentInformation::~SegmentInformation(64,1833
AbstractPlaylist * SegmentInformation::getPlaylist(72,1987
std::size_t SegmentInformation::getSegments(80,2134
std::size_t SegmentInformation::getAllSegments(154,4570
uint64_t SegmentInformation::getLiveStartSegmentNumber(165,4930
ISegment * SegmentInformation::getNextSegment(245,8218
ISegment * SegmentInformation::getSegment(292,9865
bool SegmentInformation::getSegmentNumberByTime(325,10902
bool SegmentInformation::getPlaybackTimeDurationBySegmentNumber(369,12338
SegmentInformation * SegmentInformation::getChildByID(413,13766
void SegmentInformation::mergeWith(424,14046
void SegmentInformation::mergeWithTimeline(444,14777
void SegmentInformation::pruneByPlaybackTime(455,15067
void SegmentInformation::pruneBySegmentNumber(468,15438
uint64_t SegmentInformation::translateSegmentNumber(479,15715
SegmentInformation::SwitchPolicy SegmentInformation::getSwitchPolicy(487,15990
mtime_t SegmentInformation::getPeriodStart(495,16223
void SegmentInformation::setSegmentList(503,16362
void SegmentInformation::setSegmentBase(516,16566
void SegmentInformation::setSegmentTemplate(523,16702
static void insertIntoSegment(534,16941
void SegmentInformation::SplitUsingIndex(553,17640
void SegmentInformation::setSwitchPolicy(588,18835
Url SegmentInformation::getUrlSegment(593,18949
SegmentBase * SegmentInformation::inheritSegmentBase(608,19248
SegmentList * SegmentInformation::inheritSegmentList(618,19458
MediaSegmentTemplate * SegmentInformation::inheritSegmentTemplate(628,19668

demux/mpeg/ts.c,2427
#define PMT_TEXT 79,2625
#define PMT_LONGTEXT 80,2658
#define PID_TEXT 83,2763
#define PID_LONGTEXT 84,2806
#define CSA_TEXT 89,3106
#define CSA_LONGTEXT 90,3137
#define CSA2_TEXT 93,3245
#define CSA2_LONGTEXT 94,3284
#define CPKT_TEXT 98,3403
#define CPKT_LONGTEXT 99,3459
#define SPLIT_ES_TEXT 103,3635
#define SPLIT_ES_LONGTEXT 104,3684
#define SEEK_PERCENT_TEXT 108,3850
#define SEEK_PERCENT_LONGTEXT 109,3913
#define PCR_TEXT 113,4109
#define PCR_LONGTEXT 114,4152
static const char *const ts_standards_list[ts_standards_list116,4215
static const char *const ts_standards_list_text[ts_standards_list_text118,4317
#define STANDARD_TEXT 121,4428
#define STANDARD_LONGTEXT 122,4476
vlc_module_begin 125,4635
#define TS_PACKET_SIZE_188 187,7272
#define TS_PACKET_SIZE_192 188,7303
#define TS_PACKET_SIZE_204 189,7334
#define TS_PACKET_SIZE_MAX 190,7365
#define TS_HEADER_SIZE 191,7396
static int DetectPacketSize(193,7422
#define TOPFIELD_HEADER_SIZE 246,9354
static int DetectPVRHeadersAndHeaderSize(248,9389
static int Open(343,13806
static void Close(527,19569
static int ChangeKeyCallback(567,20785
static int Demux(589,21591
static int EITCurrentEventTime(714,25845
static inline void HasSelectedES(736,26577
void UpdatePESFilters(748,27026
static int Control(829,30088
static int16_t read_opus_flag(1097,39042
static block_t *Opus_Parse(Opus_Parse1113,39281
static block_t *J2K_Parse(J2K_Parse1198,41665
static void ParsePES(1228,42549
static void ParsePESDataChain(1577,55321
static block_t* ReadTSPacket(1593,55739
static mtime_t GetPCR(1669,58291
static inline void UpdateESScrambledState(1690,58805
static void UpdatePIDScrambledState(1701,59172
static inline void FlushESBuffer(1718,59698
static void ReadyQueuesPostSeek(1736,60132
static int SeekToTime(1781,61542
#define PROBE_CHUNK_COUNT 1883,65249
static int ProbeChunk(1885,65280
int ProbeStart(1977,68522
int ProbeEnd(2008,69480
static void ProgramSetPCR(2039,70457
static int IsVideoEnd(2085,72009
static void PCRCheckDTS(2107,72667
static void PCRHandle(2168,74739
int FindPCRCandidate(2209,76190
static void PCRFixHandle(2249,77364
static bool ProcessTSPacket(2277,78460
static bool GatherPESData(2408,82646
void TsChangeStandard(2468,84249
bool ProgramIsSelected(2476,84446
static bool PIDReferencedByProgram(2485,84656
static void DoCreateES(2494,84888
void AddAndCreateES(2517,85691

stream_out/es.c,1453
#define ACCESS_TEXT 41,1694
#define ACCESS_LONGTEXT 42,1741
#define ACCESSA_TEXT 45,1840
#define ACCESSA_LONGTEXT 46,1894
#define ACCESSV_TEXT 48,1995
#define ACCESSV_LONGTEXT 49,2049
#define MUX_TEXT 52,2151
#define MUX_LONGTEXT 53,2187
#define MUXA_TEXT 55,2274
#define MUXA_LONGTEXT 56,2317
#define MUXV_TEXT 58,2400
#define MUXV_LONGTEXT 59,2443
#define DEST_TEXT 62,2527
#define DEST_LONGTEXT 63,2562
#define DESTA_TEXT 65,2630
#define DESTA_LONGTEXT 66,2672
#define DESTV_TEXT 68,2761
#define DESTV_LONGTEXT 69,2803
#define SOUT_CFG_PREFIX 75,2982
vlc_module_begin 77,3018
struct sout_stream_sys_t126,4911
    int  i_count_audio;128,4938
    int  i_count_video;129,4962
    int  i_count;130,4986
    char *psz_mux;psz_mux132,5005
    char *psz_mux_audio;psz_mux_audio133,5024
    char *psz_mux_video;psz_mux_video134,5049
    char *psz_access;psz_access136,5075
    char *psz_access_audio;psz_access_audio137,5097
    char *psz_access_video;psz_access_video138,5125
    char *psz_dst;psz_dst140,5154
    char *psz_dst_audio;psz_dst_audio141,5173
    char *psz_dst_video;psz_dst_video142,5198
static int Open(148,5395
static void Close(185,6852
struct sout_stream_id_sys_t205,7326
    sout_input_t *p_input;p_input207,7356
    sout_mux_t   *p_mux;p_mux208,7383
static char * es_print_url(211,7412
static sout_stream_id_sys_t *Add(Add272,8853
static void Del(407,12937
static int Send(421,13335

control/dbus/dbus_tracklist.h,205
#define VLC_DBUS_DBUS_TRACKLIST_H_28,1354
#define DBUS_MPRIS_TRACKLIST_INTERFACE 34,1467
#define DBUS_MPRIS_TRACKLIST_PATH 35,1544
#define DBUS_MPRIS_NOTRACK 37,1623
#define DBUS_MPRIS_APPEND 38,1696

arm_neon/volume.c,63
vlc_module_begin(35,1287
void amplify_float_arm_neon(58,1869

mux/asf.c,2944
#define MAX_ASF_TRACKS 45,1667
#define ASF_DATA_PACKET_SIZE 46,1694
#define SOUT_CFG_PREFIX 54,2033
#define TITLE_TEXT 56,2070
#define TITLE_LONGTEXT 57,2101
#define AUTHOR_TEXT 58,2161
#define AUTHOR_LONGTEXT 59,2194
#define COPYRIGHT_TEXT 60,2256
#define COPYRIGHT_LONGTEXT 61,2295
#define COMMENT_TEXT 62,2370
#define COMMENT_LONGTEXT 63,2405
#define RATING_TEXT 64,2469
#define RATING_LONGTEXT 65,2502
#define PACKETSIZE_TEXT 66,2568
#define PACKETSIZE_LONGTEXT 67,2610
#define BITRATE_TEXT 68,2685
#define BITRATE_LONGTEXT 69,2729
vlc_module_begin 72,2921
    int          i_id;113,4565
    int          i_cat;114,4588
    uint16_t     i_tag;117,4641
    vlc_fourcc_t i_fourcc;118,4685
    const char         *psz_name;psz_name119,4729
    int          i_blockalign;120,4780
    bool   b_audio_correction;121,4832
    int          i_sequence;123,4864
    int          i_extra;125,4894
    uint8_t      *p_extra;p_extra126,4920
    bool         b_extended;127,4947
    es_format_t  fmt;129,4977
} asf_track_t;131,5000
struct sout_mux_sys_t133,5016
    guid_t          fid;135,5040
    int             i_packet_size;136,5082
    int64_t         i_packet_count;137,5117
    mtime_t         i_dts_first;138,5153
    mtime_t         i_dts_last;139,5186
    mtime_t         i_preroll_time;140,5218
    int64_t         i_bitrate;141,5254
    int64_t         i_bitrate_override;142,5285
    vlc_array_t     *p_tracks;p_tracks144,5326
    bool            b_write_header;146,5358
    block_t         *pk;pk148,5395
    int             i_pk_used;149,5420
    int             i_pk_frame;150,5451
    mtime_t         i_pk_dts;151,5483
    bool      b_asf_http;153,5514
    int             i_seq;154,5540
    char            *psz_title;psz_title157,5588
    char            *psz_author;psz_author158,5620
    char            *psz_copyright;psz_copyright159,5653
    char            *psz_comment;psz_comment160,5689
    char            *psz_rating;psz_rating161,5723
    int      i_buffer_size;171,6016
    int      i_buffer;172,6044
    uint8_t  *p_buffer;p_buffer173,6067
} bo_t;175,6092
static int Open(189,6612
static void Close(253,9120
static int Control(303,10477
static int AddStream(338,11518
static void DelStream(639,23423
static int Mux(674,24581
static void bo_init(751,26735
static void bo_add_u8(757,26893
static void bo_addle_u16(765,27069
static void bo_addle_u32(770,27200
static void bo_addle_u64(775,27342
static void bo_add_mem(781,27493
static void bo_addle_str16(792,27765
static void bo_addle_str16_nosize(803,27995
static void bo_add_guid(816,28366
static void asf_chunk_add(830,28789
static block_t *asf_header_create(asf_header_create840,29072
static block_t *asf_packet_flush(asf_packet_flush1132,40665
static block_t *asf_packet_create(asf_packet_create1167,41620
static block_t *asf_stream_end_create(asf_stream_end_create1237,43920

access/dtv/linux.c,2035
# define O_SEARCH 45,1399
#define DVBv5(48,1434
    int vlc;54,1574
    int linux_;55,1587
} dvb_int_map_t;56,1603
static int icmp 58,1621
static int dvb_parse_int 66,1824
} dvb_str_map_t;77,2123
static int scmp 79,2141
static int dvb_parse_str 87,2343
static int dvb_parse_modulation 100,2662
static int dvb_parse_fec 121,3283
struct dvb_device145,3978
    vlc_object_t *obj;obj147,3998
    int dir;148,4021
    int demux;149,4034
    int frontend;150,4049
# define MAX_PIDS 152,4083
        int fd;155,4122
        uint16_t pid;156,4138
    } pids[pids157,4160
    cam_t *cam;cam159,4189
    uint8_t device;160,4205
    bool budget;161,4225
static int dvb_open_adapter 166,4336
static int dvb_open_node 175,4579
dvb_device_t *dvb_open dvb_open186,4841
void dvb_close 276,7318
static void dvb_frontend_status(295,7715
#define S(298,7821
#undef S309,8020
ssize_t dvb_read 316,8137
int dvb_add_pid 380,9603
void dvb_remove_pid 425,10783
bool dvb_get_pid_state 445,11186
static int dvb_open_frontend 458,11458
#define dvb_find_frontend(472,11771
unsigned dvb_enum_systems 478,11937
float dvb_get_signal_strength 618,16632
float dvb_get_snr 628,16853
bool dvb_set_ca_pmt 637,17030
static int dvb_vset_props 647,17231
static int dvb_set_props 675,17958
static int dvb_set_prop 686,18143
int dvb_set_inversion 691,18263
int dvb_tune 702,18521
int dvb_fill_device_caps(707,18611
int dvb_set_dvbc 727,19182
static unsigned dvb_parse_polarization 747,19826
int dvb_set_sec 759,20157
#undef msleep 825,22527
int dvb_set_dvbs 902,25684
int dvb_set_dvbs2 915,26123
static uint32_t dvb_parse_bandwidth 962,27727
static int dvb_parse_transmit_mode 972,27905
static int dvb_parse_guard 991,28436
static int dvb_parse_hierarchy 1009,29088
int dvb_set_dvbt 1022,29447
int dvb_set_dvbt2 1045,30512
int dvb_set_isdbc 1080,31771
int dvb_set_isdbs 1101,32479
static int dvb_set_isdbt_layer 1119,32959
int dvb_set_isdbt 1136,33669
int dvb_set_atsc 1159,34506
int dvb_set_cqam 1169,34854

access/linsys/linsys_hdsdi.c,3343
#undef HAVE_MMAP_SDIVIDEO51,1740
#undef HAVE_MMAP_SDIAUDIO52,1766
#define SDIVIDEO_DEVICE 54,1793
#define SDIVIDEO_BUFFERS_FILE 55,1845
#define SDIVIDEO_BUFSIZE_FILE 56,1920
#define SDIVIDEO_MODE_FILE 57,1995
#define SDIAUDIO_DEVICE 58,2067
#define SDIAUDIO_BUFFERS_FILE 59,2119
#define SDIAUDIO_BUFSIZE_FILE 60,2194
#define SDIAUDIO_SAMPLESIZE_FILE 61,2269
#define SDIAUDIO_CHANNELS_FILE 62,2349
#define NB_VBUFFERS 63,2425
#define CLOCK_GAP 64,2459
#define START_DATE 65,2507
#define MAX_AUDIOS 67,2560
#define LINK_TEXT 72,2775
#define LINK_LONGTEXT 73,2806
#define VIDEO_TEXT 75,2923
#define VIDEO_LONGTEXT 76,2957
#define VIDEO_ASPECT_TEXT 78,3036
#define VIDEO_ASPECT_LONGTEXT 79,3081
#define AUDIO_TEXT 81,3176
#define AUDIO_LONGTEXT 82,3221
vlc_module_begin(88,3406
typedef struct hdsdi_audio_t112,4247
    int         i_channel;114,4278
    int32_t     i_delay;117,4356
    int         i_id;120,4401
    es_out_id_t *p_es;p_es121,4423
} hdsdi_audio_t;122,4446
struct demux_sys_t124,4464
    int          i_vfd;127,4515
    unsigned int i_link;128,4539
    unsigned int i_standard;129,4564
    uint8_t      **pp_vbuffers;pp_vbuffers131,4619
    unsigned int i_vbuffers,132,4651
    unsigned int i_vbuffers, i_current_vbuffer;132,4651
    unsigned int i_vbuffer_size;134,4706
    int          i_afd;137,4770
    int          i_max_channel;138,4794
    unsigned int i_sample_rate;139,4826
    uint8_t      **pp_abuffers;pp_abuffers141,4884
    unsigned int i_abuffers,142,4916
    unsigned int i_abuffers, i_current_abuffer;142,4916
    unsigned int i_abuffer_size;144,4971
    unsigned int i_frame_rate,147,5032
    unsigned int i_frame_rate, i_frame_rate_base;147,5032
    unsigned int i_width,148,5082
    unsigned int i_width, i_height,148,5082
    unsigned int i_width, i_height, i_aspect,148,5082
    unsigned int i_width, i_height, i_aspect, i_forced_aspect;148,5082
    unsigned int i_vblock_size,149,5145
    unsigned int i_vblock_size, i_ablock_size;149,5145
    mtime_t      i_next_vdate,150,5192
    mtime_t      i_next_vdate, i_next_adate;150,5192
    int          i_incr,151,5237
    int          i_incr, i_aincr;151,5237
    int          i_id_video;154,5291
    es_out_id_t  *p_es_video;p_es_video155,5320
    hdsdi_audio_t p_audios[p_audios156,5350
    pthread_t thread;158,5391
    int evfd;159,5413
static int Open(172,5813
static void Close(271,8653
static void *Demux(Demux285,9114
static int Control(301,9522
#define U 331,10395
#define Y1 332,10429
#define V 333,10463
#define Y2 334,10497
static void Unpack01(337,10563
static void Unpack2(353,10910
static void Unpack3(374,11373
#undef U394,11814
#undef Y1395,11823
#undef V396,11833
#undef Y2397,11842
static void SparseCopy(399,11853
struct block_extension_t413,12370
    bool            b_progressive;415,12397
    bool            b_top_field_first;416,12477
    unsigned int    i_nb_fields;417,12557
    unsigned int    i_aspect;418,12637
static void StopDecode(421,12721
static int InitVideo(438,13146
static int InitAudio(523,16259
static int HandleVideo(559,17593
static int HandleAudio(623,20412
#define MAXLEN 653,21608
static ssize_t WriteULSysfs(655,21628
static int InitCapture(674,22138
static void CloseCapture(918,30385
static int Capture(940,31008

demux/flac.c,1424
vlc_module_begin 49,2096
    mtime_t  i_time_offset;68,2702
    uint64_t i_byte_offset;69,2730
} flac_seekpoint_t;70,2758
struct demux_sys_t72,2779
    bool  b_start;74,2800
    es_out_id_t *p_es;p_es75,2819
    decoder_t *p_packetizer;p_packetizer78,2864
    vlc_meta_t *p_meta;p_meta80,2894
    int64_t i_pts;82,2919
    int64_t i_length;84,2939
    int64_t i_data_pos;85,2991
    int         i_seekpoint;88,3026
    flac_seekpoint_t **seekpoint;seekpoint89,3055
    int           i_title_seekpoints;92,3126
    seekpoint_t **pp_title_seekpoints;pp_title_seekpoints93,3164
    int                i_attachments;96,3214
    input_attachment_t **attachments;attachments97,3252
    int                i_cover_idx;98,3290
    int                i_cover_score;99,3326
#define STREAMINFO_SIZE 102,3368
#define FLAC_PACKET_SIZE 103,3395
static int Open(108,3621
static void Close(184,6025
static int Demux(214,7175
static int64_t ControlGetLength(259,8517
static int64_t ControlGetTime(285,9453
static int ControlSetTime(291,9574
static int Control(353,11600
    META_STREAMINFO 481,15802
    META_SEEKTABLE 482,15827
    META_COMMENT 483,15851
    META_PICTURE 484,15873
static inline int Get24bBE(487,15899
static int  ReadMeta(498,16355
static void ParseStreamInfo(597,19402
static void ParseSeekTable(603,19594
static void ParseComment(645,20774
static void ParsePicture(658,21193

video_filter/blendbench.c,907
#define LOOPS_TEXT 52,2037
#define LOOPS_LONGTEXT 53,2086
#define ALPHA_TEXT 55,2163
#define ALPHA_LONGTEXT 56,2215
#define BASE_IMAGE_TEXT 58,2289
#define BASE_IMAGE_LONGTEXT 59,2344
#define BASE_CHROMA_TEXT 61,2422
#define BASE_CHROMA_LONGTEXT 62,2479
#define BLEND_IMAGE_TEXT 64,2561
#define BLEND_IMAGE_LONGTEXT 65,2620
#define BLEND_CHROMA_TEXT 67,2694
#define BLEND_CHROMA_LONGTEXT 68,2753
#define CFG_PREFIX 71,2875
vlc_module_begin 73,2909
struct filter_sys_t109,4332
    bool b_done;111,4354
    int i_loops,112,4371
    int i_loops, i_alpha;112,4371
    picture_t *p_base_image;p_base_image114,4398
    picture_t *p_blend_image;p_blend_image115,4427
    vlc_fourcc_t i_base_chroma;117,4458
    vlc_fourcc_t i_blend_chroma;118,4490
static int blendbench_LoadImage(121,4527
static int Create(151,5594
static void Destroy(208,7773
static picture_t *Filter(Filter220,8206

codec/avcodec/subtitle.c,318
struct decoder_sys_t 41,1583
    bool b_need_ephemer;43,1633
int InitSubtitleDec(54,1996
static void Flush(125,3727
static subpicture_t *DecodeSubtitle(DecodeSubtitle135,3878
static subpicture_region_t *ConvertRegionRGBA(ConvertRegionRGBA209,5767
static subpicture_t *ConvertSubtitle(ConvertSubtitle256,7222

access/vcd/cdrom.c,739
#   define INCL_DOSDEVIOCTL42,1675
static APIRET vlc_DosDevIOCtl(92,3143
#   define DosDevIOCtl 138,4376
vcddev_t *ioctl_Open(ioctl_Open149,4724
void ioctl_Close(228,6610
int ioctl_GetTracksMap(264,7576
int ioctl_ReadSectors(542,16479
#define p_msf 713,22038
#undef p_msf717,22324
static int OpenVCDImage(762,23601
static void CloseVCDImage(916,29172
static CDTOC *darwin_getTOC(darwin_getTOC931,29639
static int darwin_getNumberOfTracks(1032,32687
static int win32_vcd_open(1060,33494
static int os2_vcd_open(1086,34480
static void astrcat(1115,35131
static int CdTextParse(1133,35473
static int CdTextRead(1264,39626
static int CdTextRead(1274,39917
static int CdTextRead(1312,41052
int ioctl_GetCdText(1376,42774

access/zip/zip.h,154
#define ZIP_ACCESSDEMUX_H29,1437
#define ZIP_FILENAME_LEN 42,1666
#define ZIP_BUFFER_LEN 43,1695
#define ZIP_SEP 44,1724
#define ZIP_SEP_LEN 45,1750

demux/mpeg/ts.h,2103
#define VLC_TS_H21,1097
    typedef struct arib_instance_t arib_instance_t;24,1135
typedef struct csa_t csa_t;26,1194
#define TS_USER_PMT_NUMBER 28,1223
#define TS_PSI_PAT_PID 30,1255
typedef enum ts_standards_e32,1284
    TS_STANDARD_AUTO 34,1314
    TS_STANDARD_MPEG,35,1340
    TS_STANDARD_DVB,36,1362
    TS_STANDARD_ARIB,37,1383
    TS_STANDARD_ATSC,38,1405
    TS_STANDARD_TDMB,39,1427
} ts_standards_e;40,1449
    int i_service;44,1485
} vdr_info_t;45,1504
struct demux_sys_t47,1519
    stream_t   *stream;stream49,1540
    bool        b_canseek;50,1564
    bool        b_canfastseek;51,1591
    vlc_mutex_t     csa_lock;52,1622
    unsigned    i_packet_size;55,1694
    unsigned    i_packet_header_size;58,1825
    unsigned    i_ts_read;61,1909
    bool        b_force_seek_per_percent;63,1937
    ts_standards_e standard;65,1980
        arib_instance_t *p_instance;p_instance70,2047
        stream_t     *b25stream;b25stream72,2091
    } arib;73,2124
    ts_pid_list_t pids;76,2155
    bool        b_user_pmt;78,2180
    int         i_pmt_es;79,2208
    bool        b_es_all;80,2234
        NO_ES,84,2319
        DELAY_ES,85,2353
        CREATE_ES86,2371
    } es_creation;87,2389
    #define PREPARSING 88,2408
    bool        b_es_id_pid;91,2470
    uint16_t    i_next_extraid;92,2499
    csa_t       *csa;csa94,2532
    int         i_csa_pkt_size;95,2554
    bool        b_split_es;96,2586
    bool        b_valid_scrambling;97,2614
    bool        b_trust_pcr;99,2651
    bool        b_access_control;102,2691
    bool        b_end_preparse;103,2725
    time_t      i_network_time;106,2768
    time_t      i_network_time_update;107,2800
    bool        b_broken_charset;108,2876
    DECL_ARRAY(111,2988
        mtime_t i_first_dts;116,3205
        int     i_timesourcepid;117,3281
        enum { PAT_WAITING 118,3352
        enum { PAT_WAITING = 0, PAT_MISSING,118,3352
        enum { PAT_WAITING = 0, PAT_MISSING, PAT_FIXTRIED 118,3352
    } patfix;119,3477
    vdr_info_t  vdr;121,3492
    bool        b_start_record;124,3524

demux/avformat/demux.c,950
#  define HAVE_AV_STREAM_GET_SIDE_DATA54,2125
# define HAVE_AVUTIL_CODEC_ATTACHMENT 60,2208
struct demux_sys_t65,2441
    AVInputFormat  *fmt;fmt67,2462
    AVFormatContext *ic;ic68,2487
    int             i_tk;70,2513
    es_out_id_t     **tk;tk71,2539
    int64_t         *tk_pcr;tk_pcr72,2565
    int64_t         i_pcr;73,2594
    unsigned    i_ssa_order;75,2622
    int                i_attachments;77,2652
    input_attachment_t **attachments;attachments78,2690
    input_title_t *p_title;p_title81,2784
#define AVFORMAT_IOBUFFER_SIZE 84,2816
static vlc_fourcc_t CodecTagToFourcc(99,3484
static void get_rotation(113,3885
int OpenDemux(155,5126
void CloseDemux(679,23478
static int Demux(714,24393
static void UpdateSeekPoint(841,28306
static void ResetTime(863,28794
static block_t *BuildSsaFrame(BuildSsaFrame883,29327
static int Control(920,30650
static int IORead(1117,37565
static int64_t IOSeek(1125,37790

demux/dash/mpd/MPD.h,222
#define MPD_H_26,1156
        class MPD 41,1444
                Property<ProgramInformation *>      programInfo;MPD::programInfo53,1871
                Profile                             profile;MPD::profile56,1958

video_splitter/clone.c,320
#define COUNT_TEXT 39,1651
#define COUNT_LONGTEXT 40,1693
#define VOUTLIST_TEXT 43,1784
#define VOUTLIST_LONGTEXT 44,1833
#define CLONE_HELP 47,1977
#define CFG_PREFIX 49,2084
vlc_module_begin 54,2188
#define VOUTSEPARATOR 77,2983
static int Open(84,3161
static void Close(167,5645
static int Filter(184,6041

access/dcp/dcp.cpp,2723
#define KDM_HELP_TEXT 43,1651
#define KDM_HELP_LONG_TEXT 44,1693
#define FRAME_BUFFER_SIZE 63,2036
typedef enum MxfMedia_t 84,2798
    MXF_UNKNOWN MxfMedia_t::MXF_UNKNOWN85,2824
    MXF_PICTURE,MxfMedia_t::MXF_PICTURE86,2845
    MXF_AUDIO,MxfMedia_t::MXF_AUDIO87,2862
} MxfMedia_t;88,2877
union videoReader_t90,2892
   ASDCP::JP2K::MXFReader *p_PicMXFReader;videoReader_t::p_PicMXFReader93,2945
   ASDCP::JP2K::MXFSReader *p_PicMXFSReader;videoReader_t::p_PicMXFSReader96,3033
   ASDCP::MPEG2::MXFReader *p_VideoMXFReader;videoReader_t::p_VideoMXFReader99,3107
struct audioReader_t102,3157
    PCM::MXFReader *p_AudioMXFReader;audioReader_t::p_AudioMXFReader104,3180
class demux_sys_t119,4118
    EssenceType_t PictureEssType;demux_sys_t::PictureEssType123,4184
    std::vector<videoReader_t> v_videoReader;demux_sys_t::v_videoReader126,4252
    std::vector<audioReader_t> v_audioReader;demux_sys_t::v_audioReader129,4332
    uint32_t i_audio_buffer;demux_sys_t::i_audio_buffer132,4407
    es_out_id_t *p_video_es;demux_sys_t::p_video_es135,4466
    es_out_id_t *p_audio_es;demux_sys_t::p_audio_es136,4495
    dcp_t *p_dcp;demux_sys_t::p_dcp139,4546
    uint32_t frame_no;demux_sys_t::frame_no142,4605
    int frame_rate_num;demux_sys_t::frame_rate_num145,4650
    int frame_rate_denom;demux_sys_t::frame_rate_denom146,4674
    uint32_t frames_total;demux_sys_t::frames_total149,4734
    unsigned int i_video_reel;demux_sys_t::i_video_reel152,4791
    unsigned int i_audio_reel;demux_sys_t::i_audio_reel155,4852
    uint8_t i_chans_to_reorder;demux_sys_t::i_chans_to_reorder157,4884
    uint8_t pi_chan_table[demux_sys_t::pi_chan_table158,4963
    uint8_t i_channels;demux_sys_t::i_channels159,5005
    mtime_t i_pts;demux_sys_t::i_pts161,5030
    demux_sys_t(demux_sys_t::demux_sys_t163,5050
    ~demux_sys_t(demux_sys_t::~demux_sys_t175,5346
static const uint32_t i_channels_1[i_channels_1217,6567
static const uint32_t i_channels_2[i_channels_2221,6655
static const uint32_t i_channels_4[i_channels_4225,6751
static const uint32_t i_channels_6[i_channels_6230,6893
static const uint32_t i_channels_7[i_channels_7236,7087
static const uint32_t i_channels_8[i_channels_8242,7313
static const uint32_t i_channels_9[i_channels_9248,7567
static const uint32_t *pi_channels_aout pi_channels_aout253,7821
static const unsigned i_channel_mask[i_channel_mask265,8025
static int Open(296,8977
static inline void Close(587,20787
static int Demux(598,21103
static int Control(770,27592
static inline void fillVideoFmt(856,30498
void CloseDcpAndMxf(872,31015
int dcpInit 924,32659
static std::string assetmapPath(955,33482
int parseXML 993,34646

access/vcd/cdrom.h,1145
#define VLC_CDROM_H26,1230
    CDDA_TYPE 29,1258
    VCD_TYPE 30,1277
#define CD_RAW_SECTOR_SIZE 34,1326
#define CD_ROM_MODE1_DATA_SIZE 35,1359
#define CD_ROM_MODE2_DATA_SIZE 36,1395
#define CD_ROM_XA_MODE2_F1_DATA_SIZE 38,1432
#define CD_ROM_XA_MODE2_F2_DATA_SIZE 39,1474
#define CD_SECTOR_SIZE 42,1543
#define VCD_DATA_START 45,1638
#define VCD_DATA_SIZE 47,1718
#define VCD_SECTOR_SIZE 49,1828
#define VCD_ENTRIES_SECTOR 51,1916
#define CDDA_DATA_START 54,1993
#define CDDA_DATA_SIZE 56,2073
#define CDDA_SECTOR_SIZE 58,2174
static inline int MSF_TO_LBA(63,2397
static inline int MSF_TO_LBA2(67,2520
#define BCD_TO_BIN(73,2682
typedef struct vcddev_s vcddev_t;76,2782
typedef struct msf_s81,3028
    uint8_t minute;83,3051
    uint8_t second;84,3071
    uint8_t frame;85,3091
} msf_t;86,3110
typedef struct entries_sect_s91,3341
    char psz_id[psz_id93,3373
    uint8_t i_version;94,3442
    uint8_t i_sys_prof_tag;96,3578
    uint16_t i_entries_nb;98,3716
        uint8_t i_track;102,3814
        msf_t   msf;103,3885
    } entry[entry105,4027
    uint8_t zeros[zeros106,4045
} entries_sect_t;107,4118

audio_filter/spatializer/allpass.hpp,262
#define _allpass_8,158
class allpass11,200
    float    feedback;allpass::feedback21,425
    float    *buffer;allpass::buffer22,448
    int    bufsize;allpass::bufsize23,470
    int    bufidx;allpass::bufidx24,490
inline float allpass::process(30,556

stream_out/cycle.c,1033
#define VLC_MODULE_LICENSE 33,1393
typedef struct sout_cycle sout_cycle_t;39,1537
struct sout_cycle41,1578
    sout_cycle_t *next;next43,1598
    mtime_t offset;44,1622
    char chain[chain45,1642
struct sout_stream_id_sys_t48,1665
    sout_stream_id_sys_t *prev;prev50,1695
    sout_stream_id_sys_t *next;next51,1727
    es_format_t fmt;52,1759
    void *id;id53,1780
struct sout_stream_sys_t56,1798
    sout_stream_t *stream;stream58,1825
    sout_stream_id_sys_t *first;first59,1881
    sout_stream_id_sys_t *last;last60,1945
    sout_cycle_t *start;start62,2008
    sout_cycle_t *next;next63,2033
    mtime_t (*clock)clock64,2057
    mtime_t period;65,2096
static mtime_t get_dts(68,2148
static sout_stream_id_sys_t *Add(Add73,2223
static void Del(101,2843
static int AddStream(122,3283
static void DelStream(139,3788
static int Send(154,4155
static int AppendPhase(183,4947
static mtime_t ParseTime(201,5356
static int Open(233,6139
static void Close(305,7780
vlc_module_begin(324,8208

demux/avi/libavi.c,1844
# define AVI_DEBUG 35,1414
#define __EVEN(38,1443
static vlc_fourcc_t GetFOURCC(40,1481
static int AVI_ChunkReadCommon(50,1815
static int AVI_NextChunk(78,2630
static int AVI_ChunkRead_list(122,3878
int AVI_ChunkFetchIndexes(216,6837
#define AVI_READCHUNK_ENTER 265,8301
#define AVI_READ(286,8883
#define AVI_READCHUNK_EXIT(295,9085
static inline uint8_t GetB(299,9161
#define AVI_READ1BYTE(304,9226
#define AVI_READ2BYTES(307,9293
#define AVI_READ4BYTES(310,9363
#define AVI_READ8BYTES(313,9436
#define AVI_READFOURCC(316,9509
static int AVI_ChunkRead_avih(319,9584
static int AVI_ChunkRead_strh(351,10910
static int AVI_ChunkRead_strf(380,11955
static void AVI_ChunkFree_strf(525,18319
static int AVI_ChunkRead_strd(538,18628
static void AVI_ChunkFree_strd(552,19064
static int AVI_ChunkRead_idx1(557,19154
static void AVI_ChunkFree_idx1(589,20075
static int AVI_ChunkRead_indx(598,20240
static void AVI_ChunkFree_indx(674,22859
static int AVI_ChunkRead_vprp(683,23078
static int AVI_ChunkRead_dmlh(717,24542
    vlc_fourcc_t i_fourcc;734,24922
    const char *psz_type;psz_type735,24949
} AVI_strz_type[AVI_strz_type736,24975
static int AVI_ChunkRead_strz(790,26906
static void AVI_ChunkFree_strz(819,27746
static int AVI_ChunkRead_nothing(826,27928
static void AVI_ChunkFree_nothing(830,28038
    vlc_fourcc_t i_fourcc;837,28146
    int   (*AVI_ChunkRead_function)AVI_ChunkRead_function838,28173
    void  (*AVI_ChunkFree_function)AVI_ChunkFree_function839,28245
} AVI_Chunk_Function 840,28304
static int AVI_ChunkFunctionFind(913,32575
int  AVI_ChunkRead(926,32887
void AVI_ChunkFree(974,34487
static void AVI_ChunkDumpDebug_level(1015,35476
int AVI_ChunkReadRoot(1059,36876
void AVI_ChunkFreeRoot(1110,38356
int  AVI_ChunkCount_(1117,38476
void *AVI_ChunkFind_(AVI_ChunkFind_1142,39006

access/zip/zipstream.c,1538
vlc_module_begin(38,1653
typedef struct node node;60,2511
typedef struct item item;61,2537
struct stream_sys_t75,3239
    unzFile zipFile;78,3292
    zlib_filefunc_def *fileFunctions;fileFunctions79,3313
    char *psz_path;psz_path80,3351
    char *psz_xspf;psz_xspf83,3392
    size_t i_len;84,3412
    size_t i_pos;85,3430
struct item 88,3452
    int id;89,3466
    item *next;next90,3478
struct node 93,3498
    char *name;name94,3512
    item *media;media95,3528
    node *child;child96,3545
    node *next;next97,3562
inline static node* new_node(104,3758
inline static item* new_item(111,3907
inline static void free_all_node(118,4042
static int astrcatf(138,4478
static const uint8_t p_zip_marker[p_zip_marker163,5162
static const int i_zip_marker 164,5240
int StreamOpen(170,5444
void StreamClose(236,7510
static ssize_t Read(257,8154
static int Seek(274,8545
static int Control(288,8934
static int Fill(314,9546
static int CreatePlaylist(329,9848
static int GetFilesInZip(383,11435
bool isAllowedChar(462,13829
static int escapeToXml(481,14682
static int WriteXSPF(536,16116
static int nodeToXSPF(652,19886
static node* findOrCreateParentNode(679,20686
static void ZCALLBACK *ZipIO_Open(ZipIO_Open744,22410
static unsigned long ZCALLBACK ZipIO_Read(764,23157
static long ZCALLBACK ZipIO_Tell(779,23812
static long ZCALLBACK ZipIO_Seek 794,24419
static int ZCALLBACK ZipIO_Close 813,25068
static uLong ZCALLBACK ZipIO_Write(827,25610
static int ZCALLBACK ZipIO_Error(839,26158

demux/dash/mpd/Profile.cpp,403
    const Profile::Name name;::name30,1084
    const char * urn;::urn31,1114
const urnmap[urnmap33,1138
Profile::Profile(46,1790
Profile::Profile(51,1840
Profile::Name Profile::getNameByURN(56,1916
Profile::operator Profile::Name Profile::operator Profile::Name66,2141
Profile::operator std::string Profile::operator std::string71,2198
bool Profile::operator==(Profile::operator==81,2412

demux/mkv/demux.hpp,9475
#define VLC_MKV_DEMUX_HPP_26,1240
#undef ATTRIBUTE_PACKED34,1464
#undef PRAGMA_PACK_BEGIN35,1488
#undef PRAGMA_PACK_END36,1513
#define ATTRIBUTE_PACKED 39,1559
#define PRAGMA_PACK 40,1609
#define ATTRIBUTE_PACKED44,1670
#define PRAGMA_PACK 45,1695
  uint8_t hour;::hour60,1932
  uint8_t minute;::minute61,1948
  uint8_t second;::second62,1966
  uint8_t frame_u;::frame_u63,1984
} ATTRIBUTE_PACKED dvd_time_t;64,2047
  unsigned char zero ::zero71,2147
  unsigned char video_pres_mode_change ::video_pres_mode_change72,2211
  unsigned char karaoke_audio_pres_mode_change ::karaoke_audio_pres_mode_change74,2274
  unsigned char angle_change ::angle_change75,2335
  unsigned char subpic_stream_change ::subpic_stream_change76,2387
  unsigned char audio_stream_change ::audio_stream_change77,2439
  unsigned char pause_on ::pause_on78,2491
  unsigned char still_off ::still_off79,2543
  unsigned char button_select_or_activate ::button_select_or_activate80,2595
  unsigned char resume ::resume81,2647
  unsigned char chapter_menu_call ::chapter_menu_call83,2710
  unsigned char angle_menu_call ::angle_menu_call84,2771
  unsigned char audio_menu_call ::audio_menu_call85,2823
  unsigned char subpic_menu_call ::subpic_menu_call86,2875
  unsigned char root_menu_call ::root_menu_call87,2927
  unsigned char title_menu_call ::title_menu_call88,2979
  unsigned char backward_scan ::backward_scan89,3031
  unsigned char forward_scan ::forward_scan90,3083
  unsigned char next_pg_search ::next_pg_search92,3145
  unsigned char prev_or_top_pg_search ::prev_or_top_pg_search93,3205
  unsigned char time_or_chapter_search ::time_or_chapter_search94,3257
  unsigned char go_up ::go_up95,3309
  unsigned char stop ::stop96,3361
  unsigned char title_play ::title_play97,3413
  unsigned char chapter_search_or_play ::chapter_search_or_play98,3465
  unsigned char title_or_time_play ::title_or_time_play99,3517
  unsigned char video_pres_mode_change ::video_pres_mode_change101,3583
  unsigned char zero ::zero102,3644
  unsigned char resume ::resume104,3710
  unsigned char button_select_or_activate ::button_select_or_activate105,3771
  unsigned char still_off ::still_off106,3823
  unsigned char pause_on ::pause_on107,3875
  unsigned char audio_stream_change ::audio_stream_change108,3927
  unsigned char subpic_stream_change ::subpic_stream_change109,3979
  unsigned char angle_change ::angle_change110,4031
  unsigned char karaoke_audio_pres_mode_change ::karaoke_audio_pres_mode_change111,4083
  unsigned char forward_scan ::forward_scan113,4146
  unsigned char backward_scan ::backward_scan114,4206
  unsigned char title_menu_call ::title_menu_call115,4258
  unsigned char root_menu_call ::root_menu_call116,4310
  unsigned char subpic_menu_call ::subpic_menu_call117,4362
  unsigned char audio_menu_call ::audio_menu_call118,4414
  unsigned char angle_menu_call ::angle_menu_call119,4466
  unsigned char chapter_menu_call ::chapter_menu_call120,4518
  unsigned char title_or_time_play ::title_or_time_play122,4581
  unsigned char chapter_search_or_play ::chapter_search_or_play123,4641
  unsigned char title_play ::title_play124,4693
  unsigned char stop ::stop125,4745
  unsigned char go_up ::go_up126,4797
  unsigned char time_or_chapter_search ::time_or_chapter_search127,4849
  unsigned char prev_or_top_pg_search ::prev_or_top_pg_search128,4901
  unsigned char next_pg_search ::next_pg_search129,4953
} ATTRIBUTE_PACKED user_ops_t;131,5020
  uint8_t bytes[::bytes137,5112
} ATTRIBUTE_PACKED vm_cmd_t;138,5132
#define COMMAND_DATA_SIZE 139,5161
  uint32_t nv_pck_lbn;::nv_pck_lbn145,5242
  uint16_t vobu_cat;::vobu_cat146,5310
  uint16_t zero1;::zero1147,5365
  user_ops_t vobu_uop_ctl;::vobu_uop_ctl148,5410
  uint32_t vobu_s_ptm;::vobu_s_ptm149,5458
  uint32_t vobu_e_ptm;::vobu_e_ptm150,5526
  uint32_t vobu_se_e_ptm;::vobu_se_e_ptm151,5592
  dvd_time_t e_eltm;::e_eltm152,5660
  char vobu_isrc[::vobu_isrc153,5714
} ATTRIBUTE_PACKED pci_gi_t;154,5736
  uint32_t nsml_agl_dsta[::nsml_agl_dsta160,5825
} ATTRIBUTE_PACKED nsml_agli_t;161,5902
  uint16_t hli_ss;::hli_ss173,6169
  uint32_t hli_s_ptm;::hli_s_ptm174,6288
  uint32_t hli_e_ptm;::hli_e_ptm175,6348
  uint32_t btn_se_e_ptm;::btn_se_e_ptm176,6406
  unsigned char zero1 ::zero1178,6497
  unsigned char btngr_ns ::btngr_ns179,6550
  unsigned char zero2 ::zero2180,6650
  unsigned char btngr1_dsp_ty ::btngr1_dsp_ty181,6703
  unsigned char zero3 ::zero3182,6796
  unsigned char btngr2_dsp_ty ::btngr2_dsp_ty183,6849
  unsigned char zero4 ::zero4184,6942
  unsigned char btngr3_dsp_ty ::btngr3_dsp_ty185,6995
  unsigned char btngr1_dsp_ty ::btngr1_dsp_ty187,7094
  unsigned char zero2 ::zero2188,7129
  unsigned char btngr_ns ::btngr_ns189,7156
  unsigned char zero1 ::zero1190,7186
  unsigned char btngr3_dsp_ty ::btngr3_dsp_ty191,7213
  unsigned char zero4 ::zero4192,7248
  unsigned char btngr2_dsp_ty ::btngr2_dsp_ty193,7275
  unsigned char zero3 ::zero3194,7310
  uint8_t btn_ofn;::btn_ofn196,7344
  uint8_t btn_ns;::btn_ns197,7408
  uint8_t nsl_btn_ns;::nsl_btn_ns198,7489
  uint8_t zero5;::zero5199,7596
  uint8_t fosl_btnn;::fosl_btnn200,7636
  uint8_t foac_btnn;::foac_btnn201,7706
} ATTRIBUTE_PACKED hl_gi_t;202,7776
  uint32_t btn_coli[::btn_coli214,8170
} ATTRIBUTE_PACKED btn_colit_t;215,8249
  uint32        btn_coln ::btn_coln226,8548
  uint32        x_start ::x_start227,8615
  uint32        zero1 ::zero1228,8696
  uint32        x_end ::x_end229,8752
  uint32        zero3 ::zero3231,8832
  uint32        up ::up232,8888
  uint32        auto_action_mode ::auto_action_mode234,8966
  uint32        y_start ::y_start235,9045
  uint32        zero2 ::zero2236,9126
  uint32        y_end ::y_end237,9182
  uint32        zero4 ::zero4239,9262
  uint32        down ::down240,9318
  unsigned char zero5 ::zero5241,9397
  unsigned char left ::left242,9453
  unsigned char zero6 ::zero6243,9532
  unsigned char right ::right244,9588
  uint32        x_end ::x_end246,9674
  uint32        zero1 ::zero1247,9713
  uint32        x_start ::x_start248,9751
  uint32        btn_coln ::btn_coln249,9790
  uint32        up ::up251,9829
  uint32        zero3 ::zero3252,9867
  uint32        y_end ::y_end254,9906
  uint32        zero2 ::zero2255,9945
  uint32        y_start ::y_start256,9983
  uint32        auto_action_mode ::auto_action_mode257,10022
  uint32        down ::down259,10061
  uint32        zero4 ::zero4260,10099
  unsigned char left ::left261,10137
  unsigned char zero5 ::zero5262,10175
  unsigned char right ::right263,10213
  unsigned char zero6 ::zero6264,10251
  vm_cmd_t cmd;::cmd266,10296
} ATTRIBUTE_PACKED btni_t;267,10312
  hl_gi_t     hl_gi;::hl_gi273,10390
  btn_colit_t btn_colit;::btn_colit274,10411
  btni_t      btnit[::btnit275,10436
} ATTRIBUTE_PACKED hli_t;276,10461
  pci_gi_t    pci_gi;::pci_gi282,10527
  nsml_agli_t nsml_agli;::nsml_agli283,10549
  hli_t       hli;::hli284,10574
  uint8_t     zero1[::zero1285,10593
} ATTRIBUTE_PACKED pci_t;286,10619
class event_thread_t296,10774
    demux_t      *p_demux;event_thread_t::p_demux313,11276
    bool         is_running;event_thread_t::is_running315,11304
    vlc_thread_t thread;event_thread_t::thread316,11333
    vlc_mutex_t  lock;event_thread_t::lock318,11359
    vlc_cond_t   wait;event_thread_t::wait319,11382
    bool         b_abort;event_thread_t::b_abort320,11405
    bool         b_moved;event_thread_t::b_moved321,11431
    bool         b_clicked;event_thread_t::b_clicked322,11457
    int          i_key_action;event_thread_t::i_key_action323,11485
    bool         b_vout;event_thread_t::b_vout324,11516
    pci_t        pci_packet;event_thread_t::pci_packet325,11541
struct demux_sys_t329,11575
    demux_sys_t(demux_sys_t::demux_sys_t332,11604
    demux_t                 & demuxer;demux_sys_t::demuxer352,12077
    mtime_t                 i_pts;demux_sys_t::i_pts354,12117
    mtime_t                 i_pcr;demux_sys_t::i_pcr355,12152
    mtime_t                 i_start_pts;demux_sys_t::i_start_pts356,12187
    mtime_t                 i_mk_chapter_time;demux_sys_t::i_mk_chapter_time357,12228
    vlc_meta_t              *meta;demux_sys_t::meta359,12276
    std::vector<input_title_t*>      titles;demux_sys_t::titles361,12312
    size_t                           i_current_title;demux_sys_t::i_current_title362,12378
    std::vector<matroska_stream_c*>  streams;demux_sys_t::streams364,12433
    std::vector<attachment_c*>       stored_attachments;demux_sys_t::stored_attachments365,12479
    std::vector<matroska_segment_c*> opened_segments;demux_sys_t::opened_segments366,12536
    std::vector<virtual_segment_c*>  used_vsegments;demux_sys_t::used_vsegments367,12590
    virtual_segment_c                *p_current_vsegment;demux_sys_t::p_current_vsegment368,12643
    dvd_command_interpretor_c        dvd_interpretor;demux_sys_t::dvd_interpretor370,12702
    float                   f_duration;demux_sys_t::f_duration373,12790
    input_thread_t *p_input;demux_sys_t::p_input394,13863
    uint8_t        palette[demux_sys_t::palette395,13892
    vlc_mutex_t    lock_demuxer;demux_sys_t::lock_demuxer396,13926
    event_thread_t *p_ev;demux_sys_t::p_ev399,13976

demux/avi/libavi.h,8376
#define AVIF_HASINDEX 24,1207
#define AVIF_MUSTUSEINDEX 25,1275
#define AVIF_ISINTERLEAVED 26,1314
#define AVIF_TRUSTCKTYPE 27,1353
#define AVIF_WASCAPTUREFILE 28,1430
#define AVIF_COPYRIGHTED 29,1469
#define AVIIF_LIST 32,1531
#define AVIIF_KEYFRAME 33,1595
#define AVIIF_NOTIME 34,1667
#define AVIIF_COMPUSE 35,1746
#define AVIIF_FIXKEYFRAME 37,1827
#define AVI_CHUNK_COMMON 41,2053
#define AVI_CHUNK(50,2345
typedef struct idx1_entry_s52,2395
    vlc_fourcc_t i_fourcc;54,2425
    uint32_t i_flags;55,2452
    uint32_t i_pos;56,2474
    uint32_t i_length;57,2494
} idx1_entry_t;59,2518
typedef struct avi_chunk_common_s61,2535
} avi_chunk_common_t;64,2592
typedef struct avi_chunk_list_s66,2615
    vlc_fourcc_t i_type;69,2670
} avi_chunk_list_t;70,2695
typedef struct avi_chunk_idx1_s72,2716
    unsigned int i_entry_count;75,2771
    unsigned int i_entry_max;76,2803
    idx1_entry_t *entry;entry77,2833
} avi_chunk_idx1_t;79,2859
typedef struct avi_chunk_avih_s81,2880
    uint32_t i_microsecperframe;84,2935
    uint32_t i_maxbytespersec;85,2968
    uint32_t i_reserved1;86,2999
    uint32_t i_flags;88,3128
    uint32_t i_totalframes;89,3150
    uint32_t i_initialframes;90,3178
    uint32_t i_streams;91,3208
    uint32_t i_suggestedbuffersize;92,3232
    uint32_t i_width;93,3268
    uint32_t i_height;94,3290
    uint32_t i_scale;95,3313
    uint32_t i_rate;96,3335
    uint32_t i_start;97,3356
    uint32_t i_length;98,3378
} avi_chunk_avih_t;99,3401
typedef struct avi_chunk_strh_s101,3422
    vlc_fourcc_t i_type;104,3477
    uint32_t i_handler;105,3502
    uint32_t i_flags;106,3526
    uint32_t i_reserved1;107,3548
    uint32_t i_initialframes;108,3603
    uint32_t i_scale;109,3633
    uint32_t i_rate;110,3655
    uint32_t i_start;111,3676
    uint32_t i_length;112,3698
    uint32_t i_suggestedbuffersize;113,3751
    uint32_t i_quality;114,3787
    uint32_t i_samplesize;115,3811
} avi_chunk_strh_t;116,3838
typedef struct avi_chunk_strf_auds_s118,3859
    int             i_cat;121,3919
    WAVEFORMATEX    *p_wf;p_wf122,3946
} avi_chunk_strf_auds_t;123,3973
typedef struct avi_chunk_strf_vids_s125,3999
    int                     i_cat;128,4059
    VLC_BITMAPINFOHEADER    *p_bih;p_bih129,4094
} avi_chunk_strf_vids_t;130,4130
typedef union avi_chunk_strf_u132,4156
    avi_chunk_strf_auds_t   auds;134,4189
    avi_chunk_strf_vids_t   vids;135,4223
        int i_cat;139,4299
    }                       common;140,4318
} avi_chunk_strf_t;141,4354
typedef struct avi_chunk_strd_s143,4375
    uint8_t  *p_data;p_data146,4430
} avi_chunk_strd_t;147,4452
typedef struct avi_chunk_vprp_s149,4473
    uint32_t i_video_format_token;152,4528
    uint32_t i_video_standard;153,4563
    uint32_t i_vertical_refresh;154,4594
    uint32_t i_h_total_in_t;155,4627
    uint32_t i_v_total_in_lines;156,4656
    uint32_t i_frame_aspect_ratio;157,4689
    uint32_t i_frame_width_in_pixels;158,4724
    uint32_t i_frame_height_in_pixels;159,4762
    uint32_t i_nb_fields_per_frame;160,4801
        uint32_t i_compressed_bm_height;163,4854
        uint32_t i_compressed_bm_width;164,4895
        uint32_t i_valid_bm_height;165,4935
        uint32_t i_valid_bm_width;166,4971
        uint32_t i_valid_bm_x_offset;167,5006
        uint32_t i_valid_bm_y_offset;168,5044
        uint32_t i_video_x_offset_in_t;169,5082
        uint32_t i_video_y_valid_start_line;170,5122
    } field_info[field_info171,5167
} avi_chunk_vprp_t;173,5189
typedef struct avi_chunk_dmlh_s175,5210
    uint32_t dwTotalFrames;178,5265
} avi_chunk_dmlh_t;179,5293
#define AVI_STRD_ZERO_CHUNK 181,5314
#define AVI_ZERO_FOURCC 182,5351
#define AVI_INDEX_OF_INDEXES 184,5389
#define AVI_INDEX_OF_CHUNKS 185,5426
#define AVI_INDEX_IS_DATA 186,5463
#define AVI_INDEX_2FIELD 188,5501
    uint32_t i_offset;191,5555
    uint32_t i_size;192,5578
} indx_std_entry_t;193,5599
    uint32_t i_offset;197,5637
    uint32_t i_size;198,5660
    uint32_t i_offsetfield2;199,5681
} indx_field_entry_t;200,5710
    uint64_t i_offset;204,5750
    uint32_t i_size;205,5773
    uint32_t i_duration;206,5794
} indx_super_entry_t;207,5819
typedef struct avi_chunk_indx_s209,5842
    int16_t  i_longsperentry;212,5897
    int8_t   i_indexsubtype;213,5927
    int8_t   i_indextype;214,5956
    uint32_t i_entriesinuse;215,5982
    vlc_fourcc_t i_id;216,6011
    int64_t i_baseoffset;218,6035
        indx_std_entry_t    *std;std222,6078
        indx_field_entry_t  *field;field223,6112
        indx_super_entry_t  *super;super224,6148
    } idx;225,6184
} avi_chunk_indx_t;226,6195
typedef struct avi_chunk_STRING_s228,6216
    char *p_type;p_type231,6273
    char *p_str;p_str232,6291
} avi_chunk_STRING_t;233,6308
typedef union avi_chunk_u235,6331
    avi_chunk_common_t  common;237,6359
    avi_chunk_list_t    list;238,6391
    avi_chunk_idx1_t    idx1;239,6421
    avi_chunk_avih_t    avih;240,6451
    avi_chunk_strh_t    strh;241,6481
    avi_chunk_strf_t    strf;242,6511
    avi_chunk_strd_t    strd;243,6541
    avi_chunk_vprp_t    vprp;244,6571
    avi_chunk_indx_t    indx;245,6601
    avi_chunk_STRING_t  strz;246,6631
} avi_chunk_t;247,6661
#define AVI_ChunkCount(264,7356
#define AVI_ChunkFind(266,7450
#define AVIFOURCC_RIFF 271,7588
#define AVIFOURCC_ON2 272,7647
#define AVIFOURCC_LIST 273,7706
#define AVIFOURCC_JUNK 274,7765
#define AVIFOURCC_AVI 275,7824
#define AVIFOURCC_AVIX 276,7883
#define AVIFOURCC_ON2f 277,7942
#define AVIFOURCC_WAVE 278,8001
#define AVIFOURCC_INFO 279,8060
#define AVIFOURCC_avih 281,8120
#define AVIFOURCC_ON2h 282,8179
#define AVIFOURCC_hdrl 283,8238
#define AVIFOURCC_movi 284,8297
#define AVIFOURCC_idx1 285,8356
#define AVIFOURCC_strl 287,8416
#define AVIFOURCC_strh 288,8475
#define AVIFOURCC_strf 289,8534
#define AVIFOURCC_strd 290,8593
#define AVIFOURCC_strn 291,8652
#define AVIFOURCC_indx 292,8711
#define AVIFOURCC_vprp 293,8770
#define AVIFOURCC_dmlh 294,8829
#define AVIFOURCC_rec 296,8889
#define AVIFOURCC_auds 297,8948
#define AVIFOURCC_vids 298,9007
#define AVIFOURCC_txts 299,9066
#define AVIFOURCC_mids 300,9125
#define AVIFOURCC_iavs 301,9184
#define AVIFOURCC_ivas 302,9243
#define AVIFOURCC_IARL 304,9303
#define AVIFOURCC_IART 305,9362
#define AVIFOURCC_ICMS 306,9421
#define AVIFOURCC_ICMT 307,9480
#define AVIFOURCC_ICOP 308,9539
#define AVIFOURCC_ICRD 309,9598
#define AVIFOURCC_ICRP 310,9657
#define AVIFOURCC_IDIM 311,9716
#define AVIFOURCC_IDPI 312,9775
#define AVIFOURCC_IENG 313,9834
#define AVIFOURCC_IGNR 314,9893
#define AVIFOURCC_ISGN 315,9952
#define AVIFOURCC_IKEY 316,10011
#define AVIFOURCC_ILGT 317,10070
#define AVIFOURCC_IMED 318,10129
#define AVIFOURCC_INAM 319,10188
#define AVIFOURCC_IPLT 320,10247
#define AVIFOURCC_IPRD 321,10306
#define AVIFOURCC_ISBJ 322,10365
#define AVIFOURCC_ISFT 323,10424
#define AVIFOURCC_ISHP 324,10483
#define AVIFOURCC_ISRC 325,10542
#define AVIFOURCC_ISRF 326,10601
#define AVIFOURCC_ITCH 327,10660
#define AVIFOURCC_ISMP 328,10719
#define AVIFOURCC_IDIT 329,10778
#define AVIFOURCC_ILNG 330,10837
#define AVIFOURCC_IRTD 331,10896
#define AVIFOURCC_IWEB 332,10955
#define AVIFOURCC_IPRT 333,11014
#define AVIFOURCC_IWRI 334,11073
#define AVIFOURCC_IPRO 335,11132
#define AVIFOURCC_ICNM 336,11191
#define AVIFOURCC_IPDS 337,11250
#define AVIFOURCC_IEDT 338,11309
#define AVIFOURCC_ICDS 339,11368
#define AVIFOURCC_IMUS 340,11427
#define AVIFOURCC_ISTD 341,11486
#define AVIFOURCC_IDST 342,11545
#define AVIFOURCC_ICNT 343,11604
#define AVIFOURCC_ISTR 344,11663
#define AVIFOURCC_IFRM 345,11722
#define AVIFOURCC_IAS1 347,11782
#define AVIFOURCC_IAS2 348,11841
#define AVIFOURCC_IAS3 349,11900
#define AVIFOURCC_IAS4 350,11959
#define AVIFOURCC_IAS5 351,12018
#define AVIFOURCC_IAS6 352,12077
#define AVIFOURCC_IAS7 353,12136
#define AVIFOURCC_IAS8 354,12195
#define AVIFOURCC_IAS9 355,12254
#define AVITWOCC_wb 357,12314
#define AVITWOCC_db 358,12364
#define AVITWOCC_dc 359,12414
#define AVITWOCC_pc 360,12464
#define AVITWOCC_AC 361,12514
#define AVITWOCC_tx 362,12564
#define AVITWOCC_sb 363,12614
#define FOURCC_dvsd 368,12702
#define FOURCC_dvhd 369,12758
#define FOURCC_dvsl 370,12814
#define FOURCC_dv25 371,12870
#define FOURCC_dv50 372,12926

demux/au.c,852
vlc_module_begin 47,1787
enum AuType_e59,2209
    AU_UNKNOWN 61,2225
    AU_MULAW_8 62,2251
    AU_LINEAR_8 63,2301
    AU_LINEAR_16 64,2351
    AU_LINEAR_24 65,2402
    AU_LINEAR_32 66,2453
    AU_FLOAT 67,2504
    AU_DOUBLE 68,2564
    AU_ADPCM_G721 69,2624
    AU_ADPCM_G722 70,2681
    AU_ADPCM_G723_3 71,2732
    AU_ADPCM_G723_5 72,2789
    AU_ALAW_8 73,2846
enum AuCat_e76,2900
    AU_CAT_UNKNOWN 78,2915
    AU_CAT_PCM 79,2940
    AU_CAT_ADPCM 80,2965
struct demux_sys_t83,2993
    es_format_t     fmt;85,3014
    es_out_id_t     *es;es86,3039
    mtime_t         i_time;88,3065
    int             i_frame_size;90,3094
    mtime_t         i_frame_length;91,3128
    uint32_t        i_header_size;93,3165
static int Open(102,3503
static int Demux(297,11149
static void Close(325,11898
static int Control(336,12223

video_output/caca.c,638
vlc_module_begin(52,1999
struct vout_display_sys_t 75,2864
    cucul_canvas_t *cv;cv76,2892
    caca_display_t *dp;dp77,2916
    cucul_dither_t *dither;dither78,2940
    picture_pool_t *pool;pool80,2969
static int Open(86,3057
static void Close(229,6822
static picture_pool_t *Pool(Pool251,7249
static void Prepare(262,7505
static void PictureDisplay(301,8913
static int Control(311,9122
static void Refresh(343,9898
static void Place(362,10357
    int caca;388,11346
    int vlc;389,11360
} keys[keys390,11373
    int caca;456,13616
    int vlc;457,13630
} mouses[mouses458,13643
static void Manage(472,13885

hw/vdpau/vlc_vdpau.c,10159
    VdpGetErrorString *get_error_string;get_error_string33,1234
    VdpGetProcAddress *get_proc_address;get_proc_address34,1275
    VdpGetApiVersion *get_api_version;get_api_version35,1316
    void *dummy3;dummy336,1355
    VdpGetInformationString *get_information_string;get_information_string37,1373
    VdpDeviceDestroy *device_destroy;device_destroy38,1426
    VdpGenerateCSCMatrix *generate_csc_matrix;generate_csc_matrix39,1464
    VdpVideoSurfaceQueryCapabilities *video_surface_query_capabilities;video_surface_query_capabilities40,1511
    VdpVideoSurfaceQueryGetPutBitsYCbCrCapabilities *video_surface_query_get_put_bits_y_cb_cr_capabilities;video_surface_query_get_put_bits_y_cb_cr_capabilities41,1583
    VdpVideoSurfaceCreate *video_surface_create;video_surface_create42,1691
    VdpVideoSurfaceDestroy *video_surface_destroy;video_surface_destroy43,1740
    VdpVideoSurfaceGetParameters *video_surface_get_parameters;video_surface_get_parameters44,1791
    VdpVideoSurfaceGetBitsYCbCr *video_surface_get_bits_y_cb_cr;video_surface_get_bits_y_cb_cr45,1855
    VdpVideoSurfacePutBitsYCbCr *video_surface_put_bits_y_cb_cr;video_surface_put_bits_y_cb_cr46,1920
    VdpOutputSurfaceQueryCapabilities *output_surface_query_capabilities;output_surface_query_capabilities47,1985
    VdpOutputSurfaceQueryGetPutBitsNativeCapabilities *output_surface_query_get_put_bits_native_capabilities;output_surface_query_get_put_bits_native_capabilities48,2059
    VdpOutputSurfaceQueryPutBitsIndexedCapabilities *output_surface_query_put_bits_indexed_capabilities;output_surface_query_put_bits_indexed_capabilities49,2169
    VdpOutputSurfaceQueryPutBitsYCbCrCapabilities *output_surface_query_put_bits_y_cb_cr_capabilities;output_surface_query_put_bits_y_cb_cr_capabilities50,2274
    VdpOutputSurfaceCreate *output_surface_create;output_surface_create51,2377
    VdpOutputSurfaceDestroy *output_surface_destroy;output_surface_destroy52,2428
    VdpOutputSurfaceGetParameters *output_surface_get_parameters;output_surface_get_parameters53,2481
    VdpOutputSurfaceGetBitsNative *output_surface_get_bits_native;output_surface_get_bits_native54,2547
    VdpOutputSurfacePutBitsNative *output_surface_put_bits_native;output_surface_put_bits_native55,2614
    VdpOutputSurfacePutBitsIndexed *output_surface_put_bits_indexed;output_surface_put_bits_indexed56,2681
    VdpOutputSurfacePutBitsYCbCr *output_surface_put_bits_y_cb_cr;output_surface_put_bits_y_cb_cr57,2750
    VdpBitmapSurfaceQueryCapabilities *bitmap_surface_query_capabilities;bitmap_surface_query_capabilities58,2817
    VdpBitmapSurfaceCreate *bitmap_surface_create;bitmap_surface_create59,2891
    VdpBitmapSurfaceDestroy *bitmap_surface_destroy;bitmap_surface_destroy60,2942
    VdpBitmapSurfaceGetParameters *bitmap_surface_get_parameters;bitmap_surface_get_parameters61,2995
    VdpBitmapSurfacePutBitsNative *bitmap_surface_put_bits_native;bitmap_surface_put_bits_native62,3061
    void *dummy30;dummy3063,3128
    void *dummy31;dummy3164,3147
    void *dummy32;dummy3265,3166
    VdpOutputSurfaceRenderOutputSurface *output_surface_render_output_surface;output_surface_render_output_surface66,3185
    VdpOutputSurfaceRenderBitmapSurface *output_surface_render_bitmap_surface;output_surface_render_bitmap_surface67,3264
    void *output_surface_render_video_surface_luma;output_surface_render_video_surface_luma68,3343
    VdpDecoderQueryCapabilities *decoder_query_capabilities;decoder_query_capabilities69,3395
    VdpDecoderCreate *decoder_create;decoder_create70,3456
    VdpDecoderDestroy *decoder_destroy;decoder_destroy71,3494
    VdpDecoderGetParameters *decoder_get_parameters;decoder_get_parameters72,3534
    VdpDecoderRender *decoder_render;decoder_render73,3587
    VdpVideoMixerQueryFeatureSupport *video_mixer_query_feature_support;video_mixer_query_feature_support74,3625
    VdpVideoMixerQueryParameterSupport *video_mixer_query_parameter_support;video_mixer_query_parameter_support75,3698
    VdpVideoMixerQueryAttributeSupport *video_mixer_query_attribute_support;video_mixer_query_attribute_support76,3775
    VdpVideoMixerQueryParameterValueRange *video_mixer_query_parameter_value_range;video_mixer_query_parameter_value_range77,3852
    VdpVideoMixerQueryAttributeValueRange *video_mixer_query_attribute_value_range;video_mixer_query_attribute_value_range78,3936
    VdpVideoMixerCreate *video_mixer_create;video_mixer_create79,4020
    VdpVideoMixerSetFeatureEnables *video_mixer_set_feature_enables;video_mixer_set_feature_enables80,4065
    VdpVideoMixerSetAttributeValues *video_mixer_set_attribute_values;video_mixer_set_attribute_values81,4134
    VdpVideoMixerGetFeatureSupport *video_mixer_get_feature_support;video_mixer_get_feature_support82,4205
    VdpVideoMixerGetFeatureEnables *video_mixer_get_feature_enables;video_mixer_get_feature_enables83,4274
    VdpVideoMixerGetParameterValues *video_mixer_get_parameter_values;video_mixer_get_parameter_values84,4343
    VdpVideoMixerGetAttributeValues *video_mixer_get_attribute_values;video_mixer_get_attribute_values85,4414
    VdpVideoMixerDestroy *video_mixer_destroy;video_mixer_destroy86,4485
    VdpVideoMixerRender *video_mixer_render;video_mixer_render87,4532
    VdpPresentationQueueTargetDestroy *presentation_queue_target_destroy;presentation_queue_target_destroy88,4577
    VdpPresentationQueueCreate *presentation_queue_create;presentation_queue_create89,4651
    VdpPresentationQueueDestroy *presentation_queue_destroy;presentation_queue_destroy90,4710
    VdpPresentationQueueSetBackgroundColor *presentation_queue_set_background_color;presentation_queue_set_background_color91,4771
    VdpPresentationQueueGetBackgroundColor *presentation_queue_get_background_color;presentation_queue_get_background_color92,4856
    void *dummy60;dummy6093,4941
    void *dummy61;dummy6194,4960
    VdpPresentationQueueGetTime *presentation_queue_get_time;presentation_queue_get_time95,4979
    VdpPresentationQueueDisplay *presentation_queue_display;presentation_queue_display96,5041
    VdpPresentationQueueBlockUntilSurfaceIdle *presentation_queue_block_until_surface_idle;presentation_queue_block_until_surface_idle97,5102
    VdpPresentationQueueQuerySurfaceStatus *presentation_queue_query_surface_status;presentation_queue_query_surface_status98,5194
    VdpPreemptionCallbackRegister *preemption_callback_register;preemption_callback_register99,5279
} vdp_vtable_t;100,5344
struct vdp_s102,5361
        vdp_vtable_t vt;106,5392
        void *funcs[funcs107,5417
    void *handle;handle109,5524
#define CHECK_FUNC(112,5576
const char *vdp_get_error_string(vdp_get_error_string116,5704
VdpStatus vdp_get_proc_address(123,5964
VdpStatus vdp_get_api_version(130,6174
VdpStatus vdp_get_information_string(136,6316
VdpStatus vdp_device_destroy(143,6499
VdpStatus vdp_generate_csc_matrix(149,6644
VdpStatus vdp_video_surface_query_capabilities(164,7031
VdpStatus vdp_video_surface_query_get_put_bits_y_cb_cr_capabilities(171,7307
VdpStatus vdp_video_surface_create(180,7655
VdpStatus vdp_video_surface_destroy(187,7917
VdpStatus vdp_video_surface_get_parameters(193,8091
VdpStatus vdp_video_surface_get_bits_y_cb_cr(200,8349
VdpStatus vdp_video_surface_put_bits_y_cb_cr(208,8642
VdpStatus vdp_output_surface_query_capabilities(217,8966
VdpStatus vdp_output_surface_query_get_put_bits_native_capabilities(226,9336
VdpStatus vdp_output_surface_query_put_bits_indexed_capabilities(234,9707
VdpStatus vdp_output_surface_query_put_bits_y_cb_cr_capabilities(243,10133
VdpStatus vdp_output_surface_create(252,10529
VdpStatus vdp_output_surface_destroy(259,10789
VdpStatus vdp_output_surface_get_parameters(266,11004
VdpStatus vdp_output_surface_get_bits_native(273,11264
VdpStatus vdp_output_surface_put_bits_native(281,11558
VdpStatus vdp_output_surface_put_bits_indexed(289,11858
VdpStatus vdp_output_surface_put_bits_y_cb_cr(299,12297
VdpStatus vdp_bitmap_surface_query_capabilities(309,12731
VdpStatus vdp_bitmap_surface_create(316,13010
VdpStatus vdp_bitmap_surface_destroy(324,13290
VdpStatus vdp_bitmap_surface_get_parameters(331,13505
VdpStatus vdp_bitmap_surface_put_bits_native(339,13786
VdpStatus vdp_output_surface_render_output_surface(347,14084
VdpStatus vdp_output_surface_render_bitmap_surface(358,14564
VdpStatus vdp_decoder_query_capabilities(370,15056
VdpStatus vdp_decoder_create(378,15362
VdpStatus vdp_decoder_destroy(386,15632
VdpStatus vdp_decoder_get_parameters(392,15783
VdpStatus vdp_decoder_render(399,16028
VdpStatus vdp_video_mixer_query_feature_support(408,16331
VdpStatus vdp_video_mixer_query_parameter_support(415,16593
VdpStatus vdp_video_mixer_query_attribute_support(422,16867
VdpStatus vdp_video_mixer_query_parameter_value_range(429,17141
VdpStatus vdp_video_mixer_query_attribute_value_range(437,17450
VdpStatus vdp_video_mixer_create(445,17759
VdpStatus vdp_video_mixer_set_feature_enables(455,18166
VdpStatus vdp_video_mixer_set_attribute_values(463,18464
VdpStatus vdp_video_mixer_get_feature_support(471,18777
VdpStatus vdp_video_mixer_get_feature_enables(479,19069
VdpStatus vdp_video_mixer_get_parameter_values(487,19361
VdpStatus vdp_video_mixer_get_attribute_values(495,19662
VdpStatus vdp_video_mixer_destroy(503,19963
VdpStatus vdp_video_mixer_render(509,20125
VdpStatus vdp_presentation_queue_target_destroy(524,20832
VdpStatus vdp_presentation_queue_create(531,21055
VdpStatus vdp_presentation_queue_destroy(538,21316
VdpStatus vdp_presentation_queue_set_background_color(545,21510
VdpStatus vdp_presentation_queue_get_background_color(553,21799
VdpStatus vdp_presentation_queue_get_time(560,22056
VdpStatus vdp_presentation_queue_display(567,22290
VdpStatus vdp_presentation_queue_block_until_surface_idle(576,22655
VdpStatus vdp_presentation_queue_query_surface_status(584,23017
VdpStatus vdp_preemption_callback_register(594,23432
VdpStatus vdp_presentation_queue_target_create_x11(605,23738
VdpStatus vdp_create_x11(618,24179
void vdp_destroy_x11(654,25111

access/dvb/access.c,1072
struct access_sys_t50,1786
    demux_handle_t p_demux_handles[p_demux_handles52,1808
    dvb_sys_t dvb;53,1855
    struct scan_t *scan;scan56,1890
    bool done;57,1915
#define PROBE_TEXT 66,2200
#define PROBE_LONGTEXT 67,2257
#define SATELLITE_TEXT 70,2428
#define SATELLITE_LONGTEXT 71,2483
#define SCANLIST_TEXT 73,2560
#define SCANLIST_LONGTEXT 74,2605
#define SCAN_NIT_TEXT 76,2683
vlc_module_begin 78,2742
#define DVB_SCAN_MAX_LOCK_TIME 110,3902
static void Close(205,6785
static int ScanFrontendTuningHandler(219,7097
static int ScanStatsCallback(248,8158
static int ScanFilterHandler(264,8536
static int ScanReadCallback(275,8800
static block_t *BlockScan(BlockScan361,11189
static int Control(384,11820
static void FilterSet(433,13279
static void FilterUnset(464,14058
static void VarInit(481,14598
static int ParseMRL(507,15979
#define GET_OPTION_INT(513,16139
#define GET_OPTION_BOOL(521,16614
#define GET_OPTION_STRING(529,17089
#undef GET_OPTION_INT591,19533
#undef GET_OPTION_BOOL592,19555
#undef GET_OPTION_STRING593,19578

codec/atsc_a65.c,2324
    ATSC_A65_COMPRESSION_NONE 31,1116
    ATSC_A65_COMPRESSION_NONE             = 0x00,x0031,1116
    ATSC_A65_COMPRESSION_HUFFMAN_C4C5 32,1166
    ATSC_A65_COMPRESSION_HUFFMAN_C4C5     = 0x01,x0132,1166
    ATSC_A65_COMPRESSION_HUFFMAN_C6C7 33,1216
    ATSC_A65_COMPRESSION_HUFFMAN_C6C7     = 0x02,x0233,1216
    ATSC_A65_COMPRESSION_RESERVED_FIRST 34,1266
    ATSC_A65_COMPRESSION_RESERVED_FIRST   = 0x03,x0334,1266
    ATSC_A65_COMPRESSION_RESERVED_LAST 35,1316
    ATSC_A65_COMPRESSION_RESERVED_LAST    = 0xAF,xAF35,1316
    ATSC_A65_COMPRESSION_OTHER_FIRST 36,1366
    ATSC_A65_COMPRESSION_OTHER_FIRST      = 0xB0,xB036,1366
    ATSC_A65_COMPRESSION_OTHER_LAST 37,1416
    ATSC_A65_COMPRESSION_OTHER_LAST       = 0xFF,xFF37,1416
    ATSC_A65_MODE_UNICODE_RANGE_START 42,1477
    ATSC_A65_MODE_UNICODE_RANGE_START     = 0x00,x0042,1477
    ATSC_A65_MODE_UNICODE_RANGE_END 43,1553
    ATSC_A65_MODE_UNICODE_RANGE_END       = 0x33,x3343,1553
    ATSC_A65_MODE_SCSU 44,1603
    ATSC_A65_MODE_SCSU                    = 0x3E,x3E44,1603
    ATSC_A65_MODE_UNICODE_UTF16 45,1653
    ATSC_A65_MODE_UNICODE_UTF16           = 0x3F,x3F45,1653
    ATSC_A65_MODE_TAIWAN_FIRST 46,1703
    ATSC_A65_MODE_TAIWAN_FIRST            = 0x40,x4046,1703
    ATSC_A65_MODE_TAIWAN_LAST 47,1753
    ATSC_A65_MODE_TAIWAN_LAST             = 0x41,x4147,1753
    ATSC_A65_MODE_SOUTH_KOREA 48,1803
    ATSC_A65_MODE_SOUTH_KOREA             = 0x48,x4848,1803
    ATSC_A65_MODE_OTHER_FIRST 49,1853
    ATSC_A65_MODE_OTHER_FIRST             = 0xE0,xE049,1853
    ATSC_A65_MODE_OTHER_LAST 50,1903
    ATSC_A65_MODE_OTHER_LAST              = 0xFE,xFE50,1903
    ATSC_A65_MODE_NOT_APPLICABLE 51,1953
    ATSC_A65_MODE_NOT_APPLICABLE          = 0xFF,xFF51,1953
const uint8_t ATSC_A65_MODE_RESERVED_RANGES[ATSC_A65_MODE_RESERVED_RANGES54,2007
struct atsc_a65_handle_t64,2180
    char *psz_lang;psz_lang66,2207
    vlc_iconv_t iconv_u16be;67,2227
atsc_a65_handle_t *atsc_a65_handle_New(atsc_a65_handle_New70,2260
void atsc_a65_handle_Release(85,2634
static char *enlarge_to16(enlarge_to1693,2835
static bool convert_encoding_set(113,3268
#define BUF_ADVANCE(190,5914
char * atsc_a65_Decode_multiple_string(192,5968
#undef BUF_ADVANCE248,7303
char * atsc_a65_Decode_simple_UTF16_string(250,7323

video_output/wayland/shell_surface.c,1224
struct vout_window_sys_t39,1302
    struct wl_compositor *compositor;compositor41,1329
    struct wl_output *output;output42,1367
    struct wl_shell *shell;shell43,1397
    struct wl_shell_surface *shell_surface;shell_surface44,1425
    uint32_t top_width;46,1470
    uint32_t top_height;47,1494
    uint32_t fs_width;48,1519
    uint32_t fs_height;49,1542
    bool fullscreen;50,1566
    vlc_mutex_t lock;52,1588
    vlc_thread_t thread;53,1610
static void cleanup_wl_display_read(56,1639
static void *Thread(Thread64,1828
static int Control(96,2597
static void output_geometry_cb(153,4304
static void output_mode_cb(166,4862
const struct wl_output_listener output_cbs 191,5595
static void shell_surface_ping_cb(199,5710
static void shell_surface_configure_cb(207,5953
static void shell_surface_popup_done_cb(228,6606
static const struct wl_shell_surface_listener shell_surface_cbs 234,6782
static void registry_global_cb(241,6946
static void registry_global_remove_cb(262,7780
static const struct wl_registry_listener registry_cbs 271,8021
static int Open(280,8182
static void Close(386,11270
#define DISPLAY_TEXT 405,11748
#define DISPLAY_LONGTEXT 406,11791
vlc_module_begin 410,11933

audio_filter/gain.c,292
struct filter_sys_t47,1813
    audio_volume_t volume;49,1835
    float f_gain;50,1862
    module_t *module;module51,1880
#define GAIN_VALUE_TEXT 58,2087
#define GAIN_VALUE_LONGTEXT 59,2135
vlc_module_begin(61,2216
static block_t *Process(Process109,3799
static void Close(122,4185

demux/playlist/m3u.c,346
struct demux_sys_t39,1547
    char *psz_prefix;psz_prefix41,1568
    char *(*pf_dup)pf_dup42,1590
static char *GuessEncoding GuessEncoding52,1993
static char *CheckUnicode CheckUnicode57,2102
int Import_M3U(65,2392
static bool ContainsURL(116,3930
void Close_M3U(155,5303
static int Demux(163,5458
static void parseEXTINF(306,10456

hw/vdpau/vlc_vdpau.h,711
typedef struct vdp_s vdp_t;25,1129
bool vlc_fourcc_to_vdp_ycc(214,11531
struct picture_sys_t258,12857
    VdpOutputSurface surface;260,12880
    VdpDevice device;261,12910
    vdp_t *vdp;vdp262,12932
typedef struct vlc_vdp_video_frame265,12952
    VdpVideoSurface surface;267,12989
    VdpDevice device;268,13018
    vdp_t *vdp;vdp269,13040
    atomic_uintptr_t refs;270,13056
} vlc_vdp_video_frame_t;271,13083
typedef struct vlc_vdp_video_field273,13109
    void (*destroy)destroy275,13146
    vlc_vdp_video_frame_t *frame;frame276,13218
    VdpVideoMixerPictureStructure structure;277,13252
    VdpProcamp procamp;278,13297
    float sharpen;279,13321
} vlc_vdp_video_field_t;280,13340

hw/vdpau/adjust.c,666
struct filter_sys_t34,1279
    vlc_atomic_float brightness;36,1301
    vlc_atomic_float contrast;37,1334
    vlc_atomic_float saturation;38,1365
    vlc_atomic_float hue;39,1398
static float vlc_to_vdp_brightness(42,1428
static int BrightnessCallback(52,1640
static float vlc_to_vdp_contrast(60,1931
static int ContrastCallback(69,2104
#define vlc_to_vdp_saturation 77,2389
static int SaturationCallback(79,2440
static float vlc_to_vdp_hue(87,2731
static int HueCallback(98,2917
static picture_t *Adjust(Adjust107,3195
static const char *const options[options123,3669
static int Open(127,3768
static void Close(171,5295
vlc_module_begin(185,5769

audio_filter/spatializer/comb.hpp,370
#define _comb_8,158
class comb16,282
    float    feedback;comb::feedback28,550
    float    filterstore;comb::filterstore29,573
    float    damp1;comb::damp130,599
    float    damp2;comb::damp231,619
    float    *buffer;comb::buffer32,639
    int    bufsize;comb::bufsize33,661
    int    bufidx;comb::bufidx34,681
inline float comb::process(40,747

demux/smf.c,930
#define TEMPO_MIN 34,1320
#define TEMPO_MAX 35,1342
static int32_t ReadVarInt 41,1501
typedef struct smf_track_t59,1821
    uint64_t next;61,1850
    int64_t  start;62,1919
    uint32_t length;63,1972
    uint32_t offset;64,2013
    uint8_t  running_event;65,2082
} mtrk_t;66,2142
static int ReadDeltaTime 72,2299
struct demux_sys_t94,2766
    es_out_id_t *es;es96,2787
    date_t       pts;97,2808
    uint64_t     pulse;98,2852
    mtime_t      tick;99,2898
    mtime_t      duration;101,2949
    unsigned     ppqn;102,2998
    unsigned     trackc;105,3113
    mtrk_t       trackv[trackv106,3162
int HandleMeta 113,3260
int HandleMessage 258,7363
static int SeekSet0 364,10534
static int ReadEvents 397,11405
#define TICK 427,12192
static int Demux 434,12580
static int Seek 468,13410
static int Control 495,14182
static int Open 529,15188
static void Close 704,20041
vlc_module_begin 712,20190

codec/atsc_a65.h,183
#define VLC_ATSC_A65_H20,1008
#define GPS_UTC_EPOCH_OFFSET 22,1032
typedef struct atsc_a65_handle_t atsc_a65_handle_t;24,1072
static inline time_t atsc_a65_GPSTimeToEpoch(32,1424

lua/intf.c,474
static const char * const ppsz_intf_options[ppsz_intf_options47,1758
static inline void luaL_register_submodule(52,1997
static char *MakeConfig(MakeConfig60,2239
static char *StripPasswords(StripPasswords145,5028
static const luaL_Reg p_reg[p_reg197,6246
static int Start_LuaIntf(199,6299
void Close_LuaIntf(385,11584
static void *Run(Run399,11925
int Open_LuaIntf(414,12320
int Open_LuaHTTP(419,12408
int Open_LuaCLI(424,12498
int Open_LuaTelnet(429,12586

audio_filter/channel_mixer/mono.c,1176
#define VLC_MODULE_LICENSE 34,1518
struct atomic_operation_t56,2407
    int i_source_channel_offset;58,2435
    int i_dest_channel_offset;59,2468
    unsigned int i_delay;60,2499
    double d_amplitude_factor;61,2545
struct filter_sys_t64,2580
    bool b_downmix;66,2602
    unsigned int i_nb_channels;68,2623
    int i_channel_selected;69,2690
    int i_bitspersample;70,2718
    size_t i_overflow_buffer_size;72,2744
    uint8_t * p_overflow_buffer;73,2793
    unsigned int i_nb_atomic_operations;74,2826
    struct atomic_operation_t * p_atomic_operations;75,2867
#define MONO_DOWNMIX_TEXT 78,2924
#define MONO_DOWNMIX_LONGTEXT 79,2978
#define MONO_CHANNEL_TEXT 83,3194
#define MONO_CHANNEL_LONGTEXT 84,3249
static const int pi_pos_values[pi_pos_values87,3364
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions88,3430
#define MONO_CFG 94,3649
vlc_module_begin 98,3859
static int Init(195,7396
static int OpenFilter(340,12771
static void CloseFilter(408,15246
static block_t *Convert(Convert421,15655
static void stereo2mono_downmix(477,17369
static unsigned int mono(580,21033
static unsigned int stereo_to_mono(600,21555

keystore/secret.c,574
vlc_module_begin(38,1391
str2key(61,1997
static void cancellable_interrupted(71,2175
static GCancellable *cancellable_register(cancellable_register77,2299
static void cancellable_unregister(86,2514
values_to_ghashtable(96,2700
ghash_to_value(112,3179
ghashtable_to_values(125,3480
ghashtable_insert_vlc_id(132,3659
Store(139,3833
items_search(168,4853
Find(191,5670
Remove(248,7497
struct secrets_watch_data267,8038
    vlc_sem_t sem;269,8066
    bool b_running;270,8085
dbus_appeared_cb(274,8121
dbus_vanished_cb(284,8449
Open(294,8734
Close(340,10289

services_discovery/sap.c,3422
#define VLC_MODULE_LICENSE 33,1438
#define MAX_LINE_LENGTH 65,2076
#define SAP_PORT 68,2138
#define SAP_V4_GLOBAL_ADDRESS 70,2191
#define SAP_V4_ORG_ADDRESS 72,2276
#define SAP_V4_LOCAL_ADDRESS 74,2382
#define SAP_V4_LINK_ADDRESS 76,2461
#define ADD_SESSION 77,2507
#define SAP_ADDR_TEXT 82,2710
#define SAP_ADDR_LONGTEXT 83,2762
#define SAP_TIMEOUT_TEXT 86,2984
#define SAP_TIMEOUT_LONGTEXT 87,3039
#define SAP_PARSE_TEXT 90,3173
#define SAP_PARSE_LONGTEXT 91,3230
#define SAP_STRICT_TEXT 95,3440
#define SAP_STRICT_LONGTEXT 96,3488
VLC_SD_PROBE_HELPER(106,3818
typedef struct sdp_t sdp_t;143,5116
typedef struct attribute_t attribute_t;144,5144
typedef struct sap_announce_t sap_announce_t;145,5184
struct sdp_media_t148,5232
    struct sdp_t           *parent;parent150,5253
    char                   *fmt;fmt151,5289
    struct sockaddr_storage addr;152,5322
    socklen_t               addrlen;153,5356
    unsigned                n_addr;154,5393
    int           i_attributes;155,5429
    attribute_t  **pp_attributes;pp_attributes156,5461
struct  sdp_t161,5550
    const char *psz_sdp;psz_sdp163,5566
    char     username[username166,5610
    uint64_t session_id;167,5637
    uint64_t session_version;168,5662
    unsigned orig_ip_version;169,5692
    char     orig_host[orig_host170,5722
    char *psz_sessionname;psz_sessionname173,5772
    char *psz_sessioninfo;psz_sessioninfo176,5819
    char *psz_uri;psz_uri180,5892
    int           i_media_type;181,5911
    unsigned rtcp_port;182,5943
    int           i_attributes;185,5999
    attribute_t  **pp_attributes;pp_attributes186,6031
    unsigned            mediac;189,6115
    struct sdp_media_t *mediav;mediav190,6147
struct attribute_t193,6183
    const char *value;value195,6204
    char name[name196,6227
struct sap_announce_t199,6248
    mtime_t i_last;201,6272
    mtime_t i_period;202,6292
    uint8_t i_period_trust;203,6314
    uint16_t    i_hash;205,6343
    uint32_t    i_source[i_source206,6367
    sdp_t       *p_sdp;p_sdp209,6448
    input_item_t * p_item;211,6473
struct services_discovery_sys_t214,6504
    vlc_thread_t thread;216,6538
    int i_fd;219,6593
    int *pi_fd;pi_fd220,6607
    int i_announces;223,6653
    struct sap_announce_t **pp_announces;pp_announces224,6674
    bool  b_strict;227,6733
    bool  b_parse;228,6753
    int i_timeout;230,6773
struct demux_sys_t233,6796
    sdp_t *p_sdp;p_sdp235,6817
static inline int min_int(267,8276
static bool IsWellKnownPayload 272,8349
static int Open(293,8981
static int OpenDemux(326,10035
static void Close(413,12345
static void CloseDemux(440,13088
#define MAX_SAP_BUFFER 454,13606
static void *Run(Run456,13635
static int Demux(613,19207
static int Control(651,20232
static int ParseSAP(662,20570
sap_announce_t *CreateAnnounce(CreateAnnounce834,25291
static const char *FindAttribute FindAttribute920,28013
static int ParseConnection(933,28487
static int ParseSDPConnection 1116,34116
static sdp_t *ParseSDP ParseSDP1170,35560
static int InitSocket(1466,44914
static int Decompress(1479,45310
static void FreeSDP(1528,46465
static int RemoveAnnounce(1550,47057
static bool IsSameSession(1586,47864
static inline attribute_t *MakeAttribute MakeAttribute1604,48393
static const char *GetAttribute GetAttribute1624,48787
static inline void FreeAttribute 1634,49046

access/rar/stream.c,252
static ssize_t Read(38,1381
static int Seek(43,1494
static int Control(48,1591
int RarStreamOpen(61,1911
        int filescount;73,2128
        rar_file_t **files;files74,2152
        unsigned int i_nbvols;75,2180
void RarStreamClose(157,4597

codec/zvbi.c,2024
#define PAGE_TEXT 61,2293
#define PAGE_LONGTEXT 62,2331
#define OPAQUE_TEXT 65,2433
#define OPAQUE_LONGTEXT 66,2467
#define POS_TEXT 69,2581
#define POS_LONGTEXT 70,2623
#define TELX_TEXT 75,2833
#define TELX_LONGTEXT 76,2881
#define LEVEL_TEXT 79,2972
static const int pi_pos_values[pi_pos_values81,3017
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions82,3084
static const int level_values[level_values86,3278
static const char *const level_descriptions[level_descriptions87,3328
static const int level_zvbi_values[level_zvbi_values91,3491
vlc_module_begin 94,3609
static const char *const ppsz_default_triplet[ppsz_default_triplet131,4966
    ZVBI_KEY_RED 144,5198
    ZVBI_KEY_GREEN 145,5231
    ZVBI_KEY_YELLOW 146,5264
    ZVBI_KEY_BLUE 147,5297
    ZVBI_KEY_INDEX 148,5330
} ttxt_key_id;149,5363
#define MAX_SLICES 151,5379
struct decoder_sys_t153,5402
    vbi_decoder *     p_vbi_dec;155,5425
    vbi_sliced        p_vbi_sliced[p_vbi_sliced156,5458
    unsigned int      i_last_page;157,5506
    bool              b_update;158,5541
    bool              b_text;159,5573
    vlc_mutex_t       lock;161,5630
    int               i_align;163,5745
    unsigned int      i_wanted_page;165,5786
    unsigned int      i_wanted_subpage;166,5823
    bool              b_opaque;168,5873
    unsigned int      i_level;169,5905
        int pgno,171,5949
        int pgno, subno;171,5949
    }                 nav_link[nav_link172,5974
    int               i_key[i_key173,6009
static int Open(203,7536
static void Close(285,10732
# define ZVBI_PIXFMT_RGBA32 302,11222
# define ZVBI_PIXFMT_RGBA32 304,11277
static subpicture_t *Decode(Decode310,11504
static subpicture_t *Subpicture(Subpicture509,18368
static void EventHandler(569,20090
static int get_first_visible_row(610,21559
static int get_last_visible_row(623,21824
static int OpaquePage(636,22091
static int RequestPage(680,23707
static int Opaque(725,24966
static int EventKey(739,25372

video_output/ios2.m,2535
    UNIFORM_Y,57,2013
    UNIFORM_UV,58,2028
    UNIFORM_COLOR_CONVERSION_MATRIX,59,2044
    UNIFORM_TRANSFORM_MATRIX,60,2081
    NUM_UNIFORMS61,2111
GLint uniforms[uniforms63,2131
    ATTRIB_VERTEX,68,2189
    ATTRIB_TEXCOORD,69,2208
    NUM_ATTRIBUTES70,2229
struct picture_sys_t 73,2252
    CVPixelBufferRef pixelBuffer;74,2275
static const GLfloat kColorConversion601[kColorConversion60178,2356
static const GLfloat kColorConversion709[kColorConversion70985,2636
static NSString *const fragmentShaderString 91,2873
static NSString *const vertexShaderString 113,3399
vlc_module_begin 148,4476
@interface VLCOpenGLES2VideoView 159,4765
struct vout_display_sys_t194,5693
    VLCOpenGLES2VideoView *glESView;glESView196,5721
    UIView *viewContainer;viewContainer197,5758
    UITapGestureRecognizer *tapRecognizer;tapRecognizer198,5785
    vlc_gl_t gl;200,5829
    vout_display_opengl_t *vgl;vgl201,5846
    picture_pool_t *picturePool;picturePool203,5879
    bool has_first_frame;204,5912
    bool zero_copy;205,5938
    vout_display_place_t place;207,5959
static void *OurGetProcAddress(OurGetProcAddress210,5995
static int Open(217,6122
void Close 325,10003
static int Control(371,11525
static void PictureDisplay(437,14035
static void PictureRender(453,14455
static picture_pool_t *PicturePool(PicturePool460,14696
static int OpenglESClean(473,15175
static void OpenglESSwap(482,15378
static picture_pool_t *ZeroCopyPicturePool(ZeroCopyPicturePool495,15796
static void DestroyZeroCopyPoolPicture(541,17142
static void ZeroCopyClean(554,17420
static void ZeroCopyDisplay(561,17635
@synthesize voutDisplay 587,18460
+ (Class)layerClass589,18555
- (id)initWithFrame:(CGRect)frame zeroCopy:(bool)zero_copy voutDisplay:initWithFrame:zeroCopy:voutDisplay:594,18612
- (void)fetchViewContainer632,19694
- (void)dealloc686,21932
- (void)didMoveToWindow700,22209
- (void)createBuffers706,22322
- (void)destroyBuffers731,23285
- (void)resetBuffers747,23710
- (void)layoutSubviews761,24054
- (void)reshape768,24131
- (void)tapRecognized:797,25155
- (void)applicationStateChanged:810,25816
- (void)updateConstraints822,26247
- (BOOL)isOpaque828,26329
- (BOOL)acceptsFirstResponder833,26367
- (void)displayPixelBuffer:838,26418
- (void)setupZeroCopyGL989,33693
- (void)cleanUpTextures1017,34743
- (BOOL)loadShaders1033,35068
- (BOOL)compileShader:(GLuint *)shader type:(GLenum)type sourceString:compileShader:type:sourceString:1105,37458
- (BOOL)linkProgram:1136,38272

codec/subsusf.c,1862
#define FORMAT_TEXT 44,1729
#define FORMAT_LONGTEXT 45,1775
vlc_module_begin 48,1935
    ATTRIBUTE_ALIGNMENT 65,2498
    ATTRIBUTE_X 66,2534
    ATTRIBUTE_X_PERCENT 67,2570
    ATTRIBUTE_Y 68,2606
    ATTRIBUTE_Y_PERCENT 69,2642
    char       *psz_filename;psz_filename74,2699
    picture_t  *p_pic;p_pic75,2729
} image_attach_t;76,2752
    char *          psz_stylename;80,2788
    text_style_t *  p_style;81,2871
    int             i_align;82,2900
    int             i_margin_h;83,2929
    int             i_margin_v;84,2961
    int             i_margin_percent_h;85,2993
    int             i_margin_percent_v;86,3033
}  ssa_style_t;87,3073
struct decoder_sys_t89,3090
    int                 i_original_height;91,3113
    int                 i_original_width;92,3156
    int                 i_align;93,3198
    ssa_style_t         **pp_ssa_styles;pp_ssa_styles95,3279
    int                 i_ssa_styles;96,3320
    image_attach_t      **pp_images;pp_images98,3359
    int                 i_images;99,3396
static int OpenDecoder(117,4304
static subpicture_t *DecodeBlock(DecodeBlock157,5609
static void CloseDecoder(178,6134
static subpicture_t *ParseText(ParseText218,7390
static char *GrabAttributeValue(GrabAttributeValue280,9223
static ssa_style_t *ParseStyle(ParseStyle306,9960
static int ParsePositionAttributeList(323,10444
static void SetupPositions(389,12838
static subpicture_region_t *CreateTextRegion(CreateTextRegion415,13642
static int ParseImageAttachments(480,15972
static void ParseUSFHeaderTags(558,18592
static subpicture_region_t *ParseUSFString(ParseUSFString826,32052
static void ParseUSFHeader(966,37428
static char *StripTags(StripTags997,38389
static char *CreatePlainText(CreatePlainText1067,40408
static subpicture_region_t *LoadEmbeddedImage(LoadEmbeddedImage1104,41435

demux/adaptive/plumbing/SourceStream.hpp,601
#define SOURCESTREAM_HPP21,997
namespace adaptive26,1071
    class AbstractSourceStreamadaptive::AbstractSourceStream30,1117
            virtual ~AbstractSourceStream(adaptive::AbstractSourceStream::~AbstractSourceStream33,1170
    class ChunksSourceStream adaptive::ChunksSourceStream38,1311
            block_t *p_block;adaptive::ChunksSourceStream::p_block50,1682
            bool b_eof;adaptive::ChunksSourceStream::b_eof51,1712
            vlc_object_t *p_obj;adaptive::ChunksSourceStream::p_obj56,1998
            ChunksSource *source;adaptive::ChunksSourceStream::source57,2031

access/http/live.c,285
static int vlc_http_live_req(34,1258
static int vlc_http_live_resp(43,1517
static const struct vlc_http_resource_cbs vlc_http_live_callbacks 52,1732
struct vlc_http_resource *vlc_http_live_create(vlc_http_live_create58,1853
block_t *vlc_http_live_read(vlc_http_live_read75,2332

access/dshow/vlc_dshow.h,8488
#define VLC_DSHOW_H28,1386
        KS_AnalogVideo_None 83,3967
        KS_AnalogVideo_None          = 0x00000000,x0000000083,3967
        KS_AnalogVideo_NTSC_M 84,4018
        KS_AnalogVideo_NTSC_M        = 0x00000001,x0000000184,4018
        KS_AnalogVideo_NTSC_M_J 85,4069
        KS_AnalogVideo_NTSC_M_J      = 0x00000002,x0000000285,4069
        KS_AnalogVideo_NTSC_433 86,4120
        KS_AnalogVideo_NTSC_433      = 0x00000004,x0000000486,4120
        KS_AnalogVideo_PAL_B 87,4171
        KS_AnalogVideo_PAL_B         = 0x00000010,x0000001087,4171
        KS_AnalogVideo_PAL_D 88,4222
        KS_AnalogVideo_PAL_D         = 0x00000020,x0000002088,4222
        KS_AnalogVideo_PAL_G 89,4273
        KS_AnalogVideo_PAL_G         = 0x00000040,x0000004089,4273
        KS_AnalogVideo_PAL_H 90,4324
        KS_AnalogVideo_PAL_H         = 0x00000080,x0000008090,4324
        KS_AnalogVideo_PAL_I 91,4375
        KS_AnalogVideo_PAL_I         = 0x00000100,x0000010091,4375
        KS_AnalogVideo_PAL_M 92,4426
        KS_AnalogVideo_PAL_M         = 0x00000200,x0000020092,4426
        KS_AnalogVideo_PAL_N 93,4477
        KS_AnalogVideo_PAL_N         = 0x00000400,x0000040093,4477
        KS_AnalogVideo_PAL_60 94,4528
        KS_AnalogVideo_PAL_60        = 0x00000800,x0000080094,4528
        KS_AnalogVideo_SECAM_B 95,4579
        KS_AnalogVideo_SECAM_B       = 0x00001000,x0000100095,4579
        KS_AnalogVideo_SECAM_D 96,4630
        KS_AnalogVideo_SECAM_D       = 0x00002000,x0000200096,4630
        KS_AnalogVideo_SECAM_G 97,4681
        KS_AnalogVideo_SECAM_G       = 0x00004000,x0000400097,4681
        KS_AnalogVideo_SECAM_H 98,4732
        KS_AnalogVideo_SECAM_H       = 0x00008000,x0000800098,4732
        KS_AnalogVideo_SECAM_K 99,4783
        KS_AnalogVideo_SECAM_K       = 0x00010000,x0001000099,4783
        KS_AnalogVideo_SECAM_K1 100,4834
        KS_AnalogVideo_SECAM_K1      = 0x00020000,x00020000100,4834
        KS_AnalogVideo_SECAM_L 101,4885
        KS_AnalogVideo_SECAM_L       = 0x00040000,x00040000101,4885
        KS_AnalogVideo_SECAM_L1 102,4936
        KS_AnalogVideo_SECAM_L1      = 0x00080000,x00080000102,4936
        KS_AnalogVideo_PAL_N_COMBO 103,4987
        KS_AnalogVideo_PAL_N_COMBO   = 0x00100000x00100000103,4987
} KS_AnalogVideoStandard;104,5037
    KSPROPERTY_TUNER_CAPS,108,5164
    KSPROPERTY_TUNER_MODE_CAPS,109,5239
    KSPROPERTY_TUNER_MODE,110,5312
    KSPROPERTY_TUNER_STANDARD,111,5388
    KSPROPERTY_TUNER_FREQUENCY,112,5469
    KSPROPERTY_TUNER_INPUT,113,5534
    KSPROPERTY_TUNER_STATUS,114,5597
    KSPROPERTY_TUNER_IF_MEDIUM,117,5678
    KSPROPERTY_TUNER_SCAN_CAPS,120,5793
    KSPROPERTY_TUNER_SCAN_STATUS,123,5906
    KSPROPERTY_TUNER_STANDARD_MODE,124,5968
    KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS 125,6051
} KSPROPERTY_TUNER;126,6141
    KS_TUNER_TUNING_EXACT 130,6250
    KS_TUNER_TUNING_FINE,131,6324
    KS_TUNER_TUNING_COARSE,132,6404
}KS_TUNER_TUNING_FLAGS;KS_TUNER_TUNING_FLAGS133,6457
    KS_TUNER_STRATEGY_PLL 137,6570
    KS_TUNER_STRATEGY_PLL             = 0X01,X01137,6570
    KS_TUNER_STRATEGY_SIGNAL_STRENGTH 138,6657
    KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0X02,X02138,6657
    KS_TUNER_STRATEGY_DRIVER_TUNES 139,6729
    KS_TUNER_STRATEGY_DRIVER_TUNES    = 0X04,X04139,6729
}KS_TUNER_STRATEGY;KS_TUNER_STRATEGY140,6791
            GUID    Set;146,6929
            ULONG   Id;147,6954
            ULONG   Flags;148,6978
        LONGLONG    Alignment;150,7016
} KSIDENTIFIER, *PKSIDENTIFIER;PKSIDENTIFIER152,7054
typedef KSIDENTIFIER KSPROPERTY,154,7087
typedef KSIDENTIFIER KSPROPERTY, *PKSPROPERTY;PKSPROPERTY154,7087
    KSPROPERTY Property;158,7225
    ULONG  Mode;159,7250
    ULONG  StandardsSupported;160,7317
    ULONG  MinFrequency;161,7400
    ULONG  MaxFrequency;162,7446
    ULONG  TuningGranularity;163,7492
    ULONG  NumberOfInputs;164,7538
    ULONG  SettlingTime;165,7598
    ULONG  Strategy;166,7654
} KSPROPERTY_TUNER_MODE_CAPS_S, *PKSPROPERTY_TUNER_MODE_CAPS_S;PKSPROPERTY_TUNER_MODE_CAPS_S167,7715
    KSPROPERTY Property;171,7870
    ULONG  Frequency;172,7895
    ULONG  LastFrequency;173,7941
    ULONG  TuningFlags;174,8000
    ULONG  VideoSubChannel;175,8065
    ULONG  AudioSubChannel;176,8112
    ULONG  Channel;177,8159
    ULONG  Country;178,8215
} KSPROPERTY_TUNER_FREQUENCY_S, *PKSPROPERTY_TUNER_FREQUENCY_S;PKSPROPERTY_TUNER_FREQUENCY_S179,8271
    KSPROPERTY Property;183,8426
    ULONG  Standard;184,8451
} KSPROPERTY_TUNER_STANDARD_S, *PKSPROPERTY_TUNER_STANDARD_S;PKSPROPERTY_TUNER_STANDARD_S185,8511
typedef enum tagAMTunerModeType 191,8715
    AMTUNER_MODE_DEFAULT 192,8749
    AMTUNER_MODE_DEFAULT    = 0x0000,x0000192,8749
    AMTUNER_MODE_TV 193,8787
    AMTUNER_MODE_TV         = 0x0001,x0001193,8787
    AMTUNER_MODE_FM_RADIO 194,8825
    AMTUNER_MODE_FM_RADIO   = 0x0002,x0002194,8825
    AMTUNER_MODE_AM_RADIO 195,8863
    AMTUNER_MODE_AM_RADIO   = 0x0004,x0004195,8863
    AMTUNER_MODE_DSS 196,8901
    AMTUNER_MODE_DSS        = 0x0008x0008196,8901
} AMTunerModeType;197,8938
#define AMPROPERTY_PIN_CATEGORY 199,8958
typedef enum tagAMTunerSubChannel 200,8992
    AMTUNER_SUBCHAN_NO_TUNE 201,9028
    AMTUNER_SUBCHAN_DEFAULT 202,9062
} AMTunerSubChannel;203,9095
typedef enum tagTunerInputType 206,9190
    TunerInputCable 207,9223
    TunerInputAntenna 208,9248
    TunerInputAntenna = TunerInputCable 208,9248
} TunerInputType;209,9292
typedef enum tagAMTunerEventType 211,9311
    AMTUNER_EVENT_CHANGED 212,9346
    AMTUNER_EVENT_CHANGED = 0x1x1212,9346
} AMTunerEventType;213,9378
typedef enum tagPhysicalConnectorType 216,9472
    PhysConn_Video_Tuner 217,9512
    PhysConn_Video_Composite,218,9554
    PhysConn_Video_SVideo,219,9584
    PhysConn_Video_RGB,220,9611
    PhysConn_Video_YRYBY,221,9635
    PhysConn_Video_SerialDigital,222,9661
    PhysConn_Video_ParallelDigital,223,9695
    PhysConn_Video_SCSI,224,9731
    PhysConn_Video_AUX,225,9756
    PhysConn_Video_1394,226,9780
    PhysConn_Video_USB,227,9805
    PhysConn_Video_VideoDecoder,228,9829
    PhysConn_Video_VideoEncoder,229,9862
    PhysConn_Video_SCART,230,9895
    PhysConn_Video_Black,231,9921
    PhysConn_Audio_Tuner 232,9947
    PhysConn_Audio_Line,233,10005
    PhysConn_Audio_Mic,234,10030
    PhysConn_Audio_AESDigital,235,10054
    PhysConn_Audio_SPDIFDigital,236,10085
    PhysConn_Audio_SCSI,237,10118
    PhysConn_Audio_AUX,238,10143
    PhysConn_Audio_1394,239,10167
    PhysConn_Audio_USB,240,10192
    PhysConn_Audio_AudioDecoder241,10216
} PhysicalConnectorType;242,10248
typedef struct _VIDEO_STREAM_CONFIG_CAPS 245,10347
    GUID     guid;246,10390
    ULONG    VideoStandard;247,10409
    SIZE     InputSize;248,10437
    SIZE     MinCroppingSize;249,10461
    SIZE     MaxCroppingSize;250,10491
    int      CropGranularityX;251,10521
    int      CropGranularityY;252,10552
    int      CropAlignX;253,10583
    int      CropAlignY;254,10608
    SIZE     MinOutputSize;255,10633
    SIZE     MaxOutputSize;256,10661
    int      OutputGranularityX;257,10689
    int      OutputGranularityY;258,10722
    int      StretchTapsX;259,10755
    int      StretchTapsY;260,10782
    int      ShrinkTapsX;261,10809
    int      ShrinkTapsY;262,10835
    LONGLONG MinFrameInterval;263,10861
    LONGLONG MaxFrameInterval;264,10892
    LONG     MinBitsPerSecond;265,10923
    LONG     MaxBitsPerSecond;266,10954
} VIDEO_STREAM_CONFIG_CAPS;267,10985
typedef struct _AUDIO_STREAM_CONFIG_CAPS 270,11087
    GUID  guid;271,11130
    ULONG MinimumChannels;272,11146
    ULONG MaximumChannels;273,11173
    ULONG ChannelsGranularity;274,11200
    ULONG MinimumBitsPerSample;275,11231
    ULONG MaximumBitsPerSample;276,11263
    ULONG BitsPerSampleGranularity;277,11295
    ULONG MinimumSampleFrequency;278,11331
    ULONG MaximumSampleFrequency;279,11365
    ULONG SampleFrequencyGranularity;280,11399
} AUDIO_STREAM_CONFIG_CAPS;281,11437
#undef INTERFACE284,11539
#define INTERFACE 285,11556
DECLARE_INTERFACE_(286,11595
#undef INTERFACE296,12009
#define INTERFACE 297,12026
DECLARE_INTERFACE_(298,12056
#undef INTERFACE311,12574
#define INTERFACE 312,12591
DECLARE_INTERFACE_(313,12630
#undef INTERFACE322,12946
#define INTERFACE 323,12963
DECLARE_INTERFACE_(324,12992
#undef INTERFACE358,14583
#define INTERFACE 359,14600
DECLARE_INTERFACE_(360,14629

demux/mpeg/ts_streams.c,690
static inline bool handle_Init(50,1575
ts_pat_t *ts_pat_New(ts_pat_New59,1813
void ts_pat_Del(78,2151
ts_pmt_t *ts_pat_Get_pmt(ts_pat_Get_pmt89,2487
ts_pmt_t *ts_pmt_New(ts_pmt_New101,2771
void ts_pmt_Del(142,3623
ts_pes_es_t * ts_pes_es_New(164,4409
static void ts_pes_es_Clean(183,4927
void ts_pes_Add_es(195,5293
ts_pes_es_t * ts_pes_Find_es(212,5742
ts_pes_es_t * ts_pes_Extract_es(222,5981
size_t ts_pes_Count_es(238,6388
static void ts_pes_ChainDelete_es(249,6721
ts_pes_t *ts_pes_New(ts_pes_New261,7019
void ts_pes_Del(289,7683
ts_si_t *ts_si_New(ts_si_New305,8059
void ts_si_Del(324,8374
void ts_psip_Del(336,8693
ts_psip_t *ts_psip_New(ts_psip_New356,9151

access/http/live.h,166
#define vlc_http_live_get_status 36,1509
#define vlc_http_live_get_redirect 37,1566
#define vlc_http_live_get_type 38,1627
#define vlc_http_live_destroye 39,1680

demux/playlist/podcast.c,203
int Import_podcast(47,1995
static int Demux(63,2383
#define ADD_GINFO(194,7060
#undef ADD_GINFO203,7603
#define ADD_INFO(268,10310
#undef ADD_INFO281,11094
static mtime_t strTimeToMTime(349,13079

codec/speex.c,2317
#define ENC_CFG_PREFIX 57,2156
#define ENC_MODE_TEXT 59,2194
#define ENC_MODE_LONGTEXT 60,2228
#define ENC_QUALITY_TEXT 63,2302
#define ENC_QUALITY_LONGTEXT 64,2350
#define ENC_COMPLEXITY_TEXT 67,2443
#define ENC_COMPLEXITY_LONGTEXT 68,2498
#define ENC_MAXBITRATE_TEXT 71,2584
#define ENC_MAXBITRATE_LONGTEXT 72,2636
#define ENC_CBR_TEXT 75,2715
#define ENC_CBR_LONGTEXT 76,2757
#define ENC_VAD_TEXT 80,2900
#define ENC_VAD_LONGTEXT 81,2954
#define ENC_DTX_TEXT 85,3085
#define ENC_DTX_LONGTEXT 86,3141
static const int pi_enc_mode_values[pi_enc_mode_values89,3222
static const char * const ppsz_enc_mode_descriptions[ppsz_enc_mode_descriptions90,3275
vlc_module_begin 94,3428
struct decoder_sys_t150,5340
    bool b_packetizer;153,5385
    bool b_has_headers;158,5448
    int i_frame_in_packet;159,5472
    SpeexBits bits;164,5539
    SpeexHeader *p_header;p_header165,5559
    SpeexStereoState stereo;166,5586
    void *p_state;p_state167,5615
    unsigned int rtp_rate;168,5634
    date_t end_date;173,5702
static const int pi_channels_maps[pi_channels_maps177,5728
static int OpenDecoder(207,6982
static int OpenPacketizer(255,8379
static int CreateDefaultHeader(270,8673
static block_t *DecodeBlock(DecodeBlock333,10331
static int ProcessHeaders(391,11815
static int ProcessInitialHeader(445,13609
static void Flush(538,16711
static void *ProcessPacket(ProcessPacket548,17036
static block_t *DecodeRtpSpeexPacket(DecodeRtpSpeexPacket654,20677
static block_t *DecodePacket(DecodePacket782,24740
static block_t *SendPacket(SendPacket848,26859
#define readint(866,27419
static void ParseSpeexComments(871,27643
static void CloseDecoder(903,28595
#define MAX_FRAME_SIZE 922,29130
#define MAX_FRAME_BYTES 923,29159
struct encoder_sys_t925,29189
    char *p_buffer;p_buffer930,29251
    char p_buffer_out[p_buffer_out931,29271
    SpeexBits bits;936,29351
    SpeexHeader header;937,29371
    SpeexStereoState stereo;938,29395
    void *p_state;p_state939,29424
    int i_frames_per_packet;941,29444
    int i_frames_in_packet;942,29473
    int i_frame_length;944,29502
    int i_samples_delay;945,29526
    int i_frame_size;946,29551
static int OpenEncoder(954,29841
static block_t *Encode(Encode1080,34212
static void CloseEncoder(1178,37394

audio_filter/normvol.c,321
struct filter_sys_t55,1980
    int i_nb;57,2002
    float *p_last;p_last58,2016
    float f_max;59,2035
#define BUFF_TEXT 65,2236
#define BUFF_LONGTEXT 66,2285
#define LEVEL_TEXT 71,2591
#define LEVEL_LONGTEXT 72,2638
vlc_module_begin 77,2923
static block_t *DoWork(DoWork130,4818
static void Close(225,7437

codec/x264.c,6618
#define VLC_MODULE_LICENSE 32,1406
#define SOUT_CFG_PREFIX 53,1794
#define SOUT_CFG_PREFIX 56,1868
#define SOUT_CFG_PREFIX 59,1939
#define KEYINT_TEXT 71,2336
#define KEYINT_LONGTEXT 72,2379
#define MIN_KEYINT_TEXT 76,2594
#define MIN_KEYINT_LONGTEXT 77,2641
#define OPENGOP_TEXT 86,3230
#define OPENGOP_LONGTEXT 88,3312
#define OPENGOP_LONGTEXT 92,3468
#define BLURAY_TEXT 95,3576
#define BLURAY_LONGTEXT 96,3649
#define SCENE_TEXT 99,3818
#define SCENE_LONGTEXT 100,3872
#define BFRAMES_TEXT 111,4439
#define BFRAMES_LONGTEXT 112,4491
#define B_ADAPT_TEXT 115,4604
#define B_ADAPT_LONGTEXT 116,4657
#define B_BIAS_TEXT 120,4821
#define B_BIAS_LONGTEXT 121,4879
#define BPYRAMID_TEXT 125,5029
#define BPYRAMID_LONGTEXT 126,5090
#define FULLRANGE_TEXT 134,5450
#define FULLRANGE_LONGTEXT 135,5518
#define CABAC_TEXT 138,5701
#define CABAC_LONGTEXT 139,5732
#define REF_TEXT 143,5910
#define REF_LONGTEXT 144,5960
#define NF_TEXT 149,6235
#define NF_LONGTEXT 150,6274
#define FILTER_TEXT 152,6361
#define FILTER_LONGTEXT 153,6438
#define LEVEL_TEXT 157,6618
#define LEVEL_LONGTEXT 158,6655
#define PROFILE_TEXT 163,6967
#define PROFILE_LONGTEXT 164,7008
#define INTERLACED_TEXT 170,7312
#define INTERLACED_LONGTEXT 171,7358
#define FRAMEPACKING_TEXT 173,7416
#define FRAMEPACKING_LONGTEXT 174,7462
#define INTRAREFRESH_TEXT 182,7915
#define INTRAREFRESH_LONGTEXT 183,7974
#define MBTREE_TEXT 185,8060
#define MBTREE_LONGTEXT 186,8110
#define SLICE_COUNT 188,8195
#define SLICE_COUNT_LONGTEXT 189,8254
#define SLICE_MAX_SIZE 191,8358
#define SLICE_MAX_SIZE_LONGTEXT 192,8425
#define SLICE_MAX_MBS 194,8530
#define SLICE_MAX_MBS_LONGTEXT 195,8602
#define QP_TEXT 198,8705
#define QP_LONGTEXT 199,8734
#define CRF_TEXT 203,8931
#define CRF_LONGTEXT 204,8972
#define QPMIN_TEXT 206,9043
#define QPMIN_LONGTEXT 207,9075
#define QPMAX_TEXT 210,9182
#define QPMAX_LONGTEXT 211,9214
#define QPSTEP_TEXT 213,9275
#define QPSTEP_LONGTEXT 214,9313
#define RATETOL_TEXT 216,9373
#define RATETOL_LONGTEXT 217,9426
#define VBV_MAXRATE_TEXT 220,9518
#define VBV_MAXRATE_LONGTEXT 221,9567
#define VBV_BUFSIZE_TEXT 223,9647
#define VBV_BUFSIZE_LONGTEXT 224,9689
#define VBV_INIT_TEXT 227,9794
#define VBV_INIT_LONGTEXT 228,9851
#define AQ_MODE_TEXT 231,9980
#define AQ_MODE_LONGTEXT 232,10031
#define AQ_STRENGTH_TEXT 237,10280
#define AQ_STRENGTH_LONGTEXT 238,10326
#define IPRATIO_TEXT 244,10620
#define IPRATIO_LONGTEXT 245,10673
#define PBRATIO_TEXT 248,10806
#define PBRATIO_LONGTEXT 249,10859
#define CHROMA_QP_OFFSET_TEXT 251,10937
#define CHROMA_QP_OFFSET_LONGTEXT 252,11011
#define PASS_TEXT 254,11092
#define PASS_LONGTEXT 255,11138
#define QCOMP_TEXT 260,11346
#define QCOMP_LONGTEXT 261,11392
#define CPLXBLUR_TEXT 263,11475
#define CPLXBLUR_LONGTEXT 264,11529
#define QBLUR_TEXT 267,11663
#define QBLUR_LONGTEXT 268,11714
#define ANALYSE_TEXT 273,11856
#define ANALYSE_LONGTEXT 274,11906
#define DIRECT_PRED_TEXT 282,12211
#define DIRECT_PRED_LONGTEXT 283,12268
#define DIRECT_PRED_SIZE_TEXT 285,12315
#define DIRECT_PRED_SIZE_LONGTEXT 286,12374
#define WEIGHTB_TEXT 291,12537
#define WEIGHTB_LONGTEXT 292,12597
#define WEIGHTP_TEXT 294,12664
#define WEIGHTP_LONGTEXT 295,12724
#define ME_TEXT 300,12875
#define ME_LONGTEXT 301,12936
#define MERANGE_TEXT 308,13330
#define MERANGE_LONGTEXT 309,13392
#define MVRANGE_TEXT 314,13662
#define MVRANGE_LONGTEXT 315,13718
#define MVRANGE_THREAD_TEXT 318,13834
#define MVRANGE_THREAD_LONGTEXT 319,13905
#define PSY_RD_TEXT 322,14038
#define PSY_RD_LONGTEXT 323,14127
#define SUBME_TEXT 327,14328
#define SUBME_LONGTEXT 329,14420
#define B_RDO_LONGTEXT 333,14637
#define MIXED_REFS_TEXT 336,14749
#define MIXED_REFS_LONGTEXT 337,14822
#define CHROMA_ME_TEXT 341,14997
#define CHROMA_ME_LONGTEXT 342,15054
#define BIME_LONGTEXT 345,15150
#define TRANSFORM_8X8DCT_TEXT 347,15219
#define TRANSFORM_8X8DCT_LONGTEXT 348,15287
#define TRELLIS_TEXT 351,15387
#define TRELLIS_LONGTEXT 352,15439
#define FAST_PSKIP_TEXT 358,15658
#define FAST_PSKIP_LONGTEXT 359,15721
#define DCT_DECIMATE_TEXT 361,15791
#define DCT_DECIMATE_LONGTEXT 362,15860
#define PSY_TEXT 365,16009
#define PSY_LONGTEXT 366,16054
#define NR_TEXT 369,16214
#define NR_LONGTEXT 370,16252
#define DEADZONE_INTER_TEXT 373,16383
#define DEADZONE_INTER_LONGTEXT 374,16450
#define DEADZONE_INTRA_TEXT 377,16569
#define DEADZONE_INTRA_LONGTEXT 378,16636
#define NON_DETERMINISTIC_TEXT 383,16775
#define NON_DETERMINISTIC_LONGTEXT 384,16858
#define ASM_TEXT 387,16973
#define ASM_LONGTEXT 388,17014
#define STATS_TEXT 390,17076
#define STATS_LONGTEXT 391,17132
#define PSNR_TEXT 393,17219
#define PSNR_LONGTEXT 394,17260
#define SSIM_TEXT 397,17381
#define SSIM_LONGTEXT 398,17422
#define QUIET_TEXT 401,17543
#define VERBOSE_TEXT 403,17580
#define VERBOSE_LONGTEXT 404,17618
#define SPS_ID_TEXT 406,17679
#define SPS_ID_LONGTEXT 407,17728
#define AUD_TEXT 410,17852
#define AUD_LONGTEXT 411,17898
#define LOOKAHEAD_TEXT 413,17969
#define LOOKAHEAD_LONGTEXT 414,18039
#define HRD_TEXT 417,18218
#define TUNE_TEXT 418,18264
#define PRESET_TEXT 419,18315
#define X264_OPTIONS_TEXT 421,18371
#define X264_OPTIONS_LONGTEXT 422,18425
static const char *const enc_me_list[enc_me_list424,18518
static const char *const enc_me_list_text[enc_me_list_text426,18601
static const char *const profile_list[profile_list429,18710
static const char *const bpyramid_list[bpyramid_list432,18787
static const char *const enc_analyse_list[enc_analyse_list435,18865
static const char *const enc_analyse_list_text[enc_analyse_list_text437,18958
static const char *const direct_pred_list[direct_pred_list440,19077
static const char *const direct_pred_list_text[direct_pred_list_text442,19168
static const int framepacking_list[framepacking_list445,19281
static const char *const framepacking_list_text[framepacking_list_text447,19351
vlc_module_begin 450,19556
struct encoder_sys_t784,32093
    x264_t          *h;h786,32116
    x264_param_t    param;787,32140
    mtime_t         i_initial_delay;789,32168
    char            *psz_stat_name;psz_stat_name791,32206
    int             i_sei_size;792,32242
    uint32_t         i_colorspace;793,32274
    uint8_t         *p_sei;p_sei794,32309
static vlc_mutex_t pthread_win32_mutex 798,32365
static int pthread_win32_count 799,32424
static int  Open 805,32654
#   define X264_ANALYSE_BSUB16x16 1283,50032
static void x264_log(1502,57257
static block_t *Encode(Encode1528,57968
static void Close(1610,60528

demux/mkv/mkv.cpp,391
static int Open(95,3561
static void Close(276,10575
static int Control(294,11146
                typedef matroska_segment_c::tracks_map_t tracks_map_t;423,16405
static void Seek(451,17459
void BlockDecode(490,18756
    typedef matroska_segment_c::tracks_map_t tracks_map_t;494,18960
static int Demux(694,25765
        typedef matroska_segment_c::tracks_map_t tracks_map_t;774,28148

codec/libass.c,1318
vlc_module_begin 55,1936
struct decoder_sys_t71,2511
    mtime_t        i_max_stop;73,2534
    vlc_mutex_t    lock;76,2655
    int            i_refcount;77,2680
    ASS_Library    *p_library;p_library80,2722
    ASS_Renderer   *p_renderer;p_renderer81,2753
    video_format_t fmt;82,2785
    ASS_Track      *p_track;p_track85,2820
struct subpicture_updater_sys_t101,3414
    decoder_sys_t *p_dec_sys;p_dec_sys103,3448
    void          *p_subs_data;p_subs_data104,3478
    int           i_subs_len;105,3510
    mtime_t       i_pts;106,3540
    ASS_Image     *p_img;p_img108,3566
    int x0;113,3613
    int y0;114,3625
    int x1;115,3637
    int y1;116,3649
} rectangle_t;117,3661
static int Create(127,4086
static void Destroy(264,8678
static void DecSysHold(271,8807
static void DecSysRelease(277,8957
static void Flush(303,9668
static subpicture_t *DecodeBlock(DecodeBlock313,9966
static int SubpictureValidate(400,12329
static void SubpictureUpdate(441,13892
static void SubpictureDestroy(505,15900
static rectangle_t r_create(514,16115
static rectangle_t r_img(519,16235
static void r_add(523,16387
static int r_surface(530,16589
static bool r_overlap(534,16680
static int BuildRegions(540,16909
static void RegionDraw(668,20642
#define P(724,22798
#undef P729,23079

video_filter/deinterlace/common.h,136
#define VLC_DEINTERLACE_COMMON_H 25,1210
#define FFMAX(33,1353
#define FFMAX3(34,1388
#define FFMIN(35,1432
#define FFMIN3(36,1467

demux/mpeg/ts_streams.h,292
#define VLC_TS_STREAMS_H20,1035
typedef struct ts_pes_es_t ts_pes_es_t;22,1061
typedef struct ts_pat_t ts_pat_t;23,1101
typedef struct ts_pmt_t ts_pmt_t;24,1135
typedef struct ts_pes_t ts_pes_t;25,1169
typedef struct ts_si_t  ts_si_t;26,1203
typedef struct ts_psip_t ts_psip_t;27,1236

access/dv.c,1341
vlc_module_begin 56,2083
    vlc_thread_t    thread;68,2414
    access_t        *p_access;p_access69,2442
    vlc_mutex_t     lock;70,2473
    block_t         *p_frame;p_frame71,2499
    block_t         **pp_last;pp_last72,2529
} event_thread_t;74,2561
struct access_sys_t95,3297
    raw1394handle_t p_avc1394;97,3319
    raw1394handle_t p_raw1394;98,3350
    struct pollfd   raw1394_poll;99,3381
    int i_cards;101,3416
    int i_node;102,3433
    int i_port;103,3449
    int i_channel;104,3465
    uint64_t i_guid;105,3484
    event_thread_t *p_ev;p_ev108,3522
    vlc_mutex_t lock;109,3548
    block_t *p_frame;p_frame110,3570
#define ISOCHRONOUS_QUEUE_LENGTH 113,3596
#define ISOCHRONOUS_MAX_PACKET_SIZE 114,3634
static int Open(119,3858
static void Close(228,7090
static int Control(268,8201
static block_t *Block(Block302,8990
static void Raw1394EventThreadCleanup(317,9364
static void* Raw1394EventThread(325,9562
Raw1394Handler(359,10579
static int Raw1394GetNumPorts(445,13630
static raw1394handle_t Raw1394Open(471,14320
static void Raw1394Close(505,15217
static int DiscoverAVC(510,15311
static raw1394handle_t AVCOpen(569,16896
static void AVCClose(590,17456
static int AVCResetHandler(601,17672
static int AVCPlay(607,17822
static int AVCPause(622,18301
static int AVCStop(636,18711

stream_out/rtp.c,5238
#define VLC_MODULE_LICENSE 33,1388
# define IPPROTO_DCCP 61,1931
# define IPPROTO_UDPLITE 64,1987
#define DEST_TEXT 75,2264
#define DEST_LONGTEXT 76,2300
#define SDP_TEXT 78,2378
#define SDP_LONGTEXT 79,2405
#define SAP_TEXT 84,2716
#define SAP_LONGTEXT 85,2754
#define MUX_TEXT 86,2813
#define MUX_LONGTEXT 87,2842
#define NAME_TEXT 91,3005
#define NAME_LONGTEXT 92,3042
#define CAT_TEXT 95,3175
#define CAT_LONGTEXT 96,3215
#define DESC_TEXT 99,3359
#define DESC_LONGTEXT 100,3403
#define URL_TEXT 103,3579
#define URL_LONGTEXT 104,3614
#define EMAIL_TEXT 108,3839
#define EMAIL_LONGTEXT 109,3878
#define PHONE_TEXT 112,4043
#define PHONE_LONGTEXT 113,4089
#define PORT_TEXT 117,4259
#define PORT_LONGTEXT 118,4288
#define PORT_AUDIO_TEXT 120,4388
#define PORT_AUDIO_LONGTEXT 121,4429
#define PORT_VIDEO_TEXT 123,4544
#define PORT_VIDEO_LONGTEXT 124,4585
#define TTL_TEXT 127,4701
#define TTL_LONGTEXT 128,4740
#define RTCP_MUX_TEXT 133,4952
#define RTCP_MUX_LONGTEXT 134,5002
#define CACHING_TEXT 138,5135
#define CACHING_LONGTEXT 139,5181
#define PROTO_TEXT 143,5320
#define PROTO_LONGTEXT 144,5364
#define SRTP_KEY_TEXT 147,5456
#define SRTP_KEY_LONGTEXT 148,5507
#define SRTP_SALT_TEXT 153,5716
#define SRTP_SALT_LONGTEXT 154,5769
static const char *const ppsz_protos[ppsz_protos158,5926
static const char *const ppsz_protocols[ppsz_protocols162,6018
#define RFC3016_TEXT 166,6114
#define RFC3016_LONGTEXT 167,6151
#define RTSP_TIMEOUT_TEXT 170,6257
#define RTSP_TIMEOUT_LONGTEXT 171,6316
#define RTSP_USER_TEXT 176,6553
#define RTSP_USER_LONGTEXT 177,6591
#define RTSP_PASS_TEXT 179,6714
#define RTSP_PASS_LONGTEXT 180,6752
#define SOUT_CFG_PREFIX 186,6951
#define MAX_EMPTY_BLOCKS 187,6987
vlc_module_begin 189,7017
struct sout_stream_sys_t299,11438
    char    *psz_sdp;psz_sdp302,11479
    vlc_mutex_t  lock_sdp;303,11501
    char *psz_sdp_file;psz_sdp_file306,11551
    bool b_export_sap;309,11598
    session_descriptor_t *p_session;p_session310,11621
    httpd_host_t *p_httpd_host;p_httpd_host313,11682
    httpd_file_t *p_httpd_file;p_httpd_file314,11714
    rtsp_stream_t *rtsp;rtsp317,11762
    mtime_t      i_npt_zero;320,11834
    int64_t      i_pts_zero;321,11898
    int64_t      i_pts_offset;322,11965
    vlc_mutex_t  lock_ts;323,12036
    char     *psz_destination;psz_destination326,12073
    uint16_t  i_port;327,12104
    uint16_t  i_port_audio;328,12126
    uint16_t  i_port_video;329,12154
    uint8_t   proto;330,12182
    bool      rtcp_mux;331,12203
    bool      b_latm;332,12227
    vod_media_t *p_vod_media;p_vod_media335,12264
    char     *psz_vod_session;psz_vod_session336,12294
    sout_mux_t        *p_mux;p_mux339,12365
    sout_access_out_t *p_grab;p_grab340,12395
    block_t           *packet;packet341,12426
    vlc_mutex_t      lock_es;344,12468
    int              i_es;345,12498
    sout_stream_id_sys_t **es;es346,12525
typedef struct rtp_sink_t349,12560
    int rtp_fd;351,12588
    rtcp_sender_t *rtcp;rtcp352,12604
} rtp_sink_t;353,12629
struct sout_stream_id_sys_t355,12644
    sout_stream_t *p_stream;p_stream357,12674
    uint32_t    i_sequence;360,12777
    bool        b_first_packet;361,12805
    bool        b_ts_init;362,12837
    uint32_t    i_ts_offset;363,12864
    uint8_t     ssrc[ssrc364,12893
    uint16_t    i_seq_sent_next;367,12938
    rtp_format_t rtp_fmt;370,12990
    int          i_port;371,13016
    int                 i_mtu;374,13079
    srtp_session_t     *srtp;srtp376,13127
    vlc_thread_t      thread;380,13189
    vlc_mutex_t       lock_sink;381,13219
    int               sinkc;382,13252
    rtp_sink_t       *sinkv;sinkv383,13281
    rtsp_stream_id_t *rtsp_id;rtsp_id384,13310
        int          *fd;fd386,13354
        vlc_thread_t  thread;387,13380
    } listen;388,13410
    block_fifo_t     *p_fifo;p_fifo390,13425
    int64_t           i_caching;391,13455
static int Open(397,13660
static void Close(649,21459
static void SDPHandleUrl(697,22718
char *SDPGenerate(SDPGenerate780,25463
rtp_set_ptime 931,30507
uint32_t rtp_compute_ts(944,30963
static sout_stream_id_sys_t *Add(Add957,31423
static void Del(1222,40128
static int Send(1267,41375
static int SapSetup(1300,42417
static int FileSetup(1322,43161
static int HttpSetup(1350,44009
static int  HttpCallback(1370,44689
static void* ThreadSend(1397,45509
# define ENOBUFS 1400,45563
# define EAGAIN 1401,45596
# define EWOULDBLOCK 1402,45633
static void *rtp_listen_thread(rtp_listen_thread1487,48328
int rtp_add_sink(1507,48734
void rtp_del_sink(1523,49263
uint16_t rtp_get_seq(1544,49770
static int64_t rtp_init_ts(1562,50387
int64_t rtp_get_ts(1583,51286
void rtp_packetize_common(1616,52138
uint16_t rtp_get_extended_sequence(1657,53692
void rtp_packetize_send(1662,53793
size_t rtp_mtu 1671,54035
static sout_stream_id_sys_t *MuxAdd(MuxAdd1681,54333
static int MuxSend(1699,54796
static void MuxDel(1710,55109
static ssize_t AccessOutGrabberWriteBuffer(1719,55320
static ssize_t AccessOutGrabberWrite(1771,56846
static sout_access_out_t *GrabberCreate(GrabberCreate1791,57283
void rtp_get_video_geometry(1809,57806

codec/rawvideo.c,486
struct decoder_sys_t38,1700
    size_t size;43,1762
    unsigned pitches[pitches44,1779
    unsigned lines[lines45,1820
    date_t pts;50,1900
vlc_module_begin 63,2416
static void Flush(135,4983
static void *DecodeBlock(DecodeBlock147,5431
static void FillPicture(197,6967
static picture_t *DecodeFrame(DecodeFrame221,7777
static int OpenDecoder(261,8812
static block_t *SendFrame(SendFrame277,9301
static int OpenPacketizer(291,9684
static void CloseCommon(304,9940

arm_neon/i422_yuyv.S,78
i422_yuyv_neon:i422_yuyv_neon38,1326
i422_uyvy_neon:i422_uyvy_neon71,1952

misc/inhibit/xdg.c,233
vlc_module_begin 36,1322
struct vlc_inhibit_sys45,1604
    vlc_timer_t timer;47,1629
    posix_spawnattr_t attr;48,1652
static void Timer 53,1708
static void Inhibit 75,2240
static int Open 84,2513
static void Close 116,3424

video_filter/remoteosd_rfbproto.h,6482
#define CARD8 52,2012
#define CARD16 53,2035
#define CARD32 54,2059
    CARD16 x;62,2357
    CARD16 y;63,2371
    CARD16 w;64,2385
    CARD16 h;65,2399
} rfbRectangle;66,2413
#define sz_rfbRectangle 68,2430
    CARD8 bitsPerPixel;77,2604
    CARD8 depth;79,2649
    CARD8 bigEndian;81,2682
    CARD8 trueColour;87,2946
    CARD16 redMax;94,3206
    CARD16 greenMax;98,3368
    CARD16 blueMax;100,3415
    CARD8 redShift;102,3452
    CARD8 greenShift;114,3944
    CARD8 blueShift;116,3992
    CARD8 pad1;118,4030
    CARD16 pad2;119,4046
} rfbPixelFormat;121,4064
#define sz_rfbPixelFormat 123,4083
#define rfbProtocolVersionFormat 158,5594
#define rfbProtocolMajorVersion 159,5645
#define rfbProtocolMinorVersion 160,5679
typedef char rfbProtocolVersionMsg[rfbProtocolVersionMsg162,5714
#define sz_rfbProtocolVersionMsg 164,5787
#define rfbConnFailed 176,6234
#define rfbNoAuth 177,6258
#define rfbVncAuth 178,6278
#define rfbVncAuthOK 202,7252
#define rfbVncAuthFailed 203,7275
#define rfbVncAuthTooMany 204,7302
    CARD8 shared;218,7834
} rfbClientInitMsg;219,7852
#define sz_rfbClientInitMsg 221,7873
    CARD16 framebufferWidth;233,8257
    CARD16 framebufferHeight;234,8286
    rfbPixelFormat format;235,8316
    CARD32 nameLength;236,8385
} rfbServerInitMsg;238,8452
#define sz_rfbServerInitMsg 240,8473
#define rfbFramebufferUpdate 266,9425
#define rfbSetColourMapEntries 267,9456
#define rfbBell 268,9489
#define rfbServerCutText 269,9507
#define rfbReSizeFrameBuffer 270,9534
#define rfbSetPixelFormat 275,9593
#define rfbFixColourMapEntries 276,9621
#define rfbSetEncodings 277,9684
#define rfbFramebufferUpdateRequest 278,9710
#define rfbKeyEvent 279,9748
#define rfbPointerEvent 280,9770
#define rfbClientCutText 281,9796
#define rfbSetScaleFactor 282,9823
#define rfbEncodingRaw 293,10041
#define rfbEncodingCopyRect 294,10066
#define rfbEncodingRRE 295,10096
#define rfbEncodingCoRRE 296,10121
#define rfbEncodingHextile 297,10148
#define rfbEncodingZRLE 298,10177
    CARD8 type;319,10864
    CARD8 pad;320,10916
    CARD16 nRects;321,10931
} rfbFramebufferUpdateMsg;323,10990
#define sz_rfbFramebufferUpdateMsg 325,11018
    rfbRectangle r;336,11456
    CARD32 encoding;337,11476
} rfbFramebufferUpdateRectHeader;338,11544
#define sz_rfbFramebufferUpdateRectHeader 340,11579
    CARD16 srcX;355,12070
    CARD16 srcY;356,12087
} rfbCopyRect;357,12104
#define sz_rfbCopyRect 359,12120
    CARD32 nSubrects;370,12498
} rfbRREHeader;371,12520
#define sz_rfbRREHeader 373,12537
    CARD8 x;385,12987
    CARD8 y;386,13000
    CARD8 w;387,13013
    CARD8 h;388,13026
} rfbCoRRERectangle;389,13039
#define sz_rfbCoRRERectangle 391,13061
#define rfbHextileRaw	433,15301
#define rfbHextileBackgroundSpecified	434,15334
#define rfbHextileForegroundSpecified	435,15381
#define rfbHextileAnySubrects	436,15428
#define rfbHextileSubrectsColoured	437,15468
#define rfbHextilePackXY(439,15513
#define rfbHextilePackWH(440,15562
#define rfbHextileExtractX(441,15619
#define rfbHextileExtractY(442,15666
#define rfbHextileExtractW(443,15714
#define rfbHextileExtractH(444,15767
    CARD32 length;453,16022
} rfbZRLEHeader;454,16041
#define sz_rfbZRLEHeader 456,16059
#define rfbZRLETileWidth 458,16087
#define rfbZRLETileHeight 459,16115
    CARD8 type;472,16679
    CARD8 pad;473,16733
    CARD16 firstColour;474,16748
    CARD16 nColours;475,16772
} rfbSetColourMapEntriesMsg;480,16898
#define sz_rfbSetColourMapEntriesMsg 482,16928
    CARD8 type;491,17123
} rfbBellMsg;492,17162
#define sz_rfbBellMsg 494,17177
    CARD8 type;503,17368
    CARD8 pad1;504,17416
    CARD16 pad2;505,17432
    CARD32 length;506,17449
} rfbServerCutTextMsg;508,17508
#define sz_rfbServerCutTextMsg 510,17532
    CARD8 type;519,17862
        CARD8 pad1;520,17928
        CARD16 desktop_w;521,17948
        CARD16 desktop_h;522,18000
        CARD16 buffer_w;523,18053
        CARD16 buffer_h;524,18109
    CARD16 pad2;525,18166
} rfbReSizeFrameBufferMsg;527,18184
#define sz_rfbReSizeFrameBufferMsg 529,18212
    CARD8 type;538,18397
    rfbFramebufferUpdateMsg fu;539,18413
    rfbSetColourMapEntriesMsg scme;540,18445
    rfbBellMsg b;541,18481
    rfbServerCutTextMsg sct;542,18499
    rfbReSizeFrameBufferMsg rsfb;543,18528
} rfbServerToClientMsg;544,18562
    CARD8 type;561,18993
    CARD8 pad1;562,19042
    CARD16 pad2;563,19058
    rfbPixelFormat format;564,19075
} rfbSetPixelFormatMsg;565,19102
#define sz_rfbSetPixelFormatMsg 567,19127
    CARD8 type;578,19461
    CARD8 pad;579,19515
    CARD16 firstColour;580,19530
    CARD16 nColours;581,19554
} rfbFixColourMapEntriesMsg;586,19680
#define sz_rfbFixColourMapEntriesMsg 588,19710
    CARD8 type;598,20050
    CARD8 pad;599,20097
    CARD16 nEncodings;600,20112
} rfbSetEncodingsMsg;602,20192
#define sz_rfbSetEncodingsMsg 604,20215
	CARD8 type;612,20442
	CARD8 scale;613,20502
	CARD16 pad2;614,20578
} rfbSetScaleFactorMsg;615,20592
#define sz_rfbSetScaleFactorMsg 617,20617
    CARD8 type;626,20974
    CARD8 incremental;627,21033
    CARD16 x;628,21056
    CARD16 y;629,21070
    CARD16 w;630,21084
    CARD16 h;631,21098
} rfbFramebufferUpdateRequestMsg;632,21112
#define sz_rfbFramebufferUpdateRequestMsg 634,21147
    CARD8 type;669,21912
    CARD8 down;670,21955
    CARD16 pad;671,22013
    CARD32 key;672,22029
} rfbKeyEventMsg;673,22085
#define sz_rfbKeyEventMsg 675,22104
    CARD8 type;683,22290
    CARD8 buttonMask;684,22337
    CARD16 x;685,22405
    CARD16 y;686,22419
} rfbPointerEventMsg;687,22433
#define rfbButton1Mask 689,22456
#define rfbButton2Mask 690,22481
#define rfbButton3Mask 691,22506
#define rfbButton4Mask 692,22531
#define rfbButton5Mask 693,22556
#define rfbWheelUpMask 694,22582
#define rfbWheelDownMask 695,22620
#define sz_rfbPointerEventMsg 697,22661
    CARD8 type;706,22860
    CARD8 pad1;707,22908
    CARD16 pad2;708,22924
    CARD32 length;709,22941
} rfbClientCutTextMsg;711,23000
#define sz_rfbClientCutTextMsg 713,23024
    CARD8 type;720,23200
    rfbSetPixelFormatMsg spf;721,23216
    rfbSetScaleFactorMsg ssf;722,23246
    rfbFixColourMapEntriesMsg fcme;723,23276
    rfbSetEncodingsMsg se;724,23312
    rfbFramebufferUpdateRequestMsg fur;725,23339
    rfbKeyEventMsg ke;726,23379
    rfbPointerEventMsg pe;727,23402
    rfbClientCutTextMsg cct;728,23429
} rfbClientToServerMsg;729,23458

lua/vlc.c,1472
#define VLC_MODULE_LICENSE 35,1484
#define INTF_TEXT 48,1863
#define INTF_LONGTEXT 49,1901
#define CONFIG_TEXT 51,1959
#define CONFIG_LONGTEXT 52,2013
#define PASS_TEXT 53,2157
#define PASS_LONGTEXT 54,2192
#define SRC_TEXT 56,2285
#define SRC_LONGTEXT 57,2327
#define INDEX_TEXT 58,2373
#define INDEX_LONGTEXT 59,2416
#define TELNETHOST_TEXT 61,2479
#define TELNETHOST_LONGTEXT 62,2516
#define TELNETPORT_TEXT 66,2772
#define TELNETPORT_LONGTEXT 67,2809
#define TELNETPWD_TEXT 69,2933
#define TELNETPWD_LONGTEXT 70,2973
#define RCHOST_TEXT 72,3071
#define RCHOST_LONGTEXT 73,3115
#define CLIHOST_TEXT 75,3273
#define CLIHOST_LONGTEXT 76,3310
vlc_module_begin 83,3612
static int file_select(183,7564
static int file_compare(196,7845
int vlclua_dir_list(201,7937
#define MAX_DIR_LIST_SIZE 203,8009
void vlclua_dir_list_free(252,9417
int vlclua_scripts_batch_execute(263,9839
char *vlclua_find_file(vlclua_find_file318,11585
#undef vlclua_read_meta_data354,12799
void vlclua_read_meta_data(355,12828
#define TRY_META(358,12946
#undef vlclua_read_custom_meta_data394,14523
void vlclua_read_custom_meta_data(395,14559
#undef vlclua_read_options440,16015
void vlclua_read_options(441,16042
#undef vlclua_playlist_add_internal467,16848
int vlclua_playlist_add_internal(468,16884
static int vlc_sd_probe_Open(625,23447
static int vlclua_add_modules_path_inner(753,27772
int vlclua_add_modules_path(766,28107
int vlclua_dofile(840,30319

codec/avcodec/d3d11va.c,2642
# undef WINAPI_FAMILY35,1478
# define WINAPI_FAMILY 36,1500
#define COBJMACROS50,1767
#define INITGUID51,1786
vlc_module_begin(61,2071
#define pf_CreateDevice 70,2322
#define MS_GUID(77,2620
#  undef MS_GUID83,2766
#  define MS_GUID 84,2783
#  define DXVA2_E_NEW_VIDEO_DEVICE 85,2873
struct vlc_va_sys_t106,3908
    directx_sys_t                dx_sys;108,3930
    vlc_fourcc_t                 i_chroma;109,3971
    HINSTANCE                    dxgidebug_dll;112,4065
    ID3D11VideoContext           *d3dvidctx;d3dvidctx116,4145
    DXGI_FORMAT                  render;117,4190
    ID3D11DeviceContext          *d3dctx;d3dctx119,4232
    HANDLE                       context_mutex;120,4274
    bool                         b_extern_pool;123,4338
    picture_t                    *extern_pics[extern_pics124,4386
    D3D11_VIDEO_DECODER_CONFIG   cfg;127,4477
    filter_t                     *filter;filter130,4544
    struct AVD3D11VAContext      hw;133,4615
    ID3D11VideoProcessorEnumerator *procEnumerator;procEnumerator136,4685
    ID3D11VideoProcessor           *videoProcessor;videoProcessor137,4737
    DXGI_FORMAT                    processorFormat;138,4789
struct picture_sys_t142,4874
    ID3D11VideoDecoderOutputView  *decoder;decoder144,4897
    ID3D11Texture2D               *texture;texture145,4986
    ID3D11DeviceContext           *context;context146,5030
    unsigned                      slice_index;147,5074
    ID3D11VideoProcessorInputView *inputView;inputView148,5121
static void Setup(171,5929
void SetupAVCodecContext(178,6090
static void DeleteFilter(194,6659
static picture_t *video_new_buffer(video_new_buffer205,6919
static filter_t *CreateFilter(CreateFilter210,7011
static int Extract(248,8163
static int CheckDevice(350,12053
static int Get(368,12589
static void Close(373,12715
vlc_fourcc_t d3d11va_fourcc(396,13141
static int Open(408,13374
static int D3dCreateDevice(514,17068
static void D3dDestroyDevice(582,19367
static char *DxDescribe(DxDescribe596,19823
        unsigned id;599,19898
        char     name[name600,19919
static int D3dCreateDeviceManager(652,21461
static void D3dDestroyDeviceManager(691,22663
static int DxCreateVideoService(703,22870
static void DxDestroyVideoService(721,23388
static void ReleaseInputList(726,23461
static int DxGetInputList(731,23541
static bool SetupProcessor(759,24426
static int DxSetupOutput(862,28934
static int DxCreateDecoderSurfaces(953,32716
static void DxDestroySurfaces(1153,40689
static void DestroyPicture(1164,41090
static picture_t *DxAllocPicture(DxAllocPicture1175,41357

stream_out/rtp.h,582
typedef struct rtsp_stream_t rtsp_stream_t;25,1208
typedef struct rtsp_stream_id_t rtsp_stream_id_t;26,1252
typedef struct rtcp_sender_t rtcp_sender_t;66,3079
typedef int (*pf_rtp_packetizer_t)pf_rtp_packetizer_t72,3331
typedef struct rtp_format_t74,3405
    uint8_t      payload_type;77,3476
    unsigned     clock_rate;78,3507
    unsigned     channels;79,3536
    int          cat;80,3563
    unsigned     bitrate;82,3612
    const char  *ptname;ptname83,3638
    char        *fmtp;fmtp84,3663
    pf_rtp_packetizer_t pf_packetize;86,3724
} rtp_format_t;87,3762

demux/rawaud.c,674
#define SAMPLERATE_TEXT 43,1730
#define SAMPLERATE_LONGTEXT 44,1782
#define CHANNELS_TEXT 46,1866
#define CHANNELS_LONGTEXT 47,1909
#define FOURCC_TEXT 49,2006
#define FOURCC_LONGTEXT 50,2064
#define LANG_TEXT 53,2173
#define LANG_LONGTEXT 54,2223
# define FOURCC_DEFAULT 57,2366
# define FOURCC_DEFAULT 59,2403
struct demux_sys_t80,3293
    es_out_id_t *p_es;p_es82,3314
    es_format_t  fmt;83,3337
    unsigned int i_frame_size;84,3359
    unsigned int i_frame_samples;85,3390
    unsigned int i_seek_step;86,3424
    date_t       pts;87,3454
static int Open(101,3951
static void Close(218,7605
static int Demux(232,8136
static int Control(258,8837

demux/dash/mpd/ContentDescription.cpp,260
void ContentDescription::setSchemeIdUri(32,1268
const std::string&      ContentDescription::getSchemeIdUri(38,1402
const std::string& ContentDescription::getSchemeInformation(43,1504
void                    ContentDescription::setSchemeInformation(48,1613

demux/mpeg/sections.c,573
struct ts_sections_processor_t44,1498
    uint8_t i_stream_type;46,1531
    uint8_t i_table_id;47,1558
    uint16_t i_extension_id;48,1582
    dvbpsi_t *p_dvbpsi;p_dvbpsi49,1611
    ts_section_processor_callback_t pf_callback;50,1635
    ts_sections_processor_t *p_next;p_next51,1684
    void *p_callback_data;p_callback_data52,1721
static void ts_subdecoder_rawsection_Callback(55,1752
void ts_sections_processor_Add(83,2925
void ts_sections_processor_ChainDelete(121,4298
void ts_sections_processor_Reset(133,4622
void ts_sections_processor_Push(142,4832

audio_filter/channel_mixer/remap.c,909
#define REMAP_CFG 43,1745
static const uint8_t channel_wg4idx[channel_wg4idx46,1833
static const unsigned channel_idx[channel_idx48,1905
static const char *const channel_name[channel_name50,1978
static const char *const channel_desc[channel_desc59,2309
static const int channel_flag[channel_flag66,2543
vlc_module_begin 73,2768
#define CHANNEL(81,3029
#undef CHANNEL88,3324
typedef void (*remap_fun_t)remap_fun_t104,3835
struct filter_sys_t107,3954
    remap_fun_t pf_remap;109,3976
    int nb_in_ch[nb_in_ch110,4002
    uint8_t map_ch[map_ch111,4035
    bool b_normalize;112,4070
static const uint32_t valid_channels[valid_channels115,4096
static inline uint32_t CanonicaliseChannels(156,6091
#define DEFINE_REMAP(168,6575
DEFINE_REMAP(216,8252
#undef DEFINE_REMAP222,8408
static int OpenFilter(266,9565
static void CloseFilter(355,13181
static block_t *Remap(Remap365,13511

lua/vlc.h,1379
#define VLC_LUA_H26,1242
#define LUA_COMPAT_MODULE41,1651
# define lua_equal(47,1843
# define lua_objlen(48,1916
# define lua_strlen(49,1969
# undef luaL_register53,2057
# define luaL_register(54,2079
# define luaL_register_namespace(55,2136
# define luaL_register_namespace(66,2485
#define TELNETPORT_DEFAULT 80,2932
static inline void lua_Dbg(97,3471
static inline bool luaL_checkboolean(108,3906
static inline int luaL_optboolean(114,4081
static inline const char *luaL_nilorcheckstring(luaL_nilorcheckstring119,4211
static inline char *luaL_strdupornull(luaL_strdupornull126,4382
#define vlclua_set_this(134,4609
#define vlclua_error(143,5026
typedef struct luabatch_context_t luabatch_context_t;150,5445
struct luabatch_context_t151,5499
    input_item_t *p_item;p_item153,5527
    meta_fetcher_scope_t e_scope;154,5553
    bool (*pf_validator)pf_validator155,5587
#define vlclua_read_options(174,6646
#define vlclua_read_meta_data(176,6811
#define vlclua_read_custom_meta_data(179,7015
#define vlclua_playlist_add_internal(182,7252
    struct vlc_interrupt *interrupt;interrupt193,7512
    int *fdv;fdv194,7549
    unsigned fdc;195,7563
} vlclua_dtable_t;196,7581
struct intf_sys_t206,7847
    char *psz_filename;psz_filename208,7867
    lua_State *L;L209,7891
    vlc_thread_t thread;210,7909
    vlclua_dtable_t dtable;211,7934

codec/omxil/OMX_Index.h,8136
#define OMX_Index_h31,1310
typedef enum OMX_INDEXTYPE 60,2570
    OMX_IndexComponentStartUnused 62,2600
    OMX_IndexComponentStartUnused = 0x01000000,x0100000062,2600
    OMX_IndexParamPriorityMgmt,63,2648
    OMX_IndexParamAudioInit,64,2732
    OMX_IndexParamImageInit,65,2815
    OMX_IndexParamVideoInit,66,2898
    OMX_IndexParamOtherInit,67,2981
    OMX_IndexParamNumAvailableStreams,68,3064
    OMX_IndexParamActiveStream,69,3145
    OMX_IndexParamSuspensionPolicy,70,3226
    OMX_IndexParamComponentSuspended,71,3320
    OMX_IndexConfigCapturing,72,3408
    OMX_IndexConfigCaptureMode,73,3495
    OMX_IndexAutoPauseAfterCapture,74,3586
    OMX_IndexParamContentURI,75,3673
    OMX_IndexParamCustomContentPipe,76,3761
    OMX_IndexParamDisableResourceConcealment,77,3851
    OMX_IndexConfigMetadataItemCount,78,3944
    OMX_IndexConfigContainerNodeCount,79,4040
    OMX_IndexConfigMetadataItem,80,4137
    OMX_IndexConfigCounterNodeID,81,4228
    OMX_IndexParamMetadataFilterType,82,4322
    OMX_IndexParamMetadataKeyFilter,83,4414
    OMX_IndexConfigPriorityMgmt,84,4506
    OMX_IndexParamStandardComponentRole,85,4590
    OMX_IndexPortStartUnused 87,4682
    OMX_IndexPortStartUnused = 0x02000000,x0200000087,4682
    OMX_IndexParamPortDefinition,88,4725
    OMX_IndexParamCompBufferSupplier,89,4817
    OMX_IndexReservedStartUnused 90,4910
    OMX_IndexReservedStartUnused = 0x03000000,x0300000090,4910
    OMX_IndexAudioStartUnused 93,5004
    OMX_IndexAudioStartUnused = 0x04000000,x0400000093,5004
    OMX_IndexParamAudioPortFormat,94,5048
    OMX_IndexParamAudioPcm,95,5142
    OMX_IndexParamAudioAac,96,5233
    OMX_IndexParamAudioRa,97,5327
    OMX_IndexParamAudioMp3,98,5413
    OMX_IndexParamAudioAdpcm,99,5500
    OMX_IndexParamAudioG723,100,5589
    OMX_IndexParamAudioG729,101,5677
    OMX_IndexParamAudioAmr,102,5765
    OMX_IndexParamAudioWma,103,5852
    OMX_IndexParamAudioSbc,104,5939
    OMX_IndexParamAudioMidi,105,6026
    OMX_IndexParamAudioGsm_FR,106,6114
    OMX_IndexParamAudioMidiLoadUserSound,107,6203
    OMX_IndexParamAudioG726,108,6304
    OMX_IndexParamAudioGsm_EFR,109,6392
    OMX_IndexParamAudioGsm_HR,110,6482
    OMX_IndexParamAudioPdc_FR,111,6571
    OMX_IndexParamAudioPdc_EFR,112,6660
    OMX_IndexParamAudioPdc_HR,113,6750
    OMX_IndexParamAudioTdma_FR,114,6839
    OMX_IndexParamAudioTdma_EFR,115,6929
    OMX_IndexParamAudioQcelp8,116,7020
    OMX_IndexParamAudioQcelp13,117,7110
    OMX_IndexParamAudioEvrc,118,7201
    OMX_IndexParamAudioSmv,119,7289
    OMX_IndexParamAudioVorbis,120,7376
    OMX_IndexConfigAudioMidiImmediateEvent,122,7467
    OMX_IndexConfigAudioMidiControl,123,7570
    OMX_IndexConfigAudioMidiSoundBankProgram,124,7666
    OMX_IndexConfigAudioMidiStatus,125,7773
    OMX_IndexConfigAudioMidiMetaEvent,126,7868
    OMX_IndexConfigAudioMidiMetaEventData,127,7966
    OMX_IndexConfigAudioVolume,128,8068
    OMX_IndexConfigAudioBalance,129,8159
    OMX_IndexConfigAudioChannelMute,130,8251
    OMX_IndexConfigAudioMute,131,8347
    OMX_IndexConfigAudioLoudness,132,8436
    OMX_IndexConfigAudioEchoCancelation,133,8529
    OMX_IndexConfigAudioNoiseReduction,134,8629
    OMX_IndexConfigAudioBass,135,8728
    OMX_IndexConfigAudioTreble,136,8817
    OMX_IndexConfigAudioStereoWidening,137,8908
    OMX_IndexConfigAudioChorus,138,9007
    OMX_IndexConfigAudioEqualizer,139,9098
    OMX_IndexConfigAudioReverberation,140,9192
    OMX_IndexConfigAudioChannelVolume,141,9290
    OMX_IndexImageStartUnused 144,9444
    OMX_IndexImageStartUnused = 0x05000000,x05000000144,9444
    OMX_IndexParamImagePortFormat,145,9488
    OMX_IndexParamFlashControl,146,9582
    OMX_IndexConfigFocusControl,147,9678
    OMX_IndexParamQFactor,148,9775
    OMX_IndexParamQuantizationTable,149,9866
    OMX_IndexParamHuffmanTable,150,9967
    OMX_IndexConfigFlashControl,151,10064
    OMX_IndexVideoStartUnused 154,10216
    OMX_IndexVideoStartUnused = 0x06000000,x06000000154,10216
    OMX_IndexParamVideoPortFormat,155,10260
    OMX_IndexParamVideoQuantization,156,10354
    OMX_IndexParamVideoFastUpdate,157,10450
    OMX_IndexParamVideoBitrate,158,10549
    OMX_IndexParamVideoMotionVector,159,10640
    OMX_IndexParamVideoIntraRefresh,160,10736
    OMX_IndexParamVideoErrorCorrection,161,10832
    OMX_IndexParamVideoVBSMC,162,10931
    OMX_IndexParamVideoMpeg2,163,11020
    OMX_IndexParamVideoMpeg4,164,11109
    OMX_IndexParamVideoWmv,165,11198
    OMX_IndexParamVideoRv,166,11285
    OMX_IndexParamVideoAvc,167,11371
    OMX_IndexParamVideoH263,168,11458
    OMX_IndexParamVideoProfileLevelQuerySupported,169,11546
    OMX_IndexParamVideoProfileLevelCurrent,170,11649
    OMX_IndexConfigVideoBitrate,171,11745
    OMX_IndexConfigVideoFramerate,172,11837
    OMX_IndexConfigVideoIntraVOPRefresh,173,11925
    OMX_IndexConfigVideoIntraMBRefresh,174,12019
    OMX_IndexConfigVideoMBErrorReporting,175,12116
    OMX_IndexParamVideoMacroblocksPerFrame,176,12211
    OMX_IndexConfigVideoMacroBlockErrorMap,177,12300
    OMX_IndexParamVideoSliceFMO,178,12397
    OMX_IndexConfigVideoAVCIntraPeriod,179,12488
    OMX_IndexConfigVideoNalSize,180,12583
    OMX_IndexCommonStartUnused 183,12718
    OMX_IndexCommonStartUnused = 0x07000000,x07000000183,12718
    OMX_IndexParamCommonDeblocking,184,12763
    OMX_IndexParamCommonSensorMode,185,12851
    OMX_IndexParamCommonInterleave,186,12939
    OMX_IndexConfigCommonColorFormatConversion,187,13027
    OMX_IndexConfigCommonScale,188,13125
    OMX_IndexConfigCommonImageFilter,189,13215
    OMX_IndexConfigCommonColorEnhancement,190,13305
    OMX_IndexConfigCommonColorKey,191,13400
    OMX_IndexConfigCommonColorBlend,192,13487
    OMX_IndexConfigCommonFrameStabilisation,193,13576
    OMX_IndexConfigCommonRotate,194,13664
    OMX_IndexConfigCommonMirror,195,13751
    OMX_IndexConfigCommonOutputPosition,196,13836
    OMX_IndexConfigCommonInputCrop,197,13920
    OMX_IndexConfigCommonOutputCrop,198,14003
    OMX_IndexConfigCommonDigitalZoom,199,14086
    OMX_IndexConfigCommonOpticalZoom,200,14176
    OMX_IndexConfigCommonWhiteBalance,201,14265
    OMX_IndexConfigCommonExposure,202,14359
    OMX_IndexConfigCommonContrast,203,14453
    OMX_IndexConfigCommonBrightness,204,14540
    OMX_IndexConfigCommonBacklight,205,14629
    OMX_IndexConfigCommonGamma,206,14717
    OMX_IndexConfigCommonSaturation,207,14801
    OMX_IndexConfigCommonLightness,208,14890
    OMX_IndexConfigCommonExclusionRect,209,14978
    OMX_IndexConfigCommonDithering,210,15061
    OMX_IndexConfigCommonPlaneBlend,211,15146
    OMX_IndexConfigCommonExposureValue,212,15235
    OMX_IndexConfigCommonOutputSize,213,15327
    OMX_IndexParamCommonExtraQuantData,214,15408
    OMX_IndexConfigCommonFocusRegion,215,15495
    OMX_IndexConfigCommonFocusStatus,216,15585
    OMX_IndexConfigCommonTransitionEffect,217,15674
    OMX_IndexOtherStartUnused 220,15809
    OMX_IndexOtherStartUnused = 0x08000000,x08000000220,15809
    OMX_IndexParamOtherPortFormat,221,15853
    OMX_IndexConfigOtherPower,222,15947
    OMX_IndexConfigOtherStats,223,16037
    OMX_IndexTimeStartUnused 227,16159
    OMX_IndexTimeStartUnused = 0x09000000,x09000000227,16159
    OMX_IndexConfigTimeScale,228,16202
    OMX_IndexConfigTimeClockState,229,16291
    OMX_IndexConfigTimeActiveRefClock,230,16385
    OMX_IndexConfigTimeCurrentMediaTime,231,16483
    OMX_IndexConfigTimeCurrentWallTime,232,16588
    OMX_IndexConfigTimeCurrentAudioReference,233,16693
    OMX_IndexConfigTimeCurrentVideoReference,234,16801
    OMX_IndexConfigTimeMediaTimeRequest,235,16909
    OMX_IndexConfigTimeClientStartTime,236,17022
    OMX_IndexConfigTimePosition,237,17128
    OMX_IndexConfigTimeSeekMode,238,17221
    OMX_IndexKhronosExtensions 241,17315
    OMX_IndexKhronosExtensions = 0x6F000000,x6F000000241,17315
    OMX_IndexVendorStartUnused 243,17460
    OMX_IndexVendorStartUnused = 0x7F000000,x7F000000243,17460
    OMX_IndexMax 249,17767
    OMX_IndexMax = 0x7FFFFFFFx7FFFFFFF249,17767
} OMX_INDEXTYPE;251,17798

video_chroma/swscale.c,1896
#undef AVPALETTE_SIZE48,1799
#define AVPALETTE_SIZE 49,1821
#define SCALEMODE_TEXT 57,2136
#define SCALEMODE_LONGTEXT 58,2178
static const int pi_mode_values[pi_mode_values60,2233
const char *const ppsz_mode_descriptions[ppsz_mode_descriptions61,2307
vlc_module_begin 67,2602
struct filter_sys_t87,3333
    SwsFilter *p_filter;p_filter89,3355
    int i_cpu_mask,90,3380
    int i_cpu_mask, i_sws_flags;90,3380
    video_format_t fmt_in;92,3414
    video_format_t fmt_out;93,3441
    const vlc_chroma_description_t *desc_in;desc_in94,3469
    const vlc_chroma_description_t *desc_out;desc_out95,3514
    struct SwsContext *ctx;ctx97,3561
    struct SwsContext *ctxA;ctxA98,3589
    picture_t *p_src_a;p_src_a99,3618
    picture_t *p_dst_a;p_dst_a100,3642
    int i_extend_factor;101,3666
    picture_t *p_src_e;p_src_e102,3691
    picture_t *p_dst_e;p_dst_e103,3715
    bool b_add_a;104,3739
    bool b_copy;105,3757
    bool b_swap_uvi;106,3774
    bool b_swap_uvo;107,3795
    int  i_fmti;116,3956
    int  i_fmto;117,3973
    bool b_has_a;118,3990
    bool b_add_a;119,4008
    int  i_sws_flags;120,4026
    bool b_copy;121,4048
    bool b_swap_uvi;122,4065
    bool b_swap_uvo;123,4086
} ScalerConfiguration;124,4107
#define ALLOW_YUVP 135,4490
#define MINIMUM_WIDTH 137,4564
#define OFFSET_A 140,4667
static int OpenScaler(145,4897
static void CloseScaler(212,7415
static int GetSwsCpuMask(226,7837
static void FixParameters(249,8407
static int GetParameters(290,9400
static int Init(352,11238
static void Clean(468,15933
static void GetPixels(497,16642
static void ExtractA(530,17619
static void InjectA(541,18007
static void FillA(552,18393
static void CopyPad(559,18628
static void SwapUV(575,19188
static void Convert(584,19380
static picture_t *Filter(Filter622,20943
int OpenScaler(709,23820
void CloseScaler(714,23889

codec/avcodec/audio.c,1104
struct decoder_sys_t50,1887
    block_t *p_decoded;p_decoded54,1938
    block_t **pp_decoded_last;pp_decoded_last55,1962
    audio_sample_format_t aout_format;60,2034
    date_t                end_date;61,2073
    int     i_reject_count;64,2120
    bool    b_extract;67,2159
    int     pi_extraction[pi_extraction68,2182
    int     i_previous_channels;69,2224
    uint64_t i_previous_layout;70,2257
#define BLOCK_FLAG_PRIVATE_REALLOCATED 73,2293
static void InitDecoderConfig(80,2590
static int OpenAudioCodec(125,3985
    block_t self;162,5256
    AVFrame *frame;frame163,5274
} vlc_av_frame_t;164,5294
static void vlc_av_frame_Release(166,5313
static block_t *vlc_av_frame_Wrap(vlc_av_frame_Wrap174,5450
static block_t * DequeueOneDecodedFrame(195,6055
void EndAudioDec(211,6712
int InitAudioDec(228,7339
static void Flush(281,8927
static block_t *DecodeAudio(DecodeAudio304,9638
static block_t * ConvertAVFrame(465,14850
vlc_fourcc_t GetVlcAudioFormat(517,16676
static const uint64_t pi_channels_map[pi_channels_map536,17355
static void SetupOutputFormat(560,18280

demux/dash/mpd/DASHSegment.h,71
#define DASHSEGMENT_H_26,1168
        class DashIndexSegment 37,1361

demux/adaptive/http/Chunk.cpp,1408
AbstractChunkSource::AbstractChunkSource(40,1408
AbstractChunkSource::~AbstractChunkSource(45,1479
void AbstractChunkSource::setBytesRange(50,1529
const BytesRange & AbstractChunkSource::getBytesRange(57,1756
AbstractChunk::AbstractChunk(62,1846
AbstractChunk::~AbstractChunk(68,1951
size_t AbstractChunk::getBytesRead(73,2007
uint64_t AbstractChunk::getStartByteInFile(78,2083
block_t * AbstractChunk::doRead(86,2263
bool AbstractChunk::isEmpty(104,2672
block_t * AbstractChunk::readBlock(109,2748
block_t * AbstractChunk::read(114,2818
HTTPChunkSource::HTTPChunkSource(119,2898
HTTPChunkSource::~HTTPChunkSource(133,3253
bool HTTPChunkSource::init(139,3349
bool HTTPChunkSource::hasMoreData(152,3640
block_t * HTTPChunkSource::read(161,3811
bool HTTPChunkSource::prepare(206,4748
block_t * HTTPChunkSource::readBlock(231,5300
HTTPChunkBufferedSource::HTTPChunkBufferedSource(236,5390
HTTPChunkBufferedSource::~HTTPChunkBufferedSource(250,5812
bool HTTPChunkBufferedSource::isDone(269,6166
void HTTPChunkBufferedSource::bufferize(278,6381
        size_t size;::size307,6984
        mtime_t time;::time308,7005
bool HTTPChunkBufferedSource::prepare(346,7931
bool HTTPChunkBufferedSource::hasMoreData(356,8099
block_t * HTTPChunkBufferedSource::readBlock(365,8328
block_t * HTTPChunkBufferedSource::read(402,8996
HTTPChunk::HTTPChunk(449,10145
HTTPChunk::~HTTPChunk(456,10335

demux/mpeg/sections.h,158
#define TS_SECTIONS_H21,1100
typedef void(* ts_section_processor_callback_t)23,1123
typedef struct ts_sections_processor_t ts_sections_processor_t;28,1391

demux/ogg.c,3327
vlc_module_begin 55,2030
    ogg_int32_t width;73,2612
    ogg_int32_t height;74,2635
} stream_header_video_t;75,2659
    ogg_int16_t channels;79,2702
    ogg_int16_t padding;80,2728
    ogg_int16_t blockalign;81,2753
    ogg_int32_t avgbytespersec;82,2781
} stream_header_audio_t;83,2813
    char        streamtype[streamtype87,2856
    char        subtype[subtype88,2887
    ogg_int32_t size;90,2916
    ogg_int64_t time_unit;92,2997
    ogg_int64_t samples_per_unit;93,3077
    ogg_int32_t default_len;94,3111
    ogg_int32_t buffersize;96,3192
    ogg_int16_t bits_per_sample;97,3220
    ogg_int16_t padding;98,3253
        stream_header_video_t video;103,3324
        stream_header_audio_t audio;105,3390
    } sh;106,3427
} stream_header_t;107,3437
#define VORBIS_HEADER_IDENTIFICATION 109,3457
#define VORBIS_HEADER_COMMENT 110,3496
#define VORBIS_HEADER_SETUP 111,3535
#define VORBIS_HEADER_TO_FLAG(112,3574
#define VORBIS_HEADERS_VALID(113,3626
static void fill_channels_info(168,6289
#define VLC_TS_UNKNOWN 198,7582
static int Open(203,7828
static void Close(261,9537
static int Demux(282,10233
static void Ogg_ResetStream(682,25814
static void Ogg_ResetStreamsHelper(701,26395
static logical_stream_t * Ogg_GetSelectedStream(710,26623
static int Control(742,27616
static int Ogg_ReadPage(945,35337
static void Ogg_UpdatePCR(969,36113
static void Ogg_SendOrQueueBlocks(1086,41104
static void Ogg_DecodePacket(1155,43914
static unsigned Ogg_OpusPacketDuration(1485,55395
static int Ogg_FindLogicalStreams(1500,56174
static void Ogg_CreateES(2074,84284
static int Ogg_BeginningOfStream(2142,86859
static void Ogg_EndOfStream(2187,88308
static void Ogg_CleanSpecificData(2221,89302
static void Ogg_LogicalStreamDelete(2240,89878
static bool Ogg_IsVorbisFormatCompatible(2277,90859
static bool Ogg_IsOpusFormatCompatible(2305,91829
static bool Ogg_LogicalStreamResetEsFormat(2386,95011
static void Ogg_ExtractComments(2404,95689
static inline uint32_t GetDW24BE(2452,97491
static void Ogg_ExtractFlacComments(2461,97673
static void Ogg_ExtractXiphMeta(2476,98195
static void Ogg_ExtractMeta(2492,98790
static bool Ogg_ReadTheoraHeader(2534,100157
static bool Ogg_ReadDaalaHeader(2605,102567
static bool Ogg_ReadVorbisHeader(2668,104656
static void Ogg_DecodeVorbisHeader(2695,105677
static bool Ogg_ReadSpeexHeader(2730,106862
static void Ogg_ReadOpusHeader(2764,108258
static bool Ogg_ReadFlacStreamInfo(2797,109587
static bool Ogg_ReadKateHeader(2833,110695
static bool Ogg_ReadVP8Header(2899,112780
static void Ogg_ApplyContentType(2935,114422
static void Ogg_ReadAnnodexHeader(3018,117097
static void Ogg_ReadSkeletonHeader(3089,120111
static void Ogg_ReadSkeletonBones(3103,120787
unsigned const char * Read7BitsVariableLE(3152,122560
static void Ogg_ReadSkeletonIndex(3172,123149
static void Ogg_FreeSkeleton(3227,125295
static void Ogg_ApplySkeleton(3237,125581
bool Ogg_GetBoundsUsingSkeletonIndex(3257,126260
        int64_t i_pos;3273,126881
        int64_t i_time;3274,126904
static uint32_t dirac_uint(3304,127858
static int dirac_bool(3318,128129
static bool Ogg_ReadDiracHeader(3323,128201
        uint32_t u_n 3327,128349
        uint32_t u_n /* numerator */, u_d 3327,128349
static bool Ogg_ReadOggSpotsHeader(3410,131142

demux/mpeg/ts_strings.h,761
#define VLC_TS_STRINGS20,1022
static const char * const ISO13818_1_other_descs[ISO13818_1_other_descs22,1046
static const char * const ISO13818_1_streamstypes_descs[ISO13818_1_streamstypes_descs28,1157
static const char *ISO13818_1_Get_StreamType_Description(ISO13818_1_Get_StreamType_Description73,2915
static const char * const ISO13818_1_descriptors_descs[ISO13818_1_descriptors_descs85,3300
static const char *ISO13818_1_Get_Descriptor_Description(ISO13818_1_Get_Descriptor_Description151,4720
    uint8_t id;162,4971
    const char *psz_desc;psz_desc163,4987
} ARIB_B10_PMT_Descriptors_descs[ARIB_B10_PMT_Descriptors_descs164,5013
static const char *ARIB_B10_Get_PMT_Descriptor_Description(ARIB_B10_Get_PMT_Descriptor_Description172,5235

video_chroma/dxgi_fmt.c,445
    const char   *name;name32,1260
    DXGI_FORMAT  format;33,1284
    vlc_fourcc_t vlc_format;34,1309
} dxgi_format_t;35,1338
static const dxgi_format_t dxgi_formats[dxgi_formats37,1356
static const d3d_format_t d3d_formats[d3d_formats62,2970
const char *DxgiFormatToStr(DxgiFormatToStr87,5083
vlc_fourcc_t DxgiFormatFourcc(97,5296
const d3d_format_t *GetRenderFormatList(GetRenderFormatList107,5514
void DxgiFormatMask(112,5589

video_filter/puzzle_pce.c,816
#define SHAPES_QTY 44,1626
#define PIECE_TYPE_NBR 45,1648
int puzzle_bake_pieces_shapes(50,1910
void puzzle_free_ps_pieces_shapes(165,7922
int puzzle_find_piece(188,8898
void puzzle_calculate_corners(208,9711
void puzzle_rotate_pce(279,13184
void puzzle_move_group(323,15044
void puzzle_drw_basic_pce_in_plane(342,15869
void puzzle_drw_adv_pce_in_plane(384,18407
void puzzle_drw_complex_pce_in_plane(436,21280
void puzzle_draw_pieces(538,26490
int32_t puzzle_diagonal_limit(572,27951
#define MAX_SECT 582,28476
int puzzle_generate_sect_border(588,28754
int puzzle_generate_sect_bezier(657,31701
void puzzle_get_min_bezier(697,33614
int puzzle_generate_shape_lines(717,34546
int puzzle_detect_curve(800,39058
int puzzle_generate_sectLeft2Right(859,41177
int puzzle_generate_sectTop2Btm(913,43980

demux/adaptive/playlist/BaseAdaptationSet.cpp,497
BaseAdaptationSet::BaseAdaptationSet(44,1487
BaseAdaptationSet::~BaseAdaptationSet 51,1651
StreamFormat BaseAdaptationSet::getStreamFormat(57,1758
std::vector<BaseRepresentation*>& BaseAdaptationSet::getRepresentations(65,1952
BaseRepresentation * BaseAdaptationSet::getRepresentationByID(70,2059
void BaseAdaptationSet::addRepresentation(81,2357
void BaseAdaptationSet::setSwitchPolicy 91,2750
bool BaseAdaptationSet::getBitstreamSwitching 96,2849
void BaseAdaptationSet::debug(101,2949

demux/ogg.h,3963
  #define DemuxDebug(39,1649
  #define DemuxDebug(41,1687
#define PACKET_TYPE_HEADER 45,1785
#define PACKET_TYPE_BITS 46,1819
#define PACKET_LEN_BITS01 47,1853
#define PACKET_LEN_BITS2 48,1887
#define PACKET_IS_SYNCPOINT 49,1921
typedef struct oggseek_index_entry demux_index_entry_t;51,1956
typedef struct ogg_skeleton_t ogg_skeleton_t;52,2012
typedef struct backup_queue54,2059
    block_t *p_block;p_block56,2089
    mtime_t i_duration;57,2111
} backup_queue_t;58,2135
typedef struct logical_stream_s60,2154
    ogg_stream_state os;62,2188
    es_format_t      fmt;64,2269
    es_format_t      fmt_old;65,2295
    es_out_id_t      *p_es;p_es66,2375
    double           f_rate;67,2403
    int              i_serial_no;69,2433
    bool             b_force_backup;74,2648
    int              i_packets_backup;75,2685
    int32_t          i_extra_headers_packets;76,2724
    void             *p_headers;p_headers77,2770
    int              i_headers;78,2803
    ogg_int64_t      i_previous_granulepos;79,2835
    ogg_int64_t      i_granulepos_offset;80,2879
    mtime_t          i_pcr;84,3046
    mtime_t          i_previous_pcr;85,3074
    bool b_initializing;88,3127
    bool b_finished;89,3152
    bool b_reinit;90,3173
    bool b_oggds;91,3192
    int i_granule_shift;92,3210
    int i_pre_skip;95,3289
    int i_end_trim;97,3389
    int8_t i_keyframe_offset;100,3499
    demux_index_entry_t *idx;idx103,3601
    ogg_skeleton_t *p_skel;p_skel106,3656
    unsigned int i_skip_frames;109,3725
    int64_t i_data_start;112,3806
    int i_secondary_header_packets;115,3874
        block_t **pp_blocks;pp_blocks120,4003
        uint8_t i_size;121,4032
        uint8_t i_used;122,4070
    } prepcr;123,4094
    block_t *p_preparse_block;p_preparse_block125,4174
            vorbis_info *p_info;p_info132,4269
            vorbis_comment *p_comment;p_comment133,4302
            int i_headers_flags;134,4341
            int i_prev_blocksize;135,4374
        } vorbis;136,4408
            int i_num_headers;141,4533
        } kate;142,4564
            bool b_interlaced;145,4605
        } dirac;146,4636
            int32_t i_framesize;149,4678
            int32_t i_framesperpacket;150,4711
        } speex;151,4750
            bool b_old;154,4792
        } flac;155,4816
    } special;156,4832
} logical_stream_t;158,4848
struct ogg_skeleton_t160,4869
    int            i_messages;162,4893
    char         **ppsz_messages;ppsz_messages163,4924
    unsigned char *p_index;p_index164,4958
    uint64_t       i_index;165,4986
    uint64_t       i_index_size;166,5014
    int64_t        i_indexstampden;167,5047
    int64_t        i_indexfirstnum;168,5105
    int64_t        i_indexlastnum;169,5174
struct demux_sys_t172,5213
    ogg_sync_state oy;174,5234
    int i_streams;176,5315
    logical_stream_t **pp_stream;pp_stream177,5395
    logical_stream_t *p_skelstream;p_skelstream178,5475
    logical_stream_t *p_old_stream;p_old_stream180,5552
    mtime_t i_pcr;184,5751
    mtime_t i_nzpcr_offset;185,5770
    mtime_t i_nzlast_pts;186,5798
    mtime_t i_pcr_jitter;188,5851
    int64_t i_access_delay;189,5877
    bool b_chained_boundary;192,5952
    int     i_bitrate;195,6000
    bool    b_partial_bitrate;196,6023
    bool    b_page_waiting;199,6162
    int64_t i_total_frames;202,6239
    int64_t i_total_length;205,6302
    int64_t i_input_position;208,6379
    ogg_page current_page;211,6446
    vlc_meta_t          *p_meta;p_meta214,6484
    int                 i_seekpoints;215,6517
    seekpoint_t         **pp_seekpoints;pp_seekpoints216,6555
        uint16_t major;221,6633
        uint16_t minor;222,6657
    } skeleton;223,6681
    int                 i_attachments;226,6708
    input_attachment_t  **attachments;attachments227,6747
    bool b_preparsing_done;230,6813
    bool b_es_created;231,6841
    int64_t i_length;234,6897

demux/mkv/stream_io_callback.cpp,302
vlc_stream_io_callback::vlc_stream_io_callback(33,1500
uint32 vlc_stream_io_callback::read(39,1656
void vlc_stream_io_callback::setFilePointer(48,1871
uint64 vlc_stream_io_callback::getFilePointer(83,2589
size_t vlc_stream_io_callback::write(90,2720
uint64 vlc_stream_io_callback::toRead(95,2799

stream_out/duplicate.c,703
vlc_module_begin 43,1757
struct sout_stream_sys_t61,2479
    int             i_nb_streams;63,2506
    sout_stream_t   **pp_streams;pp_streams64,2540
    int             i_nb_last_streams;66,2575
    sout_stream_t   **pp_last_streams;pp_last_streams67,2614
    int             i_nb_select;69,2654
    char            **ppsz_select;ppsz_select70,2687
struct sout_stream_id_sys_t73,2726
    int                 i_nb_ids;75,2756
    void                **pp_ids;pp_ids76,2790
static int Open(84,3065
static void Close(163,5552
static sout_stream_id_sys_t * Add(186,6234
static void Del(242,7887
static int Send(263,8507
static bool NumInRange(308,9811
static bool ESSelected(320,10206

demux/mkv/chapter_command.cpp,1095
void chapter_codec_cmds_c::AddCommand(28,1276
int16 dvd_chapter_codec_c::GetTitleNumber(56,2173
bool dvd_chapter_codec_c::Enter(69,2478
bool dvd_chapter_codec_c::Leave(74,2591
bool dvd_chapter_codec_c::EnterLeaveHelper(79,2704
std::string dvd_chapter_codec_c::GetCodecName(101,3446
bool dvd_command_interpretor_c::Interpret(145,4899
bool dvd_command_interpretor_c::MatchIsDomain(572,21917
bool dvd_command_interpretor_c::MatchIsVMG(577,22134
bool dvd_command_interpretor_c::MatchVTSNumber(585,22463
bool dvd_command_interpretor_c::MatchVTSMNumber(599,23061
bool dvd_command_interpretor_c::MatchTitleNumber(613,23611
bool dvd_command_interpretor_c::MatchPgcType(627,24162
bool dvd_command_interpretor_c::MatchPgcNumber(641,24670
bool dvd_command_interpretor_c::MatchChapterNumber(655,25230
bool dvd_command_interpretor_c::MatchCellNumber(669,25735
const std::string matroska_script_interpretor_c::CMD_MS_GOTO_AND_PLAY 683,26251
bool matroska_script_interpretor_c::Interpret(687,26457
bool matroska_script_codec_c::Enter(737,27903
bool matroska_script_codec_c::Leave(753,28359

stream_out/chromecast/chromecast_demux.cpp,1043
struct demux_sys_t39,1472
    demux_sys_t(demux_sys_t::demux_sys_t41,1493
    ~demux_sys_t(demux_sys_t::~demux_sys_t65,2368
    void setPauseState(demux_sys_t::setPauseState73,2570
    mtime_t getPlaybackTime(demux_sys_t::getPlaybackTime82,2821
    double getPlaybackPosition(demux_sys_t::getPlaybackPosition87,2928
    void setCanSeek(demux_sys_t::setCanSeek92,3042
    bool seekTo(demux_sys_t::seekTo97,3124
    bool seekTo(demux_sys_t::seekTo104,3273
    void setLength(demux_sys_t::setLength116,3546
    int Demux(demux_sys_t::Demux122,3696
    demux_t     * const p_demux;demux_sys_t::p_demux144,4320
    chromecast_common  * const p_renderer;demux_sys_t::p_renderer145,4353
    mtime_t       i_length;demux_sys_t::i_length146,4396
    bool          demuxReady;demux_sys_t::demuxReady147,4424
    bool          canSeek;demux_sys_t::canSeek148,4454
    mtime_t       m_seektime;demux_sys_t::m_seektime150,4549
static int Demux(153,4583
static int Control(160,4708
int Open(259,7197
void Close(281,7834

video_chroma/dxgi_fmt.h,375
#define VLC_VIDEOCHROMA_DXGI_FMT_H_24,1160
    const char   *name;name33,1288
    DXGI_FORMAT  formatTexture;34,1312
    vlc_fourcc_t fourcc;35,1344
    uint8_t      bitsPerChannel;36,1369
    uint8_t      widthDenominator;37,1402
    uint8_t      heightDenominator;38,1437
    DXGI_FORMAT  formatY;39,1473
    DXGI_FORMAT  formatUV;40,1499
} d3d_format_t;41,1526

video_filter/puzzle_pce.h,2491
#define VLC_LIB_PUZZLE_PCE_H 28,1386
#define SHAPES_QTY 36,1519
#define PIECE_TYPE_NBR 37,1541
#define puzzle_SHAPE_TOP 39,1586
#define puzzle_SHAPE_LEFT 40,1615
#define puzzle_SHAPE_RIGHT 41,1644
#define puzzle_SHAPE_BTM 42,1673
    uint8_t i_type;49,1900
    int32_t i_width;50,1949
} row_section_t;51,1970
    int32_t i_section_nbr;54,2005
    row_section_t *ps_row_section;ps_row_section55,2032
} piece_shape_row_t;56,2067
    int32_t i_row_nbr;59,2106
    int32_t i_first_row_offset;60,2129
    piece_shape_row_t *ps_piece_shape_row;ps_piece_shape_row61,2161
} piece_shape_t;62,2204
    int32_t i_original_x,65,2239
    int32_t i_original_x, i_original_y;65,2239
    int32_t i_actual_x,66,2279
    int32_t i_actual_x, i_actual_y;66,2279
    int32_t i_width,67,2315
    int32_t i_width, i_lines;67,2315
} piece_in_plane_t;68,2345
    int32_t i_original_row,71,2383
    int32_t i_original_row, i_original_col;71,2383
    int32_t i_top_shape,73,2428
    int32_t i_top_shape, i_btm_shape,73,2428
    int32_t i_top_shape, i_btm_shape, i_right_shape,73,2428
    int32_t i_top_shape, i_btm_shape, i_right_shape, i_left_shape;73,2428
    piece_in_plane_t *ps_piece_in_plane;ps_piece_in_plane75,2496
    bool b_finished;77,2538
    bool b_overlap;78,2559
    int8_t i_actual_angle;80,2580
    int32_t i_actual_mirror;81,2695
    int32_t i_step_x_x,82,2810
    int32_t i_step_x_x, i_step_x_y,82,2810
    int32_t i_step_x_x, i_step_x_y, i_step_y_y,82,2810
    int32_t i_step_x_x, i_step_x_y, i_step_y_y, i_step_y_x;82,2810
    int32_t i_ORx,83,2870
    int32_t i_ORx, i_OTy,83,2870
    int32_t i_ORx, i_OTy, i_OLx,83,2870
    int32_t i_ORx, i_OTy, i_OLx, i_OBy;83,2870
    int32_t i_TLx,84,2985
    int32_t i_TLx, i_TLy,84,2985
    int32_t i_TLx, i_TLy, i_TRx,84,2985
    int32_t i_TLx, i_TLy, i_TRx, i_TRy,84,2985
    int32_t i_TLx, i_TLy, i_TRx, i_TRy, i_BLx,84,2985
    int32_t i_TLx, i_TLy, i_TRx, i_TRy, i_BLx, i_BLy,84,2985
    int32_t i_TLx, i_TLy, i_TRx, i_TRy, i_BLx, i_BLy, i_BRx,84,2985
    int32_t i_TLx, i_TLy, i_TRx, i_TRy, i_BLx, i_BLy, i_BRx, i_BRy;84,2985
    int32_t i_max_x,85,3100
    int32_t i_max_x, i_min_x,85,3100
    int32_t i_max_x, i_min_x, i_max_y,85,3100
    int32_t i_max_x, i_min_x, i_max_y, i_min_y,85,3100
    int32_t i_max_x, i_min_x, i_max_y, i_min_y, i_center_x,85,3100
    int32_t i_max_x, i_min_x, i_max_y, i_min_y, i_center_x, i_center_y;85,3100
    uint32_t i_group_ID;87,3173
} piece_t;88,3198

lua/libs/vlm.c,311
#   define  _GNU_SOURCE28,1344
static const luaL_Reg vlclua_vlm_reg[vlclua_vlm_reg48,1794
static int vlclua_vlm_new(53,1915
static int vlclua_vlm_delete(76,2511
static void push_message(83,2664
static int vlclua_vlm_execute_command(107,3320
static int vlclua_vlm_new(121,3746
void luaopen_vlm(130,4054

video_output/egl.c,1097
typedef struct vlc_gl_sys_t43,1363
    EGLDisplay display;45,1393
    EGLSurface surface;46,1417
    EGLContext context;47,1441
    Display *x11;x1149,1496
    struct wl_egl_window *window;window52,1556
    unsigned width,53,1590
    unsigned width, height;53,1590
} vlc_gl_sys_t;55,1625
static int MakeCurrent 57,1642
static void ReleaseCurrent 67,1889
static void Resize 76,2101
# define Resize 87,2420
static void SwapBuffers 90,2451
static void *GetSymbol(GetSymbol97,2578
static bool CheckToken(103,2706
static bool CheckAPI 120,3091
static bool CheckClientExt(126,3247
struct gl_api132,3403
   const char name[name134,3419
   EGLenum    api;135,3443
   EGLint     min_minor;136,3462
   EGLint     render_bit;137,3487
   EGLint     attr[attr138,3513
static EGLDisplay GetDisplayEXT(142,3569
static EGLSurface CreateWindowSurfaceEXT(152,3872
static EGLSurface CreateWindowSurface(164,4301
static void Close 172,4558
static int Open 197,5118
static int OpenGLES2 369,9674
static int OpenGLES 378,9911
static int OpenGL 387,10146
vlc_module_begin 396,10339

demux/smooth/playlist/Parser.cpp,450
ManifestParser::ManifestParser(42,1571
ManifestParser::~ManifestParser(51,1831
static SegmentTimeline *createTimeline(createTimeline55,1870
            uint64_t number;::number65,2227
            uint64_t duration;::duration66,2256
            uint64_t time;::time67,2287
            uint64_t repeat;::repeat68,2314
static void ParseQualityLevel(146,5106
static void ParseStreamIndex(216,8368
Manifest * ManifestParser::parse(252,9903

lua/libs/net.c,1226
static vlclua_dtable_t *vlclua_get_dtable(vlclua_get_dtable51,1734
vlc_interrupt_t *vlclua_set_interrupt(vlclua_set_interrupt56,1851
static int vlclua_fd_map(63,2070
static int vlclua_fd_map_safe(98,2755
static int vlclua_fd_get(107,2990
static int vlclua_fd_get_lua(118,3276
static void vlclua_fd_unmap(131,3597
static void vlclua_fd_unmap_safe(156,4135
static int vlclua_url_parse(168,4479
static const luaL_Reg vlclua_net_listen_reg[vlclua_net_listen_reg203,5558
static int vlclua_net_listen_tcp(209,5699
static int vlclua_net_listen_close(244,6800
static int vlclua_net_fds(256,7104
static int vlclua_net_accept(268,7391
static int vlclua_net_connect_tcp(281,7835
static int vlclua_net_close(291,8185
static int vlclua_net_send(298,8323
static int vlclua_net_recv(310,8673
static int vlclua_net_poll(328,9298
static int vlclua_fd_write(392,10787
static int vlclua_fd_read(403,11120
static int vlclua_stat(421,11663
static int vlclua_opendir(473,13208
static const luaL_Reg vlclua_net_intf_reg[vlclua_net_intf_reg498,13894
static void luaopen_net_intf(517,14580
#define ADD_CONSTANT(521,14701
int vlclua_fd_init(533,14999
void vlclua_fd_interrupt(545,15294
void vlclua_fd_cleanup(551,15443

demux/rawvid.c,1042
#define FPS_TEXT 44,1803
#define FPS_LONGTEXT 45,1844
#define WIDTH_TEXT 48,1976
#define WIDTH_LONGTEXT 49,2007
#define HEIGHT_TEXT 52,2106
#define HEIGHT_LONGTEXT 53,2139
#define CHROMA_TEXT 56,2240
#define CHROMA_LONGTEXT 57,2295
#define ASPECT_RATIO_TEXT 59,2373
#define ASPECT_RATIO_LONGTEXT 60,2418
vlc_module_begin 63,2520
struct demux_sys_t83,3426
    int    frame_size;85,3447
    es_out_id_t *p_es_video;p_es_video87,3471
    es_format_t  fmt_video;88,3500
    date_t pcr;90,3529
    bool b_y4m;92,3546
struct preset_t101,3837
    const char *psz_ext;psz_ext103,3855
    int i_width;104,3880
    int i_height;105,3897
    unsigned u_fps_num;106,3915
    unsigned u_fps_den;107,3939
    unsigned u_ar_num;108,3963
    unsigned u_ar_den;109,3986
    vlc_fourcc_t i_chroma;110,4009
static const struct preset_t p_presets[p_presets113,4040
static int Open(127,4681
#define READ_FRAC(205,6858
#undef READ_FRAC230,7616
static void Close(371,12052
static int Demux(383,12546
static int Control(427,13684

video_filter/motionblur.c,419
#define FACTOR_TEXT 53,2333
#define FACTOR_LONGTEXT 54,2379
#define FILTER_PREFIX 56,2448
vlc_module_begin 58,2479
struct filter_sys_t80,3165
    picture_t *p_tmp;p_tmp82,3187
    bool      b_first;83,3209
    atomic_int i_factor;84,3232
static int Create(90,3430
static void Destroy(129,4692
static picture_t *Filter(Filter143,5148
static void RenderBlur(174,5946
static int MotionBlurCallback(207,7208

access/http/chunked_test.c,578
#undef NDEBUG25,1133
static const char *stream_content;stream_content38,1337
static size_t stream_length;39,1372
static bool stream_bad;40,1401
static int fd_callback(42,1426
static ssize_t recv_callback(48,1506
static void close_callback(74,2048
static struct vlc_tls chunked_tls 79,2117
static void stream_close_callback(86,2243
static const struct vlc_http_stream_cbs chunked_stream_cbs 92,2374
static struct vlc_http_stream chunked_stream 97,2477
static void test_good(104,2573
static void test_empty(141,3516
static void test_bad(160,3905
int main(181,4335

demux/adaptive/playlist/CommonAttributesElements.h,601
#define COMMONATTRIBUTESELEMENTS_H25,1230
        class CommonAttributesElements34,1351
                CommonAttributesElements(37,1420
                virtual ~CommonAttributesElements(38,1464
                std::string                         mimeType;CommonAttributesElements::mimeType49,2128
                int                                 width;CommonAttributesElements::width50,2190
                int                                 height;CommonAttributesElements::height51,2249
                std::list<std::string>              lang;CommonAttributesElements::lang52,2309

codec/t140.c,128
#define VLC_MODULE_LICENSE 26,1141
vlc_module_begin 35,1360
static void Close(77,2406
static block_t *Encode(Encode83,2472

visualization/projectm.cpp,1461
#define CONFIG_TEXT 45,1750
#define CONFIG_LONGTEXT 46,1804
#define PRESET_PATH_TXT 49,1924
#define PRESET_PATH_LONGTXT 50,1975
#define TITLE_FONT_TXT 52,2048
#define TITLE_FONT_LONGTXT 53,2088
#define MENU_FONT_TXT 55,2147
#define MENU_FONT_LONGTXT 56,2185
#define WIDTH_TEXT 58,2242
#define WIDTH_LONGTEXT 59,2279
#define HEIGHT_TEXT 61,2351
#define HEIGHT_LONGTEXT 62,2390
#define MESHX_TEXT 64,2464
#define MESHX_LONGTEXT 65,2500
#define MESHY_TEXT 67,2564
#define MESHY_LONGTEXT 68,2601
#define TEXTURE_TEXT 70,2666
#define TEXTURE_LONGTEXT 71,2706
# define FONT_PATH 74,2788
# define FONT_PATH_MENU 75,2844
# define PRESET_PATH 76,2900
# define FONT_PATH 78,2935
# define FONT_PATH_MENU 79,3013
# define PRESET_PATH 80,3095
#undef FONT_PATH84,3182
#define FONT_PATH 85,3199
#undef FONT_PATH_MENU89,3278
#define FONT_PATH_MENU 90,3300
struct filter_sys_t128,4826
    vlc_thread_t thread;filter_sys_t::thread131,4858
    vlc_gl_t  *gl;filter_sys_t::gl134,4901
    int i_channels;filter_sys_t::i_channels137,4942
    vlc_mutex_t lock;filter_sys_t::lock140,4973
    bool  b_quit;filter_sys_t::b_quit141,4995
    float *p_buffer;filter_sys_t::p_buffer142,5013
    unsigned i_buffer_size;filter_sys_t::i_buffer_size143,5034
    unsigned i_nb_samples;filter_sys_t::i_nb_samples144,5062
static int Open(156,5280
static void Close(208,6699
static block_t *DoWork(DoWork237,7439
static void *Thread(Thread265,8243

video_filter/wave.c,213
vlc_module_begin 52,2140
struct filter_sys_t69,2866
    double  f_angle;71,2888
    mtime_t last_date;72,2909
static int Create(80,3296
static void Destroy(107,4244
static picture_t *Filter(Filter120,4815

demux/mp4/essetup.c,281
static void SetupGlobalExtensions(38,1326
static void SetupESDS(50,1651
static int SetupRTPReceptionHintTrack(173,5651
int SetupVideoES(306,10241
static bool SetupAudioFromWaveFormatEx(675,24979
int SetupAudioES(696,25854
int SetupCCES(1121,42474
int SetupSpuES(1139,42908

audio_output/directsound.c,2393
#define DS_BUF_SIZE 44,1663
static const char *const speaker_list[speaker_list55,2133
#define DEVICE_TEXT 61,2463
#define DEVICE_LONGTEXT 62,2503
#define SPEAKER_TEXT 64,2566
#define SPEAKER_LONGTEXT 65,2615
#define VOLUME_TEXT 68,2767
#define VOLUME_LONGTEXT 69,2806
vlc_module_begin 71,2882
typedef struct aout_stream_sys99,3956
    LPDIRECTSOUND       p_dsobject;101,3989
    LPDIRECTSOUNDBUFFER p_dsbuffer;102,4057
    LPDIRECTSOUNDNOTIFY p_notify;105,4283
    int      i_bytes_per_sample;107,4318
    int      i_rate;108,4388
    uint8_t  chans_to_reorder;110,4444
    uint8_t  chan_table[chan_table111,4518
    uint32_t i_channel_mask;112,4558
    vlc_fourcc_t format;113,4587
    size_t  i_write;115,4613
    size_t  i_last_read;116,4634
    int64_t i_data;117,4659
    bool b_playing;119,4680
    vlc_mutex_t lock;120,4700
    vlc_cond_t cond;121,4722
    vlc_thread_t eraser_thread;122,4743
} aout_stream_sys_t;123,4775
struct aout_sys_t131,4992
    aout_stream_sys_t s;133,5012
        float         volume;136,5054
        LONG          mb;137,5084
        bool          mute;138,5110
    } volume;139,5138
    HINSTANCE         hdsound_dll;140,5152
static HRESULT TimeGet(144,5289
static HRESULT StreamTimeGet(181,6212
static int OutputTimeGet(186,6319
static HRESULT FillBuffer(196,6549
static HRESULT Play(272,9362
static HRESULT StreamPlay(302,10285
static void OutputPlay(307,10401
static HRESULT Pause(312,10521
static HRESULT StreamPause(331,10996
static void OutputPause(336,11095
static HRESULT Flush(342,11226
static HRESULT StreamFlush(357,11663
static void OutputFlush(362,11750
static HRESULT CreateDSBuffer(380,12432
static HRESULT CreateDSBufferPCM(516,17418
static HRESULT Stop(548,18280
static HRESULT StreamStop(578,19112
static void OutputStop(587,19240
static HRESULT Start(593,19364
static HRESULT StreamStart(828,27161
static int InitDirectSound(873,28289
static int VolumeSet(916,29404
static int MuteSet(952,30535
static int OutputStart(967,30935
    unsigned count;998,31726
    char **ids;ids999,31746
    char **names;names1000,31762
} ds_list_t;1001,31780
static int CALLBACK DeviceEnumCallback(1003,31794
static int ReloadDirectXDevices(1027,32472
static int DeviceSelect 1063,33490
static int Open(1071,33732
static void Close(1122,35074
static void * PlayedDataEraser(1132,35319

codec/faad.c,819
vlc_module_begin 51,2100
#define MAX_CHANNEL_POSITIONS 66,2688
struct decoder_sys_t68,2721
    NeAACDecHandle *hfaad;hfaad71,2767
    date_t date;74,2813
    uint8_t *p_buffer;p_buffer77,2858
    int     i_buffer;78,2881
    size_t  i_buffer_size;79,2903
    uint32_t pi_channel_positions[pi_channel_positions82,2999
    bool b_sbr,84,3058
    bool b_sbr, b_ps;84,3058
static const uint32_t pi_channels_in[pi_channels_in87,3084
static const uint32_t pi_channels_out[pi_channels_out92,3347
static const uint32_t pi_channels_ordered[pi_channels_ordered97,3610
static const uint32_t pi_channels_guessed[pi_channels_guessed103,3881
static int Open(123,4969
static void Flush(206,7547
static block_t *DecodeBlock(DecodeBlock216,7840
static void Close(538,18936
static void DoReordering(552,19416

video_filter/audiobargraph_v.c,2121
#define POSX_TEXT 44,1739
#define POSX_LONGTEXT 45,1776
#define POSY_TEXT 46,1834
#define POSY_LONGTEXT 47,1871
#define TRANS_TEXT 48,1929
#define TRANS_LONGTEXT 49,1983
#define POS_TEXT 51,2103
#define POS_LONGTEXT 52,2144
#define BARWIDTH_TEXT 56,2343
#define BARWIDTH_LONGTEXT 57,2390
#define BARHEIGHT_TEXT 58,2483
#define BARHEIGHT_LONGTEXT 59,2532
#define CFG_PREFIX 61,2612
static const int pi_pos_values[pi_pos_values63,2651
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions64,2718
vlc_module_begin 72,3030
    int i_alpha;112,4634
    int nbChannels;113,4690
    int *i_values;i_values114,4710
    picture_t *p_pic;p_pic115,4729
    mtime_t date;116,4751
    int scale;117,4769
    bool alarm;118,4784
    int barWidth;119,4800
} BarGraph_t;121,4819
struct filter_sys_t126,4865
    filter_t *p_blend;p_blend128,4887
    vlc_mutex_t lock;130,4911
    BarGraph_t p_BarGraph;132,4934
    int i_pos;134,4962
    int i_pos_x;135,4977
    int i_pos_y;136,4994
    bool b_absolute;137,5011
    bool b_spu_update;140,5071
static const char *const ppsz_filter_options[ppsz_filter_options143,5098
static const char *const ppsz_filter_callbacks[ppsz_filter_callbacks147,5225
static float iec_scale(160,5668
static void parse_i_values(182,6437
static const uint8_t bright_red[bright_red203,7124
static const uint8_t black[black204,7187
static const uint8_t white[white205,7247
static const uint8_t bright_green[bright_green206,7307
static const uint8_t bright_yellow[bright_yellow207,7369
static const uint8_t green[green208,7432
static const uint8_t yellow[yellow209,7486
static const uint8_t red[red210,7543
static inline void DrawHLine(212,7598
static void Draw2VLines(218,7798
static void DrawHLines(224,7965
static void DrawNumber(230,8144
static void Draw(244,8659
static int BarGraphCallback(321,11262
static subpicture_t *FilterSub(FilterSub360,12630
static picture_t *FilterVideo(FilterVideo436,14705
static int OpenCommon(494,16381
static int OpenSub(572,19019
static int OpenVideo(580,19135
static void Close(588,19254

codec/wmafixed/wma.c,448
struct decoder_sys_t43,1720
    date_t end_date;45,1743
    WMADecodeContext wmadec;46,1785
    int32_t *p_output;p_output48,1846
    int8_t *p_samples;p_samples51,1980
    unsigned int i_samples;52,2029
static unsigned int pi_channels_maps[pi_channels_maps57,2177
    add_shortcut(85,3385
static int OpenDecoder(120,4687
static void Flush(198,7318
static block_t *DecodeFrame(DecodeFrame208,7649
static void CloseDecoder(324,11092

audio_filter/channel_mixer/dolby.c,352
#define VLC_MODULE_LICENSE 32,1387
vlc_module_begin 49,2026
struct filter_sys_t61,2534
    int i_left;63,2556
    int i_center;64,2572
    int i_right;65,2590
    int i_rear_left;66,2607
    int i_rear_center;67,2628
    int i_rear_right;68,2651
static int Create(74,2876
static void Destroy(151,5408
static block_t *DoWork(DoWork160,5719

codec/wmafixed/mdct.c,746
int32_t *tcosarray[tcosarray28,992
int32_t *tcosarray[5], *tsinarray[tsinarray28,992
int32_t tcos0[tcos029,1030
int32_t tcos0[1024], tcos1[tcos129,1030
int32_t tcos0[1024], tcos1[512], tcos2[tcos229,1030
int32_t tcos0[1024], tcos1[512], tcos2[256], tcos3[tcos329,1030
int32_t tcos0[1024], tcos1[512], tcos2[256], tcos3[128], tcos4[tcos429,1030
int32_t tsin0[tsin030,1098
int32_t tsin0[1024], tsin1[tsin130,1098
int32_t tsin0[1024], tsin1[512], tsin2[tsin230,1098
int32_t tsin0[1024], tsin1[512], tsin2[256], tsin3[tsin330,1098
int32_t tsin0[1024], tsin1[512], tsin2[256], tsin3[128], tsin4[tsin430,1098
uint16_t revtab0[revtab032,1167
int ff_mdct_init(37,1235
void ff_imdct_calc(72,2045
int mdct_init_global(138,3466

lua/libs/httpd.c,1068
#   define  _GNU_SOURCE28,1336
static const luaL_Reg vlclua_httpd_reg[vlclua_httpd_reg57,2301
static const char no_password_fmt[no_password_fmt64,2500
static const char no_password_body[no_password_body74,2880
static const char no_password_title[no_password_title80,3129
static int vlclua_httpd_tls_host_new(82,3194
static int vlclua_httpd_host_delete(105,3861
struct httpd_handler_sys_t115,4227
    lua_State *L;L117,4256
    bool password;118,4274
    int ref;119,4293
static int vlclua_httpd_handler_callback(122,4310
static int vlclua_httpd_handler_new(183,6577
static int vlclua_httpd_handler_delete(225,8235
struct httpd_file_sys_t237,8725
    lua_State *L;L239,8751
    int ref;240,8769
    bool password;241,8782
static int vlclua_httpd_file_callback(244,8805
static int vlclua_httpd_file_new(285,10038
static int vlclua_httpd_file_delete(325,11615
static int vlclua_httpd_redirect_new(337,12085
static int vlclua_httpd_redirect_delete(361,12962
static uint8_t *vlclua_todata(vlclua_todata371,13347
void luaopen_httpd(389,13996

access/timecode.c,416
#define FPS_TEXT 34,1198
static const char *const fps_values[fps_values39,1305
static const char *const fps_texts[fps_texts40,1387
vlc_module_begin 42,1458
struct demux_sys_t55,1894
    es_out_id_t *es;es57,1915
    date_t date;58,1936
    mtime_t next_time;59,1953
static int DemuxOnce 62,1980
static int Demux 97,2889
static int Control 114,3255
static int Open 168,4610
static void Close 199,5361

codec/wmafixed/mdct.h,214
#define WMA_MDCT_H 21,832
typedef struct MDCTContext25,872
    int n;27,901
    int nbits;28,967
    int32_t *tcos;tcos30,1035
    int32_t *tsin;tsin31,1054
    FFTContext fft;32,1073
MDCTContext;34,1095

audio_filter/spatializer/allpass.cpp,153
allpass::allpass(10,187
void allpass::setbuffer(16,246
void allpass::mute(22,335
void allpass::setfeedback(28,416
float allpass::getfeedback(33,478

video_chroma/i420_rgb16.c,83
static void SetOffset(42,1844
void I420_RGB16(107,3895
void I420_RGB32(212,8608

codec/cdg.c,1116
#define CDG_SCREEN_WIDTH 40,1661
#define CDG_SCREEN_HEIGHT 41,1691
#define CDG_SCREEN_BORDER_WIDTH 44,1759
#define CDG_SCREEN_BORDER_HEIGHT 45,1794
#define CDG_DISPLAY_WIDTH 48,1855
#define CDG_DISPLAY_HEIGHT 49,1927
#define CDG_SCREEN_PITCH 51,2002
struct decoder_sys_t53,2045
    uint8_t  color[color55,2068
    unsigned i_offseth;56,2095
    unsigned i_offsetv;57,2119
    uint8_t  screen[screen58,2143
    uint8_t  *p_screen;p_screen59,2200
    int      i_packet;61,2225
#define CDG_PACKET_SIZE 64,2252
#define CDG_COLOR_R_SHIFT 66,2281
#define CDG_COLOR_G_SHIFT 67,2310
#define CDG_COLOR_B_SHIFT 68,2339
vlc_module_begin 85,3039
static void Flush(136,4790
static picture_t *Decode(Decode148,5225
static void Close(195,6561
static void ScreenFill(206,6883
static int DecodeMemoryPreset(213,7114
static int DecodeBorderPreset(223,7453
static int DecodeLoadColorTable(239,8186
static int DecodeTileBlock(255,8668
static int DecodeScroll(288,9428
static int DecodePacket(359,11480
static void RenderPixel(411,12873
static uint32_t RenderRGB(418,13139
static int Render(423,13290

audio_filter/resampler/soxr.c,792
#define SOXR_QUALITY_TEXT 40,1523
static const int soxr_resampler_quality_vlclist[soxr_resampler_quality_vlclist42,1581
static const char *const soxr_resampler_quality_vlctext[soxr_resampler_quality_vlctext43,1652
static const soxr_datatype_t soxr_resampler_quality_list[soxr_resampler_quality_list51,1905
#define MAX_SOXR_QUALITY 59,2036
vlc_module_begin 65,2190
struct filter_sys_t82,2778
    soxr_t  soxr;84,2800
    soxr_t  vr_soxr;85,2818
    soxr_t  last_soxr;86,2839
    double  f_fixed_ratio;87,2862
    size_t  i_last_olen;88,2889
    mtime_t i_last_pts;89,2914
SoXR_GetFormat(97,3080
Open(119,3603
OpenResampler(201,6713
OpenConverter(212,6999
Close(224,7347
SoXR_Resample(237,7602
SoXR_GetOutLen(284,8982
Resample(292,9266
Drain(373,11870
Flush(385,12154

video_filter/psychedelic.c,486
vlc_module_begin 53,2177
struct filter_sys_t70,2924
    image_handler_t *p_image;p_image72,2946
    unsigned int x,73,2976
    unsigned int x, y,73,2976
    unsigned int x, y, scale;73,2976
    int xinc,74,3006
    int xinc, yinc,74,3006
    int xinc, yinc, scaleinc;74,3006
    uint8_t u,75,3036
    uint8_t u,v;75,3036
static int Create(83,3417
static void Destroy(119,4710
static picture_t *Filter(Filter137,5412
#define copyimage(196,7159
#undef copyimage213,7981

demux/mkv/demux.cpp,1069
event_thread_t::event_thread_t(32,1318
event_thread_t::~event_thread_t(38,1471
void event_thread_t::SetPci(45,1589
void event_thread_t::ResetPci(76,2702
int event_thread_t::EventMouse(89,2942
int event_thread_t::EventKey(107,3467
int event_thread_t::EventInput(120,3877
void event_thread_t::EventThread(136,4332
void *event_thread_t::EventThread(event_thread_t::EventThread424,15901
demux_sys_t::~demux_sys_t(431,16025
matroska_stream_c *demux_sys_t::AnalyseAllSegmentsFound(demux_sys_t::AnalyseAllSegmentsFound452,16580
void demux_sys_t::InitUi(601,21949
void demux_sys_t::CleanUi(623,22675
void demux_sys_t::PreloadFamily(642,23125
bool demux_sys_t::PreloadLinked(651,23386
void demux_sys_t::FreeUnused(747,27379
bool demux_sys_t::PreparePlayback(778,28070
void demux_sys_t::JumpTo(807,29166
matroska_segment_c *demux_sys_t::FindSegment(demux_sys_t::FindSegment816,29471
virtual_chapter_c *demux_sys_t::BrowseCodecPrivate(demux_sys_t::BrowseCodecPrivate826,29767
virtual_chapter_c *demux_sys_t::FindChapter(demux_sys_t::FindChapter845,30532

access/zip/unzip/unzip.c,3351
#  define local 55,1606
#    define CASESENSITIVITYDEFAULT_NO62,1803
#define UNZ_BUFSIZE 68,1879
#define UNZ_MAXFILENAMEINZIP 72,1944
# define ALLOC(76,2001
# define TRYFREE(79,2060
#define SIZECENTRALDIRITEM 82,2099
#define SIZEZIPLOCALHEADER 83,2133
const char unz_copyright[unz_copyright88,2171
typedef struct unz_file_info_internal_s92,2363
    uLong offset_curfile;94,2405
} unz_file_info_internal;95,2476
    char  *read_buffer;read_buffer102,2640
    z_stream stream;103,2714
    uLong pos_in_zipfile;105,2787
    uLong stream_initialised;106,2867
    uLong offset_local_extrafield;108,2949
    uInt  size_local_extrafield;109,3021
    uLong pos_local_extrafield;110,3089
    uLong crc32;112,3171
    uLong crc32_wait;113,3240
    uLong rest_read_compressed;114,3320
    uLong rest_read_uncompressed;115,3392
    zlib_filefunc_def z_filefunc;116,3472
    voidpf filestream;117,3506
    uLong compression_method;118,3570
    uLong byte_before_the_zipfile;119,3638
    int   raw;120,3715
} file_in_zip_read_info_s;121,3730
    zlib_filefunc_def z_filefunc;128,3835
    voidpf filestream;129,3869
    unz_global_info gi;130,3933
    uLong byte_before_the_zipfile;131,3995
    uLong num_file;132,4072
    uLong pos_in_central_dir;133,4151
    uLong current_file_ok;134,4231
    uLong central_pos;135,4313
    uLong size_central_dir;137,4396
    uLong offset_central_dir;138,4465
    unz_file_info cur_file_info;141,4617
    unz_file_info_internal cur_file_info_internal;142,4697
    file_in_zip_read_info_s* pfile_in_zip_read;143,4775
    int encrypted;145,4929
    unsigned long keys[keys147,4970
    const unsigned long* pcrc_32_tab;148,5048
} unz_s;150,5097
local int unzlocal_getByte(169,5519
local int unzlocal_getShort 199,6233
local int unzlocal_getLong 227,6822
local int strcmpcasenosensitive_internal 260,7553
#define CASESENSITIVITYDEFAULTVALUE 285,8110
#define CASESENSITIVITYDEFAULTVALUE 287,8154
#define STRCMPCASENOSENTIVEFUNCTION 291,8236
extern int ZEXPORT unzStringFileNameCompare 303,8712
#define BUFREADCOMMENT 318,9122
local uLong unzlocal_SearchCentralDir(329,9374
extern unzFile ZEXPORT unzOpen2 395,11323
extern unzFile ZEXPORT unzOpen 498,14762
extern int ZEXPORT unzClose 509,15111
extern int ZEXPORT unzGetGlobalInfo 530,15558
local void unzlocal_DosDateToTmuDate 546,15881
local int unzlocal_GetCurrentFileInfoInternal 575,17112
extern int ZEXPORT unzGetCurrentFileInfo 748,22727
extern int ZEXPORT unzGoToFirstFile 772,23671
extern int ZEXPORT unzGoToNextFile 794,24346
extern int ZEXPORT unzLocateFile 828,25454
extern int ZEXPORT unzGetFilePos(907,27697
extern int ZEXPORT unzGoToFilePos(925,28103
local int unzlocal_CheckCurrentFileCoherencyHeader 961,29160
extern int ZEXPORT unzOpenCurrentFile3 1052,32431
extern int ZEXPORT unzOpenCurrentFile 1197,37147
extern int ZEXPORT unzOpenCurrentFilePassword 1203,37274
extern int ZEXPORT unzOpenCurrentFile2 1210,37449
extern int ZEXPORT unzReadCurrentFile 1229,37975
extern z_off_t ZEXPORT unztell 1390,43766
extern int ZEXPORT unzeof 1410,44209
extern int ZEXPORT unzGetLocalExtrafield 1443,45106
extern int ZEXPORT unzCloseCurrentFile 1494,46471
extern int ZEXPORT unzGetGlobalComment 1537,47575
extern uLong ZEXPORT unzGetOffset 1568,48359
extern int ZEXPORT unzSetOffset 1584,48717

audio_output/tizen_audio.c,829
struct aout_sys_t 42,1459
    float               soft_gain;44,1497
    bool                soft_mute;45,1532
    audio_out_h         out;47,1568
    bool                b_prepared;48,1597
    bool                b_error;49,1633
    atomic_bool         interrupted_completed;50,1666
    unsigned int        i_rate;52,1714
    audio_sample_type_e i_sample_type;53,1746
    audio_channel_e     i_channel;54,1785
    int (*pf_audio_out_drain)pf_audio_out_drain56,1821
    int (*pf_audio_out_flush)pf_audio_out_flush57,1874
vlc_module_begin 63,1990
AudioIO_VlcRet(105,3335
#define VLCRET(121,3781
AudioIO_Prepare(124,3854
AudioIO_Unprepare(145,4353
AudioIO_InterruptedCb(161,4706
AudioIO_Start(180,5276
Start(195,5807
Stop(245,7093
Play(265,7536
Pause(298,8302
Flush(311,8532
Open(338,9168
Close(367,9898

codec/omxil/OMX_Core.h,12735
#define OMX_Core_h30,1332
typedef enum OMX_COMMANDTYPE49,1758
    OMX_CommandStateSet,51,1789
    OMX_CommandFlush,52,1852
    OMX_CommandPortDisable,53,1927
    OMX_CommandPortEnable,54,1994
    OMX_CommandMarkBuffer,55,2060
    OMX_CommandKhronosExtensions 56,2136
    OMX_CommandKhronosExtensions = 0x6F000000,x6F00000056,2136
    OMX_CommandVendorStartUnused 57,2252
    OMX_CommandVendorStartUnused = 0x7F000000,x7F00000057,2252
    OMX_CommandMax 58,2357
    OMX_CommandMax = 0X7FFFFFFFX7FFFFFFF58,2357
} OMX_COMMANDTYPE;59,2389
typedef enum OMX_STATETYPE92,4165
    OMX_StateInvalid,94,4194
    OMX_StateLoaded,97,4424
    OMX_StateIdle,102,4788
    OMX_StateExecuting,105,4983
    OMX_StatePause,107,5136
    OMX_StateWaitForResources,108,5207
    OMX_StateKhronosExtensions 111,5454
    OMX_StateKhronosExtensions = 0x6F000000,x6F000000111,5454
    OMX_StateVendorStartUnused 112,5568
    OMX_StateVendorStartUnused = 0x7F000000,x7F000000112,5568
    OMX_StateMax 113,5671
    OMX_StateMax = 0X7FFFFFFFX7FFFFFFF113,5671
} OMX_STATETYPE;114,5701
typedef enum OMX_ERRORTYPE126,6226
  OMX_ErrorNone 128,6255
  OMX_ErrorInsufficientResources 131,6355
  OMX_ErrorInsufficientResources = (OMX_S32)131,6355
  OMX_ErrorInsufficientResources = (OMX_S32) 0x80001000,x80001000131,6355
  OMX_ErrorUndefined 134,6493
  OMX_ErrorUndefined = (OMX_S32)134,6493
  OMX_ErrorUndefined = (OMX_S32) 0x80001001,x80001001134,6493
  OMX_ErrorInvalidComponentName 137,6588
  OMX_ErrorInvalidComponentName = (OMX_S32)137,6588
  OMX_ErrorInvalidComponentName = (OMX_S32) 0x80001002,x80001002137,6588
  OMX_ErrorComponentNotFound 140,6708
  OMX_ErrorComponentNotFound = (OMX_S32)140,6708
  OMX_ErrorComponentNotFound = (OMX_S32) 0x80001003,x80001003140,6708
  OMX_ErrorInvalidComponent 144,6872
  OMX_ErrorInvalidComponent = (OMX_S32)144,6872
  OMX_ErrorInvalidComponent = (OMX_S32) 0x80001004,x80001004144,6872
  OMX_ErrorBadParameter 147,6972
  OMX_ErrorBadParameter = (OMX_S32)147,6972
  OMX_ErrorBadParameter = (OMX_S32) 0x80001005,x80001005147,6972
  OMX_ErrorNotImplemented 150,7072
  OMX_ErrorNotImplemented = (OMX_S32)150,7072
  OMX_ErrorNotImplemented = (OMX_S32) 0x80001006,x80001006150,7072
  OMX_ErrorUnderflow 153,7188
  OMX_ErrorUnderflow = (OMX_S32)153,7188
  OMX_ErrorUnderflow = (OMX_S32) 0x80001007,x80001007153,7188
  OMX_ErrorOverflow 156,7291
  OMX_ErrorOverflow = (OMX_S32)156,7291
  OMX_ErrorOverflow = (OMX_S32) 0x80001008,x80001008156,7291
  OMX_ErrorHardware 159,7388
  OMX_ErrorHardware = (OMX_S32)159,7388
  OMX_ErrorHardware = (OMX_S32) 0x80001009,x80001009159,7388
  OMX_ErrorInvalidState 162,7489
  OMX_ErrorInvalidState = (OMX_S32)162,7489
  OMX_ErrorInvalidState = (OMX_S32) 0x8000100A,x8000100A162,7489
  OMX_ErrorStreamCorrupt 165,7577
  OMX_ErrorStreamCorrupt = (OMX_S32)165,7577
  OMX_ErrorStreamCorrupt = (OMX_S32) 0x8000100B,x8000100B165,7577
  OMX_ErrorPortsNotCompatible 168,7677
  OMX_ErrorPortsNotCompatible = (OMX_S32)168,7677
  OMX_ErrorPortsNotCompatible = (OMX_S32) 0x8000100C,x8000100C168,7677
  OMX_ErrorResourcesLost 172,7860
  OMX_ErrorResourcesLost = (OMX_S32)172,7860
  OMX_ErrorResourcesLost = (OMX_S32) 0x8000100D,x8000100D172,7860
  OMX_ErrorNoMore 175,7954
  OMX_ErrorNoMore = (OMX_S32)175,7954
  OMX_ErrorNoMore = (OMX_S32) 0x8000100E,x8000100E175,7954
  OMX_ErrorVersionMismatch 178,8048
  OMX_ErrorVersionMismatch = (OMX_S32)178,8048
  OMX_ErrorVersionMismatch = (OMX_S32) 0x8000100F,x8000100F178,8048
  OMX_ErrorNotReady 181,8164
  OMX_ErrorNotReady = (OMX_S32)181,8164
  OMX_ErrorNotReady = (OMX_S32) 0x80001010,x80001010181,8164
  OMX_ErrorTimeout 184,8252
  OMX_ErrorTimeout = (OMX_S32)184,8252
  OMX_ErrorTimeout = (OMX_S32) 0x80001011,x80001011184,8252
  OMX_ErrorSameState 187,8383
  OMX_ErrorSameState = (OMX_S32)187,8383
  OMX_ErrorSameState = (OMX_S32) 0x80001012,x80001012187,8383
  OMX_ErrorResourcesPreempted 191,8572
  OMX_ErrorResourcesPreempted = (OMX_S32)191,8572
  OMX_ErrorResourcesPreempted = (OMX_S32) 0x80001013,x80001013191,8572
  OMX_ErrorPortUnresponsiveDuringAllocation 197,8975
  OMX_ErrorPortUnresponsiveDuringAllocation = (OMX_S32)197,8975
  OMX_ErrorPortUnresponsiveDuringAllocation = (OMX_S32) 0x80001014,x80001014197,8975
  OMX_ErrorPortUnresponsiveDuringDeallocation 203,9404
  OMX_ErrorPortUnresponsiveDuringDeallocation = (OMX_S32)203,9404
  OMX_ErrorPortUnresponsiveDuringDeallocation = (OMX_S32) 0x80001015,x80001015203,9404
  OMX_ErrorPortUnresponsiveDuringStop 209,9830
  OMX_ErrorPortUnresponsiveDuringStop = (OMX_S32)209,9830
  OMX_ErrorPortUnresponsiveDuringStop = (OMX_S32) 0x80001016,x80001016209,9830
  OMX_ErrorIncorrectStateTransition 212,9951
  OMX_ErrorIncorrectStateTransition = (OMX_S32)212,9951
  OMX_ErrorIncorrectStateTransition = (OMX_S32) 0x80001017,x80001017212,9951
  OMX_ErrorIncorrectStateOperation 215,10087
  OMX_ErrorIncorrectStateOperation = (OMX_S32)215,10087
  OMX_ErrorIncorrectStateOperation = (OMX_S32) 0x80001018,x80001018215,10087
  OMX_ErrorUnsupportedSetting 218,10237
  OMX_ErrorUnsupportedSetting = (OMX_S32)218,10237
  OMX_ErrorUnsupportedSetting = (OMX_S32) 0x80001019,x80001019218,10237
  OMX_ErrorUnsupportedIndex 221,10372
  OMX_ErrorUnsupportedIndex = (OMX_S32)221,10372
  OMX_ErrorUnsupportedIndex = (OMX_S32) 0x8000101A,x8000101A221,10372
  OMX_ErrorBadPortIndex 224,10472
  OMX_ErrorBadPortIndex = (OMX_S32)224,10472
  OMX_ErrorBadPortIndex = (OMX_S32) 0x8000101B,x8000101B224,10472
  OMX_ErrorPortUnpopulated 227,10600
  OMX_ErrorPortUnpopulated = (OMX_S32)227,10600
  OMX_ErrorPortUnpopulated = (OMX_S32) 0x8000101C,x8000101C227,10600
  OMX_ErrorComponentSuspended 230,10716
  OMX_ErrorComponentSuspended = (OMX_S32)230,10716
  OMX_ErrorComponentSuspended = (OMX_S32) 0x8000101D,x8000101D230,10716
  OMX_ErrorDynamicResourcesUnavailable 233,10849
  OMX_ErrorDynamicResourcesUnavailable = (OMX_S32)233,10849
  OMX_ErrorDynamicResourcesUnavailable = (OMX_S32) 0x8000101E,x8000101E233,10849
  OMX_ErrorMbErrorsInFrame 237,11036
  OMX_ErrorMbErrorsInFrame = (OMX_S32)237,11036
  OMX_ErrorMbErrorsInFrame = (OMX_S32) 0x8000101F,x8000101F237,11036
  OMX_ErrorFormatNotDetected 240,11193
  OMX_ErrorFormatNotDetected = (OMX_S32)240,11193
  OMX_ErrorFormatNotDetected = (OMX_S32) 0x80001020,x80001020240,11193
  OMX_ErrorContentPipeOpenFailed 243,11292
  OMX_ErrorContentPipeOpenFailed = (OMX_S32)243,11292
  OMX_ErrorContentPipeOpenFailed = (OMX_S32) 0x80001021,x80001021243,11292
  OMX_ErrorContentPipeCreationFailed 246,11398
  OMX_ErrorContentPipeCreationFailed = (OMX_S32)246,11398
  OMX_ErrorContentPipeCreationFailed = (OMX_S32) 0x80001022,x80001022246,11398
  OMX_ErrorSeperateTablesUsed 249,11510
  OMX_ErrorSeperateTablesUsed = (OMX_S32)249,11510
  OMX_ErrorSeperateTablesUsed = (OMX_S32) 0x80001023,x80001023249,11510
  OMX_ErrorTunnelingUnsupported 252,11615
  OMX_ErrorTunnelingUnsupported = (OMX_S32)252,11615
  OMX_ErrorTunnelingUnsupported = (OMX_S32) 0x80001024,x80001024252,11615
  OMX_ErrorKhronosExtensions 254,11672
  OMX_ErrorKhronosExtensions = (OMX_S32)254,11672
  OMX_ErrorKhronosExtensions = (OMX_S32)0x8F000000,x8F000000254,11672
  OMX_ErrorVendorStartUnused 255,11793
  OMX_ErrorVendorStartUnused = (OMX_S32)255,11793
  OMX_ErrorVendorStartUnused = (OMX_S32)0x90000000,x90000000255,11793
  OMX_ErrorMax 256,11903
  OMX_ErrorMax = 0x7FFFFFFFx7FFFFFFF256,11903
} OMX_ERRORTYPE;257,11931
typedef OMX_ERRORTYPE (* OMX_COMPONENTINITTYPE)260,11970
typedef struct OMX_COMPONENTREGISTERTYPE263,12076
  const char          * pName;265,12119
  OMX_COMPONENTINITTYPE pInitialize;266,12218
} OMX_COMPONENTREGISTERTYPE;267,12304
typedef struct OMX_PRIORITYMGMTTYPE 273,12436
 OMX_U32 nSize;274,12474
 OMX_VERSIONTYPE nVersion;275,12541
 OMX_U32 nGroupPriority;276,12615
 OMX_U32 nGroupID;277,12691
} OMX_PRIORITYMGMTTYPE;278,12761
#define OMX_MAX_STRINGNAME_SIZE 281,12884
typedef struct OMX_PARAM_COMPONENTROLETYPE 284,12942
    OMX_U32 nSize;285,12987
    OMX_VERSIONTYPE nVersion;286,13058
    OMX_U8 cRole[cRole287,13136
} OMX_PARAM_COMPONENTROLETYPE;288,13244
#define OMX_BUFFERFLAG_EOS 299,13604
#define OMX_BUFFERFLAG_STARTTIME 326,14751
#define OMX_BUFFERFLAG_DECODEONLY 349,15524
#define OMX_BUFFERFLAG_DATACORRUPT 356,15705
#define OMX_BUFFERFLAG_ENDOFFRAME 363,16006
#define OMX_BUFFERFLAG_SYNCFRAME 369,16232
#define OMX_BUFFERFLAG_EXTRADATA 375,16402
#define OMX_BUFFERFLAG_CODECCONFIG 393,17355
typedef struct OMX_BUFFERHEADERTYPE398,17424
    OMX_U32 nSize;400,17462
    OMX_VERSIONTYPE nVersion;401,17533
    OMX_U8* pBuffer;402,17611
    OMX_U32 nAllocLen;404,17752
    OMX_U32 nFilledLen;405,17831
    OMX_U32 nOffset;407,17949
    OMX_PTR pAppPrivate;409,18091
    OMX_PTR pPlatformPrivate;411,18240
    OMX_PTR pInputPortPrivate;413,18387
    OMX_PTR pOutputPortPrivate;415,18535
    OMX_HANDLETYPE hMarkTargetComponent;417,18684
    OMX_PTR pMarkData;419,18855
    OMX_U32 nTickCount;422,19082
 OMX_TICKS nTimeStamp;431,19752
  OMX_U32     nFlags;438,20279
  OMX_U32 nOutputPortIndex;439,20341
  OMX_U32 nInputPortIndex;441,20475
} OMX_BUFFERHEADERTYPE;443,20607
typedef enum OMX_EXTRADATATYPE451,20892
   OMX_ExtraDataNone 453,20925
   OMX_ExtraDataQuantization,454,21039
   OMX_ExtraDataKhronosExtensions 455,21139
   OMX_ExtraDataKhronosExtensions = 0x6F000000,x6F000000455,21139
   OMX_ExtraDataVendorStartUnused 456,21256
   OMX_ExtraDataVendorStartUnused = 0x7F000000,x7F000000456,21256
   OMX_ExtraDataMax 457,21362
   OMX_ExtraDataMax = 0x7FFFFFFFx7FFFFFFF457,21362
} OMX_EXTRADATATYPE;458,21395
typedef struct OMX_OTHER_EXTRADATATYPE 461,21418
    OMX_U32 nSize;462,21460
    OMX_VERSIONTYPE nVersion;463,21479
    OMX_U32 nPortIndex;464,21524
    OMX_EXTRADATATYPE eType;465,21548
    OMX_U32 nDataSize;466,21605
    OMX_U8  data[data467,21674
} OMX_OTHER_EXTRADATATYPE;468,21727
typedef struct OMX_PORT_PARAM_TYPE 471,21776
    OMX_U32 nSize;472,21813
    OMX_VERSIONTYPE nVersion;473,21884
    OMX_U32 nPorts;474,21962
    OMX_U32 nStartPortNumber;475,22041
} OMX_PORT_PARAM_TYPE;476,22120
typedef enum OMX_EVENTTYPE479,22166
    OMX_EventCmdComplete,481,22195
    OMX_EventError,482,22283
    OMX_EventMark,483,22367
    OMX_EventPortSettingsChanged,484,22446
    OMX_EventBufferFlag,485,22533
    OMX_EventResourcesAcquired,486,22606
   OMX_EventComponentResumed,489,22859
   OMX_EventDynamicResourcesAvailable,490,22953
   OMX_EventPortFormatDetected,491,23064
   OMX_EventKhronosExtensions 492,23152
   OMX_EventKhronosExtensions = 0x6F000000,x6F000000492,23152
   OMX_EventVendorStartUnused 493,23265
   OMX_EventVendorStartUnused = 0x7F000000,x7F000000493,23265
   OMX_EventMax 494,23367
   OMX_EventMax = 0x7FFFFFFFx7FFFFFFF494,23367
} OMX_EVENTTYPE;495,23396
typedef struct OMX_CALLBACKTYPE497,23414
   OMX_ERRORTYPE (*EventHandler)EventHandler530,25215
    OMX_ERRORTYPE (*EmptyBufferDone)EmptyBufferDone560,26670
    OMX_ERRORTYPE (*FillBufferDone)FillBufferDone589,28183
} OMX_CALLBACKTYPE;594,28346
typedef enum OMX_BUFFERSUPPLIERTYPE600,28516
    OMX_BufferSupplyUnspecified 602,28554
    OMX_BufferSupplyUnspecified = 0x0,x0602,28554
    OMX_BufferSupplyInput,604,28704
    OMX_BufferSupplyOutput,605,28783
    OMX_BufferSupplyKhronosExtensions 606,28863
    OMX_BufferSupplyKhronosExtensions = 0x6F000000,x6F000000606,28863
    OMX_BufferSupplyVendorStartUnused 607,28984
    OMX_BufferSupplyVendorStartUnused = 0x7F000000,x7F000000607,28984
    OMX_BufferSupplyMax 608,29094
    OMX_BufferSupplyMax = 0x7FFFFFFFx7FFFFFFF608,29094
} OMX_BUFFERSUPPLIERTYPE;609,29131
typedef struct OMX_PARAM_BUFFERSUPPLIERTYPE 615,29210
    OMX_U32 nSize;616,29256
    OMX_VERSIONTYPE nVersion;617,29314
    OMX_U32 nPortIndex;618,29390
    OMX_BUFFERSUPPLIERTYPE eBufferSupplier;619,29458
} OMX_PARAM_BUFFERSUPPLIERTYPE;620,29526
#define OMX_PORTTUNNELFLAG_READONLY 627,29694
typedef struct OMX_TUNNELSETUPTYPE635,29976
    OMX_U32 nTunnelFlags;637,30013
    OMX_BUFFERSUPPLIERTYPE eSupplier;638,30083
} OMX_TUNNELSETUPTYPE;639,30149
#define OMX_GetComponentVersion(684,32618
#define OMX_SendCommand(745,35816
#define OMX_GetParameter(786,37939
#define OMX_SetParameter(825,39946
#define OMX_GetConfig(861,41779
#define OMX_SetConfig(897,43614
#define OMX_GetExtensionIndex(931,45371
#define OMX_GetState(958,46611
#define OMX_UseBuffer(985,47765
#define OMX_AllocateBuffer(1028,49907
#define OMX_FreeBuffer(1064,51663
#define OMX_EmptyThisBuffer(1096,53294
#define OMX_FillThisBuffer(1126,54793
#define OMX_UseEGLImage(1165,56695

access/zip/unzip/unzip.h,1522
#define _unz_H46,1718
typedef struct TagunzFile__ 63,2024
typedef struct TagunzFile__ { int unused;63,2024
typedef struct TagunzFile__ { int unused; } unzFile__;63,2024
typedef unzFile__ *unzFile;unzFile64,2079
typedef voidp unzFile;66,2113
#define UNZ_OK 70,2145
#define UNZ_END_OF_LIST_OF_FILE 71,2189
#define UNZ_ERRNO 72,2236
#define UNZ_EOF 73,2286
#define UNZ_PARAMERROR 74,2330
#define UNZ_BADZIPFILE 75,2377
#define UNZ_INTERNALERROR 76,2424
#define UNZ_CRCERROR 77,2471
typedef struct tm_unz_s80,2555
    uInt tm_sec;82,2581
    uInt tm_min;83,2649
    uInt tm_hour;84,2715
    uInt tm_mday;85,2779
    uInt tm_mon;86,2839
    uInt tm_year;87,2903
} tm_unz;88,2958
typedef struct unz_global_info_s92,3087
    uLong number_entry;94,3122
    uLong size_comment;96,3239
} unz_global_info;97,3319
typedef struct unz_file_info_s101,3408
    uLong version;103,3441
    uLong version_needed;104,3519
    uLong flag;105,3597
    uLong compression_method;106,3675
    uLong dosDate;107,3753
    uLong crc;108,3831
    uLong compressed_size;109,3909
    uLong uncompressed_size;110,3987
    uLong size_filename;111,4065
    uLong size_file_extra;112,4143
    uLong size_file_comment;113,4221
    uLong disk_num_start;115,4300
    uLong internal_fa;116,4378
    uLong external_fa;117,4456
    tm_unz tmu_date;119,4535
} unz_file_info;120,4556
typedef struct unz_file_pos_s210,7815
    uLong pos_in_zip_directory;212,7847
    uLong num_of_file;213,7916
} unz_file_pos;214,7966

control/motion.c,356
#define VLC_MODULE_LICENSE 36,1492
struct intf_sys_t49,1923
    motion_sensors_t *p_motion;p_motion51,1943
    vlc_thread_t thread;52,1975
vlc_module_begin 66,2476
void Close 112,3901
#define LOW_THRESHOLD 126,4344
#define HIGH_THRESHOLD 127,4370
static void *RunIntf(RunIntf128,4398
#undef LOW_THRESHOLD194,6402
#undef HIGH_THRESHOLD195,6423

audio_filter/spatializer/comb.cpp,190
comb::comb(10,181
void comb::setbuffer(17,255
void comb::mute(23,341
void comb::setdamp(29,419
float comb::getdamp(35,490
void comb::setfeedback(40,535
float comb::getfeedback(45,594

stream_filter/decomp.c,819
# define _POSIX_SPAWN 34,1318
# undef HAVE_VMSPLICE46,1569
vlc_module_begin 57,1800
struct stream_sys_t75,2320
    int          write_fd;78,2364
    vlc_cond_t   wait;81,2414
    vlc_mutex_t  lock;82,2437
    bool         paused;83,2460
    vlc_thread_t thread;86,2508
    pid_t        pid;87,2533
    int          read_fd;89,2556
    bool         can_pace;90,2582
    bool         can_pause;91,2609
    int64_t      pts_delay;92,2637
static const size_t bufsize 97,2693
static void cleanup_mmap 99,2751
static void *Thread Thread105,2829
#define MIN_BLOCK 186,5103
#define MAX_BLOCK 187,5131
static ssize_t Read 192,5279
static int Control 216,5803
static int Open 261,7119
static void Close 361,10436
static int OpenGzip 387,11070
static int OpenBzip2 406,11472
static int OpenXZ 426,12003

demux/mod.c,893
#define NOISE_LONGTEXT 55,2036
#define REVERB_LONGTEXT 56,2099
#define REVERB_LEVEL_LONGTEXT 57,2151
#define REVERB_DELAY_LONGTEXT 59,2267
#define MEGABASS_LONGTEXT 61,2391
#define MEGABASS_LEVEL_LONGTEXT 62,2446
#define MEGABASS_RANGE_LONGTEXT 64,2563
#define SURROUND_LEVEL_LONGTEXT 67,2788
#define SURROUND_DELAY_LONGTEXT 69,2908
vlc_module_begin 72,3026
struct demux_sys_t112,4722
    es_format_t  fmt;114,4743
    es_out_id_t *es;es115,4765
    date_t      pts;117,4787
    int64_t     i_length;118,4808
    int         i_data;120,4835
    uint8_t     *p_data;p_data121,4859
    ModPlugFile *f;f122,4884
#define MOD_MAX_FILE_SIZE 132,5183
static int Open(137,5393
static void Close(250,9406
static int Demux(264,9788
static int Control(300,10818
static int Validate(445,15912
        int i_offset;449,16005
        const char *psz_marker;psz_marker450,16027

audio_filter/resampler/src.c,334
#define SRC_CONV_TYPE_TEXT 40,1717
#define SRC_CONV_TYPE_LONGTEXT 41,1777
static const int conv_type_values[conv_type_values44,1942
static const char *const conv_type_texts[conv_type_texts48,2092
vlc_module_begin 57,2424
static int OpenResampler 85,3310
static void Close 115,4297
static block_t *Resample Resample123,4448

video_chroma/chain.c,515
vlc_module_begin 42,1794
struct filter_sys_t72,2921
    filter_chain_t *p_chain;p_chain74,2943
static picture_t *BufferNew(BufferNew80,3156
#define CHAIN_LEVEL_MAX 87,3300
static int Activate(94,3666
static void Destroy(147,5206
static picture_t *Chain(Chain157,5550
static int BuildTransformChain(166,5863
static int BuildChromaResize(192,6744
static int BuildChromaChain(216,7556
static int CreateChain(284,9666
static filter_t * AppendTransform(325,10891
static void EsFormatMergeSize(377,12181

video_filter/puzzle.c,1101
#define ROWS_TEXT 51,1941
#define ROWS_LONGTEXT 52,1987
#define COLS_TEXT 53,2037
#define COLS_LONGTEXT 54,2086
#define MODE_TEXT 55,2139
#define MODE_LONGTEXT 56,2173
#define BORDER_TEXT 57,2266
#define BORDER_LONGTEXT 58,2299
#define PREVIEW_TEXT 59,2354
#define PREVIEW_LONGTEXT 60,2395
#define PREVIEWSIZE_TEXT 61,2446
#define PREVIEWSIZE_LONGTEXT 62,2496
#define SHAPE_SIZE_TEXT 63,2576
#define SHAPE_SIZE_LONGTEXT 64,2628
#define AUTO_SHUFFLE_TEXT 65,2703
#define AUTO_SHUFFLE_LONGTEXT 66,2748
#define AUTO_SOLVE_TEXT 67,2815
#define AUTO_SOLVE_LONGTEXT 68,2856
#define ROTATION_TEXT 69,2919
#define ROTATION_LONGTEXT 70,2956
const int pi_mode_values[pi_mode_values72,3032
const char *const ppsz_mode_descriptions[ppsz_mode_descriptions73,3101
const int pi_rotation_values[pi_rotation_values74,3235
const char *const ppsz_rotation_descriptions[ppsz_rotation_descriptions75,3308
#define CFG_PREFIX 77,3431
vlc_module_begin(82,3522
int Open(126,5480
void Close(213,9003
picture_t *Filter(Filter249,10516
int puzzle_Callback(583,26140
int puzzle_mouse(629,27794

demux/adaptive/plumbing/SourceStream.cpp,432
ChunksSourceStream::ChunksSourceStream(34,1185
ChunksSourceStream::~ChunksSourceStream(42,1355
void ChunksSourceStream::Reset(47,1415
stream_t * ChunksSourceStream::makeStream(55,1540
ssize_t ChunksSourceStream::Read(69,1949
ssize_t ChunksSourceStream::read_Callback(105,2836
int ChunksSourceStream::seek_Callback(111,3060
int ChunksSourceStream::control_Callback(116,3150
void ChunksSourceStream::delete_Callback(140,3771

video_output/drawable.c,141
#define HWND_TEXT 34,1198
#define HWND_LONGTEXT 35,1243
vlc_module_begin 45,1507
static void Close 116,3286
static int Control 142,3763

video_filter/mirror.c,1116
static const char *const ppsz_filter_options[ppsz_filter_options56,2396
#define ORIENTATION_TEXT 63,2662
#define ORIENTATION_LONGTEXT 64,2712
static const int pi_orientation_values[pi_orientation_values66,2829
static const char *const ppsz_orientation_descriptions[ppsz_orientation_descriptions67,2882
#define DIRECTION_TEXT 70,2982
#define DIRECTION_LONGTEXT 71,3021
static const int pi_direction_values[pi_direction_values72,3082
static const char *const ppsz_direction_descriptions[ppsz_direction_descriptions73,3133
#define CFG_PREFIX 76,3267
vlc_module_begin 78,3297
struct filter_sys_t104,4558
    atomic_int i_split;106,4580
    atomic_int i_direction;107,4604
static int Create(115,4994
static void Destroy(168,6852
static picture_t *Filter(Filter185,7612
static void VerticalMirror(221,8855
static void PlanarVerticalMirror(254,10204
static void YUV422VerticalMirror(301,12133
static void YUV422Mirror2Pixels(368,14704
static void RV24VerticalMirror(397,15805
static void RV32VerticalMirror(462,18250
static void HorizontalMirror(526,20688
static int FilterCallback 585,22723

video_filter/dynamicoverlay/dynamicoverlay_list.c,178
int do_ListInit(38,1544
int do_ListDestroy(48,1772
ssize_t ListAdd(65,2100
int ListRemove(93,2920
overlay_t *ListGet(ListGet110,3283
overlay_t *ListWalk(ListWalk120,3522

video_filter/puzzle.h,1631
#define VLC_PUZZLE_H 26,1234
struct filter_sys_t 30,1283
    bool b_init;31,1305
    bool b_bake_request;32,1322
    bool b_shape_init;33,1347
    bool b_change_param;34,1370
    bool b_finished;35,1395
    bool b_shuffle_rqst;36,1416
    bool b_mouse_drag;37,1441
    bool b_mouse_mvt;38,1464
    param_t s_allocated;40,1487
    param_t s_current_param;41,1512
    param_t s_new_param;42,1541
    uint32_t i_done_count,44,1567
    uint32_t i_done_count, i_tmp_done_count;44,1567
    int32_t i_mouse_drag_pce;46,1613
    int32_t i_mouse_x,47,1643
    int32_t i_mouse_x, i_mouse_y;47,1643
    int16_t i_pointed_pce;48,1677
    int8_t  i_mouse_action;49,1704
    uint32_t i_solve_acc_loop,51,1733
    uint32_t i_solve_acc_loop, i_solve_grp_loop,51,1733
    uint32_t i_solve_acc_loop, i_solve_grp_loop, i_calc_corn_loop;51,1733
    int32_t i_magnet_accuracy;52,1800
    int32_t *pi_group_qty;pi_group_qty53,1831
    int32_t *pi_order;pi_order55,1859
    puzzle_array_t ***ps_puzzle_array;ps_puzzle_array56,2002
    piece_shape_t **ps_pieces_shapes;ps_pieces_shapes57,2145
    piece_t *ps_pieces;ps_pieces58,2288
    piece_t *ps_pieces_tmp;ps_pieces_tmp59,2431
    puzzle_plane_t *ps_desk_planes;ps_desk_planes61,2575
    puzzle_plane_t *ps_pict_planes;ps_pict_planes62,2611
    uint8_t i_preview_pos;64,2648
    int32_t i_selected;65,2675
    vlc_mutex_t lock,67,2700
    vlc_mutex_t lock, pce_lock;67,2700
    int32_t i_auto_shuffle_countdown_val,69,2733
    int32_t i_auto_shuffle_countdown_val, i_auto_solve_countdown_val;69,2733
    point_t **ps_bezier_pts_H;ps_bezier_pts_H71,2804

demux/adaptive/http/Downloader.hpp,793
#define DOWNLOADER_HPP21,986
namespace adaptive28,1071
    namespace httpadaptive::http31,1093
        class Downloaderadaptive::http::Downloader34,1119
                vlc_thread_t thread_handle;adaptive::http::Downloader::thread_handle47,1549
                vlc_mutex_t  lock;adaptive::http::Downloader::lock48,1593
                vlc_cond_t   waitcond;adaptive::http::Downloader::waitcond49,1628
                vlc_mutex_t  processlock;adaptive::http::Downloader::processlock50,1667
                bool         thread_handle_valid;adaptive::http::Downloader::thread_handle_valid51,1709
                bool         killed;adaptive::http::Downloader::killed52,1759
                std::list<HTTPChunkBufferedSource *> chunks;adaptive::http::Downloader::chunks53,1796

demux/adaptive/playlist/BasePeriod.h,469
#define BASEPERIOD_H_25,1165
        class BasePeriod 37,1358
                BasePeriod(40,1441
                virtual ~BasePeriod 41,1489
                Property<mtime_t> duration;BasePeriod::duration51,2061
                Property<mtime_t> startTime;BasePeriod::startTime52,2105
                std::vector<BaseAdaptationSet *>    adaptationSets;BasePeriod::adaptationSets55,2172
                AbstractPlaylist *playlist;BasePeriod::playlist56,2240

codec/adpcm.c,1768
vlc_module_begin 47,1951
enum adpcm_codec_e58,2374
    ADPCM_IMA_QT,60,2395
    ADPCM_IMA_WAV,61,2413
    ADPCM_MS,62,2432
    ADPCM_DK3,63,2446
    ADPCM_DK4,64,2461
    ADPCM_EA65,2476
struct decoder_sys_t68,2493
    enum adpcm_codec_e codec;70,2516
    size_t              i_block;72,2547
    size_t              i_samplesperblock;73,2580
    date_t              end_date;75,2624
    int16_t            *prev;prev76,2658
static const int pi_channels_maps[pi_channels_maps86,3101
static const int i_index_table[i_index_table98,3527
static const int i_step_table[i_step_table104,3633
static const int i_adaptation_table[i_adaptation_table117,4174
static const int i_adaptation_coeff1[i_adaptation_coeff1123,4309
static const int i_adaptation_coeff2[i_adaptation_coeff2128,4393
static int OpenDecoder(136,4685
static void Flush(302,10145
static block_t *DecodeBlock(DecodeBlock312,10442
static void CloseDecoder(396,13027
#define CLAMP(408,13389
#define GetByte(412,13492
#define GetWord(415,13549
typedef struct adpcm_ms_channel_s423,13704
    int i_idelta;425,13740
    int i_sample1,426,13758
    int i_sample1, i_sample2;426,13758
    int i_coeff1,427,13788
    int i_coeff1, i_coeff2;427,13788
} adpcm_ms_channel_t;429,13817
static int AdpcmMsExpandNibble(432,13841
static void DecodeAdpcmMs(459,14621
typedef struct adpcm_ima_wav_channel_s527,16448
    int i_predictor;529,16489
    int i_step_index;530,16510
} adpcm_ima_wav_channel_t;532,16533
static int AdpcmImaWavExpandNibble(534,16561
static void DecodeAdpcmImaWav(557,17298
static void DecodeAdpcmImaQT(626,19171
static void DecodeAdpcmDk4(664,20252
static void DecodeAdpcmDk3(710,21494
#define MAX_CHAN 778,23456
static void DecodeAdpcmEA(779,23475

demux/mkv/Ebml_parser.hpp,660
#define VLC_MKV_EBML_PARSER_HPP_26,1244
class EbmlParser33,1479
    static const int M_EL_MAXSIZE EbmlParser::M_EL_MAXSIZE56,2125
    demux_t     *p_demux;EbmlParser::p_demux58,2166
    EbmlStream  *m_es;EbmlParser::m_es59,2192
    int          mi_level;EbmlParser::mi_level60,2215
    EbmlElement *m_el[EbmlParser::m_el61,2242
    EbmlElement *m_got;EbmlParser::m_got63,2280
    int          mi_user_level;EbmlParser::mi_user_level65,2305
    bool         mb_keep;EbmlParser::mb_keep66,2337
    bool         mb_dummy;EbmlParser::mb_dummy68,2407
class KaxBlockVirtualWorkaround 72,2508
    void Fix(KaxBlockVirtualWorkaround::Fix75,2575

audio_filter/resampler/bandlimited.c,491
struct filter_sys_t69,2706
    int32_t *p_buf;p_buf71,2728
    size_t i_buf_size;72,2808
    double d_old_factor;74,2832
    size_t i_old_wing;75,2857
    unsigned int i_remainder;77,2881
    bool b_first;78,2961
    date_t end_date;80,2980
vlc_module_begin 86,3185
static int OpenFilter(286,10586
static void CloseFilter(332,12239
static void FilterFloatUP(339,12402
static void FilterFloatUD(382,14147
static int ReallocBuffer(438,16368
static void ResampleFloat(458,17116

stream_out/chromaprint.c,836
# define CHROMAPRINT_NODLL38,1453
#define DURATION_TEXT 57,2250
#define DURATION_LONGTEXT 58,2310
vlc_module_begin 60,2358
struct sout_stream_sys_t68,2632
    unsigned int i_duration;70,2659
    unsigned int i_total_samples;71,2688
    int i_samples;72,2722
    bool b_finished;73,2741
    bool b_done;74,2762
    ChromaprintContext *p_chromaprint_ctx;p_chromaprint_ctx75,2779
    sout_stream_id_sys_t *id;id76,2822
    chromaprint_fingerprint_t *p_data;p_data77,2852
struct sout_stream_id_sys_t80,2895
    int i_samples;82,2925
    unsigned int i_channels;83,2944
    unsigned int i_samplerate;84,2973
#define BYTESPERSAMPLE 87,3008
static int Open(92,3202
static void Finish(125,4289
static void Close(153,5440
static sout_stream_id_sys_t *Add(Add163,5707
static void Del(203,6942
static int Send(212,7198

access/rtsp/access.c,509
#define VLC_MODULE_LICENSE 31,1341
vlc_module_begin 47,1805
struct access_sys_t65,2437
    rtsp_client_t *p_rtsp;p_rtsp67,2459
    int fd;69,2487
    block_t *p_header;p_header71,2500
static int RtspConnect(77,2706
static int RtspDisconnect(95,3277
static int RtspRead(104,3473
static int RtspReadLine(112,3708
static int RtspWrite(128,4094
static int Open(144,4602
static void Close(253,7946
static block_t *BlockRead(BlockRead266,8389
static int Seek(294,9220
static int Control(304,9523

demux/aiff.c,561
vlc_module_begin 46,1760
struct demux_sys_t59,2188
    es_format_t  fmt;61,2209
    es_out_id_t *es;es62,2231
    int64_t     i_ssnd_pos;64,2253
    int64_t     i_ssnd_size;65,2281
    int         i_ssnd_offset;66,2310
    int         i_ssnd_blocksize;67,2341
    int64_t     i_ssnd_start;70,2402
    int64_t     i_ssnd_end;71,2432
    int         i_ssnd_fsize;73,2461
    int64_t     i_time;75,2492
static unsigned int GetF80BE(82,2679
static int Open(103,3188
static void Close(217,6680
static int Demux(229,7003
static int Control(273,8226

mux/mpeg/streams.h,615
#define VLC_MPEG_STREAMS_H_21,1079
    int             i_pid;25,1125
    int             i_continuity_counter;27,1153
    bool            b_discontinuity;28,1195
} ts_stream_t;30,1233
    vlc_fourcc_t    i_codec;34,1266
    int             i_stream_type;36,1296
    int             i_stream_id;37,1331
    int             i_width,39,1365
    int             i_width, i_height;39,1365
    int             i_es_id;42,1444
    int             i_extra;44,1474
    uint8_t         *p_extra;p_extra45,1503
    int             i_langs;48,1566
    uint8_t         *lang;lang49,1595
} pes_stream_t;50,1622

access/v4l2/controls.c,1751
typedef struct vlc_v4l2_ctrl_name40,1505
    const char name[name42,1541
    uint32_t cid;43,1566
} vlc_v4l2_ctrl_name_t;44,1584
static const vlc_v4l2_ctrl_name_t controls[controls47,1642
#define CTRL_CID_KNOWN(84,3292
struct vlc_v4l2_ctrl89,3435
    int                   fd;91,3458
    uint32_t              id;92,3488
    uint8_t               type;93,3518
    char                  name[name94,3550
    int32_t               default_value;95,3586
    struct vlc_v4l2_ctrl *next;next96,3627
static int ControlSet 99,3663
static int ControlSet64 110,3909
static int ControlSetStr 129,4370
static int ControlSetCallback 148,4869
static void ControlsReset 187,5975
static int ControlsResetCallback 207,6534
static void ControlsSetFromString 215,6784
static int cidcmp 311,9840
static vlc_v4l2_ctrl_t *ControlCreate ControlCreate325,10200
#define CTRL_FLAGS_IGNORE 363,11237
static vlc_v4l2_ctrl_t *ControlAddInteger ControlAddInteger368,11452
static vlc_v4l2_ctrl_t *ControlAddBoolean ControlAddBoolean406,12625
static vlc_v4l2_ctrl_t *ControlAddMenu ControlAddMenu437,13551
static vlc_v4l2_ctrl_t *ControlAddButton ControlAddButton487,15128
static vlc_v4l2_ctrl_t *ControlAddInteger64 ControlAddInteger64506,15654
static vlc_v4l2_ctrl_t *ControlAddClass ControlAddClass542,16689
static vlc_v4l2_ctrl_t *ControlAddString ControlAddString550,16924
static vlc_v4l2_ctrl_t *ControlAddBitMask ControlAddBitMask596,18232
static vlc_v4l2_ctrl_t *ControlAddIntMenu ControlAddIntMenu629,19273
static vlc_v4l2_ctrl_t *ControlAddUnknown ControlAddUnknown682,20984
typedef vlc_v4l2_ctrl_t *(*ctrl_type_cb)ctrl_type_cb691,21314
vlc_v4l2_ctrl_t *ControlsInit ControlsInit698,21602
void ControlsDeinit 784,24667

audio_filter/resampler/bandlimited.h,303
#define Nhc 25,1214
#define Npc 26,1234
#define SMALL_FILTER_NMULT 46,2182
#define SMALL_FILTER_SCALE 47,2223
#define SMALL_FILTER_NWING 48,2286
static const float SMALL_FILTER_FLOAT_IMP[SMALL_FILTER_FLOAT_IMP49,2344
static const float SMALL_FILTER_FLOAT_IMPD[SMALL_FILTER_FLOAT_IMPD1588,18459

mux/mp4/libmp4mux.c,1628
bool mp4mux_trackinfo_Init(39,1548
void mp4mux_trackinfo_Clear(71,2323
bo_t *box_new(box_new81,2553
bo_t *box_full_new(box_full_new99,2820
void box_fix(111,3021
void box_gather 116,3100
static inline void bo_add_mp4_tag_descr(129,3498
static int64_t get_timestamp(137,3713
static void matrix_apply_rotation(149,4026
#define ATAN(155,4242
static void AddEdit(172,4729
static bo_t *GetEDTS(GetEDTS191,5205
static bo_t *GetESDS(GetESDS236,6504
static bo_t *GetWaveTag(GetWaveTag333,9542
static bo_t *GetDec3Tag(GetDec3Tag372,10302
static bo_t *GetDac3Tag(GetDac3Tag494,14149
static bo_t *GetDamrTag(GetDamrTag542,15280
static bo_t *GetD263Tag(GetD263Tag560,15743
static void hevcParseVPS(573,15950
static inline void hevc_skip_profile_tiers_level(603,16913
static void hevcParseSPS(629,17833
static bo_t *GetHvcCTag(GetHvcCTag673,19055
    struct nal 680,19277
        size_t i_buffer;681,19294
        uint8_t * p_buffer;682,19319
static bo_t *GetWaveFormatExTag(GetWaveFormatExTag842,24424
static bo_t *GetxxxxTag(GetxxxxTag863,25118
static bo_t *GetAvcCTag(GetAvcCTag872,25317
static bo_t *GetSVQ3Tag(GetSVQ3Tag937,27581
static bo_t *GetUdtaTag(GetUdtaTag968,28392
#define ADD_META_BOX(1010,29730
#undef ADD_META_BOX1029,30503
static bo_t *GetSounBox(GetSounBox1035,30556
static bo_t *GetVideBox(GetVideBox1118,33299
static bo_t *GetTextBox(GetTextBox1206,35965
static int64_t GetScaledEntryDuration(1236,36806
static bo_t *GetStblBox(GetStblBox1250,37428
bo_t * mp4mux_GetMoovBox(1474,44309
bo_t *mp4mux_GetFtyp(mp4mux_GetFtyp1888,58972
bool mp4mux_CanMux(1907,59429

demux/mpeg/h26x.c,935
#define FPS_TEXT 46,1941
#define FPS_LONGTEXT 47,1982
vlc_module_begin 49,2045
struct demux_sys_t74,2947
    es_out_id_t *p_es;p_es76,2968
    date_t      dts;78,2992
    unsigned    frame_rate_num;79,3013
    unsigned    frame_rate_den;80,3045
    decoder_t *p_packetizer;p_packetizer82,3078
#define H26X_PACKET_SIZE 88,3190
#define H26X_PEEK_CHUNK 89,3220
#define H26X_MIN_PEEK 90,3268
#define H26X_MAX_PEEK 91,3306
#define H26X_NAL_COUNT 92,3377
    bool b_sps;99,3620
    bool b_pps;100,3636
    bool b_vps;101,3652
} hevc_probe_ctx_t;102,3668
    bool b_sps;106,3706
    bool b_pps;107,3722
} h264_probe_ctx_t;108,3738
static int ProbeHEVC(110,3759
static int ProbeH264(169,5269
static inline bool check_Property(234,7111
static int GenericOpen(246,7405
static int OpenH264(368,11227
static int OpenHEVC(378,11618
static void Close(391,12209
static int Demux(405,12756
static int Control(471,15226

codec/svg.c,447
#define TEXT_WIDTH 50,1989
#define LONG_TEXT_WIDTH 51,2032
#define TEXT_HEIGHT 52,2105
#define LONG_TEXT_HEIGHT 53,2149
#define TEXT_SCALE 54,2223
#define LONG_TEXT_SCALE 55,2267
vlc_module_begin 60,2510
struct decoder_sys_t79,3161
    int32_t i_width;81,3184
    int32_t i_height;82,3205
    double  f_scale;83,3227
static int OpenDecoder(89,3462
static picture_t *DecodeBlock(DecodeBlock123,4532
static void CloseDecoder(266,8901

demux/xiph_metadata.c,1138
input_attachment_t* ParseFlacPicture(35,1412
#define RM(72,3009
typedef struct chapters_array_t115,4426
    unsigned int i_size;117,4460
    seekpoint_t ** pp_chapters;118,4485
} chapters_array_t;119,4517
static seekpoint_t * getChapterEntry(121,4538
#define XIPHMETA_Title 148,5551
#define XIPHMETA_Artist 149,5590
#define XIPHMETA_Genre 150,5629
#define XIPHMETA_Copyright 151,5668
#define XIPHMETA_Album 152,5707
#define XIPHMETA_TrackNum 153,5746
#define XIPHMETA_Description 154,5785
#define XIPHMETA_Rating 155,5824
#define XIPHMETA_Date 156,5863
#define XIPHMETA_Language 157,5902
#define XIPHMETA_Publisher 158,5941
#define XIPHMETA_EncodedBy 159,5981
#define XIPHMETA_TrackTotal 160,6021
static char * xiph_ExtractCueSheetMeta(162,6062
static void xiph_ParseCueSheetMeta(213,7623
#define TRY_EXTRACT_CUEMETA(224,8054
static void xiph_ParseCueSheet(264,9468
void vorbis_ParseComment(305,10596
#define IF_EXTRACT(367,12029
#define IF_EXTRACT_ONCE(384,12670
#define IF_EXTRACT_FMT(391,12933
#undef IF_EXTRACT524,18726
#undef RM527,18779
const char *FindKateCategoryName(FindKateCategoryName538,19090

codec/vorbis.c,2270
# define INTERLEAVE_TYPE 47,1805
# define INTERLEAVE_TYPE 51,1872
#  define HAVE_VORBIS_ENCODER54,1924
#   define OV_ECTL_RATEMANAGE_AVG 57,2019
struct decoder_sys_t65,2286
    bool b_packetizer;68,2331
    bool            b_has_headers;70,2355
    vorbis_info      vi;75,2431
    vorbis_comment   vc;77,2550
    vorbis_dsp_state vd;79,2660
    vorbis_block     vb;81,2769
    date_t       end_date;86,2884
    int          i_last_block_size;87,2911
    uint8_t pi_chan_table[pi_chan_table92,2988
static const int pi_channels_maps[pi_channels_maps95,3034
static const uint32_t pi_8channels_in[pi_8channels_in120,3998
static const uint32_t pi_7channels_in[pi_7channels_in126,4257
static const uint32_t pi_6channels_in[pi_6channels_in132,4498
static const uint32_t pi_4channels_in[pi_4channels_in137,4711
static const uint32_t pi_3channels_in[pi_3channels_in141,4889
#define ENC_QUALITY_TEXT 172,6116
#define ENC_QUALITY_LONGTEXT 173,6164
#define ENC_MAXBR_TEXT 176,6337
#define ENC_MAXBR_LONGTEXT 177,6391
#define ENC_MINBR_TEXT 179,6498
#define ENC_MINBR_LONGTEXT 180,6552
#define ENC_CBR_TEXT 182,6670
#define ENC_CBR_LONGTEXT 183,6710
vlc_module_begin 186,6789
#   define ENC_CFG_PREFIX 204,7317
static int OpenDecoder(232,8365
static int OpenPacketizer(271,9390
static block_t *DecodeBlock(DecodeBlock291,9999
static int ProcessHeaders(336,11139
static void Flush(438,14674
static void *ProcessPacket(ProcessPacket448,15000
static void Interleave(498,16393
            union { int32_t i;505,16685
            union { int32_t i; uint32_t u;505,16685
static block_t *DecodePacket(DecodePacket518,17148
static block_t *SendPacket(SendPacket568,18939
static void ParseVorbisComments(590,19774
static void ConfigureChannelOrder(658,22323
static void CloseDecoder(698,23573
struct encoder_sys_t719,24218
    vorbis_info      vi;724,24281
    vorbis_comment   vc;726,24400
    vorbis_dsp_state vd;728,24510
    vorbis_block     vb;730,24619
    int i_last_block_size;732,24694
    int i_samples_delay;733,24721
    unsigned int i_channels;734,24746
    uint8_t pi_chan_table[pi_chan_table739,24816
static int OpenEncoder(746,25073
static block_t *Encode(Encode866,29187
static void CloseEncoder(934,31479

access/dsm/access.c,1083
#define BDSM_HELP 63,2224
vlc_module_begin 65,2305
struct access_sys_t104,3813
    netbios_ns         *p_ns;p_ns106,3835
    smb_session        *p_session;p_session107,3908
    vlc_url_t           url;109,3985
    char               *psz_fullpath;psz_fullpath110,4014
    const char         *psz_share;psz_share111,4052
    const char         *psz_path;psz_path112,4087
    char                netbios_name[netbios_name114,4122
    struct in_addr      addr;115,4164
    smb_fd              i_fd;117,4195
    smb_tid             i_tid;118,4281
static int Open(124,4583
static void Close(197,6793
static int get_address(219,7493
static int smb_connect(270,9165
static bool smb_has_invalid_creds(298,10173
static int login(308,10521
static void backslash_path(378,12834
static bool get_path(392,13159
static int Seek(440,14486
static ssize_t Read(458,15002
static int Control(476,15500
static int add_item(514,16380
static int BrowseShare(535,17124
static int BrowseDirectory(566,17987
static int DirControl(617,19346
static int BrowserInit(632,19740

audio_filter/compressor.c,2542
#define A_TBL 46,1794
#define DB_TABLE_SIZE 48,1815
#define DB_MIN 49,1846
#define DB_MAX 50,1879
#define LIN_TABLE_SIZE 51,1911
#define LIN_MIN 52,1942
#define LIN_MAX 53,1982
#define DB_DEFAULT_CUBE54,2013
#define RMS_BUF_SIZE 55,2037
#define LOOKAHEAD_SIZE 56,2067
#define LIN_INTERP(58,2112
#define LIMIT(59,2166
    float        pf_buf[pf_buf63,2242
    unsigned int i_pos;64,2281
    unsigned int i_count;65,2305
    float        f_sum;66,2331
} rms_env;68,2356
        float pf_vals[pf_vals74,2402
        float f_lev_in;75,2440
    } p_buf[p_buf77,2465
    unsigned int i_pos;78,2494
    unsigned int i_count;79,2518
} lookahead;81,2545
struct filter_sys_t83,2559
    float f_amp;85,2581
    float pf_as[pf_as86,2598
    unsigned int i_count;87,2622
    float f_env;88,2648
    float f_env_peak;89,2665
    float f_env_rms;90,2687
    float f_gain;91,2708
    float f_gain_out;92,2726
    rms_env rms;93,2748
    float f_sum;94,2765
    lookahead la;95,2782
    float pf_db_data[pf_db_data97,2801
    float pf_lin_data[pf_lin_data98,2838
    vlc_mutex_t lock;100,2878
    float f_rms_peak;102,2901
    float f_attack;103,2923
    float f_release;104,2943
    float f_threshold;105,2964
    float f_ratio;106,2987
    float f_knee;107,3006
    float f_makeup_gain;108,3024
    float f;113,3069
    int32_t i;114,3082
} ls_pcast32;116,3098
#define RMS_PEAK_TEXT 155,5065
#define RMS_PEAK_LONGTEXT 156,5104
#define ATTACK_TEXT 158,5157
#define ATTACK_LONGTEXT 159,5197
#define RELEASE_TEXT 161,5267
#define RELEASE_LONGTEXT 162,5309
#define THRESHOLD_TEXT 164,5381
#define THRESHOLD_LONGTEXT 165,5428
#define RATIO_TEXT 167,5495
#define RATIO_LONGTEXT 168,5528
#define KNEE_TEXT 170,5581
#define KNEE_LONGTEXT 171,5619
#define MAKEUP_GAIN_TEXT 173,5677
#define MAKEUP_GAIN_LONGTEXT 174,5722
vlc_module_begin(176,5798
static void Close(270,9795
static block_t * DoWork(296,10880
static void DbInit(448,16499
static float Db2Lin(468,17077
static float Lin2Db(495,17857
static float CubeInterp(524,18743
static void RoundToZero(537,19291
static float Max(547,19513
static float Clamp(557,19650
static int Round(570,19921
static float RmsEnvProcess(581,20124
static void BufferProcess(608,20916
static int RMSPeakCallback(631,21794
static int AttackCallback(645,22242
static int ReleaseCallback(659,22687
static int ThresholdCallback(673,23136
static int RatioCallback(687,23593
static int KneeCallback(701,24033
static int MakeupGainCallback(715,24469

mux/mp4/libmp4mux.h,939
    uint64_t i_pos;29,1270
    int      i_size;30,1290
    mtime_t  i_pts_dts;32,1312
    mtime_t  i_length;33,1336
    unsigned int i_flags;34,1359
} mp4mux_entry_t;35,1385
    uint64_t i_duration;39,1421
    mtime_t i_start_time;40,1446
    mtime_t i_start_offset;41,1472
} mp4mux_edit_t;42,1500
    unsigned i_track_id;46,1535
    es_format_t   fmt;47,1560
    unsigned int i_entry_count;50,1600
    unsigned int i_entry_max;51,1632
    mp4mux_entry_t *entry;entry52,1662
    block_t      *a52_frame;a52_frame55,1743
    int64_t      i_read_duration;58,1789
    uint32_t     i_timescale;59,1823
    mtime_t      i_firstdts;60,1853
    bool         b_hasbframes;61,1912
    uint64_t     i_stco_pos;65,2016
    uint32_t     i_trex_default_length;68,2062
    uint32_t     i_trex_default_size;69,2102
    unsigned int i_edits_count;72,2161
    mp4mux_edit_t *p_edits;p_edits73,2193
} mp4mux_trackinfo_t;75,2222

lua/libs/strings.c,441
#   define  _GNU_SOURCE29,1383
static int vlclua_decode_uri(47,1788
static int vlclua_encode_uri_component(64,2363
static int vlclua_make_uri(79,2745
static int vlclua_make_path(94,3152
static int vlclua_resolve_xml_special_chars(103,3373
static int vlclua_convert_xml_special_chars(121,3983
static int vlclua_from_charset(135,4321
static const luaL_Reg vlclua_strings_reg[vlclua_strings_reg153,4959
void luaopen_strings(164,5394

demux/xiph_metadata.h,129
  const char *psz_tag;psz_tag44,1884
  const char *psz_i18n;psz_i18n45,1907
} Katei18nCategories[Katei18nCategories46,1931

demux/mkv/Ebml_dispatcher.hpp,1149
#define VLC_MKV_EBML_DISPATCHER_HPP_24,1218
  namespace detail ::detail38,1437
    static std::type_info const* typeid_ptr ::detail::typeid_ptr40,1480
  struct EbmlProcessorEntry ::EbmlProcessorEntry46,1610
    typedef void (*EbmlProcessor)::EbmlProcessorEntry::EbmlProcessor47,1640
    EbmlId         const* p_ebmlid;::EbmlProcessorEntry::p_ebmlid49,1698
    std::type_info const* p_typeid;::EbmlProcessorEntry::p_typeid50,1734
    EbmlProcessor         callback;::EbmlProcessorEntry::callback51,1770
    EbmlProcessorEntry ::EbmlProcessorEntry::EbmlProcessorEntry53,1807
  bool operator<(::operator<59,1961
  class EbmlTypeDispatcher ::EbmlTypeDispatcher69,2277
      typedef std::vector<EbmlProcessorEntry> ProcessorContainer;::EbmlTypeDispatcher::ProcessorContainer71,2396
      void insert ::EbmlTypeDispatcher::insert74,2475
      void on_create ::EbmlTypeDispatcher::on_create78,2575
      bool send ::EbmlTypeDispatcher::send82,2670
      ProcessorContainer _processors;::EbmlTypeDispatcher::_processors129,4411
#define EBML_ELEMENT_CASE_DEF(134,4481
#define E_CASE(148,5297
#define E_CASE_DEFAULT(153,5567

access_output/file.c,734
#   define O_LARGEFILE 54,1824
# define _POSIX_REALTIME_SIGNALS 57,1888
#define SOUT_CFG_PREFIX 60,1934
static ssize_t Read(65,2176
static ssize_t Write(79,2648
static ssize_t WritePipe(112,3491
static ssize_t Send(151,4389
static int Seek(190,5518
static int NoSeek(195,5647
static int Control(201,5754
static const char *const ppsz_sout_options[ppsz_sout_options225,6296
static int Open(238,6618
static void Close(372,10514
#define OVERWRITE_TEXT 381,10724
#define OVERWRITE_LONGTEXT 382,10777
#define APPEND_TEXT 384,10869
#define APPEND_LONGTEXT 385,10910
#define FORMAT_TEXT 387,11027
#define FORMAT_LONGTEXT 388,11074
#define SYNC_TEXT 390,11169
#define SYNC_LONGTEXT 391,11213
vlc_module_begin 393,11283

demux/adaptive/playlist/SegmentChunk.hpp,430
#define SEGMENTCHUNK_HPP21,995
namespace adaptive28,1127
    namespace playlistadaptive::playlist31,1149
        class SegmentChunk adaptive::playlist::SegmentChunk38,1268
            bool discontinuity;adaptive::playlist::SegmentChunk::discontinuity45,1580
            ISegment *segment;adaptive::playlist::SegmentChunk::segment48,1632
            BaseRepresentation *rep;adaptive::playlist::SegmentChunk::rep49,1663

packetizer/hxxx_sei.c,62
void HxxxParse_AnnexB_SEI(31,1246
void HxxxParseSEI(38,1510

video_filter/alphamask.c,457
#define ALPHAMASK_HELP 39,1537
#define MASK_TEXT 42,1628
#define MASK_LONGTEXT 43,1670
#define CFG_PREFIX 46,1766
vlc_module_begin 62,2467
struct filter_sys_t80,2985
    picture_t *p_mask;p_mask82,3007
    vlc_mutex_t mask_lock;83,3030
static int Create(86,3061
static void Destroy(131,4353
static picture_t *Filter(Filter146,4719
static void LoadMask(175,5623
static int MaskCallback(195,6442
#define VAR_IS(204,6779
#undef VAR_IS225,7437

access/screen/xcb.c,1222
#define FPS_TEXT 39,1342
#define FPS_LONGTEXT 40,1376
#define LEFT_TEXT 43,1477
#define LEFT_LONGTEXT 44,1520
#define TOP_TEXT 47,1598
#define TOP_LONGTEXT 48,1636
#define WIDTH_TEXT 51,1713
#define WIDTH_LONGTEXT 52,1759
#define HEIGHT_TEXT 55,1851
#define HEIGHT_LONGTEXT 56,1899
#define FOLLOW_MOUSE_TEXT 59,1994
#define FOLLOW_MOUSE_LONGTEXT 60,2045
vlc_module_begin 69,2235
struct demux_sys_t104,3478
    xcb_connection_t *conn;conn107,3557
    es_out_id_t      *es;es108,3608
    float             rate;109,3664
    xcb_window_t      window;110,3711
    xcb_pixmap_t      pixmap;111,3770
    xcb_shm_seg_t     segment;112,3838
    int16_t           x,113,3893
    int16_t           x, y;113,3893
    uint16_t          w,114,3968
    uint16_t          w, h;114,3968
    uint8_t           bpp;115,4039
    bool              shm;116,4101
    bool              follow_mouse;117,4159
    uint16_t          cur_w,118,4195
    uint16_t          cur_w, cur_h;118,4195
    vlc_timer_t       timer;120,4325
static bool CheckSHM 124,4402
static int Open 142,4757
static void Close 265,8292
static int Control 279,8531
static void Demux 328,9647
static es_out_id_t *InitES InitES512,14798

packetizer/hxxx_sei.h,502
#define HXXX_SEI_H21,1100
enum hxxx_sei_type_e24,1157
    HXXX_SEI_PIC_TIMING 26,1180
    HXXX_SEI_USER_DATA_REGISTERED_ITU_T_T35 27,1209
    HXXX_SEI_RECOVERY_POINT 28,1258
    unsigned i_type;33,1311
        bs_t *p_bs;p_bs36,1348
            const uint8_t *p_cc;p_cc39,1442
            size_t i_cc;40,1475
        } itu_t35;41,1500
            int i_frames;44,1544
        } recovery;45,1570
} hxxx_sei_data_t;47,1597
typedef bool (*pf_hxxx_sei_callback)pf_hxxx_sei_callback49,1617

access/avio.c,991
# define AVIOContext 40,1484
# define avio_open 42,1517
# define avio_close 43,1545
# define avio_read 44,1575
# define avio_seek 45,1603
# define avio_pause 46,1631
# define AVIO_FLAG_READ 48,1670
# define AVIO_FLAG_WRITE 49,1705
# define avio_size 50,1741
vlc_module_begin(57,1982
struct access_sys_t82,2909
    AVIOContext *context;context84,2931
    int64_t size;85,2957
struct sout_access_out_sys_t 88,2979
    AVIOContext *context;context89,3010
static vlc_object_t *current_access current_access96,3083
static int UrlInterruptCallbackSingle(98,3128
static int SetupAvioCb(103,3226
int OpenAvio(124,3684
static const char *const ppsz_sout_options[ppsz_sout_options213,5945
int OutOpenAvio(218,6023
void CloseAvio(278,7610
void OutCloseAvio(291,7845
static ssize_t Read(304,8110
static ssize_t Write(317,8480
static int Seek(355,9486
# define EOVERFLOW 361,9612
static int OutSeek(377,10029
static int OutControl(386,10253
static int Control(405,10682

text_renderer/freetype/text_layout.c,3128
# define FRIBIDI_NO_DEPRECATED 55,1957
# undef HAVE_FONTCONFIG71,2216
#  define HAVE_FONT_FALLBACK73,2263
# define HAVE_FONT_FALLBACK79,2348
# define HAVE_FONT_FALLBACK84,2417
# define HAVE_FONT_FALLBACK89,2483
typedef struct run_desc_t101,2776
    int                         i_start_offset;103,2804
    int                         i_end_offset;104,2852
    FT_Face                     p_face;105,2898
    const text_style_t         *p_style;p_style106,2938
    hb_script_t                 script;109,3001
    hb_direction_t              direction;110,3041
    hb_font_t                  *p_hb_font;p_hb_font111,3084
    hb_buffer_t                *p_buffer;p_buffer112,3127
    hb_glyph_info_t            *p_glyph_infos;p_glyph_infos113,3169
    hb_glyph_position_t        *p_glyph_positions;p_glyph_positions114,3216
    unsigned int                i_glyph_count;115,3267
} run_desc_t;118,3322
typedef struct glyph_bitmaps_t123,3398
    FT_Glyph p_glyph;125,3431
    FT_Glyph p_outline;126,3453
    FT_Glyph p_shadow;127,3477
    FT_BBox  glyph_bbox;128,3500
    FT_BBox  outline_bbox;129,3525
    FT_BBox  shadow_bbox;130,3552
    int      i_x_offset;131,3578
    int      i_y_offset;132,3603
    int      i_x_advance;133,3628
    int      i_y_advance;134,3654
} glyph_bitmaps_t;135,3680
typedef struct paragraph_t137,3700
    uni_char_t          *p_code_points;p_code_points139,3729
    int                 *pi_glyph_indices;pi_glyph_indices140,3800
    text_style_t       **pp_styles;pp_styles141,3897
    FT_Face             *pp_faces;pp_faces142,3933
    int                 *pi_run_ids;pi_run_ids143,4047
    glyph_bitmaps_t     *p_glyph_bitmaps;p_glyph_bitmaps144,4134
    uint8_t             *pi_karaoke_bar;pi_karaoke_bar145,4176
    int                  i_size;146,4217
    run_desc_t          *p_runs;p_runs147,4250
    int                  i_runs_count;148,4283
    int                  i_runs_size;149,4322
    hb_script_t         *p_scripts;p_scripts152,4382
    FriBidiCharType     *p_types;p_types156,4446
    FriBidiLevel        *p_levels;p_levels157,4480
    FriBidiStrIndex     *pi_reordered_indices;pi_reordered_indices158,4515
    FriBidiParType       paragraph_type;159,4562
} paragraph_t;162,4611
static void FreeLine(164,4627
void FreeLines(180,5065
line_desc_t *NewLine(NewLine190,5278
static void FixGlyph(218,5934
static void BBoxEnlarge(237,6535
static paragraph_t *NewParagraph(NewParagraph245,6788
static void FreeParagraph(346,10788
static int AnalyzeParagraph(371,11409
static int AddRun(423,13220
static int AddRunWithFallback(484,15266
    #define MAX_FACES 501,15993
static bool FaceStyleEquals(569,18536
static int ItemizeParagraph(596,19541
static int ShapeParagraphHarfBuzz(654,21364
static int ShapeParagraphFriBidi(836,28252
static int RemoveZeroWidthCharacters(874,29621
static int ZeroNsmAdvance(906,30669
static int LoadGlyphs(923,31189
#define SKIP_GLYPH(983,33457
#undef SKIP_GLYPH1037,35558
static int LayoutLine(1065,36626
static int LayoutParagraph(1305,45735
int LayoutText(1429,49698

access/v4l2/lib.c,167
static int fd_open 34,1231
static void *v4l2_handle v4l2_handle40,1308
static void v4l2_lib_load 53,1833
#define SYM(64,2089
static void v4l2_lib_unload 75,2361

demux/playlist/pls.c,50
int Import_PLS(45,1933
static int Demux(66,2465

demux/mpeg/ts_pid.c,299
#define PID_ALLOC_CHUNK 33,1187
void ts_pid_list_Init(35,1215
void ts_pid_list_Release(47,1508
ts_pid_t * ts_pid_Get(61,1901
ts_pid_t * ts_pid_Next(116,3197
static void PIDReset(126,3444
bool PIDSetup(134,3616
void PIDRelease(208,5413
int UpdateHWFilter(268,6746
int SetPIDFilter(277,7028

access/smb.c,717
#   define smbc_open(37,1501
#   define smbc_stat(38,1545
#   define smbc_read 39,1585
#   define smbc_lseek 40,1611
#   define smbc_close 41,1643
#define SMB_HELP 62,2162
vlc_module_begin 63,2222
struct access_sys_t91,3249
    int i_smb;93,3271
    uint64_t size;94,3286
    vlc_url_t url;95,3305
static void smb_auth(101,3464
static int smb_get_uri(118,3912
#define PSZ_SHARE_PATH_OR_NULL 125,4237
#define PSZ_NAME_OR_NULL 126,4305
static int Open(150,5389
# undef open175,6071
static void Close(278,9025
static int Seek(297,9551
static ssize_t Read(320,10177
static int DirRead 339,10702
static int DirControl(403,12534
static int Control(421,13037
static void Win32AddConnection(460,13902

demux/asf/libasf_guid.h,4291
#define LIBASG_GUID_H24,1128
    ASF_OBJECT_NULL 33,1374
    ASF_OBJECT_ROOT,34,1399
    ASF_OBJECT_HEADER,35,1420
    ASF_OBJECT_DATA,36,1443
    ASF_OBJECT_INDEX,37,1464
    ASF_OBJECT_FILE_PROPERTIES,38,1486
    ASF_OBJECT_STREAM_PROPERTIES,39,1518
    ASF_OBJECT_HEADER_EXTENSION,40,1552
    ASF_OBJECT_CODEC_LIST,41,1585
    ASF_OBJECT_MARKER,42,1612
    ASF_OBJECT_CONTENT_DESCRIPTION,43,1635
    ASF_OBJECT_METADATA,44,1671
    ASF_OBJECT_PADDING,45,1696
    ASF_OBJECT_OTHER,46,1720
static const guid_t asf_object_null_guid 49,1746
static const guid_t vlc_object_root_guid 57,1884
static const guid_t asf_object_header_guid 66,2051
static const guid_t asf_object_data_guid 69,2177
static const guid_t asf_object_simple_index_guid 72,2301
static const guid_t asf_object_index_guid 75,2433
static const guid_t asf_object_file_properties_guid 79,2578
static const guid_t asf_object_stream_properties_guid 82,2713
static const guid_t asf_object_header_extension_guid 85,2850
static const guid_t asf_object_codec_list_guid 88,2986
static const guid_t asf_object_marker_guid 91,3116
static const guid_t asf_object_content_description_guid 94,3242
static const guid_t asf_object_extended_content_description 97,3381
static const guid_t asf_object_padding 100,3524
static const guid_t asf_object_advanced_mutual_exclusion 104,3676
static const guid_t asf_object_stream_prioritization 107,3816
static const guid_t asf_object_metadata_guid 110,3952
static const guid_t asf_object_stream_type_audio 114,4111
static const guid_t asf_object_stream_type_video 117,4243
static const guid_t asf_object_stream_type_command 120,4375
static const guid_t asf_object_media_index_guid 125,4533
static const guid_t asf_object_timecode_index_guid 128,4664
static const guid_t asf_object_script_command_guid 132,4808
static const guid_t asf_object_bitrate_mutual_exclusion_guid 135,4942
static const guid_t asf_object_error_correction_guid 138,5086
static const guid_t asf_object_content_branding_guid 141,5222
static const guid_t asf_object_stream_bitrate_properties 144,5358
static const guid_t asf_object_content_encryption_guid 147,5498
static const guid_t asf_object_extended_content_encryption_guid 150,5636
static const guid_t asf_object_digital_signature_guid 153,5783
static const guid_t asf_object_extended_stream_properties_guid 157,5940
static const guid_t asf_object_group_mutual_exclusion_guid 160,6086
static const guid_t asf_object_bandwidth_sharing_guid 163,6228
static const guid_t asf_object_language_list 166,6365
static const guid_t asf_object_metadata_library_guid 169,6493
static const guid_t asf_object_index_parameters_guid 172,6629
static const guid_t asf_object_media_object_index_parameters_guid 175,6765
static const guid_t asf_object_timecode_index_parameters_guid 178,6914
static const guid_t asf_object_compatibility_guid 181,7059
static const guid_t asf_object_advanced_content_encryption_guid 184,7192
static const guid_t asf_object_extended_stream_header 188,7342
static const guid_t asf_object_extended_stream_type_audio 191,7479
static const guid_t asf_guid_reserved_1 194,7620
static const guid_t asf_guid_reserved_2 197,7743
static const guid_t asf_no_error_correction_guid 201,7947
static const guid_t asf_guid_audio_conceal_spread 204,8079
static const guid_t asf_guid_mutex_language 208,8232
static const guid_t asf_guid_mutex_bitrate 211,8359
static const guid_t asf_guid_mutex_unknown 214,8485
static const guid_t nonasf_object_index_placeholder_guid 220,8691
static const guid_t nonasf_object_compatibility 223,8831
static const guid_t mfasf_sampleextension_sampleduration_guid 229,9114
static const guid_t mfasf_sampleextension_outputcleanpoint_guid 232,9259
static const guid_t mfasf_sampleextension_smtpe_guid 235,9406
static const guid_t mfasf_sampleextension_filename_guid 238,9542
static const guid_t mfasf_sampleextension_contenttype_guid 241,9681
static const guid_t mfasf_sampleextension_pixelaspectratio_guid 244,9823
static const guid_t mfasf_sampleextension_encryptionsampleid_guid 247,9970
static const guid_t mfasf_sampleextension_encryptionkeyid_guid 250,10119
static const guid_t asf_dvr_sampleextension_videoframe_guid 255,10278
static inline void ASF_GetGUID(261,10596

access/avio.h,29
#define AVIO_MODULE 32,1374

codec/schroedinger.c,7191
#define ENC_CFG_PREFIX 51,2113
#define ENC_CHROMAFMT 53,2151
#define ENC_CHROMAFMT_TEXT 54,2186
#define ENC_CHROMAFMT_LONGTEXT 55,2233
static const char *const enc_chromafmt_list[enc_chromafmt_list57,2385
static const char *const enc_chromafmt_list_text[enc_chromafmt_list_text59,2460
#define ENC_RATE_CONTROL 62,2559
#define ENC_RATE_CONTROL_TEXT 63,2599
#define ENC_RATE_CONTROL_LONGTEXT 64,2655
static const char *enc_rate_control_list[enc_rate_control_list66,2737
static const char *enc_rate_control_list_text[enc_rate_control_list_text76,2931
#define ENC_GOP_STRUCTURE 86,3199
#define ENC_GOP_STRUCTURE_TEXT 87,3241
#define ENC_GOP_STRUCTURE_LONGTEXT 88,3292
static const char *enc_gop_structure_list[enc_gop_structure_list90,3382
static const char *enc_gop_structure_list_text[enc_gop_structure_list_text99,3527
#define ENC_QUALITY 108,3965
#define ENC_QUALITY_TEXT 109,3995
#define ENC_QUALITY_LONGTEXT 110,4050
#define ENC_NOISE_THRESHOLD 112,4133
#define ENC_NOISE_THRESHOLD_TEXT 113,4179
#define ENC_NOISE_THRESHOLD_LONGTEXT 114,4234
#define ENC_BITRATE 116,4334
#define ENC_BITRATE_TEXT 117,4364
#define ENC_BITRATE_LONGTEXT 118,4414
#define ENC_MAX_BITRATE 120,4512
#define ENC_MAX_BITRATE_TEXT 121,4550
#define ENC_MAX_BITRATE_LONGTEXT 122,4608
#define ENC_MIN_BITRATE 124,4711
#define ENC_MIN_BITRATE_TEXT 125,4749
#define ENC_MIN_BITRATE_LONGTEXT 126,4807
#define ENC_AU_DISTANCE 128,4910
#define ENC_AU_DISTANCE_TEXT 129,4947
#define ENC_AU_DISTANCE_LONGTEXT 130,4993
#define ENC_PREFILTER 133,5126
#define ENC_PREFILTER_TEXT 134,5160
#define ENC_PREFILTER_LONGTEXT 135,5203
static const char *enc_filtering_list[enc_filtering_list137,5270
static const char *enc_filtering_list_text[enc_filtering_list_text146,5420
#define ENC_PREFILTER_STRENGTH 155,5652
#define ENC_PREFILTER_STRENGTH_TEXT 156,5698
#define ENC_PREFILTER_STRENGTH_LONGTEXT 157,5763
#define ENC_CODINGMODE 159,5849
#define ENC_CODINGMODE_TEXT 160,5886
#define ENC_CODINGMODE_LONGTEXT 161,5940
static const char *const enc_codingmode_list[enc_codingmode_list163,6120
static const char *const enc_codingmode_list_text[enc_codingmode_list_text165,6207
#define ENC_MCBLK_SIZE 172,6463
#define ENC_MCBLK_SIZE_TEXT 173,6506
static const char *enc_block_size_list[enc_block_size_list175,6576
static const char *const enc_block_size_list_text[enc_block_size_list_text181,6672
#define ENC_MCBLK_OVERLAP 189,6995
#define ENC_MCBLK_OVERLAP_TEXT 190,7044
static const char *enc_block_overlap_list[enc_block_overlap_list192,7120
static const char *const enc_block_overlap_list_text[enc_block_overlap_list_text198,7218
#define ENC_MVPREC 206,7538
#define ENC_MVPREC_TEXT 207,7572
#define ENC_MVPREC_LONGTEXT 208,7626
static const char *const enc_mvprec_list[enc_mvprec_list209,7692
#define ENC_ME_COMBINED 213,7797
#define ENC_ME_COMBINED_TEXT 214,7835
#define ENC_ME_COMBINED_LONGTEXT 215,7904
#define ENC_DWTINTRA 217,7996
#define ENC_DWTINTRA_TEXT 218,8033
#define ENC_DWTINTER 220,8091
#define ENC_DWTINTER_TEXT 221,8128
static const char *enc_wavelet_list[enc_wavelet_list223,8186
static const char *enc_wavelet_list_text[enc_wavelet_list_text233,8341
#define ENC_DWTDEPTH 243,8595
#define ENC_DWTDEPTH_TEXT 244,8634
#define ENC_DWTDEPTH_LONGTEXT 245,8691
#define ENC_MULTIQUANT 249,8781
#define ENC_MULTIQUANT_TEXT 250,8824
#define ENC_MULTIQUANT_LONGTEXT 251,8885
#define ENC_NOAC 254,9010
#define ENC_NOAC_TEXT 255,9044
#define ENC_NOAC_LONGTEXT 256,9098
#define ENC_PWT 260,9246
#define ENC_PWT_TEXT 261,9285
static const char *enc_perceptual_weighting_list[enc_perceptual_weighting_list263,9341
#define ENC_PDIST 271,9478
#define ENC_PDIST_TEXT 272,9518
#define ENC_PDIST_LONGTEXT 273,9567
#define ENC_HSLICES 276,9679
#define ENC_HSLICES_TEXT 277,9714
#define ENC_HSLICES_LONGTEXT 278,9773
#define ENC_VSLICES 281,9892
#define ENC_VSLICES_TEXT 282,9926
#define ENC_VSLICES_LONGTEXT 283,9983
#define ENC_SCBLK_SIZE 286,10100
#define ENC_SCBLK_SIZE_TEXT 287,10140
static const char *enc_codeblock_size_list[enc_codeblock_size_list289,10211
static const char *const enc_codeblock_size_list_text[enc_codeblock_size_list_text296,10321
#define ENC_ME_HIERARCHICAL 305,10654
#define ENC_ME_HIERARCHICAL_TEXT 306,10707
#define ENC_ME_DOWNSAMPLE_LEVELS 309,10812
#define ENC_ME_DOWNSAMPLE_LEVELS_TEXT 310,10865
#define ENC_ME_DOWNSAMPLE_LEVELS_LONGTEXT 311,10942
#define ENC_ME_GLOBAL_MOTION 314,11090
#define ENC_ME_GLOBAL_MOTION_TEXT 315,11138
#define ENC_ME_PHASECORR 318,11238
#define ENC_ME_PHASECORR_TEXT 319,11285
#define ENC_SCD 322,11385
#define ENC_SCD_TEXT 323,11414
#define ENC_FORCE_PROFILE 326,11499
#define ENC_FORCE_PROFILE_TEXT 327,11541
static const char *enc_profile_list[enc_profile_list329,11593
static const char *const enc_profile_list_text[enc_profile_list_text337,11707
static const char *const ppsz_enc_options[ppsz_enc_options345,11945
vlc_module_begin 359,12575
struct picture_free_t530,19536
   picture_t *p_pic;p_pic532,19560
   decoder_t *p_dec;p_dec533,19581
struct decoder_sys_t539,19816
    mtime_t i_lastpts;544,19878
    mtime_t i_frame_pts_delta;545,19901
    SchroDecoder *p_schro;p_schro546,19932
    SchroVideoFormat *p_format;p_format547,19959
static int OpenDecoder(553,20205
static void SetVideoFormat(600,21544
static void SchroFrameFree(644,23479
static SchroFrame *CreateSchroFrameFromPic(CreateSchroFrameFromPic659,23914
static void SchroBufferFree(722,26033
static void CloseDecoder(736,26405
static void Flush(748,26775
static picture_t *DecodeBlock(DecodeBlock767,27620
struct picture_pts_t888,32001
   mtime_t i_pts;890,32024
   uint32_t u_pnum;891,32066
   bool b_empty;892,32114
#define SCHRO_PTS_TLB_SIZE 898,32372
struct encoder_sys_t899,32403
    SchroEncoder *p_schro;p_schro904,32465
    SchroVideoFormat *p_format;p_format905,32492
    int started;906,32524
    bool b_auto_field_coding;907,32541
    uint32_t i_input_picnum;909,32572
    block_fifo_t *p_dts_fifo;p_dts_fifo910,32601
    block_t *p_chain;p_chain912,32632
    struct picture_pts_t pts_tlb[pts_tlb914,32655
    mtime_t i_pts_offset;915,32709
    mtime_t i_field_time;916,32735
    bool b_eos_signalled;918,32762
    bool b_eos_pulled;919,32788
    unsigned int i_height;924,32831
    int i_approx_fps;925,32858
    SchroVideoFormatEnum i_vf;926,32880
} schro_format_guess[schro_format_guess927,32911
static void ResetPTStlb(952,33976
static void StorePicturePTS(965,34402
static mtime_t GetPicturePTS(987,35125
static inline bool SchroSetEnum(1005,35589
static bool SetEncChromaFormat(1021,36208
#define SCHRO_SET_FLOAT(1048,36983
#define SCHRO_SET_INTEGER(1053,37200
#define SCHRO_SET_ENUM(1058,37439
static int OpenEncoder(1074,38105
struct enc_picture_free_t1315,46682
   picture_t *p_pic;p_pic1317,46710
   encoder_t *p_enc;p_enc1318,46731
static void EncSchroFrameFree(1326,47133
static SchroFrame *CreateSchroFrameFromInputPic(CreateSchroFrameFromInputPic1341,47578
static int ReadDiracPictureNumber(1398,49389
static block_t *Encode(Encode1421,50039
static void CloseEncoder(1602,57230

text_renderer/freetype/text_layout.h,806
    FT_BitmapGlyph p_glyph;38,1510
    FT_BitmapGlyph p_outline;39,1538
    FT_BitmapGlyph p_shadow;40,1568
    const text_style_t *p_style;p_style41,1597
    int            i_line_offset;42,1630
    int            i_line_thickness;43,1707
    bool           b_in_karaoke;44,1787
} line_character_t;45,1820
typedef struct line_desc_t line_desc_t;47,1841
struct line_desc_t48,1881
    line_desc_t      *p_next;p_next50,1902
    int              i_width;52,1933
    int              i_height;53,1963
    int              i_base_line;54,1994
    int              i_character_count;55,2028
    int              i_first_visible_char_index;56,2068
    int              i_last_visible_char_index;57,2117
    line_character_t *p_character;p_character58,2165
    FT_BBox          bbox;59,2200

demux/mpeg/ts_pid.h,1374
#define VLC_TS_PID_H20,1027
#define MIN_ES_PID 24,1074
#define MAX_ES_PID 25,1133
    TYPE_FREE 31,1198
    TYPE_CAT,32,1217
    TYPE_PAT,33,1231
    TYPE_PMT,34,1245
    TYPE_PES,35,1259
    TYPE_SI,36,1273
    TYPE_PSIP,37,1286
} ts_pid_type_t;38,1301
    FLAGS_NONE 42,1326
    FLAG_SEEN 43,1346
    FLAG_SCRAMBLED 44,1366
    FLAG_FILTERED 45,1390
#define SEEN(48,1416
#define SCRAMBLED(49,1459
struct ts_pid_t51,1512
    uint16_t    i_pid;53,1530
    uint8_t     i_flags;55,1554
    uint8_t     i_cc;56,1579
    uint8_t     type;57,1629
    uint16_t    i_refcount;59,1652
        ts_pat_t    *p_pat;p_pat64,1707
        ts_pmt_t    *p_pmt;p_pmt65,1735
        ts_pes_t    *p_pes;p_pes66,1763
        ts_si_t     *p_si;p_si67,1791
        ts_psip_t   *p_psip;p_psip68,1818
    } u;69,1847
        vlc_fourcc_t i_fourcc;73,1874
        int i_type;74,1905
        int i_pcr_count;75,1925
    } probed;76,1950
struct ts_pid_list_t80,1969
    ts_pid_t   pat;82,1992
    ts_pid_t   dummy;83,2012
    ts_pid_t   base_si;84,2034
    ts_pid_t **pp_all;pp_all86,2112
    int        i_all;87,2135
    int        i_all_alloc;88,2157
    uint16_t   i_last_pid;90,2214
    ts_pid_t  *p_last;p_last91,2241
    int i_pos;105,2550
} ts_pid_next_context_t;106,2565
#define ts_pid_NextContextInitValue 107,2590
#define GetPID(111,2767

codec/lpcm.c,1972
vlc_module_begin 56,2283
struct decoder_sys_t83,3118
    bool b_packetizer;86,3163
    date_t   end_date;91,3227
    unsigned i_header_size;94,3261
    int      i_type;95,3289
    uint8_t  i_chans_to_reorder;96,3310
    uint8_t  pi_chan_table[pi_chan_table97,3343
struct encoder_sys_t101,3409
    int     i_channels;103,3432
    int     i_rate;104,3456
    int     i_frame_samples;106,3477
    uint8_t *p_buffer;p_buffer107,3506
    int     i_buffer_used;108,3529
    int     i_frame_num;109,3556
#define LPCM_VOB_HEADER_LEN 158,5104
#define LPCM_AOB_HEADER_LEN 159,5136
#define LPCM_BD_HEADER_LEN 160,5169
#define LPCM_WIDI_HEADER_LEN 161,5200
    LPCM_VOB,165,5241
    LPCM_AOB,166,5255
    LPCM_BD,167,5269
    LPCM_WIDI,168,5282
    unsigned i_channels;173,5318
    unsigned i_bits;174,5343
    unsigned pi_position[pi_position175,5364
} aob_group_t;176,5393
static int OpenCommon(216,7142
static int OpenDecoder(306,9506
static int OpenPacketizer(310,9597
static void Flush(318,9860
static block_t *DecodeFrame(DecodeFrame330,10330
static void CloseCommon(502,15789
static int OpenEncoder(512,16131
static void CloseEncoder 570,18130
static block_t *EncodeFrames(EncodeFrames582,18538
static int VobHeader(676,21820
static const unsigned p_aob_group1[p_aob_group1761,24295
static const unsigned p_aob_group2[p_aob_group2784,25519
static int AobHeader(808,26640
static const uint32_t pi_8channels_in[pi_8channels_in914,30008
static const uint32_t pi_7channels_in[pi_7channels_in919,30214
static const uint32_t pi_6channels_in[pi_6channels_in924,30405
static const uint32_t pi_5channels_in[pi_5channels_in928,30564
static const uint32_t pi_4channels_in[pi_4channels_in932,30712
static const uint32_t pi_3channels_in[pi_3channels_in936,30838
static int BdHeader(941,30942
static int WidiHeader(1053,34482
static void VobExtract(1085,35193
static void AobExtract(1154,37714
static void BdExtract(1243,41069

mux/ogg.c,4221
#define INDEXINTVL_TEXT 47,1833
#define INDEXINTVL_LONGTEXT 48,1878
#define INDEXRATIO_TEXT 50,1998
#define INDEXRATIO_LONGTEXT 51,2045
#define SOUT_CFG_PREFIX 57,2238
vlc_module_begin 59,2275
#define FISBONE_BASE_SIZE 90,3576
#define FISBONE_BASE_OFFSET 91,3605
#define INDEX_BASE_SIZE 92,3636
#define PACKET_TYPE_HEADER 96,3723
#define PACKET_TYPE_COMMENT 97,3757
#define PACKET_IS_SYNCPOINT 98,3791
    int32_t i_width;102,3843
    int32_t i_height;103,3864
} oggds_header_video_t;104,3886
    int16_t i_channels;108,3928
    int16_t i_block_align;109,3952
    int32_t i_avgbytespersec;110,3979
} oggds_header_audio_t;111,4009
    uint8_t i_packet_type;115,4051
    char stream_type[stream_type117,4079
    char sub_type[sub_type118,4104
    int32_t i_size;120,4127
    int64_t i_time_unit;122,4148
    int64_t i_samples_per_unit;123,4173
    int32_t i_default_len;124,4205
    int32_t i_buffer_size;126,4233
    int16_t i_bits_per_sample;127,4260
    int16_t i_padding_0;129,4292
        oggds_header_video_t video;133,4389
        oggds_header_audio_t audio;134,4425
    } header;135,4461
    int32_t i_padding_1;137,4476
} oggds_header_t;139,4557
    int i_cat;146,4816
    vlc_fourcc_t i_fourcc;147,4831
    int b_new;149,4859
    mtime_t i_dts;151,4875
    mtime_t i_length;152,4894
    int     i_packet_no;153,4916
    int     i_serial_no;154,4941
    int     i_keyframe_granule_shift;155,4966
    int     i_last_keyframe;156,5032
    int     i_num_frames;157,5084
    uint64_t u_last_granulepos;158,5128
    int64_t i_num_keyframes;159,5192
    ogg_stream_state os;160,5221
    oggds_header_t *p_oggds_header;p_oggds_header162,5247
    bool b_started;163,5283
    bool b_finished;164,5303
         bool b_fisbone_done;168,5342
         bool b_index_done;169,5372
         unsigned char *p_index;p_index171,5438
         uint64_t i_index_size;172,5471
         uint64_t i_index_payload;173,5503
         uint64_t i_index_count;174,5560
         uint64_t i_index_offset;176,5653
         int64_t i_index_packetno;177,5724
         int i_index_pageno;178,5782
         uint64_t i_last_keyframe_pos;180,5857
         uint64_t i_last_keyframe_time;181,5896
    } skeleton;182,5936
    int             i_dirac_last_pt;184,5953
    int             i_dirac_last_dt;185,5990
    mtime_t         i_baseptsdelay;186,6027
} ogg_stream_t;188,6064
struct sout_mux_sys_t190,6081
    int     i_streams;192,6105
    mtime_t i_start_dts;194,6129
    int     i_next_serial_no;195,6154
    int i_add_streams;198,6241
    bool b_can_add_streams;199,6264
    int i_del_streams;202,6341
    ogg_stream_t **pp_del_streams;pp_del_streams203,6364
        bool b_create;208,6436
        int i_serial_no;209,6459
        int i_packet_no;210,6484
        ogg_stream_state os;211,6509
        bool b_head_done;212,6538
        uint64_t i_fishead_offset;214,6625
        int i_index_intvl;215,6699
        float i_index_ratio;216,6726
    } skeleton;217,6755
    ssize_t i_pos;220,6798
    ssize_t i_data_start;221,6817
    ssize_t i_segment_start;222,6843
static int Open(234,7397
static void Close(277,8851
static int Control(321,10234
static int AddStream(351,11127
static void DelStream(558,18215
static int WriteQWVariableLE(604,19676
static bool AddIndexEntry(628,20177
static block_t *OggStreamGetPage(OggStreamGetPage673,22129
static block_t *OggStreamFlush(OggStreamFlush701,22950
static block_t *OggStreamPageOut(OggStreamPageOut707,23135
static void OggGetSkeletonIndex(713,23325
static void OggGetSkeletonFisbone(728,24016
        char *psz_content_type;psz_content_type737,24328
        char *psz_role;psz_role738,24360
        long int i_size;739,24384
        unsigned int i_count;740,24409
static void OggFillSkeletonFishead(860,28596
static int32_t OggFillDsHeader(871,29067
static void OggFillVP8Header(925,31017
static bool OggCreateHeaders(936,31562
static void OggCreateStreamFooter(1310,46206
static void OggSetDate(1375,48693
static void OggRewriteFisheadPage(1399,49187
static bool AllocateIndex(1423,50113
static int Mux(1481,52261
static int MuxBlock(1578,55603
#define FRAME_ROUND(1655,58565

lua/extension.c,1349
# define _GNU_SOURCE25,1203
static const luaL_Reg p_reg[p_reg44,1512
static const char caps[caps53,1658
#define EXT_HAS_MENU 54,1691
#define EXT_TRIGGER_ONLY 56,1760
#define EXT_INPUT_LISTENER 58,1850
#define EXT_META_LISTENER 60,1938
#define EXT_PLAYING_LISTENER 62,2024
#define WATCH_TIMER_PERIOD 66,2119
int Open_Extension(99,3566
void Close_Extension(135,4594
static int ScanExtensions(199,6519
static int vlclua_dummy_require(219,7088
static int vlclua_extension_require(230,7355
int ScanLuaCallback(276,8817
static int Control(509,16244
int lua_ExtensionActivate(639,20923
int lua_ExtensionDeactivate(645,21120
int lua_ExtensionWidgetClick(677,21988
static int GetMenuEntries(701,22842
static lua_State* GetLuaState(798,25663
int lua_ExecuteFunction(890,28596
int lua_ExecuteFunctionVa(909,29281
static inline int TriggerMenu(982,31397
int lua_ExtensionTriggerMenu(987,31520
static int TriggerExtension(1048,33418
void vlclua_extension_set(1068,33949
extension_t *vlclua_extension_get(vlclua_extension_get1079,34269
int vlclua_extension_deactivate(1093,34761
int vlclua_extension_keep_alive(1104,35107
static int vlclua_extension_dialog_callback(1127,35831
static void inputItemMetaChanged(1167,37047
bool LockExtension(1179,37395
void UnlockExtension(1201,37952
static void WatchTimerCallback(1209,38151

hw/vdpau/instance.c,686
typedef struct vdp_instance35,1312
    Display *display;display37,1342
    vdp_t *vdp;vdp38,1364
    VdpDevice device;39,1380
    int num;41,1403
    char *name;name42,1442
    uintptr_t refs;44,1484
    struct vdp_instance *next;next45,1528
} vdp_instance_t;46,1559
static VdpStatus vdp_instance_create(48,1578
static void vdp_instance_destroy(90,2579
static int strnullcmp(99,2813
static int vicmp(108,2978
static vdp_instance_t *list list119,3215
static vdp_instance_t *vdp_instance_lookup(vdp_instance_lookup121,3252
static pthread_mutex_t lock 138,3602
VdpStatus vdp_get_x11(145,3908
vdp_t *vdp_hold_x11(vdp_hold_x11188,5006
void vdp_release_x11(211,5433

access/rar/rar.c,1458
static const uint8_t rar_marker[rar_marker41,1522
static const int rar_marker_size 44,1608
void RarFileDelete(46,1664
    uint16_t crc;58,1905
    uint8_t  type;59,1923
    uint16_t flags;60,1942
    uint16_t size;61,1962
    uint32_t add_size;62,1981
} rar_block_t;63,2004
    RAR_BLOCK_MARKER 66,2027
    RAR_BLOCK_MARKER = 0x72,x7266,2027
    RAR_BLOCK_ARCHIVE 67,2056
    RAR_BLOCK_ARCHIVE = 0x73,x7367,2056
    RAR_BLOCK_FILE 68,2086
    RAR_BLOCK_FILE = 0x74,x7468,2086
    RAR_BLOCK_SUBBLOCK 69,2113
    RAR_BLOCK_SUBBLOCK = 0x7a,x7a69,2113
    RAR_BLOCK_END 70,2144
    RAR_BLOCK_END = 0x7b,x7b70,2144
    RAR_BLOCK_END_HAS_NEXT 73,2180
    RAR_BLOCK_END_HAS_NEXT = 0x0001,x000173,2180
    RAR_BLOCK_FILE_HAS_PREVIOUS 76,2227
    RAR_BLOCK_FILE_HAS_PREVIOUS = 0x0001,x000176,2227
    RAR_BLOCK_FILE_HAS_NEXT 77,2269
    RAR_BLOCK_FILE_HAS_NEXT     = 0x0002,x000277,2269
    RAR_BLOCK_FILE_HAS_HIGH 78,2311
    RAR_BLOCK_FILE_HAS_HIGH     = 0x0100,x010078,2311
static int PeekBlock(81,2357
static int SkipBlock(106,2999
static int IgnoreBlock(120,3321
static int SkipEnd(129,3509
static int SkipFile(161,4325
int RarProbe(269,7514
    const char *match;match280,7790
    const char *format;format281,7813
    int start;282,7837
    int stop;283,7852
    bool b_extonly;284,7866
} rar_pattern_t;285,7886
static const rar_pattern_t *FindVolumePattern(FindVolumePattern287,7904
int RarParse(313,8807

visualization/glspectrum.c,1205
#define WIDTH_TEXT 55,1783
#define WIDTH_LONGTEXT 56,1820
#define HEIGHT_TEXT 58,1900
#define HEIGHT_LONGTEXT 59,1939
vlc_module_begin(61,2021
struct filter_sys_t79,2661
    vlc_thread_t thread;81,2683
    unsigned i_channels;84,2730
    block_fifo_t    *fifo;fifo85,2755
    unsigned i_prev_nb_samples;86,2782
    int16_t *p_prev_s16_buff;p_prev_s16_buff87,2814
    vlc_gl_t *gl;gl90,2862
    float f_rotationAngle;92,2881
    float f_rotationIncrement;93,2908
    window_param wind_param;96,2972
#define SPECTRUM_WIDTH 103,3083
#define NB_BANDS 104,3110
#define ROTATION_INCREMENT 105,3130
#define BAR_DECREMENT 106,3161
#define ROTATION_MAX 107,3189
const GLfloat lightZeroColor[lightZeroColor109,3214
const GLfloat lightZeroPosition[lightZeroPosition110,3273
static int Open(117,3443
static void Close(176,4997
static block_t *DoWork(DoWork198,5505
static void initOpenGLScene(210,5763
static void drawBar(242,6471
static void setBarColor(290,8035
#define BAR_MAX_HEIGHT 294,8094
#undef BAR_MAX_HEIGHT297,8213
static void drawBars(315,8530
static void *Thread(Thread346,9179
            union {float f;408,11494
            union {float f; int32_t i;408,11494

demux/smooth/playlist/Representation.hpp,262
#define SMOOTHREPRESENTATION_HPP21,1000
namespace adaptive26,1140
    namespace playlistadaptive::playlist28,1161
namespace smooth34,1232
    namespace playlistsmooth::playlist36,1251
        class Representation smooth::playlist::Representation41,1359

lua/extension.h,1175
#define LUA_EXTENSION_H25,1207
    CMD_ACTIVATE 34,1357
    CMD_DEACTIVATE,35,1379
    CMD_TRIGGERMENU,36,1399
    CMD_CLICK,37,1474
    CMD_CLOSE,38,1531
    CMD_SET_INPUT,39,1546
    CMD_UPDATE_META,40,1618
    CMD_PLAYING_CHANGED 41,1700
} command_type_e;42,1763
    LUA_END 47,1810
    LUA_NUM,48,1827
    LUA_TEXT49,1840
} lua_datatype_e;50,1853
struct extensions_manager_sys_t52,1872
    DECL_ARRAY(55,1945
struct extension_sys_t64,2140
    int i_capabilities;67,2193
    lua_State *L;L70,2241
    vlclua_dtable_t dtable;72,2260
    vlc_thread_t thread;75,2311
    vlc_mutex_t command_lock;76,2336
    vlc_mutex_t running_lock;77,2366
    vlc_cond_t wait;78,2396
    struct input_thread_t *p_input;p_input82,2535
    extensions_manager_t *p_mgr;p_mgr84,2572
    struct command_t86,2660
        command_type_e i_command;88,2687
        void *data[data89,2721
        struct command_t *next;next90,2783
    } *command;command91,2833
    vlc_dialog_id *p_progress_id;p_progress_id94,2914
    vlc_timer_t timer;95,2948
    bool b_exiting;97,3024
static inline int PushCommand(106,3430
static inline int PushCommandUnique(114,3637

video_chroma/i420_rgb16_x86.c,266
# define VLC_TARGET 36,1423
# define VLC_TARGET 39,1484
static void SetOffset(48,1960
void I420_R5G5B5(103,3493
void I420_R5G6B5(335,11314
void I420_A8R8G8B8(567,19133
void I420_R8G8B8A8(798,27006
void I420_B8G8R8A8(1028,34839
void I420_A8B8G8R8(1255,42598

demux/sid.cpp,589
struct demux_sys_t60,2087
    sidplay2 *player;demux_sys_t::player62,2108
    sid2_config_t config;demux_sys_t::config63,2130
    sid2_info_t info;demux_sys_t::info64,2156
    SidTune *tune;demux_sys_t::tune65,2178
    SidTuneInfo tuneInfo;demux_sys_t::tuneInfo66,2197
    int bytes_per_frame;demux_sys_t::bytes_per_frame68,2224
    int block_size;demux_sys_t::block_size69,2249
    es_out_id_t *es;demux_sys_t::es70,2269
    date_t pts;demux_sys_t::pts71,2290
static int Open 78,2388
static void Close 191,5419
static int Demux 202,5636
static int Control 233,6350

access/rar/rar.h,395
    char     *mrl;mrl25,1185
    uint64_t offset;26,1204
    uint64_t size;27,1225
    uint64_t cummulated_size;28,1244
} rar_file_chunk_t;29,1274
    char     *name;name32,1312
    uint64_t size;33,1332
    bool     is_complete;34,1351
    int              chunk_count;36,1378
    rar_file_chunk_t **chunk;chunk37,1412
    uint64_t         real_size;38,1442
} rar_file_t;39,1495

audio_output/wasapi.c,1117
# undef _WIN32_WINNT22,1137
# define _WIN32_WINNT 23,1158
#define INITGUID30,1244
#define COBJMACROS31,1261
#define CONST_VTABLE32,1280
#define NONEWWAVE33,1301
static BOOL CALLBACK InitFreq(66,2337
static LARGE_INTEGER freq;72,2496
static UINT64 GetQPC(74,2561
typedef struct aout_stream_sys85,2810
    IAudioClient *client;client87,2843
    uint8_t chans_table[chans_table89,2870
    uint8_t chans_to_reorder;90,2910
    vlc_fourcc_t format;92,2941
    unsigned rate;93,2988
    unsigned block_align;94,3027
    UINT64 written;95,3053
    UINT32 frames;96,3110
} aout_stream_sys_t;97,3164
static HRESULT TimeGet(101,3224
static HRESULT Play(140,4259
static HRESULT Pause(209,6149
static HRESULT Flush(224,6514
static const uint32_t chans_out[chans_out244,6911
static const uint32_t chans_in[chans_in250,7155
static void vlc_HdmiToWave(257,7399
static void vlc_SpdifToWave(296,8835
static void vlc_ToWave(330,10020
static int vlc_FromWave(370,11374
static unsigned vlc_CheckWaveOrder 427,13015
static HRESULT Start(441,13397
static void Stop(573,17513
vlc_module_begin(583,17709

demux/rawdv.c,904
#define HURRYUP_TEXT 42,1738
#define HURRYUP_LONGTEXT 43,1776
vlc_module_begin 49,1984
    int8_t sct;79,3221
    int8_t dsn;80,3294
    int    fsc;81,3348
    int8_t dbn;82,3404
} dv_id_t;83,3456
    int    dsf;86,3485
    int8_t apt;87,3556
    int    tf1;88,3572
    int8_t ap1;89,3588
    int    tf2;90,3604
    int8_t ap2;91,3620
    int    tf3;92,3636
    int8_t ap3;93,3652
} dv_header_t;94,3668
struct demux_sys_t96,3684
    int    frame_size;98,3705
    es_out_id_t *p_es_video;p_es_video100,3729
    es_format_t  fmt_video;101,3758
    es_out_id_t *p_es_audio;p_es_audio103,3787
    es_format_t  fmt_audio;104,3816
    int    i_dsf;106,3845
    double f_rate;107,3863
    int    i_bitrate;108,3882
    mtime_t i_pcr;111,3959
    bool b_hurry_up;112,3978
static int Open(124,4478
static void Close(239,8140
static int Demux(253,8680
static int Control(303,9968

control/dbus/dbus_common.h,1979
#define VLC_DBUS_DBUS_COMMON_H_30,1436
#define DBUS_MPRIS_OBJECT_PATH 36,1544
#define INTF 40,1616
#define PL 41,1655
#define DBUS_METHOD(43,1695
#define DBUS_SIGNAL(47,1858
#define REPLY_INIT 51,2000
#define REPLY_SEND 55,2150
#define SIGNAL_INIT(62,2392
#define SIGNAL_SEND 67,2590
#define OUT_ARGUMENTS 74,2833
#define DBUS_ADD(78,2936
#define ADD_STRING(82,3094
#define ADD_DOUBLE(83,3150
#define ADD_BOOL(84,3206
#define ADD_INT32(85,3261
#define ADD_INT64(86,3315
#define ADD_BYTE(87,3369
#define MPRIS_TRACKID_FORMAT 89,3422
struct intf_sys_t91,3484
    DBusConnection *p_conn;p_conn93,3504
    playlist_t     *p_playlist;p_playlist94,3532
    bool            b_meta_read;95,3564
    dbus_int32_t    i_player_caps;96,3597
    dbus_int32_t    i_playing_state;97,3632
    bool            b_can_play;98,3669
    bool            b_dead;99,3701
    vlc_array_t    *p_events;p_events100,3729
    vlc_array_t    *p_timeouts;p_timeouts101,3759
    vlc_array_t    *p_watches;p_watches102,3791
    int             p_pipe_fds[p_pipe_fds103,3822
    vlc_mutex_t     lock;104,3857
    vlc_thread_t    thread;105,3883
    input_thread_t *p_input;p_input106,3911
    mtime_t         i_last_input_pos;108,3941
    mtime_t         i_last_input_pos_event;109,4015
    SIGNAL_NONE=114,4090
    SIGNAL_ITEM_CURRENT,115,4109
    SIGNAL_INTF_CHANGE,116,4134
    SIGNAL_PLAYLIST_ITEM_APPEND,117,4158
    SIGNAL_PLAYLIST_ITEM_DELETED,118,4191
    SIGNAL_INPUT_METADATA,119,4225
    SIGNAL_RANDOM,120,4252
    SIGNAL_REPEAT,121,4271
    SIGNAL_LOOP,122,4290
    SIGNAL_STATE,123,4307
    SIGNAL_RATE,124,4325
    SIGNAL_SEEK,125,4342
    SIGNAL_CAN_SEEK,126,4359
    SIGNAL_CAN_PAUSE,127,4380
    SIGNAL_VOLUME_CHANGE,128,4402
    SIGNAL_VOLUME_MUTED,129,4428
    SIGNAL_FULLSCREEN130,4453
    PLAYBACK_STATE_INVALID 135,4486
    PLAYBACK_STATE_PLAYING 136,4519
    PLAYBACK_STATE_PAUSED 137,4551
    PLAYBACK_STATE_STOPPED 138,4583

text_renderer/svg.c,1018
typedef struct svg_rendition_t svg_rendition_t;45,1688
#define TEMPLATE_TEXT 61,2421
#define TEMPLATE_LONGTEXT 62,2469
vlc_module_begin 65,2590
struct svg_rendition_t77,2948
    int            i_width;79,2973
    int            i_height;80,3001
    int            i_chroma;81,3030
    char           *psz_text;psz_text83,3117
    GdkPixbuf      *p_rendition;p_rendition85,3190
struct filter_sys_t102,4039
    char          *psz_template;psz_template105,4112
    int            i_width;107,4215
    int            i_height;108,4243
static int Create(116,4625
static char *svg_GetTemplate(svg_GetTemplate146,5315
static void Destroy(224,7887
static int Render(237,8289
#define INDEX_IN(330,11366
#define INDEX_OUT(331,11430
#define R(342,11702
#define G(343,11728
#define B(344,11760
#define ALPHA(345,11792
static void svg_set_size(368,12598
static void svg_SizeCallback(374,12747
static void svg_RenderPicture(383,12947
static int RenderText(425,14125
static void FreeString(492,16272

demux/rawdv.h,430
#define DV_PAL_FRAME_SIZE 25,1231
#define DV_NTSC_FRAME_SIZE 26,1274
static const uint16_t dv_audio_shuffle525[dv_audio_shuffle52529,1319
static const uint16_t dv_audio_shuffle625[dv_audio_shuffle62543,1833
static inline uint16_t dv_audio_12to16(59,2527
static inline void dv_get_audio_format(79,3007
static inline int dv_get_audio_sample_count(102,3594
static inline block_t *dv_extract_audio(dv_extract_audio117,4014

meta_engine/ID3Meta.h,359
#define ID3META_H21,1078
#define vlc_meta_extra 26,1145
    uint32_t i_tag;29,1192
    vlc_meta_type_t type;30,1212
    const char *psz;psz31,1238
} const ID3_tag_to_metatype[ID3_tag_to_metatype32,1259
#undef vlc_meta_extra44,2030
static bool ID3TextTagHandler(46,2053
static bool ID3LinkFrameTagHandler(104,3932
static bool ID3HandleTag(129,4839

demux/voc.c,676
vlc_module_begin 42,1740
struct demux_sys_t56,2232
    es_format_t     fmt;58,2253
    es_out_id_t     *p_es;p_es59,2278
    int64_t         i_block_start;61,2306
    int64_t         i_block_end;62,2341
    int64_t         i_loop_offset;64,2375
    unsigned        i_loop_count;65,2410
    unsigned        i_silence_countdown;66,2444
    date_t          pts;68,2486
static const char ct_header[ct_header71,2515
static int Open(76,2781
static int fmtcmp(130,4277
static unsigned int fix_voc_sr(143,4703
static int ReadBlockHeader(161,4990
#define MAX_READ_FRAME 465,16157
static int Demux(466,16185
static void Close 523,18077
static int Control(533,18371

audio_filter/converter/tospdif.c,1186
vlc_module_begin 46,1657
struct filter_sys_t54,1921
    block_t *p_out_buf;p_out_buf56,1943
    size_t i_out_offset;57,1967
            unsigned int i_nb_blocks_substream0;63,2034
        } eac3;64,2083
            unsigned int i_frame_count;67,2124
        } truehd;68,2164
    } spec;69,2182
#define SPDIF_HEADER_SIZE 72,2198
#define IEC61937_AC3 74,2227
#define IEC61937_EAC3 75,2253
#define IEC61937_TRUEHD 76,2280
#define IEC61937_DTS1 77,2309
#define IEC61937_DTS2 78,2336
#define IEC61937_DTS3 79,2363
#define SPDIF_MORE_DATA 81,2391
#define SPDIF_SUCCESS 82,2417
#define SPDIF_ERROR 83,2451
static bool is_big_endian(85,2485
static inline void write_16(102,2938
static void write_padding(110,3158
static void write_data(122,3523
static void write_buffer(150,4439
static int write_init(157,4695
static void write_finalize(176,5340
static int write_buffer_ac3(201,6309
static int write_buffer_eac3(227,7288
static int write_buffer_truehd(280,9154
#define TRUEHD_FRAME_OFFSET 282,9228
static int write_buffer_dts(350,11736
static void Flush(390,13063
static block_t *DoWork(DoWork402,13329
static int Open(445,14476
static void Close(472,15378

video_filter/freeze.c,674
#   define MOD(39,1507
struct filter_sys_t 42,1560
    bool b_init;43,1582
    int32_t i_planes;45,1600
    int32_t *i_height;i_height46,1622
    int32_t *i_width;i_width47,1645
    int32_t *i_visible_pitch;i_visible_pitch48,1667
    int8_t  ***pi_freezed_picture;pi_freezed_picture49,1697
    int16_t **pi_freezing_countdown;pi_freezing_countdown50,1763
    bool    **pb_update_cache;pb_update_cache51,1829
#define CFG_PREFIX 71,2542
vlc_module_begin(76,2647
static void Close(132,4297
static picture_t *Filter(Filter144,4557
static int freeze_mouse(224,7341
static int freeze_allocate_data(282,9385
static void freeze_free_allocated_data(386,12773

codec/dvbsub.c,5952
#define POSX_TEXT 83,3877
#define POSX_LONGTEXT 84,3923
#define POSY_TEXT 86,3990
#define POSY_LONGTEXT 87,4036
#define POS_TEXT 89,4103
#define POS_LONGTEXT 90,4146
#define ENC_POSX_TEXT 95,4357
#define ENC_POSX_LONGTEXT 96,4407
#define ENC_POSY_TEXT 97,4477
#define ENC_POSY_LONGTEXT 98,4527
static const int pi_pos_values[pi_pos_values100,4598
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions101,4665
#   define DVBSUB_CFG_PREFIX 120,5397
    set_description(121,5436
#   define ENC_CFG_PREFIX 134,5996
typedef struct dvbsub_objectdef_s154,6857
    int i_id;156,6893
    int i_type;157,6907
    int i_x;158,6923
    int i_y;159,6936
    int i_fg_pc;160,6949
    int i_bg_pc;161,6966
    char *psz_text;psz_text162,6983
} dvbsub_objectdef_t;164,7043
    uint8_t                 Y;169,7119
    uint8_t                 Cr;170,7150
    uint8_t                 Cb;171,7182
    uint8_t                 T;172,7214
} dvbsub_color_t;174,7246
typedef struct dvbsub_display_s177,7303
    uint8_t                 i_id;179,7337
    uint8_t                 i_version;180,7371
    int                     i_width;182,7411
    int                     i_height;183,7448
    bool                    b_windowed;185,7487
    int                     i_x;187,7580
    int                     i_y;188,7613
    int                     i_max_x;189,7646
    int                     i_max_y;190,7683
} dvbsub_display_t;192,7721
typedef struct dvbsub_clut_s195,7756
    uint8_t                 i_id;197,7787
    uint8_t                 i_version;198,7821
    dvbsub_color_t          c_2b[c_2b199,7860
    dvbsub_color_t          c_4b[c_4b200,7897
    dvbsub_color_t          c_8b[c_8b201,7935
    struct dvbsub_clut_s    *p_next;p_next203,7975
} dvbsub_clut_t;205,8013
typedef struct dvbsub_region_s209,8143
    int i_id;211,8176
    int i_version;212,8190
    int i_x;213,8209
    int i_y;214,8222
    int i_width;215,8235
    int i_height;216,8252
    int i_level_comp;217,8270
    int i_depth;218,8292
    int i_clut;219,8309
    uint8_t *p_pixbuf;p_pixbuf221,8326
    int                    i_object_defs;223,8350
    dvbsub_objectdef_t     *p_object_defs;p_object_defs224,8392
    struct dvbsub_region_s *p_next;p_next226,8436
} dvbsub_region_t;228,8473
typedef struct dvbsub_regiondef_s231,8566
    int i_id;233,8602
    int i_x;234,8616
    int i_y;235,8629
} dvbsub_regiondef_t;237,8643
    int i_id;242,8734
    int i_timeout;243,8748
    int i_state;244,8784
    int i_version;245,8801
    int                i_region_defs;247,8821
    dvbsub_regiondef_t *p_region_defs;p_region_defs248,8859
} dvbsub_page_t;250,8899
struct decoder_sys_t252,8917
    bs_t               bs;254,8940
    int                i_id;257,9000
    int                i_ancillary_id;258,9029
    mtime_t            i_pts;259,9068
    bool               b_absolute;261,9099
    int                i_spu_position;262,9134
    int                i_spu_x;263,9173
    int                i_spu_y;264,9205
    bool               b_page;266,9238
    dvbsub_page_t      *p_page;p_page267,9269
    dvbsub_region_t    *p_regions;p_regions268,9301
    dvbsub_clut_t      *p_cluts;p_cluts269,9336
    dvbsub_display_t   display;271,9415
    dvbsub_clut_t      default_clut;272,9447
#define DVBSUB_ST_PAGE_COMPOSITION 278,9566
#define DVBSUB_ST_REGION_COMPOSITION 279,9611
#define DVBSUB_ST_CLUT_DEFINITION 280,9656
#define DVBSUB_ST_OBJECT_DATA 281,9701
#define DVBSUB_ST_DISPLAY_DEFINITION 282,9746
#define DVBSUB_ST_ENDOFDISPLAY 283,9791
#define DVBSUB_ST_STUFFING 284,9836
#define DVBSUB_OT_BASIC_BITMAP 287,9957
#define DVBSUB_OT_BASIC_CHAR 288,10002
#define DVBSUB_OT_COMPOSITE_STRING 289,10047
#define DVBSUB_DT_2BP_CODE_STRING 292,10154
#define DVBSUB_DT_4BP_CODE_STRING 293,10199
#define DVBSUB_DT_8BP_CODE_STRING 294,10244
#define DVBSUB_DT_24_TABLE_DATA 295,10289
#define DVBSUB_DT_28_TABLE_DATA 296,10334
#define DVBSUB_DT_48_TABLE_DATA 297,10379
#define DVBSUB_DT_END_LINE 298,10424
#define DVBSUB_PCS_STATE_ACQUISITION 301,10569
#define DVBSUB_PCS_STATE_CHANGE 302,10614
static int Open(326,11718
static void Close(381,13340
static void Flush(397,13846
static subpicture_t *Decode(Decode407,14136
static void default_clut_init(491,16558
#define RGB_TO_Y(496,16667
#define RGB_TO_U(497,16738
#define RGB_TO_V(498,16810
static void decode_segment(551,18322
static void decode_clut(657,20858
static void decode_page_composition(769,23998
static void decode_region_composition(861,26773
static void decode_display_definition(1001,31086
static void decode_object(1073,33688
static void dvbsub_render_pdata(1210,38228
static void dvbsub_pdata2bpp(1270,39835
static void dvbsub_pdata4bpp(1336,41605
static void dvbsub_pdata8bpp(1408,43536
static void free_all(1457,44660
static subpicture_t *render(render1492,45626
typedef struct encoder_region_t1680,52466
    int i_width;1682,52500
    int i_height;1683,52517
} encoder_region_t;1685,52536
struct encoder_sys_t1687,52557
    unsigned int i_page_ver;1689,52580
    unsigned int i_region_ver;1690,52609
    unsigned int i_clut_ver;1691,52640
    int i_regions;1693,52670
    encoder_region_t *p_regions;p_regions1694,52689
    mtime_t i_pts;1696,52723
    int i_offset_x;1699,52776
    int i_offset_y;1700,52796
static int OpenEncoder(1712,53334
static subpicture_t *YuvaYuvp(YuvaYuvp1749,54401
static block_t *Encode(Encode1957,62115
static void CloseEncoder(2062,65657
static void encode_page_composition(2075,66020
static void encode_clut(2156,69019
static void encode_region_composition(2207,70759
static void encode_object(2282,73538
static void encode_pixel_data(2371,76673
static void encode_pixel_line_2bp(2414,77900
static void encode_pixel_line_4bp(2505,80407
static void encode_pixel_line_8bp(2603,83137
static void default_dds_init(2664,84715

demux/adaptive/logic/AlwaysLowestAdaptationLogic.hpp,215
#define ALWAYSLOWESTADAPTATIONLOGIC_HPP21,1029
namespace adaptive25,1108
    namespace logicadaptive::logic27,1129
        class AlwaysLowestAdaptationLogic adaptive::logic::AlwaysLowestAdaptationLogic29,1155

audio_output/kai.c,1360
#define FRAME_SIZE 38,1454
#define AUDIO_BUFFER_SIZE_IN_SECONDS 40,1479
struct audio_buffer_t42,1556
    uint8_t    *data;data44,1580
    int         read_pos;45,1602
    int         write_pos;46,1628
    int         length;47,1655
    int         size;48,1679
    vlc_mutex_t mutex;49,1701
    vlc_cond_t  cond;50,1724
typedef struct audio_buffer_t audio_buffer_t;53,1750
struct aout_sys_t61,2210
    audio_buffer_t *buffer;buffer63,2230
    HKAI            hkai;64,2258
    float           soft_gain;65,2284
    bool            soft_mute;66,2315
    audio_sample_format_t format;67,2346
#define KAI_AUDIO_DEVICE_TEXT 92,3375
#define KAI_AUDIO_DEVICE_LONGTEXT 94,3426
#define KAI_AUDIO_EXCLUSIVE_MODE_TEXT 97,3523
#define KAI_AUDIO_EXCLUSIVE_MODE_LONGTEXT 99,3605
static const char *const ppsz_kai_audio_device[ppsz_kai_audio_device103,3755
static const char *const ppsz_kai_audio_device_text[ppsz_kai_audio_device_text105,3840
vlc_module_begin 108,3935
static void Play 235,8075
static void Stop 249,8487
static ULONG APIENTRY KaiCallback(262,8868
static int Open 276,9292
static void Close(291,9628
static void Pause(299,9771
static void Flush(311,9991
static int TimeGet(331,10400
static int CreateBuffer(347,10816
static void DestroyBuffer(373,11254
static int ReadBuffer(384,11485
static int WriteBuffer(418,12271

codec/omxil/mediacodec_jni.c,3972
#define THREAD_NAME 43,1611
#define BUFFER_FLAG_CODEC_CONFIG 45,1649
#define BUFFER_FLAG_END_OF_STREAM 46,1685
#define INFO_OUTPUT_BUFFERS_CHANGED 47,1721
#define INFO_OUTPUT_FORMAT_CHANGED 48,1760
#define INFO_TRY_AGAIN_LATER 49,1799
struct jfields55,2021
    jclass media_codec_list_class,57,2038
    jclass media_codec_list_class, media_codec_class,57,2038
    jclass media_codec_list_class, media_codec_class, media_format_class;57,2038
    jclass buffer_info_class,58,2112
    jclass buffer_info_class, byte_buffer_class;58,2112
    jmethodID tostring;59,2161
    jmethodID get_codec_count,60,2185
    jmethodID get_codec_count, get_codec_info_at,60,2185
    jmethodID get_codec_count, get_codec_info_at, is_encoder,60,2185
    jmethodID get_codec_count, get_codec_info_at, is_encoder, get_capabilities_for_type;60,2185
    jfieldID profile_levels_field,61,2274
    jfieldID profile_levels_field, profile_field,61,2274
    jfieldID profile_levels_field, profile_field, level_field;61,2274
    jmethodID get_supported_types,62,2337
    jmethodID get_supported_types, get_name;62,2337
    jmethodID create_by_codec_name,63,2382
    jmethodID create_by_codec_name, configure,63,2382
    jmethodID create_by_codec_name, configure, start,63,2382
    jmethodID create_by_codec_name, configure, start, stop,63,2382
    jmethodID create_by_codec_name, configure, start, stop, flush,63,2382
    jmethodID create_by_codec_name, configure, start, stop, flush, release;63,2382
    jmethodID get_output_format;64,2458
    jmethodID get_input_buffers,65,2491
    jmethodID get_input_buffers, get_input_buffer;65,2491
    jmethodID get_output_buffers,66,2542
    jmethodID get_output_buffers, get_output_buffer;66,2542
    jmethodID dequeue_input_buffer,67,2595
    jmethodID dequeue_input_buffer, dequeue_output_buffer,67,2595
    jmethodID dequeue_input_buffer, dequeue_output_buffer, queue_input_buffer;67,2595
    jmethodID release_output_buffer;68,2674
    jmethodID create_video_format,69,2711
    jmethodID create_video_format, create_audio_format;69,2711
    jmethodID set_integer,70,2767
    jmethodID set_integer, set_bytebuffer,70,2767
    jmethodID set_integer, set_bytebuffer, get_integer;70,2767
    jmethodID buffer_info_ctor;71,2823
    jfieldID size_field,72,2855
    jfieldID size_field, offset_field,72,2855
    jfieldID size_field, offset_field, pts_field,72,2855
    jfieldID size_field, offset_field, pts_field, flags_field;72,2855
static struct jfields jfields;74,2921
enum Types76,2953
    METHOD,78,2966
    METHOD, STATIC_METHOD,78,2966
    METHOD, STATIC_METHOD, FIELD78,2966
#define OFF(81,3003
struct classname82,3046
    const char *name;name84,3065
    int offset;85,3087
static const struct classname classes[classes87,3106
struct member97,3550
    const char *name;name99,3566
    const char *sig;sig100,3588
    int offset;102,3632
    int type;103,3648
    bool critical;104,3662
static const struct member members[members106,3684
static int jstrcmp(151,7861
static inline bool check_exception(162,8208
#define CHECK_EXCEPTION(172,8398
#define GET_ENV(173,8447
static inline jstring jni_new_string(175,8541
#define JNI_NEW_STRING(180,8728
static inline int get_integer(182,8796
#define GET_INTEGER(198,9301
static inline void set_integer(200,9361
#define SET_INTEGER(210,9686
InitJNIFields 215,9859
struct mc_api_sys301,12544
    jobject codec;303,12564
    jobject buffer_info;304,12583
    jobject input_buffers,305,12608
    jobject input_buffers, output_buffers;305,12608
char* MediaCodec_GetName(311,12836
static int Stop(447,17929
static int Start(494,19261
static int Flush(657,25401
static int DequeueInput(676,25904
static int QueueInput(701,26603
static int DequeueOutput(756,28442
static int GetOutput(784,29394
static int ReleaseOutput(915,34553
static void Clean(937,35171
static int Configure(946,35426
int MediaCodecJni_Init(961,36025

codec/avcodec/directx_va.c,1182
#define COBJMACROS37,1499
static const int PROF_MPEG2_SIMPLE[PROF_MPEG2_SIMPLE45,1644
static const int PROF_MPEG2_MAIN[PROF_MPEG2_MAIN46,1715
static const int PROF_H264_HIGH[PROF_H264_HIGH48,1850
static const int PROF_HEVC_MAIN[PROF_HEVC_MAIN51,2060
static const int PROF_HEVC_MAIN10[PROF_HEVC_MAIN1052,2128
#define MS_GUID(62,2536
#  undef MS_GUID68,2682
#  define MS_GUID 69,2699
#  define DXVA2_E_NEW_VIDEO_DEVICE 70,2789
    const char   *name;name149,10562
    const GUID   *guid;guid150,10586
    int          codec;151,10610
    const int    *p_profiles;p_profiles152,10634
} directx_va_mode_t;153,10687
static const directx_va_mode_t DXVA_MODES[DXVA_MODES156,10750
char *directx_va_GetDecoderName(directx_va_GetDecoderName259,20664
int directx_va_Setup(273,21039
#define ALIGN(321,22488
void DestroyVideoDecoder(360,23922
int directx_va_Get(379,24450
void directx_va_Release(418,25698
void directx_va_Close(431,25974
int directx_va_Open(444,26304
static bool profile_supported(493,27521
void DestroyVideoService(526,28503
static int FindVideoServiceConversion(536,28747
void DestroyDeviceManager(591,30551
void DestroyDevice(596,30662

video_filter/deinterlace/helpers.c,359
static void FieldFromPlane(73,2752
#define T 97,3534
static int TestForMotionInBlock(122,4649
static int TestForMotionInBlockMMX(178,6271
#undef T248,8369
void ComposeFrame(255,8594
int EstimateNumBlocksWithMotion(382,14121
#define T 450,16377
static int CalculateInterlaceScoreMMX(454,16426
int CalculateInterlaceScore(586,21037
#undef T676,24230

demux/vobsub.c,1299
vlc_module_begin 50,1900
    int     i_line_count;67,2365
    int     i_line;68,2391
    char    **line;line69,2411
} text_t;70,2431
    int64_t i_start;74,2459
    int     i_vobsub_location;75,2480
} subtitle_t;76,2511
    es_out_id_t *p_es;p_es80,2543
    int         i_track_id;81,2566
    int         i_current_subtitle;83,2595
    int         i_subtitles;84,2631
    subtitle_t  *p_subtitles;p_subtitles85,2660
    int64_t     i_delay;87,2691
} vobsub_track_t;88,2716
struct demux_sys_t90,2735
    int64_t        i_next_demux_date;92,2756
    int64_t        i_length;93,2794
    text_t         txt;95,2824
    stream_t       *p_vobsub_stream;p_vobsub_stream96,2848
    int            i_tracks;99,2907
    vobsub_track_t *track;track100,2936
    int            i_original_frame_width;102,2964
    int            i_original_frame_height;103,3007
    bool           b_palette;104,3051
    uint32_t       palette[palette105,3081
static int Open 120,3549
static void Close(217,6334
static int Control(235,6900
static int Demux(350,11104
#define tk 358,11277
#undef tk419,13329
static int TextLoad(428,13408
static void TextUnload(462,14082
static char *TextGetLine(TextGetLine472,14282
static int ParseVobSubIDX(480,14432
static int DemuxVobSub(648,20523

codec/png.c,666
#define PNG_SYS_COMMON_MEMBERS 39,1579
struct png_sys_t48,1922
    PNG_SYS_COMMON_MEMBERS50,1941
typedef struct png_sys_t png_sys_t;53,1972
struct decoder_sys_t58,2210
    PNG_SYS_COMMON_MEMBERS60,2233
struct encoder_sys_t74,2630
    int i_blocksize;77,2680
vlc_module_begin 88,3025
static void user_read(135,4415
static void user_flush(148,4789
static void user_write(154,4871
static void user_error(171,5423
static void user_warning(178,5636
static picture_t *DecodeBlock(DecodeBlock189,6159
static void CloseDecoder(315,9999
static int OpenEncoder(323,10158
static block_t *EncodeBlock(EncodeBlock349,10806
static void CloseEncoder(436,13172

demux/nsc.c,270
#define MAX_LINE 38,1592
vlc_module_begin 46,1883
static int load_byte(72,3095
static char *nscdec(nscdec143,4783
static int DemuxOpen(233,6754
static void DemuxClose(266,7813
static int ParseLine 272,7903
static int Demux 321,9422
static int Control(333,9661

visualization/visual/window_presets.h,201
#define VLC_VISUAL_WINDOW_PRESETS_H_25,1232
#define NB_WINDOWS 29,1377
static const char * const window_list[window_list30,1398
static const char * const window_list_text[window_list_text33,1514

video_output/opengl.c,5958
# define GL_CLAMP_TO_EDGE 44,1715
#   define PFNGLGETPROGRAMIVPROC 48,1801
#   define PFNGLGETPROGRAMINFOLOGPROC 49,1870
#   define PFNGLGETSHADERIVPROC 50,1944
#   define PFNGLGETSHADERINFOLOGPROC 51,2012
#   define PFNGLGETUNIFORMLOCATIONPROC 52,2085
#   define PFNGLGETATTRIBLOCATIONPROC 53,2160
#   define PFNGLVERTEXATTRIBPOINTERPROC 54,2234
#   define PFNGLENABLEVERTEXATTRIBARRAYPROC 55,2310
#   define PFNGLUNIFORMMATRIX4FVPROC 56,2390
#   define PFNGLUNIFORM4FVPROC 57,2463
#   define PFNGLUNIFORM4FPROC 58,2530
#   define PFNGLUNIFORM1IPROC 59,2596
#   define PFNGLCREATESHADERPROC 60,2662
#   define PFNGLSHADERSOURCEPROC 61,2731
#   define PFNGLCOMPILESHADERPROC 62,2800
#   define PFNGLDELETESHADERPROC 63,2870
#   define PFNGLCREATEPROGRAMPROC 64,2939
#   define PFNGLLINKPROGRAMPROC 65,3009
#   define PFNGLUSEPROGRAMPROC 66,3077
#   define PFNGLDELETEPROGRAMPROC 67,3144
#   define PFNGLATTACHSHADERPROC 68,3214
#   define PFNGLGENBUFFERSPROC 69,3283
#   define PFNGLBINDBUFFERPROC 70,3350
#   define PFNGLBUFFERDATAPROC 71,3417
#   define PFNGLDELETEBUFFERSPROC 72,3484
#   define GLSL_VERSION 79,3672
#   define VLCGL_TEXTURE_COUNT 80,3702
#   define VLCGL_PICTURE_MAX 81,3735
#   define PRECISION 82,3766
#   define SUPPORTS_SHADERS84,3835
#   define glClientActiveTexture(85,3863
#   define SUPPORTS_FIXED_PIPELINE87,3905
#   define GL_MAX_TEXTURE_IMAGE_UNITS 88,3940
#   define GLSL_VERSION 91,4012
#   define VLCGL_TEXTURE_COUNT 92,4042
#   define VLCGL_PICTURE_MAX 93,4075
#   define PRECISION 94,4108
#   define SUPPORTS_SHADERS95,4132
#   define SUPPORTS_FIXED_PIPELINE96,4160
    GLuint   texture;100,4220
    unsigned format;101,4242
    unsigned type;102,4263
    unsigned width;103,4282
    unsigned height;104,4302
    float    alpha;106,4324
    float    top;108,4345
    float    left;109,4363
    float    bottom;110,4382
    float    right;111,4403
    float    tex_width;113,4424
    float    tex_height;114,4448
} gl_region_t;115,4473
struct vout_display_opengl_t 117,4489
    vlc_gl_t   *gl;gl119,4521
    video_format_t fmt;121,4542
    const vlc_chroma_description_t *chroma;chroma122,4566
    int        tex_target;124,4611
    int        tex_format;125,4638
    int        tex_internal;126,4665
    int        tex_type;127,4694
    int        tex_width[tex_width129,4720
    int        tex_height[tex_height130,4765
    GLuint     texture[texture132,4812
    int         region_count;134,4877
    gl_region_t *region;region135,4907
    picture_pool_t *pool;pool138,4934
    GLuint     program[program141,5017
    GLint      shader[shader142,5044
    int        local_count;143,5107
    GLfloat    local_value[local_value144,5135
    GLuint vertex_buffer_object;146,5168
    GLuint index_buffer_object;147,5201
    GLuint texture_buffer_object[texture_buffer_object148,5233
    GLuint *subpicture_buffer_object;subpicture_buffer_object150,5287
    int    subpicture_buffer_object_count;151,5325
    PFNGLGETUNIFORMLOCATIONPROC      GetUniformLocation;155,5428
    PFNGLGETATTRIBLOCATIONPROC       GetAttribLocation;156,5485
    PFNGLVERTEXATTRIBPOINTERPROC     VertexAttribPointer;157,5541
    PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;158,5599
    PFNGLUNIFORMMATRIX4FVPROC   UniformMatrix4fv;160,5662
    PFNGLUNIFORM4FVPROC         Uniform4fv;161,5712
    PFNGLUNIFORM4FPROC          Uniform4f;162,5756
    PFNGLUNIFORM1IPROC          Uniform1i;163,5799
    PFNGLCREATESHADERPROC CreateShader;166,5868
    PFNGLSHADERSOURCEPROC ShaderSource;167,5908
    PFNGLCOMPILESHADERPROC CompileShader;168,5948
    PFNGLDELETESHADERPROC   DeleteShader;169,5990
    PFNGLCREATEPROGRAMPROC CreateProgram;171,6033
    PFNGLLINKPROGRAMPROC   LinkProgram;172,6075
    PFNGLUSEPROGRAMPROC    UseProgram;173,6115
    PFNGLDELETEPROGRAMPROC DeleteProgram;174,6154
    PFNGLATTACHSHADERPROC  AttachShader;176,6197
    PFNGLGETPROGRAMIVPROC  GetProgramiv;179,6269
    PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;180,6310
    PFNGLGETSHADERIVPROC   GetShaderiv;181,6360
    PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;182,6400
    PFNGLGENBUFFERSPROC    GenBuffers;184,6449
    PFNGLBINDBUFFERPROC    BindBuffer;185,6488
    PFNGLBUFFERDATAPROC    BufferData;186,6527
    PFNGLDELETEBUFFERSPROC DeleteBuffers;187,6566
    PFNGLACTIVETEXTUREPROC  ActiveTexture;191,6636
    PFNGLCLIENTACTIVETEXTUREPROC  ClientActiveTexture;192,6679
    bool use_multitexture;197,6766
    bool supports_npot;200,6840
    uint8_t *texture_temp_buf;texture_temp_buf202,6865
    int      texture_temp_buf_size;203,6896
    float f_teta;206,6954
    float f_phi;207,6972
    float f_zoom;208,6989
static inline int GetAlignedSize(211,7011
static bool IsLuminance16Supported(219,7253
static void BuildVertexShader(237,7692
static void BuildYUVFragmentShader(265,8732
static void BuildRGBFragmentShader(346,11821
static void BuildRGBAFragmentShader(365,12394
static void BuildXYZFragmentShader(384,12982
vout_display_opengl_t *vout_display_opengl_New(vout_display_opengl_New425,14338
#   define glActiveTexture 525,19276
#   define glClientActiveTexture 526,19322
void vout_display_opengl_Delete(742,27103
picture_pool_t *vout_display_opengl_GetPool(vout_display_opengl_GetPool779,28375
#define ALIGN(842,30486
static void Upload(843,30539
int vout_display_opengl_Prepare(907,32992
static const GLfloat identity[identity1022,38283
static void getViewMatrix(1029,38434
static void getYRotMatrix(1041,38727
static void getXRotMatrix(1053,39037
static void getZoomMatrix(1065,39338
static void getProjectionMatrix(1077,39604
void orientationTransformMatrix(1094,40042
static void DrawWithoutShaders(1158,41666
static int BuildSphere(1207,42929
static int BuildCube(1290,45703
static int BuildRectangle(1414,49489
static void DrawWithShaders(1471,51015
int vout_display_opengl_Display(1590,56643

codec/avcodec/directx_va.h,2089
#define AVCODEC_DIRECTX_VA_H29,1386
#  undef _WIN32_WINNT33,1474
#  define _WIN32_WINNT 34,1496
    int                refcount;46,1652
    unsigned int       order;47,1685
    vlc_mutex_t        *p_lock;p_lock48,1715
    picture_t          *p_pic;p_pic49,1747
} vlc_va_surface_t;50,1778
typedef struct input_list_t 52,1799
    void (*pf_release)pf_release53,1829
    GUID *list;list54,1876
    unsigned count;55,1892
} input_list_t;56,1912
#define MAX_SURFACE_COUNT 58,1929
    int          codec_id;61,1977
    int          width;62,2004
    int          height;63,2028
    HINSTANCE             hdecoder_dll;66,2068
    const TCHAR           *psz_decoder_dll;psz_decoder_dll67,2108
    IUnknown              *d3ddev;d3ddev70,2172
    GUID                   input;73,2232
    IUnknown               *d3ddec;d3ddec74,2266
    IUnknown               *decoder;decoder77,2327
    int          surface_count;80,2375
    int          surface_order;81,2407
    int          surface_width;82,2439
    int          surface_height;83,2471
    int          thread_count;85,2505
    vlc_mutex_t      surface_lock;87,2537
    vlc_va_surface_t surface[surface88,2572
    IUnknown         *hw_surface[hw_surface89,2621
    int (*pf_check_device)pf_check_device94,2747
    int (*pf_create_device)pf_create_device96,2788
    void (*pf_destroy_device)pf_destroy_device97,2829
    int (*pf_create_device_manager)pf_create_device_manager99,2873
    void (*pf_destroy_device_manager)pf_destroy_device_manager100,2922
    int (*pf_create_video_service)pf_create_video_service102,2974
    void (*pf_destroy_video_service)pf_destroy_video_service103,3022
    int (*pf_get_input_list)pf_get_input_list108,3134
    int (*pf_setup_output)pf_setup_output113,3320
    int (*pf_create_decoder_surfaces)pf_create_decoder_surfaces118,3499
    void (*pf_destroy_surfaces)pf_destroy_surfaces123,3729
    void (*pf_setup_avcodec_ctx)pf_setup_avcodec_ctx127,3853
    picture_t *(*pf_alloc_surface_pic)pf_alloc_surface_pic133,3983
} directx_sys_t;135,4070

packetizer/dirac.c,4075
#define SANITIZE_PREV_PARSE_OFFSET 76,3495
vlc_module_begin(84,3788
struct decoder_sys_t95,4197
    block_bytestream_t bytestream;98,4241
    int i_state;99,4276
    size_t i_offset;100,4293
    uint32_t u_last_npo;101,4314
    mtime_t i_sync_pts;105,4496
    mtime_t i_sync_dts;106,4520
    block_t *p_eu;p_eu109,4586
    block_t **pp_eu_last;pp_eu_last110,4651
    uint32_t u_eu_last_npo;111,4677
    mtime_t i_eu_pts;112,4760
    mtime_t i_eu_dts;113,4782
    date_t dts;116,4841
    bool b_dts;117,4913
    bool b_pts;119,4964
    mtime_t i_pts;120,5019
    uint32_t u_pts_picnum;121,5095
    mtime_t i_pts_offset;123,5174
    block_t *p_outqueue;p_outqueue129,5502
    block_t **pp_outqueue_last;pp_outqueue_last130,5527
    uint32_t u_tg_last_picnum;132,5560
    bool b_tg_last_picnum;133,5640
    struct dirac_reorder_buffer 135,5698
        int u_size_max;136,5732
        int u_size;137,5756
        struct dirac_reorder_entry 138,5776
            struct dirac_reorder_entry *p_next;p_next139,5813
            block_t *p_eu;p_eu140,5861
            uint32_t u_picnum;141,5888
        } p_entries[p_entries142,5919
        } p_entries[32], *p_head,p_head142,5919
        } p_entries[32], *p_head, *p_empty;p_empty142,5919
    } reorder_buf;143,5963
    mtime_t i_pts_last_out;146,6055
    mtime_t i_dts_last_out;147,6124
    struct seq_hdr_t 149,6194
        uint32_t u_width;150,6217
        uint32_t u_height;151,6243
        uint32_t u_fps_num;152,6270
        uint32_t u_fps_den;153,6298
        enum picture_coding_mode_t 154,6326
            DIRAC_FRAME_CODING=155,6363
            DIRAC_FIELD_CODING=156,6397
    } seq_hdr;158,6464
    bool b_seen_seq_hdr;159,6502
    bool b_seen_eos;160,6555
    uint32_t u_next_offset;164,6643
    uint32_t u_prev_offset;165,6671
    int i_parse_code;166,6699
} parse_info_t;167,6721
    uint32_t u_last_next_offset;171,6829
    uint32_t u_picture_number;173,6934
} dirac_block_encap_t;174,6965
    NOT_SYNCED=177,6996
    TRY_SYNC,178,7014
    SYNCED,179,7028
    SYNCED_INCOMPLETEDU,180,7040
    DIRAC_NON_DATED 184,7076
    DIRAC_NON_DATED = (1 << BLOCK_FLAG_PRIVATE_SHIFT)184,7076
    DIRAC_DISCARD 185,7131
    DIRAC_DISCARD   = (2 << BLOCK_FLAG_PRIVATE_SHIFT)185,7131
    DIRAC_DU_IN_EU,189,7197
    DIRAC_DU_ENDS_EU,190,7217
    block_t fake;213,8031
    block_t *p_orig;p_orig214,8049
    dirac_block_encap_t *p_dbe;p_dbe215,8070
} fake_block_t;216,8102
static dirac_block_encap_t *dirac_RemoveBlockEncap(dirac_RemoveBlockEncap218,8119
static void dirac_ReleaseBlockAndEncap(227,8340
static void dirac_AddBlockEncap(236,8561
static dirac_block_encap_t *dirac_NewBlockEncap(dirac_NewBlockEncap255,9158
static dirac_block_encap_t *dirac_GetBlockEncap(dirac_GetBlockEncap262,9371
static int block_ChainToArray(275,9698
static void dirac_RecoverTimestamps 299,10258
static void dirac_BackdateDTS(332,11384
static void dirac_BackdatePTS(350,12024
static bool dirac_isEOS(379,12995
static bool dirac_isSeqHdr(380,13076
static bool dirac_isPicture(381,13157
static int dirac_numRefs(382,13241
static inline bool dirac_PictureNbeforeM(384,13322
static void dirac_ReorderInit(395,13564
static block_t *dirac_Reorder(dirac_Reorder407,13918
static bool dirac_UnpackParseInfo(473,16352
static uint32_t dirac_uint(489,16916
static int dirac_bool(501,17187
static bool dirac_UnpackSeqHdr(507,17306
        uint32_t u_w,525,17865
        uint32_t u_w, u_h;525,17865
        uint32_t u_n 552,18690
        uint32_t u_n /* numerator */, u_d 552,18690
static block_t *dirac_EmitEOS(dirac_EmitEOS648,21527
static block_t *dirac_DoSync(dirac_DoSync668,22013
static int dirac_InspectDataUnit(821,28399
static block_t *dirac_BuildEncapsulationUnit(dirac_BuildEncapsulationUnit954,33160
static int dirac_TimeGenPush(1040,36076
static void dirac_ReorderDequeueAndReleaseBlock(1183,41424
static void Flush(1213,42432
static block_t *Packetize(Packetize1233,43173
static int Open(1366,47782
static void Close(1432,50117

video_filter/deinterlace/helpers.h,358
#define VLC_DEINTERLACE_HELPERS_H 25,1227
typedef enum { CC_ALTLINE,42,1544
typedef enum { CC_ALTLINE, CC_UPCONVERT,42,1544
typedef enum { CC_ALTLINE, CC_UPCONVERT, CC_SOURCE_TOP,42,1544
typedef enum { CC_ALTLINE, CC_UPCONVERT, CC_SOURCE_TOP, CC_SOURCE_BOTTOM,42,1544
               CC_MERGE 43,1618
               CC_MERGE } compose_chroma_t;43,1618

demux/adaptive/playlist/SegmentList.cpp,479
SegmentList::SegmentList(34,1318
SegmentList::~SegmentList(38,1435
const std::vector<ISegment*>& SegmentList::getSegments(45,1590
ISegment * SegmentList::getSegmentByNumber(50,1679
void SegmentList::addSegment(68,2110
void SegmentList::mergeWith(74,2214
void SegmentList::pruneByPlaybackTime(89,2640
void SegmentList::pruneBySegmentNumber(97,2871
bool SegmentList::getSegmentNumberByScaledTime(115,3290
bool SegmentList::getPlaybackTimeDurationBySegmentNumber(128,3766

access/http/h2frame.c,3986
vlc_h2_frame_alloc(38,1329
#define vlc_h2_frame_payload(63,1904
static uint_fast32_t vlc_h2_frame_length(65,1953
size_t vlc_h2_frame_size(71,2115
static uint_fast8_t vlc_h2_frame_type(76,2214
static uint_fast8_t vlc_h2_frame_flags(81,2310
static uint_fast32_t vlc_h2_frame_id(86,2407
    VLC_H2_FRAME_DATA,92,2532
    VLC_H2_FRAME_HEADERS,93,2555
    VLC_H2_FRAME_PRIORITY,94,2581
    VLC_H2_FRAME_RST_STREAM,95,2608
    VLC_H2_FRAME_SETTINGS,96,2637
    VLC_H2_FRAME_PUSH_PROMISE,97,2664
    VLC_H2_FRAME_PING,98,2695
    VLC_H2_FRAME_GOAWAY,99,2718
    VLC_H2_FRAME_WINDOW_UPDATE,100,2743
    VLC_H2_FRAME_CONTINUATION,101,2775
static const char *vlc_h2_type_name(vlc_h2_type_name104,2810
    VLC_H2_DATA_END_STREAM 125,3569
    VLC_H2_DATA_END_STREAM = 0x01,x01125,3569
    VLC_H2_DATA_PADDED 126,3604
    VLC_H2_DATA_PADDED     = 0x08,x08126,3604
    VLC_H2_HEADERS_END_STREAM 130,3650
    VLC_H2_HEADERS_END_STREAM  = 0x01,x01130,3650
    VLC_H2_HEADERS_END_HEADERS 131,3689
    VLC_H2_HEADERS_END_HEADERS = 0x04,x04131,3689
    VLC_H2_HEADERS_PADDED 132,3728
    VLC_H2_HEADERS_PADDED      = 0x08,x08132,3728
    VLC_H2_HEADERS_PRIORITY 133,3767
    VLC_H2_HEADERS_PRIORITY    = 0x20,x20133,3767
    VLC_H2_SETTINGS_ACK 137,3817
    VLC_H2_SETTINGS_ACK = 0x01,x01137,3817
    VLC_H2_PUSH_PROMISE_END_HEADERS 141,3860
    VLC_H2_PUSH_PROMISE_END_HEADERS = 0x04,x04141,3860
    VLC_H2_PUSH_PROMISE_PADDED 142,3904
    VLC_H2_PUSH_PROMISE_PADDED      = 0x08,x08142,3904
    VLC_H2_PING_ACK 146,3959
    VLC_H2_PING_ACK = 0x01,x01146,3959
    VLC_H2_CONTINUATION_END_HEADERS 150,3998
    VLC_H2_CONTINUATION_END_HEADERS = 0x04,x04150,3998
vlc_h2_frame_headers(154,4068
vlc_h2_frame_data(227,5824
vlc_h2_frame_rst_stream(240,6196
struct vlc_h2_frame *vlc_h2_frame_settings(vlc_h2_frame_settings249,6510
struct vlc_h2_frame *vlc_h2_frame_settings_ack(vlc_h2_frame_settings_ack312,8247
const char *vlc_h2_setting_name(vlc_h2_setting_name318,8416
struct vlc_h2_frame *vlc_h2_frame_ping(vlc_h2_frame_ping335,9113
struct vlc_h2_frame *vlc_h2_frame_pong(vlc_h2_frame_pong343,9345
vlc_h2_frame_goaway(353,9661
vlc_h2_frame_window_update(367,10015
const char *vlc_h2_strerror(vlc_h2_strerror382,10401
void 406,11442
const uint8_t 424,12155
typedef int (*vlc_h2_parser)vlc_h2_parser444,12725
struct vlc_h2_parser448,12892
    void *opaque;opaque450,12915
    const struct vlc_h2_parser_cbs *cbs;cbs451,12933
    vlc_h2_parser parser;453,12975
        uint32_t sid;457,13065
        bool eos;458,13120
        size_t len;459,13179
        uint8_t *buf;buf460,13239
        struct hpack_decoder *decoder;decoder461,13307
    } headers;462,13378
    uint32_t rcwd_size;464,13436
static int vlc_h2_parse_error(473,13826
static int vlc_h2_stream_error(479,13957
static void *vlc_h2_stream_lookup(vlc_h2_stream_lookup485,14141
static void vlc_h2_parse_headers_start(490,14272
static int vlc_h2_parse_headers_append(502,14585
static int vlc_h2_parse_headers_end(520,15142
static int vlc_h2_parse_frame_data(573,16683
static int vlc_h2_parse_frame_headers(627,18006
static int vlc_h2_parse_frame_priority(680,19367
static int vlc_h2_parse_frame_rst_stream(697,19865
static int vlc_h2_parse_frame_settings(724,20526
static int vlc_h2_parse_frame_push_promise(759,21506
static int vlc_h2_parse_frame_ping(795,22443
static int vlc_h2_parse_frame_goaway(826,23114
static int vlc_h2_parse_frame_window_update(852,23812
static int vlc_h2_parse_frame_continuation(870,24353
static int vlc_h2_parse_frame_unknown(899,25183
static const vlc_h2_parser vlc_h2_parsers[vlc_h2_parsers916,25664
static int vlc_h2_parse_preface(930,26405
static int vlc_h2_parse_generic(951,27101
static int vlc_h2_parse_headers_block(967,27591
static int vlc_h2_parse_failed(984,28162
int vlc_h2_parse(992,28373
struct vlc_h2_parser *vlc_h2_parse_init(vlc_h2_parse_init1012,28795
void vlc_h2_parse_destroy(1035,29422

packetizer/h264.c,2567
vlc_module_begin 56,2126
    int i_nal_type;70,2559
    int i_nal_ref_idc;71,2579
    int i_frame_type;73,2603
    int i_pic_parameter_set_id;74,2625
    int i_frame_num;75,2657
    int i_field_pic_flag;77,2679
    int i_bottom_field_flag;78,2705
    int i_idr_pic_id;80,2735
    int i_pic_order_cnt_lsb;82,2758
    int i_delta_pic_order_cnt_bottom;83,2787
    int i_delta_pic_order_cnt0;85,2826
    int i_delta_pic_order_cnt1;86,2858
} slice_t;87,2890
struct decoder_sys_t89,2902
    packetizer_t packetizer;92,2935
    bool    b_slice;95,2975
    block_t *p_frame;p_frame96,2996
    block_t **pp_frame_last;pp_frame_last97,3018
    bool    b_frame_sps;98,3047
    bool    b_frame_pps;99,3072
    bool   b_header;101,3098
    bool   b_sps;102,3119
    bool   b_pps;103,3137
    block_t *pp_sps[pp_sps104,3155
    block_t *pp_pps[pp_pps105,3190
    int    i_recovery_frames;106,3225
    uint8_t i_avcC_length_size;109,3300
    int i_log2_max_frame_num;112,3387
    int b_frame_mbs_only;113,3417
    int i_pic_order_cnt_type;114,3443
    int i_delta_pic_order_always_zero_flag;115,3473
    int i_log2_max_pic_order_cnt_lsb;116,3517
    int i_pic_order_present_flag;119,3599
    bool b_timing_info_present_flag;122,3648
    uint32_t i_num_units_in_tick;123,3685
    uint32_t i_time_scale;124,3719
    bool b_fixed_frame_rate;125,3746
    bool b_pic_struct_present_flag;126,3775
    uint8_t i_pic_struct;127,3811
    bool b_cpb_dpb_delays_present_flag;128,3837
    uint8_t i_cpb_removal_delay_length_minus1;129,3877
    uint8_t i_dpb_output_delay_length_minus1;130,3924
    slice_t slice;133,4015
    bool b_even_frame;136,4045
    mtime_t i_frame_pts;137,4068
    mtime_t i_frame_dts;138,4093
    mtime_t i_prev_pts;139,4118
    mtime_t i_prev_dts;140,4142
    cc_storage_t *p_ccs;p_ccs143,4177
#define BLOCK_FLAG_PRIVATE_AUD 146,4206
static const uint8_t p_h264_startcode[p_h264_startcode167,5166
static int Open(174,5605
static void Close(323,10608
static void PacketizeFlush(348,11186
static block_t *Packetize(Packetize360,11622
static block_t *PacketizeAVC1(PacketizeAVC1372,12133
static block_t *GetCc(GetCc383,12532
static void PacketizeReset(391,12837
static block_t *PacketizeParse(PacketizeParse413,13505
static int PacketizeValidate(423,13835
static block_t *ParseNALBlock(ParseNALBlock434,14250
static block_t *OutputPicture(OutputPicture545,17622
static void PutSPS(706,22857
static void PutPPS(780,26016
static bool ParseSlice(810,26902
static bool ParseSeiCallback(926,31056

video_chroma/i422_i420.c,178
#define SRC_FOURCC 37,1563
#define DEST_FOURCC 38,1595
vlc_module_begin 55,2435
VIDEO_FILTER_WRAPPER(112,4239
static void I422_YV12(148,5872
static void I422_YUVA(177,7241

video_output/opengl.h,537
#define VLC_OPENGL_H30,1431
#  define USE_OPENGL_ES 41,1734
#  define MACOS_OPENGL42,1760
#  define USE_OPENGL_ES 45,1839
#  define USE_OPENGL_ES 52,2025
#   undef glClientActiveTexture61,2204
#   undef glActiveTexture62,2236
    PFNGLACTIVETEXTUREPROC glActiveTexture;63,2262
    PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;64,2306
static const vlc_fourcc_t gl_subpicture_chromas[gl_subpicture_chromas70,2408
static inline bool HasExtension(75,2492
typedef struct vout_display_opengl_t vout_display_opengl_t;90,2915

demux/vobsub.h,144
static inline void vobsub_palette_rgb2yuv(24,1136
static inline int vobsub_palette_parse(40,1764
static inline int vobsub_size_parse(61,2640

codec/wmafixed/bswap.h,1446
#define __BSWAP_H__27,888
#undef ROCKBOX33,961
#define bswap_16(37,1034
#define bswap_32(38,1064
static inline uint64_t ByteSwap64(40,1095
        uint64_t ll;43,1156
           uint32_t l,45,1194
           uint32_t l,h;45,1194
        } l;46,1219
#define bswap_64(52,1316
static inline unsigned short ByteSwap16(55,1375
#define bswap_16(62,1514
static inline unsigned int ByteSwap32(64,1549
#define bswap_32(78,1796
static inline unsigned long long int ByteSwap64(80,1831
  register union { __extension__ uint64_t __ll;82,1907
          uint32_t __l[__l83,1955
#define bswap_64(89,2150
static inline uint16_t ByteSwap16(93,2210
static inline uint32_t ByteSwap32(98,2313
#define bswap_16(107,2458
#define bswap_32(108,2492
static inline uint64_t ByteSwap64(110,2527
        uint64_t ll;113,2588
           uint32_t l,115,2626
           uint32_t l,h;115,2626
        } l;116,2651
#define bswap_64(122,2748
#define bswap_16(126,2790
#define bswap_32(129,2930
static inline uint64_t ByteSwap64(133,3082
        uint64_t ll;136,3143
        uint32_t l[l137,3164
#define bswap_64(144,3297
#define be2me_16(154,3494
#define be2me_32(155,3518
#define be2me_64(156,3542
#define le2me_16(157,3566
#define le2me_32(158,3598
#define le2me_64(159,3630
#define be2me_16(161,3668
#define be2me_32(162,3700
#define be2me_64(163,3732
#define le2me_16(164,3764
#define le2me_32(165,3788
#define le2me_64(166,3812

demux/asf/asf.c,2506
vlc_module_begin 59,2203
#define MAX_ASF_TRACKS 75,2734
#define ASF_PREROLL_FROM_CURRENT 76,2784
    int i_cat;92,3671
    es_out_id_t     *p_es;p_es94,3687
    es_format_t     *p_fmt;p_fmt95,3714
    bool             b_selected;96,3780
    mtime_t          i_time;98,3814
    asf_track_info_t info;100,3860
        block_t     *p_first;p_first104,3905
        block_t    **pp_last;pp_last105,3935
    } queue;106,3965
} asf_track_t;108,3979
struct demux_sys_t110,3995
    mtime_t             i_time;112,4016
    mtime_t             i_sendtime;113,4060
    mtime_t             i_length;114,4096
    uint64_t            i_bitrate;115,4158
    bool                b_eos;116,4220
    bool                b_eof;117,4284
    asf_object_root_t            *p_root;p_root119,4348
    asf_object_file_properties_t *p_fp;p_fp120,4390
    unsigned int        i_track;122,4431
    asf_track_t         *track[track123,4464
    uint64_t            i_data_begin;125,4552
    uint64_t            i_data_end;126,4590
    bool                b_index;128,4627
    bool                b_canfastseek;129,4660
    uint8_t             i_seek_track;130,4699
    uint8_t             i_access_selected_track[i_access_selected_track131,4737
    unsigned int        i_wait_keyframe;132,4844
    mtime_t             i_preroll_start;134,4886
    asf_packet_sys_t    packet_sys;136,4928
    vlc_meta_t          *meta;meta138,4965
static int Open(150,5385
#define CHUNK 189,6693
static int Demux(190,6725
static void Close(281,9854
static void WaitKeyframe(293,10232
static int SeekPercent(336,11628
static int SeekIndex(350,12241
static void SeekPrepare(386,13460
static int Control(412,14141
static void Packet_SetAR(561,19007
static void Packet_SetSendTime(584,19944
static void Packet_UpdateTime(589,20083
static asf_track_info_t * Packet_GetTrackInfo(597,20341
static bool Packet_DoSkip(607,20642
static void Packet_Enqueue(641,21448
static bool Block_Dequeue(661,22066
typedef struct asf_es_priorities_t700,23472
    uint16_t *pi_stream_numbers;pi_stream_numbers702,23509
    uint16_t i_count;703,23542
} asf_es_priorities_t;704,23564
static void ASF_fillup_es_priorities_ex(707,23622
static void ASF_fillup_es_bitrate_priorities_ex(734,24646
#define GET_CHECKED(761,25668
static int DemuxInit(773,25979
#define set_meta(1247,44810
#undef set_meta1264,45904
static void FlushQueue(1313,47539
static void FlushQueues(1328,47877
static void DemuxEnd(1343,48306

demux/adaptive/xml/DOMHelper.h,61
#define DOMHELPER_H_26,1168
        class DOMHelper37,1291

codec/dmo/dmo.c,2924
# define DMO_DEBUG 48,1657
# define PRIs 52,1701
# define PRIs 54,1727
typedef long (STDCALL *GETCLASS)GETCLASS57,1754
static const int pi_channels_maps[pi_channels_maps59,1826
vlc_module_begin 90,3014
#   define ENC_CFG_PREFIX 98,3272
struct decoder_sys_t114,3887
    HINSTANCE hmsdmo_dll;116,3910
    IMediaObject *p_dmo;p_dmo117,3936
    int i_min_output;119,3962
    uint8_t *p_buffer;p_buffer120,3984
    date_t end_date;122,4008
    vlc_thread_t thread;124,4030
    vlc_mutex_t  lock;125,4055
    vlc_cond_t   wait_input,126,4078
    vlc_cond_t   wait_input, wait_output;126,4078
    bool         b_ready,127,4120
    bool         b_ready, b_works;127,4120
    block_t    **pp_input;pp_input128,4155
    int          i_output;130,4183
    void       **pp_output;pp_output131,4210
const GUID IID_IWMCodecPrivateData 134,4242
const GUID IID_IMediaObject 135,4357
const GUID IID_IMediaBuffer 136,4467
const GUID MEDIATYPE_Video 137,4577
const GUID MEDIATYPE_Audio 138,4686
const GUID MEDIASUBTYPE_PCM 139,4795
const GUID MEDIASUBTYPE_IEEE_FLOAT 140,4905
const GUID FORMAT_VideoInfo 141,5022
const GUID FORMAT_WaveFormatEx 142,5132
const GUID GUID_NULL 143,5245
const GUID MEDIASUBTYPE_I420 144,5344
const GUID MEDIASUBTYPE_YV12 145,5455
const GUID MEDIASUBTYPE_RGB24 146,5566
const GUID MEDIASUBTYPE_RGB565 147,5678
static const GUID guid_wvc1 150,5793
static const GUID guid_wmv9 151,5907
static const GUID guid_wmv 153,6022
static const GUID guid_wms 154,6135
static const GUID guid_wmva 155,6248
static const GUID guid_wma 157,6362
static const GUID guid_wma9 158,6475
static const GUID guid_wmv_enc 160,6590
static const GUID guid_wmv_enc2 161,6707
static const GUID guid_wma_enc 162,6824
static const GUID guid_wmv8_enc 163,6941
static const GUID guid_wmv9_enc 164,7058
# define BI_RGB 167,7191
    vlc_fourcc_t i_fourcc;172,7236
    const TCHAR  *psz_dll;psz_dll173,7263
    const GUID   *p_guid;p_guid174,7290
} codec_dll;176,7317
static const codec_dll decoders_table[decoders_table178,7331
static const codec_dll encoders_table[encoders_table210,8356
static void WINAPI DMOFreeMediaType(235,9065
static int DecoderOpen(247,9526
static void DecoderClose(311,11501
static void *DecodeBlock(DecodeBlock329,12022
static int DecOpen(359,12817
static int LoadDMO(658,23499
static void DecClose(822,28633
static void *DecBlock(DecBlock839,29200
static void CopyPicture(1007,33748
static void *DecoderThread(DecoderThread1035,34564
struct encoder_sys_t1071,35546
    HINSTANCE hmsdmo_dll;1073,35569
    IMediaObject *p_dmo;p_dmo1074,35595
    int i_min_output;1076,35621
    date_t end_date;1078,35644
static int EncoderOpen(1085,35860
static int EncoderSetVideoType(1104,36498
static int EncoderSetAudioType(1267,42109
static int EncOpen(1400,47045
static block_t *EncodeBlock(EncodeBlock1491,49551
void EncoderClose(1648,54346

access/http/h2frame.h,1978
struct vlc_h2_frame30,1172
    struct vlc_h2_frame *next;next32,1194
    uint8_t data[data33,1225
#define vlc_h2_frame_dump(59,2243
enum vlc_h2_error 61,2318
    VLC_H2_NO_ERROR,62,2338
    VLC_H2_PROTOCOL_ERROR,63,2359
    VLC_H2_INTERNAL_ERROR,64,2386
    VLC_H2_FLOW_CONTROL_ERROR,65,2413
    VLC_H2_SETTINGS_TIMEOUT,66,2444
    VLC_H2_STREAM_CLOSED,67,2473
    VLC_H2_FRAME_SIZE_ERROR,68,2499
    VLC_H2_REFUSED_STREAM,69,2528
    VLC_H2_CANCEL,70,2555
    VLC_H2_COMPRESSION_ERROR,71,2574
    VLC_H2_CONNECT_ERROR,72,2604
    VLC_H2_ENHANCE_YOUR_CALM,73,2630
    VLC_H2_INADEQUATE_SECURITY,74,2660
    VLC_H2_HTTP_1_1_REQUIRED,75,2692
enum vlc_h2_setting 80,2771
    VLC_H2_SETTING_HEADER_TABLE_SIZE 81,2793
    VLC_H2_SETTING_HEADER_TABLE_SIZE = 0x0001,x000181,2793
    VLC_H2_SETTING_ENABLE_PUSH,82,2840
    VLC_H2_SETTING_MAX_CONCURRENT_STREAMS,83,2872
    VLC_H2_SETTING_INITIAL_WINDOW_SIZE,84,2915
    VLC_H2_SETTING_MAX_FRAME_SIZE,85,2955
    VLC_H2_SETTING_MAX_HEADER_LIST_SIZE,86,2990
#define VLC_H2_MAX_HEADER_TABLE 92,3103
#define VLC_H2_MAX_STREAMS 93,3180
#define VLC_H2_INIT_WINDOW 94,3259
#define VLC_H2_MAX_FRAME 95,3335
#define VLC_H2_MAX_HEADER_LIST 96,3391
#define VLC_H2_DEFAULT_MAX_HEADER_TABLE 99,3501
#define VLC_H2_DEFAULT_INIT_WINDOW 100,3547
#define VLC_H2_DEFAULT_MAX_FRAME 101,3593
struct vlc_h2_parser_cbs104,3662
    void (*setting)setting106,3689
    int  (*settings_done)settings_done107,3760
    int  (*ping)ping108,3798
    void (*error)error109,3849
    int  (*reset)reset110,3899
    void (*window_status)window_status111,3973
    void *(*stream_lookup)stream_lookup113,4028
    int  (*stream_error)stream_error114,4085
    void (*stream_headers)stream_headers115,4160
    int  (*stream_data)stream_data117,4274
    void (*stream_end)stream_end118,4334
    int  (*stream_reset)stream_reset119,4369
#define VLC_H2_MAX_HEADERS 127,4676
#define vlc_h2_frame_data_get(132,4869

video_filter/transform.c,1702
#define CFG_PREFIX 45,1831
#define TYPE_TEXT 47,1864
static const char * const type_list[type_list48,1903
static const char * const type_list_text[type_list_text50,2019
vlc_module_begin(55,2254
static void VFlip(80,3053
static void Transpose(86,3180
static void AntiTranspose(92,3320
static void R90(97,3442
static void R180(103,3567
static void R270(108,3680
typedef void (*convert_t)convert_t114,3806
#define PLANE(116,3868
static void Plane_VFlip(135,4684
#define I422(148,5111
#define YUY2(164,5745
#define PLANES(199,7530
#define Plane8_VFlip 203,7600
#define Plane16_VFlip 204,7633
#define Plane32_VFlip 205,7667
PLANES(Plane32_VFlip202,7586
#define Plane422_HFlip 212,7780
#define Plane422_VFlip 213,7817
#define Plane422_R180 214,7852
#define PlaneYUY2_HFlip 220,7946
#define PlaneYUY2_VFlip 221,7984
#define PlaneYUY2_R180 222,8020
    char      name[name229,8132
    convert_t convert;230,8156
    convert_t iconvert;231,8179
    video_transform_t operation;232,8203
    void      (*plane8)plane8233,8236
    void      (*plane16)plane16234,8296
    void      (*plane32)plane32235,8356
    void      (*i422)i422236,8416
    void      (*yuyv)yuyv237,8473
} transform_description_t;238,8530
#define DESC(240,8558
static const transform_description_t descriptions[descriptions244,8692
static bool dsc_is_rotated(254,9279
static const size_t n_transforms 259,9385
struct filter_sys_t 262,9475
    const vlc_chroma_description_t *chroma;chroma263,9497
    void (*plane[plane264,9541
    convert_t convert;265,9607
static picture_t *Filter(Filter268,9634
static int Mouse(287,10104
static int Open(302,10551
static void Close(441,15094

codec/dmo/dmo.h,4122
const GUID IID_IUnknown;24,1185
const GUID IID_IClassFactory;25,1210
const GUID IID_IWMCodecPrivateData;26,1240
const GUID IID_IMediaObject;27,1276
const GUID IID_IMediaBuffer;28,1305
const GUID MEDIATYPE_Video;29,1334
const GUID MEDIATYPE_Audio;30,1362
const GUID MEDIASUBTYPE_PCM;31,1390
const GUID FORMAT_VideoInfo;32,1419
const GUID FORMAT_WaveFormatEx;33,1448
const GUID GUID_NULL;34,1480
const GUID MEDIASUBTYPE_I420;35,1502
const GUID MEDIASUBTYPE_YV12;36,1532
const GUID MEDIASUBTYPE_RGB24;37,1562
const GUID MEDIASUBTYPE_RGB565;38,1593
#define IUnknown 46,1720
#define IClassFactory 47,1750
typedef struct _IUnknown IUnknown;48,1790
typedef struct _IClassFactory IClassFactory;49,1825
typedef struct _IWMCodecPrivateData IWMCodecPrivateData;50,1870
typedef struct _IEnumDMO IEnumDMO;51,1927
typedef struct _IMediaBuffer IMediaBuffer;52,1962
typedef struct _IMediaObject IMediaObject;53,2005
#define STDCALL 56,2065
#define DMO_INPUT_DATA_BUFFERF_SYNCPOINT 59,2099
#define DMO_INPUT_DATA_BUFFERF_TIME 60,2142
#define DMO_INPUT_DATA_BUFFERF_TIMELENGTH 61,2180
#define DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT 62,2224
#define DMO_OUTPUT_DATA_BUFFERF_TIME 63,2268
#define DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH 64,2307
#define DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER 65,2352
#define DMO_E_NOTACCEPTING 66,2404
 _DMO_PARTIAL_MEDIATYPE75,2557
    GUID type;77,2583
    GUID subtype;78,2598
} DMO_PARTIAL_MEDIATYPE;80,2617
 _DMO_OUTPUT_DATA_BUFFER86,2726
    IMediaBuffer *pBuffer;pBuffer88,2753
    uint32_t dwStatus;89,2780
    REFERENCE_TIME rtTimestamp;90,2803
    REFERENCE_TIME rtTimelength;91,2835
} DMO_OUTPUT_DATA_BUFFER;93,2869
 _DMOMediaType99,2979
    GUID     majortype;101,2996
    GUID     subtype;102,3020
    int      bFixedSizeSamples;103,3042
    int      bTemporalCompression;104,3074
    uint32_t lSampleSize;105,3109
    GUID     formattype;106,3135
    IUnknown *pUnk;pUnk107,3160
    uint32_t cbFormat;108,3180
    char     *pbFormat;pbFormat109,3203
} DMO_MEDIA_TYPE;111,3228
typedef struct IUnknown_vt116,3276
    long 119,3332
    long 121,3455
    long 122,3499
} IUnknown_vt;124,3545
struct _IUnknown 125,3560
struct _IUnknown { IUnknown_vt* vt;125,3560
typedef struct IClassFactory_vt130,3634
    long 132,3668
    long 134,3791
    long 135,3836
    long 136,3882
} IClassFactory_vt;138,4031
struct _IClassFactory 140,4052
struct _IClassFactory { IClassFactory_vt* vt;140,4052
typedef struct IWMCodecPrivateData_vt145,4142
    long 147,4182
    long 149,4305
    long 150,4350
    long 153,4399
    long 156,4532
} IWMCodecPrivateData_vt;158,4669
struct _IWMCodecPrivateData 160,4696
struct _IWMCodecPrivateData { IWMCodecPrivateData_vt* vt;160,4696
typedef struct IEnumDMO_vt165,4787
    long 168,4843
    long 170,4966
    long 171,5010
    long 174,5083
    long 177,5260
    long 178,5325
    long 179,5368
} IEnumDMO_vt;181,5431
struct _IEnumDMO 182,5446
struct _IEnumDMO { IEnumDMO_vt* vt;182,5446
typedef struct IMediaBuffer_vt187,5519
    long 190,5579
    long 192,5702
    long 193,5746
    long 195,5792
    long 196,5862
    long 197,5940
} IMediaBuffer_vt;200,6078
struct _IMediaBuffer 201,6097
struct _IMediaBuffer { IMediaBuffer_vt* vt;201,6097
typedef struct IMediaObject_vt206,6178
    long 209,6238
    long 211,6361
    long 212,6405
    long 215,6478
    long 218,6657
    long 221,6844
    long 224,7035
    long 228,7260
    long 232,7490
    long 236,7717
    long 240,7949
    long 243,8140
    long 246,8335
    long 251,8640
    long 255,8886
    long 258,9084
    long 261,9280
    long 262,9328
    long 264,9446
    long 265,9515
    long 266,9580
    long 269,9754
    long 275,10100
    long 280,10399
} IMediaObject_vt;282,10458
struct _IMediaObject 283,10477
struct _IMediaObject { IMediaObject_vt* vt;283,10477
typedef struct _CMediaBuffer286,10562
    IMediaBuffer_vt *vt;vt288,10593
    int i_ref;289,10618
    block_t *p_block;p_block290,10633
    int i_max_size;291,10655
    bool b_own;292,10675
} CMediaBuffer;294,10692

access/sdi.c,222
static inline uint32_t av_le2ne32(25,1203
        uint32_t v;28,1265
        uint8_t b[b29,1285
void v210_convert(35,1410
#define READ_PIXELS(42,1688
#undef vanc_to_cc79,2660
block_t *vanc_to_cc(vanc_to_cc80,2678

demux/mkv/matroska_segment_seeker.hpp,2777
#define MKV_MATROSKA_SEGMENT_SEEKER_HPP_25,1213
class SegmentSeeker36,1375
        typedef uint64_t fptr_t;SegmentSeeker::fptr_t39,1409
        typedef mkv_track_t::track_id_t track_id_t;SegmentSeeker::track_id_t40,1442
        struct RangeSegmentSeeker::Range42,1495
            Range SegmentSeeker::Range::Range44,1526
            fptr_t start,SegmentSeeker::Range::start48,1633
            fptr_t start, end;SegmentSeeker::Range::end48,1633
            bool operator<(SegmentSeeker::Range::operator<50,1665
        struct SeekpointSegmentSeeker::Seekpoint56,1804
            Seekpoint(SegmentSeeker::Seekpoint::Seekpoint62,1984
            Seekpoint(SegmentSeeker::Seekpoint::Seekpoint66,2184
            bool operator<(SegmentSeeker::Seekpoint::operator<70,2332
            fptr_t fpos;SegmentSeeker::Seekpoint::fpos75,2456
            mtime_t pts;SegmentSeeker::Seekpoint::pts76,2481
            mtime_t duration;SegmentSeeker::Seekpoint::duration77,2506
            int trust_level;SegmentSeeker::Seekpoint::trust_level78,2536
        struct Cluster SegmentSeeker::Cluster81,2577
            fptr_t  fpos;SegmentSeeker::Cluster::fpos82,2602
            mtime_t pts;SegmentSeeker::Cluster::pts83,2628
            mtime_t duration;SegmentSeeker::Cluster::duration84,2653
            fptr_t  size;SegmentSeeker::Cluster::size85,2683
        typedef std::vector<track_id_t> track_ids_t;SegmentSeeker::track_ids_t89,2733
        typedef std::vector<Range> ranges_t;SegmentSeeker::ranges_t90,2786
        typedef std::vector<Seekpoint> seekpoints_t;SegmentSeeker::seekpoints_t91,2831
        typedef std::vector<fptr_t> cluster_positions_t;SegmentSeeker::cluster_positions_t92,2884
        typedef std::map<track_id_t,SegmentSeeker::track_id_t94,2942
        typedef std::map<track_id_t, Seekpoint> tracks_seekpoint_t;SegmentSeeker::tracks_seekpoint_t94,2942
        typedef std::map<track_id_t,SegmentSeeker::track_id_t95,3010
        typedef std::map<track_id_t, seekpoints_t> tracks_seekpoints_t;SegmentSeeker::tracks_seekpoints_t95,3010
        typedef std::map<mtime_t,SegmentSeeker::mtime_t96,3082
        typedef std::map<mtime_t, Cluster> cluster_map_t;SegmentSeeker::cluster_map_t96,3082
        typedef std::pair<Seekpoint,SegmentSeeker::Seekpoint98,3141
        typedef std::pair<Seekpoint, Seekpoint> seekpoint_pair_t;SegmentSeeker::seekpoint_pair_t98,3141
        ranges_t            _ranges_searched;SegmentSeeker::_ranges_searched120,4212
        tracks_seekpoints_t _tracks_seekpoints;SegmentSeeker::_tracks_seekpoints121,4258
        cluster_positions_t _cluster_positions;SegmentSeeker::_cluster_positions122,4306
        cluster_map_t       _clusters;SegmentSeeker::_clusters123,4354

codec/jpeg.c,1153
#define JPEG_SYS_COMMON_MEMBERS 36,1386
#define ENC_CFG_PREFIX 48,2069
#define ENC_QUALITY_TEXT 49,2105
#define ENC_QUALITY_LONGTEXT 50,2150
struct jpeg_sys_t57,2304
    JPEG_SYS_COMMON_MEMBERS59,2324
typedef struct jpeg_sys_t jpeg_sys_t;62,2356
struct decoder_sys_t67,2429
    struct jpeg_decompress_struct p_jpeg;71,2481
struct encoder_sys_t82,2702
    struct jpeg_compress_struct p_jpeg;86,2754
    int i_blocksize;88,2795
    int i_quality;89,2816
static const char * const ppsz_enc_options[ppsz_enc_options92,2839
vlc_module_begin(105,3084
static void user_error_message(139,4022
static int OpenDecoder(151,4307
#define G_LITTLE_ENDIAN 204,6058
#define G_BIG_ENDIAN 205,6091
typedef unsigned int uint;207,6125
typedef unsigned short ushort;208,6152
LOCAL(210,6184
LOCAL(230,6550
LOCAL(259,7293
    #define EXIF_JPEG_MARKER 279,8299
    #define EXIF_IDENT_STRING 280,8336
    #define EXIF_ORIENT_TAGID 281,8383
static picture_t *DecodeBlock(DecodeBlock405,12522
static void CloseDecoder(506,15266
static int OpenEncoder(517,15466
static block_t *EncodeBlock(EncodeBlock555,16436
static void CloseEncoder(658,19130

stream_out/smem.c,1714
#define T_VIDEO_PRERENDER_CALLBACK 61,2565
#define LT_VIDEO_PRERENDER_CALLBACK 62,2633
#define T_AUDIO_PRERENDER_CALLBACK 65,2826
#define LT_AUDIO_PRERENDER_CALLBACK 66,2894
#define T_VIDEO_POSTRENDER_CALLBACK 69,3095
#define LT_VIDEO_POSTRENDER_CALLBACK 70,3165
#define T_AUDIO_POSTRENDER_CALLBACK 73,3372
#define LT_AUDIO_POSTRENDER_CALLBACK 74,3442
#define T_VIDEO_DATA 77,3649
#define LT_VIDEO_DATA 78,3698
#define T_AUDIO_DATA 80,3767
#define LT_AUDIO_DATA 81,3816
#define T_TIME_SYNC 83,3885
#define LT_TIME_SYNC 84,3938
#define SOUT_CFG_PREFIX 91,4224
#define SOUT_PREFIX_VIDEO 92,4261
#define SOUT_PREFIX_AUDIO 93,4311
vlc_module_begin 95,4362
struct sout_stream_id_sys_t142,6731
    es_format_t* format;144,6761
    void *p_data;p_data145,6786
struct sout_stream_sys_t148,6808
    vlc_mutex_t *p_lock;p_lock150,6835
    void ( *pf_video_prerender_callback pf_video_prerender_callback151,6860
    void ( *pf_audio_prerender_callback pf_audio_prerender_callback152,6966
    void ( *pf_video_postrender_callback pf_video_postrender_callback153,7070
    void ( *pf_audio_postrender_callback pf_audio_postrender_callback154,7228
    bool time_sync;155,7441
void VideoPrerenderDefaultCallback(170,8313
void AudioPrerenderDefaultCallback(175,8498
void VideoPostrenderDefaultCallback(180,8679
void AudioPostrenderDefaultCallback(188,9049
static int Open(200,9708
static void Close(252,12005
static sout_stream_id_sys_t *Add(Add258,12136
static sout_stream_id_sys_t *AddVideo(AddVideo270,12475
static sout_stream_id_sys_t *AddAudio(AddAudio320,13892
static void Del(346,14610
static int Send(352,14728
static int SendVideo(362,15053
static int SendAudio(389,16070

lua/demux.c,477
struct demux_sys_t46,1909
    lua_State *L;L48,1930
    char *psz_filename;psz_filename49,1948
static int vlclua_demux_peek(52,1976
static int vlclua_demux_read(66,2335
static int vlclua_demux_readline(85,2809
static const luaL_Reg p_reg[p_reg105,3322
static const luaL_Reg p_reg_parse[p_reg_parse112,3473
static int probe_luascript(123,3875
int Import_LuaPlaylist(212,6473
void Close_LuaPlaylist(235,7145
static int Demux(244,7377
static int Control(278,8344

demux/dash/mpd/AdaptationSet.cpp,242
AdaptationSet::AdaptationSet(35,1323
AdaptationSet::~AdaptationSet(42,1501
StreamFormat AdaptationSet::getStreamFormat(46,1538
bool AdaptationSet::getSubsegmentAlignmentFlag(54,1737
void AdaptationSet::setSubsegmentAlignmentFlag(59,1833

video_filter/gradient.c,1328
enum { GRADIENT,42,1692
enum { GRADIENT, EDGE,42,1692
enum { GRADIENT, EDGE, HOUGH 42,1692
#define MODE_TEXT 62,2581
#define MODE_LONGTEXT 63,2618
#define GRADIENT_TEXT 65,2706
#define GRADIENT_LONGTEXT 66,2754
#define CARTOON_TEXT 69,2888
#define CARTOON_LONGTEXT 70,2936
#define GRADIENT_HELP 73,3045
static const char *const mode_list[mode_list75,3121
static const char *const mode_list_text[mode_list_text76,3193
#define FILTER_PREFIX 78,3283
vlc_module_begin 80,3318
struct filter_sys_t111,4551
    vlc_mutex_t lock;113,4573
    int i_mode;114,4595
    int i_gradient_type;117,4644
    bool b_cartoon;118,4669
    uint32_t *p_buf32;p_buf32120,4690
    uint32_t *p_buf32_bis;p_buf32_bis121,4713
    uint8_t *p_buf8;p_buf8122,4740
    int *p_pre_hough;p_pre_hough125,4787
static int Create(133,5173
static void Destroy(215,7826
static picture_t *Filter(Filter243,8897
static void GaussianConvolution(290,10219
static void FilterGradient(340,12354
#define FOR 380,13746
        else431,16316
#undef FOR447,16623
#define THETA_Y 458,17098
#define THETA_X 460,17132
#define THETA_P 462,17166
#define THETA_M 464,17200
static void FilterEdge(465,17218
#define p_pre_hough 622,23646
static void FilterHough(623,23695
#undef p_pre_hough747,27620
static int GradientCallback(750,27641

text_renderer/freetype/platform_fonts.c,668
static FT_Face LoadFace(52,2106
FT_Face GetFace(124,4384
static vlc_font_t *GetBestFont(GetBestFont147,5325
vlc_family_t *SearchFallbacks(SearchFallbacks179,6193
static inline void AppendFont(207,7050
static inline void AppendFamily(215,7216
vlc_family_t *NewFamily(NewFamily223,7392
vlc_font_t *NewFont(NewFont275,8704
void FreeFamiliesAndFonts(309,9548
void FreeFamilies(326,9941
vlc_family_t *InitDefaultList(InitDefaultList337,10189
void DumpFamily(371,11047
void DumpDictionary(407,12284
char* ToLower(422,12834
int ConvertToLiveSize(436,13145
FT_Face SelectAndLoadFace(456,13657
char* Generic_Select(492,14780
char* Dummy_Select(560,17021

video_filter/antiflicker.c,660
#define WINDOW_TEXT 50,2058
#define WINDOW_LONGTEXT 51,2096
#define SFTN_TEXT 53,2155
#define SFTN_LONGTEXT 54,2195
#define FILTER_PREFIX 56,2276
#define MAX_WINDOW_SZ 58,2314
#define MAX_SOFTENING_SZ 59,2340
#define SCENE_CHANGE_THRESHOLD 60,2368
vlc_module_begin 65,2584
struct filter_sys_t88,3585
    atomic_int i_window_size;90,3607
    atomic_int i_softening;91,3637
    int ia_luminance_data[ia_luminance_data92,3665
    uint8_t *p_old_data;p_old_data93,3707
static int Create(101,4096
static void Destroy(157,6145
static int GetLuminanceAvg(172,6757
static picture_t *Filter(Filter201,7847
static int AntiFlickerCallback(326,12433

access/sdi.h,28
#define vanc_to_cc(33,1302

access/v4l2/demux.c,1199
# define MAP_ANONYMOUS 36,1480
struct demux_sys_t45,1605
    int fd;47,1626
    vlc_thread_t thread;48,1638
    struct buffer_t *bufv;bufv50,1664
        uint32_t bufc;53,1707
        uint32_t blocksize;54,1730
    uint32_t block_flags;56,1765
    es_out_id_t *es;es58,1792
    vlc_v4l2_ctrl_t *controls;controls59,1813
    mtime_t start;60,1844
    vlc_v4l2_vbi_t *vbi;vbi63,1885
int DemuxOpen(73,2136
    uint32_t v4l2;119,3131
    vlc_fourcc_t vlc;120,3150
    uint8_t bpp;121,3172
    uint32_t red;122,3229
    uint32_t green;123,3247
    uint32_t blue;124,3267
} vlc_v4l2_fmt_t;125,3286
static const vlc_v4l2_fmt_t v4l2_fmts[v4l2_fmts129,3411
static const vlc_v4l2_fmt_t *vlc_from_v4l2_fourcc vlc_from_v4l2_fourcc225,7489
static size_t vlc_v4l2_fmt_rank 233,7734
static vlc_fourcc_t var_InheritFourCC 244,7990
#define var_InheritFourCC(256,8340
static void GetAR 258,8409
static int InitVideo 272,8816
void DemuxClose(615,21270
static block_t *UserPtrQueue UserPtrQueue636,21753
static void *UserPtrThread UserPtrThread672,22688
static void *MmapThread MmapThread722,24186
static void *ReadThread ReadThread773,25407
static int DemuxControl(835,27057

access/mms/mmsh.c,422
#define MMSH_USER_AGENT 71,2392
int MMSHOpen(76,2645
void  MMSHClose 184,5501
static int Control(200,5900
static int Seek(304,9058
static block_t *Block(Block340,10028
static int Restart(411,12158
static int Reset(440,12817
static int OpenConnection(493,14396
static int Describe(551,16543
static void GetHeader(740,22047
static int Start(772,23061
static void Stop(888,26359
static int GetPacket(903,26756

codec/wmafixed/wmadata.h,2044
#define IBSS_ATTR27,885
#define ICONST_ATTR28,903
#define ICODE_ATTR29,923
static const uint16_t wma_critical_freqs[wma_critical_freqs31,943
static const uint8_t exponent_band_22050[exponent_band_2205039,1206
static const uint8_t exponent_band_32000[exponent_band_3200045,1469
static const uint8_t exponent_band_44100[exponent_band_4410051,1716
static const uint16_t hgain_huffcodes[hgain_huffcodes57,2028
static const uint8_t hgain_huffbits[hgain_huffbits65,2416
static const int32_t lsp_codebook[lsp_codebook73,2617
static const uint32_t scale_huffcodes[scale_huffcodes86,4025
static const uint8_t scale_huffbits[scale_huffbits105,5181
static const uint32_t coef0_huffcodes[coef0_huffcodes124,5730
static const uint8_t coef0_huffbits[coef0_huffbits211,11859
static const uint32_t coef1_huffcodes[coef1_huffcodes298,14656
static const uint8_t coef1_huffbits[coef1_huffbits371,19772
static const uint32_t coef2_huffcodes[coef2_huffcodes444,22111
static const uint8_t coef2_huffbits[coef2_huffbits614,34366
static const uint32_t coef3_huffcodes[coef3_huffcodes784,39927
static const uint8_t coef3_huffbits[coef3_huffbits921,49761
static const uint32_t coef4_huffcodes[coef4_huffcodes1058,54233
static const uint8_t coef4_huffbits[coef4_huffbits1121,58628
static const uint32_t coef5_huffcodes[coef5_huffcodes1184,60641
static const uint8_t coef5_huffbits[coef5_huffbits1242,64662
static const uint16_t levels0[levels01300,66506
static const uint16_t levels1[levels11311,66796
static const uint16_t levels2[levels21319,67003
static const uint16_t levels3[levels31365,68449
static const uint16_t levels4[levels41391,69235
static const uint16_t levels5[levels51403,69566
static const CoefVLCTable coef_vlcs[coef_vlcs1411,69773
const int64_t pow_table[pow_table1433,70384
const int32_t pow_10_to_yover16[] ICONST_ATTR=1484,73925
const int32_t pow_a_table[pow_a_table1506,75254
const int64_t lsp_pow_e_table[lsp_pow_e_table1527,76445
int32_t noisetable_exp[noisetable_exp1584,80472

demux/mkv/string_dispatcher.hpp,1773
#define VLC_MKV_STRING_DISPATCHER_HPP_24,1222
  namespace detail ::detail35,1391
    struct CStringCompare ::detail::CStringCompare36,1412
      bool operator () ::detail::CStringCompare::operator ()37,1440
  class StringDispatcher ::StringDispatcher43,1581
      typedef void(*Processor)::StringDispatcher::Processor45,1687
      typedef std::pair<char const ::StringDispatcher::const47,1740
      typedef std::pair<char const *, Processor>                         ProcessorEntry;::StringDispatcher::ProcessorEntry47,1740
      typedef std::map <char const ::StringDispatcher::const48,1829
      typedef std::map <char const *, Processor,::StringDispatcher::Processor48,1829
      typedef std::map <char const *, Processor, detail::CStringCompare> ProcessorContainer;::StringDispatcher::ProcessorContainer48,1829
      typedef std::vector<std::string>                      GlobParts;::StringDispatcher::GlobParts50,1923
      typedef std::vector<std::pair<::StringDispatcher::std::pair51,1994
      typedef std::vector<std::pair<GlobParts, Processor> > GlobContainer;::StringDispatcher::GlobContainer51,1994
      void insert ::StringDispatcher::insert54,2082
      void insert_glob ::StringDispatcher::insert_glob58,2175
      Processor find_glob_match ::StringDispatcher::find_glob_match75,2636
      bool send ::StringDispatcher::send123,4327
      ProcessorContainer _processors;::StringDispatcher::_processors147,4970
      GlobContainer _glob_processors;::StringDispatcher::_glob_processors148,5008
#define STRD_T0KENPASTE_(153,5078
#define STRD_TOKENPASTE_(154,5116
#define STRD_UNIQUE_NAME_ 155,5170
#define STRING_CASE_DEF(157,5247
#define S_CASE(160,5459
#define S_CASE_GLOB(165,5770
#define S_CASE_DEFAULT(170,6019

video_output/win32/events.c,2240
#define WM_VLC_HIDE_MOUSE 49,2073
#define WM_VLC_CHANGE_TEXT 50,2114
struct event_thread_t52,2156
    vout_display_t *vd;vd54,2180
    vlc_thread_t thread;57,2215
    vlc_mutex_t  lock;58,2240
    vlc_cond_t   wait;59,2263
    bool         b_ready;60,2286
    bool         b_done;61,2312
    bool         b_error;62,2337
    bool use_desktop;65,2374
    bool use_overlay;66,2396
    bool is_cursor_hidden;69,2435
    HCURSOR cursor_arrow;70,2462
    HCURSOR cursor_empty;71,2488
    unsigned button_pressed;72,2514
    win32_gesture_sys_t *p_gesture;p_gesture75,2563
    char *psz_title;psz_title78,2616
    int i_window_style;80,2638
    int x,81,2662
    int x, y;81,2662
    unsigned width,82,2676
    unsigned width, height;82,2676
    vout_window_t *parent_window;parent_window85,2715
    TCHAR class_main[class_main86,2749
    TCHAR class_video[class_video87,2776
    HWND hparent;88,2804
    HWND hwnd;89,2822
    HWND hvideownd;90,2837
    HWND hfswnd;91,2857
    video_format_t       source;92,2874
    vout_display_place_t place;93,2907
    HICON vlc_icon;95,2940
    atomic_bool has_moved;97,2961
static inline bool isMouseEvent(118,3683
static inline bool isKeyEvent(124,3804
static void *EventThread(EventThread137,4461
void EventThreadMouseHide(389,12138
void EventThreadUpdateTitle(394,12255
int EventThreadGetWindowStyle(409,12721
void EventThreadUpdateWindowPosition(415,12883
void EventThreadUpdateSourceAndPlace(430,13396
void EventThreadUseOverlay(440,13753
bool EventThreadGetAndResetHasMoved(446,13937
event_thread_t *EventThreadCreate(EventThreadCreate451,14061
void EventThreadDestroy(483,15423
int EventThreadStart(491,15613
void EventThreadStop(536,16989
static void UpdateCursor(558,17564
static HCURSOR EmptyCursor(585,18365
static void MousePressed(605,18846
static void MouseReleased(613,19101
enumWindowsProc(623,19444
static HWND GetDesktopHandle(644,19917
static int Win32VoutCreateWindow(667,20864
static void Win32VoutCloseWindow(865,28908
static long FAR PASCAL WinVoutEventProc(906,30568
    int i_dxkey;1058,35057
    int i_vlckey;1059,35074
} dxkeys_to_vlckeys[dxkeys_to_vlckeys1061,35093
static int Win32VoutConvertKey(1107,36457

text_renderer/freetype/platform_fonts.h,1709
#define PLATFORM_FONTS_H34,1658
# define SYSTEM_DEFAULT_FONT_FILE 52,1952
# define SYSTEM_DEFAULT_FAMILY 53,2030
# define SYSTEM_DEFAULT_MONOSPACE_FONT_FILE 54,2078
# define SYSTEM_DEFAULT_MONOSPACE_FAMILY 55,2159
# define SYSTEM_DEFAULT_FONT_FILE 57,2233
# define SYSTEM_DEFAULT_FAMILY 58,2321
# define SYSTEM_DEFAULT_MONOSPACE_FONT_FILE 59,2360
# define SYSTEM_DEFAULT_MONOSPACE_FAMILY 60,2415
# define SYSTEM_DEFAULT_FONT_FILE 62,2495
# define SYSTEM_DEFAULT_FAMILY 63,2552
# define SYSTEM_DEFAULT_MONOSPACE_FONT_FILE 64,2606
# define SYSTEM_DEFAULT_MONOSPACE_FAMILY 65,2674
# define SYSTEM_DEFAULT_FONT_FILE 67,2774
# define SYSTEM_DEFAULT_FAMILY 68,2843
# define SYSTEM_DEFAULT_MONOSPACE_FONT_FILE 69,2887
# define SYSTEM_DEFAULT_MONOSPACE_FAMILY 70,2965
# define SYSTEM_DEFAULT_FONT_FILE 72,3024
# define SYSTEM_DEFAULT_FAMILY 73,3113
# define SYSTEM_DEFAULT_MONOSPACE_FONT_FILE 74,3157
# define SYSTEM_DEFAULT_MONOSPACE_FAMILY 75,3251
# define DEFAULT_FONT_FILE 79,3338
# define DEFAULT_FAMILY 83,3421
# define DEFAULT_MONOSPACE_FONT_FILE 87,3511
# define DEFAULT_MONOSPACE_FAMILY 91,3624
typedef struct vlc_font_t vlc_font_t;97,3751
struct vlc_font_t98,3789
    vlc_font_t *p_next;p_next100,3809
    char       *psz_fontfile;psz_fontfile105,4036
    int         i_index;106,4066
    bool        b_bold;107,4149
    bool        b_italic;108,4214
    FT_Face     p_face;109,4282
struct vlc_family_t115,4414
    vlc_family_t *p_next;p_next117,4436
    char         *psz_name;psz_name128,5006
    vlc_font_t   *p_fonts;p_fonts129,5034
#define FB_LIST_ATTACHMENTS 132,5100
#define FB_LIST_DEFAULT 133,5142
#define FB_NAME 134,5180
#define File_Select(169,6579

control/dbus/dbus_root.c,1236
static const char ppsz_supported_uri_schemes[ppsz_supported_uri_schemes46,1685
static const char ppsz_supported_mime_types[ppsz_supported_mime_types52,1919
MarshalIdentity(78,2592
MarshalCanSetFullscreen(90,2885
MarshalFullscreen(115,3517
DBUS_METHOD(131,3933
MarshalCanQuit(156,4611
MarshalCanRaise(168,4891
MarshalHasTrackList(180,5173
MarshalDesktopEntry(192,5459
MarshalSupportedMimeTypes(204,5744
MarshalSupportedUriSchemes(233,6600
DBUS_METHOD(261,7443
DBUS_METHOD(268,7551
#define PROPERTY_MAPPING_BEGIN 275,7691
#define PROPERTY_GET_FUNC(276,7733
#define PROPERTY_SET_FUNC(287,8298
#define PROPERTY_MAPPING_END 291,8450
DBUS_METHOD(293,8533
DBUS_METHOD(340,9964
#undef PROPERTY_MAPPING_BEGIN366,10656
#undef PROPERTY_GET_FUNC367,10686
#undef PROPERTY_SET_FUNC368,10711
#undef PROPERTY_MAPPING_END369,10736
#define ADD_PROPERTY(371,10765
DBUS_METHOD(378,11032
#undef ADD_PROPERTY422,12372
#define METHOD_MAPPING_BEGIN 424,12393
#define METHOD_FUNC(425,12433
#define METHOD_MAPPING_END 428,12609
handle_root 431,12699
#undef METHOD_MAPPING_BEGIN442,13193
#undef METHOD_FUNC443,13221
#undef METHOD_MAPPING_END444,13240
PropertiesChangedSignal(450,13414
int RootPropertiesChangedEmit(504,15445

access/dshow/crossbar.cpp,254
#   define QACONTAINERFLAGS 36,1521
static const char * GetPhysicalPinName(43,1706
void DeleteCrossbarRoutes(78,3541
static HRESULT GetCrossbarIPinAtIndex(91,4017
static HRESULT GetCrossbarIndexFromIPin(134,5309
HRESULT FindCrossbarRoutes(178,6576

demux/oggseek.c,1377
#define THEORA_FTYPE_NOTDATA 45,1671
#define THEORA_FTYPE_INTERFRAME 46,1711
#define SEGMENT_NOT_FOUND 48,1752
#define MAX_PAGE_SIZE 50,1782
typedef struct packetStartCoordinates51,1810
    int64_t i_pos;53,1850
    int64_t i_pageno;54,1869
    int64_t i_skip;55,1891
} packetStartCoordinates;56,1911
  #define OggDebug(60,1987
  #define OggNoDebug(61,2017
  #define OggDebug(63,2050
  #define OggNoDebug(64,2075
void oggseek_index_entries_free 72,2294
static demux_index_entry_t *index_entry_new(index_entry_new87,2565
const demux_index_entry_t *OggSeek_IndexAdd OggSeek_IndexAdd98,2900
static bool OggSeekIndexFind 154,4179
static void seek_byte(187,5140
static int64_t get_data(204,5492
void Oggseek_ProbeEnd(235,6264
static int64_t find_first_page_granule(327,9039
bool Ogg_IsKeyFrame(444,12209
int64_t Ogg_GetKeyframeGranule(467,12957
static bool OggSeekToPacket(486,13552
static int64_t OggForwardSeekToFrame(554,16485
static int64_t OggBackwardSeekToFrame(651,19186
int64_t Oggseek_GranuleToAbsTimestamp(677,20014
static int64_t OggBisectSearchByTime(754,22455
        int64_t i_pos;763,22706
        int64_t i_timestamp;764,22729
        int64_t i_granule;765,22758
int Oggseek_BlindSeektoAbsoluteTime(898,27573
int Oggseek_BlindSeektoPosition(947,29254
int Oggseek_SeektoAbsolutetime(986,30807
int64_t oggseek_read_page(1041,33145

access/mms/mmsh.h,1034
#define VLC_MMS_MMSH_H_25,1169
    uint16_t i_type;29,1211
    uint16_t i_size;30,1232
    uint32_t i_sequence;32,1254
    uint16_t i_unknown;33,1279
    uint16_t i_size2;35,1304
    int      i_data;37,1327
    uint8_t  *p_data;p_data38,1348
} chunk_t;40,1371
#define BUFFER_SIZE 42,1383
struct access_sys_t43,1409
    int             i_proto;45,1431
    int             fd;47,1461
    vlc_url_t       url;48,1485
    bool      b_proxy;50,1511
    vlc_url_t       proxy;51,1534
    int             i_request_context;53,1562
    uint8_t         buffer[buffer55,1602
    bool      b_broadcast;57,1648
    uint8_t         *p_header;p_header59,1676
    int             i_header;60,1707
    uint8_t         *p_packet;p_packet62,1738
    uint32_t        i_packet_sequence;63,1769
    unsigned int    i_packet_used;64,1808
    unsigned int    i_packet_length;65,1843
    uint64_t        i_start;67,1881
    uint64_t        i_position;68,1910
    asf_header_t    asfh;70,1943
    guid_t          guid;71,1969

services_discovery/os2drive.c,104
#define IOCTL_CDROMDISK2 31,1181
#define CDROMDISK2_DRIVELETTERS 32,1218
VLC_SD_PROBE_HELPER(36,1291

demux/mkv/virtual_segment.hpp,2167
#define VLC_MKV_VIRTUAL_SEGMENT_HPP_27,1336
class virtual_chapter_c36,1556
    virtual_chapter_c(virtual_chapter_c::virtual_chapter_c39,1590
    static bool CompareTimecode(virtual_chapter_c::CompareTimecode66,3122
    matroska_segment_c  &segment;virtual_chapter_c::segment73,3365
    chapter_item_c      *p_chapter;virtual_chapter_c::p_chapter74,3399
    mtime_t             i_mk_virtual_start_time;virtual_chapter_c::i_mk_virtual_start_time75,3435
    mtime_t             i_mk_virtual_stop_time;virtual_chapter_c::i_mk_virtual_stop_time76,3484
    int                 i_seekpoint_num;virtual_chapter_c::i_seekpoint_num77,3532
    std::vector<virtual_chapter_c *> sub_vchapters;virtual_chapter_c::sub_vchapters78,3573
class virtual_edition_c84,3671
    std::vector<virtual_chapter_c*> vchapters;virtual_edition_c::vchapters89,3874
    bool                b_ordered;virtual_edition_c::b_ordered100,4516
    mtime_t             i_duration;virtual_edition_c::i_duration101,4551
    chapter_edition_c   *p_edition;virtual_edition_c::p_edition102,4587
    int                 i_seekpoint_num;virtual_edition_c::i_seekpoint_num103,4623
    void print(virtual_edition_c::print109,4777
class virtual_segment_c115,4943
    std::vector<virtual_edition_c*> veditions;virtual_segment_c::veditions120,5110
    std::vector<virtual_edition_c*>::size_type i_current_edition;virtual_segment_c::i_current_edition121,5157
    virtual_chapter_c               *p_current_vchapter;virtual_segment_c::p_current_vchapter122,5223
    bool                            b_current_vchapter_entered;virtual_segment_c::b_current_vchapter_entered123,5280
    int                             i_sys_title;virtual_segment_c::i_sys_title124,5344
    inline virtual_edition_c * CurrentEdition(virtual_segment_c::CurrentEdition127,5395
    virtual_chapter_c * CurrentChapter(virtual_segment_c::CurrentChapter134,5577
    matroska_segment_c * CurrentSegment(virtual_segment_c::CurrentSegment139,5672
    inline int64_t Duration(virtual_segment_c::Duration146,5838
    inline std::vector<virtual_edition_c*>* Editions(virtual_segment_c::Editions151,5945

video_output/win32/events.h,414
typedef struct event_thread_t event_thread_t;30,1288
    bool use_desktop;33,1352
    bool use_overlay;34,1389
    int x;35,1428
    int y;36,1439
    unsigned width;37,1450
    unsigned height;38,1470
} event_cfg_t;39,1491
    vout_window_t *parent_window;parent_window42,1524
    HWND hparent;43,1558
    HWND hwnd;44,1576
    HWND hvideownd;45,1591
    HWND hfswnd;46,1611
} event_hwnd_t;47,1628

arm_neon/yuyv_i422.S,78
yuyv_i422_neon:yuyv_i422_neon38,1330
uyvy_i422_neon:uyvy_i422_neon69,1925

video_filter/ripple.c,213
vlc_module_begin 51,2143
struct filter_sys_t68,2875
    double  f_angle;70,2897
    mtime_t last_date;71,2918
static int Create(79,3305
static void Destroy(106,4253
static picture_t *Filter(Filter119,4824

control/dbus/dbus_root.h,81
#define VLC_DBUS_DBUS_ROOT_H_28,1339
#define DBUS_MPRIS_ROOT_INTERFACE 33,1419

access/cdda.c,1071
#define CDDA_BLOCKS_ONCE 60,2011
struct demux_sys_t62,2040
    vcddev_t    *vcddev;vcddev64,2061
    es_out_id_t *es;es65,2141
    date_t       pts;66,2162
    unsigned start;68,2185
    unsigned length;69,2232
    unsigned position;70,2281
static int Demux(73,2352
static int DemuxControl(111,3495
static int DemuxOpen(159,4931
static void DemuxClose(241,7017
struct access_sys_t253,7376
    vcddev_t    *vcddev;vcddev255,7398
    int        *p_sectors;p_sectors256,7478
static cddb_disc_t *GetCDDBInfo(GetCDDBInfo260,7582
static int GetTracks(366,10440
#define NONEMPTY(392,11266
#define ON_EMPTY(394,11392
#undef ON_EMPTY586,18033
#undef NONEMPTY587,18049
static block_t *BlockDummy(BlockDummy608,18431
static int AccessOpen(615,18560
static void AccessClose(681,20349
#define CDAUDIO_DEV_TEXT 694,20735
# define CDAUDIO_DEV_LONGTEXT 696,20826
# define CD_DEVICE 699,20987
# define CDAUDIO_DEV_LONGTEXT 701,21022
#  define CD_DEVICE 704,21136
#  define CD_DEVICE 706,21199
#  define CD_DEVICE 708,21242
vlc_module_begin 712,21296

demux/oggseek.h,300
#define PAGE_HEADER_BYTES 29,1449
#define OGGSEEK_BYTES_TO_READ 31,1479
struct oggseek_index_entry39,1769
    demux_index_entry_t *p_next;p_next41,1798
    demux_index_entry_t *p_prev;p_prev42,1831
    int64_t i_value;45,1936
    int64_t i_pagepos;46,1957
    int64_t i_pagepos_end;49,2048

demux/adaptive/http/Downloader.cpp,281
Downloader::Downloader(31,1123
bool Downloader::start(39,1263
Downloader::~Downloader(51,1535
void Downloader::schedule(60,1746
void Downloader::cancel(68,1928
void * Downloader::downloaderThread(75,2073
void Downloader::DownloadSource(84,2297
void Downloader::Run(90,2449

demux/adaptive/playlist/SegmentTemplate.h,451
#define SEGMENTTEMPLATE_H25,1224
        class BaseSegmentTemplate 39,1488
                BaseSegmentTemplate(42,1569
        class MediaSegmentTemplate 45,1644
                MediaSegmentTemplate(51,1935
                virtual void setSourceUrl(52,2004
                void mergeWith(53,2086
                virtual uint64_t getSequenceNumber(54,2153
        class InitSegmentTemplate 66,2690
                InitSegmentTemplate(69,2783

demux/mp4/languages.h,79
#define VLC_MP4_LANGUAGES_H_21,1124
static bool decodeQtLanguageCode(23,1154

demux/adaptive/Time.hpp,396
#define TIME_HPP21,1096
typedef int64_t stime_t;26,1157
class Timescale28,1183
        Timescale(Timescale::Timescale31,1213
        mtime_t ToTime(Timescale::ToTime33,1262
        stime_t ToScaled(Timescale::ToScaled41,1482
        bool isValid(Timescale::isValid48,1671
        operator uint64_t(Timescale::operator uint64_t49,1720
        uint64_t scale;Timescale::scale52,1786

demux/mpeg/ts_streams_private.h,2608
#define VLC_TS_STREAMS_PRIVATE_H20,1051
typedef struct dvbpsi_s dvbpsi_t;22,1085
typedef struct ts_sections_processor_t ts_sections_processor_t;23,1119
struct ts_pat_t30,1253
    int             i_version;32,1271
    int             i_ts_id;33,1302
    dvbpsi_t       *handle;handle34,1331
    DECL_ARRAY(35,1359
struct ts_pmt_t39,1401
    dvbpsi_t       *handle;handle41,1419
    int             i_version;42,1447
    int             i_number;43,1478
    int             i_pid_pcr;44,1508
    bool            b_selected;45,1539
    od_descriptor_t *iod;iod47,1599
    od_descriptors_t od;48,1625
    DECL_ARRAY(50,1651
        mtime_t i_current;59,1894
        mtime_t i_first;60,1921
        mtime_t i_first_dts;62,1997
        mtime_t i_pcroffset;63,2026
        bool    b_disable;64,2055
        bool    b_fix_done;65,2114
    } pcr;66,2142
        time_t i_event_start;70,2171
        time_t i_event_length;71,2201
    } eit;72,2232
    mtime_t i_last_dts;74,2244
struct ts_pes_es_t78,2273
    ts_pmt_t *p_program;p_program80,2294
    es_format_t  fmt;81,2319
    es_out_id_t *id;id82,2341
    uint16_t i_sl_es_id;83,2362
    ts_pes_es_t *p_extraes;p_extraes84,2387
    ts_pes_es_t *p_next;p_next85,2485
    uint8_t  b_interlaced;87,2588
        uint8_t i_service_id;91,2651
        uint32_t i_format;92,2681
    } metadata;93,2708
    TS_TRANSPORT_PES,98,2743
    TS_TRANSPORT_SECTIONS,99,2765
    TS_TRANSPORT_IGNORE100,2792
} ts_transport_type_t;101,2816
struct ts_pes_t103,2840
    ts_pes_es_t *p_es;p_es105,2858
    uint8_t i_stream_type;107,2882
    ts_transport_type_t transport;109,2910
    int         i_data_size;110,2945
    int         i_data_gathered;111,2974
    block_t     *p_data;p_data112,3007
    block_t     **pp_last;pp_last113,3032
    bool        b_always_receive;114,3059
    ts_sections_processor_t *p_sections_proc;p_sections_proc115,3093
    block_t *   p_prepcr_outqueue;117,3140
        block_t     *p_data;p_data122,3209
        block_t     **pp_last;pp_last123,3238
    } sl;124,3269
typedef struct ts_si_context_t ts_si_context_t;127,3283
struct ts_si_t129,3332
    dvbpsi_t *handle;handle131,3349
    int       i_version;132,3371
    ts_pid_t *eitpid;eitpid134,3433
    ts_pid_t *tdtpid;tdtpid135,3455
typedef struct ts_psip_context_t ts_psip_context_t;138,3481
struct ts_psip_t140,3534
    dvbpsi_t       *handle;handle142,3553
    int             i_version;143,3581
    ts_pes_es_t    *p_eas_es;p_eas_es144,3612
    ts_psip_context_t *p_ctx;p_ctx145,3642
    DECL_ARRAY(149,3907

demux/mkv/Ebml_parser.cpp,770
EbmlParser::EbmlParser(32,1464
EbmlParser::~EbmlParser(46,1827
void EbmlParser::reconstruct(65,2114
void EbmlParser::reconstruct(70,2300
void EbmlParser::Up(80,2538
void EbmlParser::Down(90,2732
void EbmlParser::Keep(96,2804
void EbmlParser::Unkeep(101,2859
int EbmlParser::GetLevel(106,2911
void EbmlParser::Reset(111,2981
static const EbmlSemanticContext Context_EbmlNoGlobal 128,3476
static const EbmlSemantic EbmlNoGlobal_ContextList[EbmlNoGlobal_ContextList129,3600
static const EbmlSemanticContext EbmlNoGlobal_Context 134,3802
static const EbmlSemanticContext & GetEbmlNoGlobal_Context(135,3978
const EbmlSemanticContext Context_KaxSegmentVLC 141,4166
EbmlElement *EbmlParser::Get(EbmlParser::Get147,4662
bool EbmlParser::IsTopPresent(280,8860

codec/wmafixed/wmadeci.c,2161
#define IBSS_ATTR25,867
#define ICONST_ATTR26,885
#define ICODE_ATTR27,905
#undef WMA_DEBUG 31,958
#define VLCBITS 40,1133
#define VLCMAX 41,1195
#define EXPVLCBITS 43,1236
#define EXPMAX 44,1257
#define HGAINVLCBITS 46,1304
#define HGAINMAX 47,1327
typedef struct CoefVLCTable50,1381
    int n;52,1411
    const uint32_t *huffcodes;huffcodes53,1450
    const uint8_t *huffbits;huffbits54,1502
    const uint16_t *levels;levels55,1552
CoefVLCTable;57,1620
int32_t coefsarray[MAX_CHANNELS][BLOCK_MAX_SIZE] IBSS_ATTR;61,1707
int32_t stat0[stat065,1867
int32_t stat0[2048], stat1[stat165,1867
int32_t stat0[2048], stat1[1024], stat2[stat265,1867
int32_t stat0[2048], stat1[1024], stat2[512], stat3[stat365,1867
int32_t stat0[2048], stat1[1024], stat2[512], stat3[256], stat4[stat465,1867
uint16_t *runtabarray[runtabarray68,1972
uint16_t *runtabarray[2], *levtabarray[levtabarray68,1972
uint16_t runtab0[runtab071,2077
uint16_t runtab0[1336], runtab1[runtab171,2077
uint16_t runtab0[1336], runtab1[1336], levtab0[levtab071,2077
uint16_t runtab0[1336], runtab1[1336], levtab0[1336], levtab1[levtab171,2077
#define VLCBUF1SIZE 73,2147
#define VLCBUF2SIZE 74,2172
#define VLCBUF3SIZE 75,2197
#define VLCBUF4SIZE 76,2221
VLC_TYPE vlcbuf1[vlcbuf180,2298
VLC_TYPE vlcbuf2[vlcbuf281,2332
VLC_TYPE vlcbuf3[vlcbuf382,2366
VLC_TYPE vlcbuf4[vlcbuf483,2400
void vector_fmul_add_add(95,2543
void vector_fmul_reverse(118,3345
void vector_fmul_add_add(141,4057
void vector_fmul_reverse(171,5086
static inline void vector_fmul_add_add(201,6107
static inline void vector_fmul_reverse(207,6306
static void wma_window(225,6830
static void init_coef_vlc(276,8745
int wma_decode_init(311,9647
static inline int32_t pow_m1_4(715,21684
        float f;718,21761
        unsigned int v;719,21778
static void wma_lsp_to_curve_init(739,22416
static void wma_lsp_to_curve(773,23391
static void decode_exp_lsp(819,24714
static int decode_exp_vlc(841,25265
static int wma_decode_block(903,26693
static int wma_decode_frame(1391,42500
int wma_decode_superframe_init(1441,43513
int wma_decode_superframe_frame(1479,44405

demux/mpeg/ts_psi.c,1802
static int PATCheck(62,1826
static void PATCallBack(80,2379
#define PMT_DESC_PREFIX 182,5939
#define PMT_DESC_INDENT 183,5985
static void ParsePMTRegistrations(184,6031
                    const char rgs[rgs212,7124
                    const ts_pmt_registration_type_t reg;213,7163
static dvbpsi_descriptor_t *PMTEsFindDescriptor(PMTEsFindDescriptor301,10344
static bool PMTEsHasRegistration(309,10638
static bool PMTEsHasComponentTag(327,11132
static void SetupISO14496Descriptors(340,11536
static void SetupMetadataDescriptors(408,14109
static void SetupAVCDescriptors(428,14931
static void SetupJ2KDescriptors(440,15419
    int  i_type;466,16515
    int  i_magazine;467,16532
    int  i_page;468,16553
    char p_iso639[p_iso639469,16570
} ts_teletext_page_t;470,16592
static const char *const ppsz_teletext_type[ppsz_teletext_type472,16615
static void PMTSetupEsTeletext(481,16838
static void PMTSetupEsDvbSubtitle(618,21622
static int vlc_ceil_log2(708,24690
static void OpusSetup(717,24827
static void PMTSetupEs0x06(826,28108
static void PMTSetupEs0xEA(962,34249
static void PMTSetupEs0xD1(984,34956
static void PMTSetupEs0xA0(1002,35499
static void PMTSetupEs0x83(1039,36862
static bool PMTSetupEsHDMV(1054,37430
static bool PMTSetupEsRegistration(1107,38922
        char         psz_tag[psz_tag1112,39099
        int          i_cat;1113,39132
        vlc_fourcc_t i_codec;1114,39160
static char *GetAudioTypeDesc(GetAudioTypeDesc1141,40012
static void PMTParseEsIso639(1157,40410
static void PIDFillFormat(1217,42570
static void FillPESFromDvbpsiES(1300,45590
static en50221_capmt_info_t * CreateCAPMTInfo(1398,49098
static void PMTCallBack(1432,50398
int UserPmt(1793,64095
bool ts_psi_PAT_Attach(1920,67687
void ts_psi_Packet_Push(1927,67929

mux/mpeg/pes.c,61
static inline int PESHeader(53,2307
void EStoPES 319,13286

codec/theora.c,1159
struct decoder_sys_t50,1913
    bool b_packetizer;53,1958
    bool b_has_headers;58,2021
    th_info          ti;63,2086
    th_comment       tc;64,2149
    th_dec_ctx       *tcx;tcx65,2213
    bool b_decoded_first_keyframe;70,2316
    mtime_t i_pts;75,2392
#define ENC_QUALITY_TEXT 104,3480
#define ENC_QUALITY_LONGTEXT 105,3528
#define ENC_POSTPROCESS_TEXT 109,3702
vlc_module_begin 111,3762
#   define DEC_CFG_PREFIX 119,4048
#   define ENC_CFG_PREFIX 135,4566
static int OpenDecoder(148,5026
static int OpenPacketizer(185,6104
static void *DecodeBlock(DecodeBlock205,6713
static int ProcessHeaders(240,7672
static void Flush(429,14528
static void *ProcessPacket(ProcessPacket439,14852
static picture_t *DecodePacket(DecodePacket494,16434
static void ParseTheoraComments(540,18185
static void CloseDecoder(589,20313
static void theora_CopyPicture(604,20844
struct encoder_sys_t652,22676
    bool b_headers;657,22738
    th_info      ti;662,22799
    th_comment   tc;663,22872
    th_enc_ctx   *tcx;tcx664,22941
static int OpenEncoder(670,23217
static block_t *Encode(Encode803,27995
static void CloseEncoder(907,31955

video_output/wayland/shm.c,1105
#define MAX_PICTURES 45,1430
struct vout_display_sys_t47,1454
    vout_window_t *embed;embed49,1482
    struct wl_event_queue *eventq;eventq50,1525
    struct wl_shm *shm;shm51,1560
    struct wl_scaler *scaler;scaler52,1584
    struct wl_viewport *viewport;viewport53,1614
    picture_pool_t *pool;pool55,1649
    int x;57,1695
    int y;58,1706
    bool use_buffer_transform;59,1717
static void PictureDestroy(62,1752
static void buffer_release_cb(71,1996
static const struct wl_buffer_listener buffer_cbs 79,2142
static void PictureAttach(84,2223
static void PictureDetach(92,2411
static picture_pool_t *Pool(Pool100,2576
static void Prepare(213,5567
static void Display(231,6109
static void ResetPictures(243,6463
static int Control(255,6712
static void shm_format_cb(343,9756
static const struct wl_shm_listener shm_cbs 357,10120
static void registry_global_cb(362,10191
static void registry_global_remove_cb(381,10870
static const struct wl_registry_listener registry_cbs 390,11110
static int Open(396,11227
static void Close(490,13956
vlc_module_begin(508,14433

audio_output/alsa.c,1293
struct aout_sys_t43,1691
    snd_pcm_t *pcm;pcm45,1711
    unsigned rate;46,1731
    vlc_fourcc_t format;47,1770
    uint8_t chans_table[chans_table48,1817
    uint8_t chans_to_reorder;49,1886
    bool soft_mute;51,1955
    float soft_gain;52,1975
    char *device;device53,1996
#define A52_FRAME_NB 58,2052
#define AUDIO_DEV_TEXT 64,2225
#define AUDIO_DEV_LONGTEXT 65,2274
#define AUDIO_CHAN_TEXT 67,2349
#define AUDIO_CHAN_LONGTEXT 68,2401
static const int channels[channels71,2624
static const char *const channels_text[channels_text75,2784
vlc_module_begin 80,2967
#define Dump(120,4199
static void DumpDevice 123,4301
static void DumpDeviceStatus 138,4768
#define DumpDeviceStatus(146,5005
static const uint16_t vlc_chans[vlc_chans149,5106
static int Map2Mask 163,5632
static unsigned SetupChannelsFixed(192,6397
static unsigned SetupChannels 213,6919
# define SetupChannels(274,8733
static int Start 284,9090
#define FS(375,12438
#undef FS381,12714
static int TimeGet 642,21645
static void Play 660,22059
static void Pause 705,23338
static void PauseDummy 714,23553
static void Flush 729,23876
static void Stop 744,24117
static int EnumDevices(756,24319
static int DeviceSelect 811,25797
static int Open(826,26157
static void Close(865,27148

stream_out/rtpfmt.c,1503
#define XIPH_IDENT 65,3074
static int rtp_xiph_pack_headers(69,3155
static char *rtp_xiph_b64_oob_config(rtp_xiph_b64_oob_config130,4795
static void sprintf_hexa(153,5476
int rtp_get_fmt(166,5829
int rtp_packetize_xiph_config(579,21170
static int rtp_packetize_xiph(663,23253
static int rtp_packetize_mpa(718,24829
static int rtp_packetize_mpv(754,25892
static int rtp_packetize_ac3(852,28964
static int rtp_packetize_simple(888,29980
static int rtp_packetize_split(901,30362
static int rtp_packetize_pcm(933,31302
static int rtp_packetize_swab(964,32216
static int rtp_packetize_mp4a_latm(997,33137
static int rtp_packetize_mp4a(1049,34560
#define RTP_H263_HEADER_SIZE 1090,35770
#define RTP_H263_PAYLOAD_START 1091,35816
static int rtp_packetize_h263(1092,35865
rtp_packetize_h264_nal(1154,37626
static int rtp_packetize_h264(1221,39531
static int rtp_packetize_amr(1263,40799
static int rtp_packetize_t140(1302,42034
static int rtp_packetize_spx(1353,43319
static int rtp_packetize_g726(1430,45637
static int rtp_packetize_g726_16(1463,46576
static int rtp_packetize_g726_24(1468,46699
static int rtp_packetize_g726_32(1473,46822
static int rtp_packetize_g726_40(1478,46945
#define RTP_VP8_HEADER_SIZE 1483,47068
#define RTP_VP8_PAYLOAD_START 1484,47098
static int rtp_packetize_vp8(1486,47156
static int rtp_packetize_rawvideo(1536,48533
static int rtp_packetize_r420(1673,52851
static int rtp_packetize_rgb24(1678,52988
static int rtp_packetize_jpeg(1683,53127

demux/mpeg/ts_psi.h,221
#define VLC_TS_PSI_H20,1027
    TS_PMT_REGISTRATION_NONE 26,1089
    TS_PMT_REGISTRATION_BLURAY,27,1123
    TS_PMT_REGISTRATION_ATSC,28,1155
    TS_PMT_REGISTRATION_ARIB,29,1185
} ts_pmt_registration_type_t;30,1215

codec/fdkaac.c,1331
#define ENC_CFG_PREFIX 65,2965
#define AOT_TEXT 67,3004
#define AOT_LONGTEXT 68,3043
#define SIDEBAND_TEXT 70,3096
#define SIDEBAND_LONGTEXT 71,3157
#define VBR_QUALITY_TEXT 73,3247
#define VBR_QUALITY_LONGTEXT 74,3290
#define AFTERBURNER_TEXT 76,3398
#define AFTERBURNER_LONGTEXT 77,3456
#define SIGNALING_TEXT 79,3599
#define SIGNALING_LONGTEXT 80,3664
#define  CH_ORDER_MPEG 82,3778
#define  CH_ORDER_WAV 83,3878
#define  CH_ORDER_WG4 84,3978
#define PROFILE_AAC_LC 86,4079
#define PROFILE_AAC_HE 87,4104
#define PROFILE_AAC_HE_v2 88,4129
#define PROFILE_AAC_LD 89,4158
#define PROFILE_AAC_ELD 90,4184
#define SIGNALING_COMPATIBLE 92,4212
#define SIGNALING_HIERARCHICAL 93,4243
static const int pi_aot_values[pi_aot_values95,4277
static const char *const ppsz_aot_descriptions[ppsz_aot_descriptions96,4400
vlc_module_begin 99,4530
struct encoder_sys_t134,6042
    double d_compression_ratio;136,6065
    mtime_t i_pts_last;137,6097
    int i_encoderdelay;138,6121
    int i_frame_size;139,6191
    int i_maxoutputsize;140,6213
    HANDLE_AACENCODER handle;141,6283
static const char *fdkaac_error(fdkaac_error144,6317
static int OpenEncoder(166,7396
#define SET_PARAM(235,9887
#undef SET_PARAM272,11504
static block_t *EncodeAudio(EncodeAudio320,13074
static void CloseEncoder(457,19450

mux/mpeg/pes.h,401
#define PES_PROGRAM_STREAM_MAP 25,1187
#define PES_PRIVATE_STREAM_1 26,1232
#define PES_PADDING 27,1277
#define PES_PRIVATE_STREAM_2 28,1322
#define PES_ECM 29,1367
#define PES_EMM 30,1412
#define PES_PROGRAM_STREAM_DIRECTORY 31,1457
#define PES_DSMCC_STREAM 32,1502
#define PES_ITU_T_H222_1_TYPE_E_STREAM 33,1547
#define PES_EXTENDED_STREAM_ID 34,1592
#define PES_PAYLOAD_SIZE_MAX 36,1638

access/http/conn.h,331
struct vlc_http_conn_cbs33,1232
    struct vlc_http_stream *(*stream_open)stream_open35,1259
    void (*release)release37,1399
struct vlc_http_conn40,1448
    const struct vlc_http_conn_cbs *cbs;cbs42,1471
    struct vlc_tls *tls;tls43,1512
vlc_http_stream_open(47,1580
static inline void vlc_http_conn_release(52,1708

gui/minimal_macosx/macosx.c,26
vlc_module_begin 53,2233

access/dshow/dshow.cpp,3770
#define CFG_PREFIX 33,1460
#define VLC_MODULE_LICENSE 39,1565
#define INSTANCEDATA_OF_PROPERTY_PTR(54,1903
#define INSTANCEDATA_OF_PROPERTY_SIZE(55,1968
static const int pi_tuner_input[pi_tuner_input87,3626
static const char *const ppsz_tuner_input_text[ppsz_tuner_input_text88,3675
static const int pi_amtuner_mode[pi_amtuner_mode91,3776
static const char *const ppsz_amtuner_mode_text[ppsz_amtuner_mode_text96,4081
static const int i_standards_list[i_standards_list102,4374
static const char *const ppsz_standards_list_text[ppsz_standards_list_text114,4989
#define VDEV_TEXT 127,5355
#define VDEV_LONGTEXT 128,5397
#define ADEV_TEXT 132,5583
#define ADEV_LONGTEXT 133,5625
#define SIZE_TEXT 137,5812
#define SIZE_LONGTEXT 138,5847
#define ASPECT_TEXT 142,6112
#define ASPECT_LONGTEXT 143,6163
#define CHROMA_TEXT 144,6251
#define CHROMA_LONGTEXT 145,6303
#define FPS_TEXT 148,6447
#define FPS_LONGTEXT 149,6493
#define CONFIG_TEXT 152,6648
#define CONFIG_LONGTEXT 153,6692
#define TUNER_TEXT 156,6816
#define TUNER_LONGTEXT 157,6858
#define CHANNEL_TEXT 159,6947
#define CHANNEL_LONGTEXT 160,6991
#define TVFREQ_TEXT 163,7099
#define TVFREQ_LONGTEXT 164,7141
#define STANDARD_TEXT 165,7218
#define COUNTRY_TEXT 166,7263
#define COUNTRY_LONGTEXT 167,7309
#define TUNER_INPUT_TEXT 170,7461
#define TUNER_INPUT_LONGTEXT 171,7509
#define VIDEO_IN_TEXT 173,7597
#define VIDEO_IN_LONGTEXT 174,7641
#define AUDIO_IN_TEXT 179,7945
#define AUDIO_IN_LONGTEXT 180,7989
#define VIDEO_OUT_TEXT 182,8090
#define VIDEO_OUT_LONGTEXT 183,8136
#define AUDIO_OUT_TEXT 185,8237
#define AUDIO_OUT_LONGTEXT 186,8283
#define AMTUNER_MODE_TEXT 189,8385
#define AMTUNER_MODE_LONGTEXT 190,8431
#define AUDIO_CHANNELS_TEXT 194,8574
#define AUDIO_CHANNELS_LONGTEXT 195,8633
#define AUDIO_SAMPLERATE_TEXT 198,8757
#define AUDIO_SAMPLERATE_LONGTEXT 199,8811
#define AUDIO_BITSPERSAMPLE_TEXT 202,8924
#define AUDIO_BITSPERSAMPLE_LONGTEXT 203,8985
typedef struct dshow_stream_t306,12710
    std::string          devicename;dshow_stream_t::devicename308,12742
    IBaseFilter     *p_device_filter;dshow_stream_t::p_device_filter309,12779
    CaptureFilter   *p_capture_filter;dshow_stream_t::p_capture_filter310,12817
    AM_MEDIA_TYPE   mt;dshow_stream_t::mt311,12856
      VIDEOINFOHEADER video;dshow_stream_t::video315,12897
      WAVEFORMATEX    audio;dshow_stream_t::audio316,12926
    } header;dshow_stream_t::header318,12956
    int             i_fourcc;dshow_stream_t::i_fourcc320,12971
    es_out_id_t     *p_es;dshow_stream_t::p_es321,13001
    bool      b_pts;dshow_stream_t::b_pts323,13029
    std::deque<VLCMediaSample> samples_queue;dshow_stream_t::samples_queue325,13051
} dshow_stream_t;326,13097
static void CreateDirectShowGraph(331,13307
static void DeleteDirectShowGraph(353,14163
static int CommonOpen(394,15569
        const char *psz_size;::psz_size438,16945
        int  i_width;::i_width439,16975
        int  i_height;::i_height440,16997
static int DemuxOpen(676,25341
static int AccessOpen(774,28812
static void CommonClose(806,29725
static void AccessClose(827,30362
static void DemuxClose(841,30810
static bool ConnectFilters(855,31241
static int GetFourCCPriority(952,34704
#define MAX_MEDIA_TYPES 973,35091
static int OpenDevice(975,35119
FindCaptureDevice(1190,43311
static size_t EnumDeviceCaps(1310,47851
static block_t *ReadCompressed(ReadCompressed1752,69490
static int Demux(1800,71009
static int AccessControl(1897,74287
static int DemuxControl(1944,75592
static int FindDevices(1982,76604
static void ShowPropertyPage(2024,77927
static void ShowDeviceProperties(2048,78579
static void ShowTunerProperties(2127,80959
static void ConfigTuner(2162,82093

demux/adaptive/http/ConnectionParams.hpp,590
#define CONNECTIONPARAMS_HPP21,1006
namespace adaptive26,1079
    namespace httpadaptive::http28,1100
        class ConnectionParamsadaptive::http::ConnectionParams32,1148
                std::string uri;adaptive::http::ConnectionParams::uri46,1662
                std::string scheme;adaptive::http::ConnectionParams::scheme47,1695
                std::string hostname;adaptive::http::ConnectionParams::hostname48,1731
                std::string path;adaptive::http::ConnectionParams::path49,1769
                uint16_t port;adaptive::http::ConnectionParams::port50,1803

video_filter/motiondetect.c,852
#define FILTER_PREFIX 45,1827
vlc_module_begin 47,1866
#define NUM_COLORS 67,2701
struct filter_sys_t69,2728
    bool is_yuv_planar;71,2750
    bool b_old;72,2774
    picture_t *p_old;p_old73,2790
    uint32_t *p_buf;p_buf74,2812
    uint32_t *p_buf2;p_buf275,2833
    int i_colors;78,2866
    int colors[colors79,2884
    int color_x_min[color_x_min80,2912
    int color_x_max[color_x_max81,2945
    int color_y_min[color_y_min82,2978
    int color_y_max[color_y_max83,3011
static int Create(89,3217
static void Destroy(139,4704
static void PreparePlanar(154,5139
static int PreparePacked(222,7406
static picture_t *Filter(Filter260,8831
static void GaussianConvolution(333,11044
static int FindShapes(383,13142
                #define CHECK(429,14662
                #undef CHECK441,15216
static void Draw(520,17613

codec/substext.h,578
struct subpicture_updater_sys_t 27,1224
    text_segment_t *p_segments;p_segments28,1258
    int  align;30,1291
    int  x;31,1307
    int  y;32,1319
    bool is_fixed;34,1332
    int  fixed_width;35,1351
    int  fixed_height;36,1373
    bool noregionbg;37,1396
    bool gridmode;38,1417
    text_style_t *p_default_style;p_default_style41,1455
static int SubpictureTextValidate(44,1535
static void SubpictureTextUpdate(67,2470
static void SubpictureTextDestroy(133,5230
static inline subpicture_t *decoder_NewSubpictureText(decoder_NewSubpictureText142,5462

access/linsys/linsys_sdivideo.h,5091
#define _SDIVIDEO_H39,1797
#define SDIVIDEO_DRIVER_NAME 42,1836
#define SDIVIDEO_MAJOR 44,1877
#define SDIVIDEO_TX_BUFFERS_MIN 47,1993
#define SDIVIDEO_TX_BUFSIZE_MIN 54,2444
#define SDIVIDEO_RX_BUFFERS_MIN 55,2481
#define SDIVIDEO_RX_BUFSIZE_MIN 56,2545
#define SDIVIDEO_TX_BUFFERS 58,2627
#define SDIVIDEO_TX_BUFSIZE 59,2688
#define SDIVIDEO_RX_BUFFERS 60,2771
#define SDIVIDEO_RX_BUFSIZE 61,2832
#define SDIVIDEO_IOC_MAGIC 64,2943
#define SDIVIDEO_IOC_TXGETCAP	67,3082
#define SDIVIDEO_IOC_TXGETEVENTS	68,3155
#define SDIVIDEO_IOC_TXGETBUFLEVEL	69,3230
#define SDIVIDEO_IOC_TXGETTXD	70,3307
#define SDIVIDEO_IOC_TXGETREF	71,3371
#define SDIVIDEO_IOC_RXGETCAP	73,3445
#define SDIVIDEO_IOC_RXGETEVENTS	74,3519
#define SDIVIDEO_IOC_RXGETBUFLEVEL	75,3595
#define SDIVIDEO_IOC_RXGETCARRIER	76,3673
#define SDIVIDEO_IOC_RXGETSTATUS	77,3741
#define SDIVIDEO_IOC_RXGETYCRCERROR	78,3808
#define SDIVIDEO_IOC_RXGETCCRCERROR	79,3887
#define SDIVIDEO_IOC_RXGETVIDSTATUS	80,3966
#define SDIVIDEO_IOC_GETID	82,4046
#define SDIVIDEO_IOC_GETVERSION	83,4118
#define SDIVIDEO_IOC_QBUF_DEPRECATED	85,4264
#define SDIVIDEO_IOC_QBUF	86,4345
#define SDIVIDEO_IOC_DQBUF_DEPRECATED	88,4470
#define SDIVIDEO_IOC_DQBUF	89,4552
#define SDIVIDEO_EVENT_TX_BUFFER_ORDER	92,4653
#define SDIVIDEO_EVENT_TX_BUFFER	93,4694
#define SDIVIDEO_EVENT_TX_FIFO_ORDER	94,4765
#define SDIVIDEO_EVENT_TX_FIFO	95,4804
#define SDIVIDEO_EVENT_TX_DATA_ORDER	96,4872
#define SDIVIDEO_EVENT_TX_DATA	97,4911
#define SDIVIDEO_EVENT_TX_REF_ORDER	98,4979
#define SDIVIDEO_EVENT_TX_REF	99,5017
#define SDIVIDEO_EVENT_RX_BUFFER_ORDER	102,5124
#define SDIVIDEO_EVENT_RX_BUFFER	103,5165
#define SDIVIDEO_EVENT_RX_FIFO_ORDER	104,5236
#define SDIVIDEO_EVENT_RX_FIFO	105,5275
#define SDIVIDEO_EVENT_RX_CARRIER_ORDER	106,5343
#define SDIVIDEO_EVENT_RX_CARRIER	107,5385
#define SDIVIDEO_EVENT_RX_DATA_ORDER	108,5458
#define SDIVIDEO_EVENT_RX_DATA	109,5497
#define SDIVIDEO_EVENT_RX_STD_ORDER	110,5565
#define SDIVIDEO_EVENT_RX_STD	111,5603
#define SDIVIDEO_CAP_RX_CD	114,5699
#define SDIVIDEO_CAP_RX_DATA	115,5738
#define SDIVIDEO_CAP_RX_ERR_COUNT	116,5779
#define SDIVIDEO_CAP_RX_VBI	117,5824
#define SDIVIDEO_CAP_RX_RAWMODE	118,5864
#define SDIVIDEO_CAP_RX_DEINTERLACING	119,5908
#define SDIVIDEO_CTL_TX_CLKSRC_ONBOARD	122,5998
#define SDIVIDEO_CTL_TX_CLKSRC_NTSC	123,6040
#define SDIVIDEO_CTL_TX_CLKSRC_PAL	124,6079
#define SDIVIDEO_CTL_TX_CLKSRC_525P	125,6117
#define SDIVIDEO_CTL_TX_CLKSRC_625P	126,6156
#define SDIVIDEO_CTL_TX_CLKSRC_720P_60	127,6195
#define SDIVIDEO_CTL_TX_CLKSRC_720P_59_94	128,6237
#define SDIVIDEO_CTL_TX_CLKSRC_720P_50	129,6281
#define SDIVIDEO_CTL_TX_CLKSRC_720P_30	130,6323
#define SDIVIDEO_CTL_TX_CLKSRC_720P_29_97	131,6365
#define SDIVIDEO_CTL_TX_CLKSRC_720P_25	132,6409
#define SDIVIDEO_CTL_TX_CLKSRC_720P_24	133,6452
#define SDIVIDEO_CTL_TX_CLKSRC_720P_23_98	134,6495
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_60	135,6540
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_59_94	136,6584
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_50	137,6630
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_30	138,6674
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_29_97	139,6718
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_25	140,6764
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_24	141,6808
#define SDIVIDEO_CTL_TX_CLKSRC_1080P_23_98	142,6852
#define SDIVIDEO_CTL_TX_CLKSRC_1080I_60	143,6898
#define SDIVIDEO_CTL_TX_CLKSRC_1080I_59_94	144,6942
#define SDIVIDEO_CTL_TX_CLKSRC_1080I_50	145,6988
#define SDIVIDEO_CTL_MODE_UYVY	148,7053
#define SDIVIDEO_CTL_MODE_V210	149,7088
#define SDIVIDEO_CTL_MODE_V210_DEINTERLACE	150,7123
#define SDIVIDEO_CTL_MODE_RAW	151,7168
#define SDIVIDEO_CTL_UNLOCKED	154,7229
#define SDIVIDEO_CTL_SMPTE_125M_486I_59_94HZ	155,7264
#define SDIVIDEO_CTL_BT_601_576I_50HZ	156,7312
#define SDIVIDEO_CTL_SMPTE_260M_1035I_60HZ	157,7354
#define SDIVIDEO_CTL_SMPTE_260M_1035I_59_94HZ	158,7400
#define SDIVIDEO_CTL_SMPTE_295M_1080I_50HZ	159,7449
#define SDIVIDEO_CTL_SMPTE_274M_1080I_60HZ	160,7495
#define SDIVIDEO_CTL_SMPTE_274M_1080PSF_30HZ	161,7541
#define SDIVIDEO_CTL_SMPTE_274M_1080I_59_94HZ	162,7589
#define SDIVIDEO_CTL_SMPTE_274M_1080PSF_29_97HZ	163,7639
#define SDIVIDEO_CTL_SMPTE_274M_1080I_50HZ	164,7691
#define SDIVIDEO_CTL_SMPTE_274M_1080PSF_25HZ	165,7738
#define SDIVIDEO_CTL_SMPTE_274M_1080PSF_24HZ	166,7787
#define SDIVIDEO_CTL_SMPTE_274M_1080PSF_23_98HZ	167,7836
#define SDIVIDEO_CTL_SMPTE_274M_1080P_30HZ	168,7888
#define SDIVIDEO_CTL_SMPTE_274M_1080P_29_97HZ	169,7935
#define SDIVIDEO_CTL_SMPTE_274M_1080P_25HZ	170,7985
#define SDIVIDEO_CTL_SMPTE_274M_1080P_24HZ	171,8032
#define SDIVIDEO_CTL_SMPTE_274M_1080P_23_98HZ	172,8079
#define SDIVIDEO_CTL_SMPTE_296M_720P_60HZ	173,8129
#define SDIVIDEO_CTL_SMPTE_296M_720P_59_94HZ	174,8175
#define SDIVIDEO_CTL_SMPTE_296M_720P_50HZ	175,8224
#define SDIVIDEO_CTL_SMPTE_296M_720P_30HZ	176,8270
#define SDIVIDEO_CTL_SMPTE_296M_720P_29_97HZ	177,8316
#define SDIVIDEO_CTL_SMPTE_296M_720P_25HZ	178,8365
#define SDIVIDEO_CTL_SMPTE_296M_720P_24HZ	179,8411
#define SDIVIDEO_CTL_SMPTE_296M_720P_23_98HZ	180,8457

codec/dca.c,614
struct decoder_sys_t49,2065
    dca_state_t     *p_libdca;p_libdca51,2088
    bool            b_dynrng;52,2151
    int             i_flags;53,2197
    bool            b_dontwarn;54,2272
    int             i_nb_channels;55,2304
    uint8_t         pi_chan_table[pi_chan_table57,2375
    bool            b_synced;58,2450
#define DYNRNG_TEXT 61,2484
#define DYNRNG_LONGTEXT 62,2540
vlc_module_begin 69,2910
static void Duplicate(100,3771
static void Exchange(113,4005
static block_t *Decode(Decode125,4255
static int channels_vlc2dca(220,7281
static int Open(277,8940
static void Close(349,11256

demux/adaptive/logic/Representationselectors.hpp,250
#define REPRESENTATIONSELECTORS_HPP21,1020
namespace adaptive26,1100
    namespace playlistadaptive::playlist28,1121
    namespace logicadaptive::logic34,1224
        class RepresentationSelectoradaptive::logic::RepresentationSelector38,1285

demux/adaptive/playlist/SegmentChunk.cpp,164
SegmentChunk::SegmentChunk(32,1184
SegmentChunk::~SegmentChunk(42,1489
void SegmentChunk::onDownload(48,1624
StreamFormat SegmentChunk::getStreamFormat(53,1730

demux/adaptive/logic/AbstractAdaptationLogic.h,610
#define ABSTRACTADAPTATIONLOGIC_H_26,1196
        class AbstractAdaptationLogic 43,1486
                AbstractAdaptationLogic 47,1665
                virtual ~AbstractAdaptationLogic 48,1721
                virtual void                updateDownloadRate 51,1892
                virtual void                trackerEvent 52,1990
                enum LogicType54,2091
                    Default 56,2140
                    AlwaysBest,57,2173
                    AlwaysLowest,58,2205
                    RateBased,59,2239
                    FixedRate,60,2270
                    Predictive61,2301

demux/playlist/directory.c,134
struct demux_sys_t36,1501
    bool b_dir_can_loop;38,1522
int Import_Dir 47,1770
void Close_Dir 61,2132
static int Demux(67,2247

demux/nsv.c,614
vlc_module_begin 48,1848
struct demux_sys_t61,2279
    es_format_t  fmt_audio;63,2300
    es_out_id_t *p_audio;p_audio64,2328
    es_format_t  fmt_video;66,2355
    es_out_id_t *p_video;p_video67,2383
    es_format_t  fmt_sub;69,2410
    es_out_id_t  *p_sub;p_sub70,2436
    int64_t     i_pcr;72,2462
    int64_t     i_time;73,2485
    int64_t     i_pcr_inc;74,2509
    bool b_start_record;76,2537
static int Open(90,2965
static void Close(137,4204
static int Demux(149,4527
static int Control(324,9975
static int ReSynch(410,12527
static int ReadNSVf(445,13440
static int ReadNSVs(465,14065

misc/fingerprinter.c,817
struct fingerprinter_sys_t43,1620
    vlc_thread_t thread;45,1649
        vlc_array_t         *queue;queue49,1692
        vlc_mutex_t         lock;50,1728
    } incoming,51,1762
    } incoming, results;51,1762
        vlc_array_t         *queue;queue55,1805
        vlc_mutex_t         lock;56,1841
        vlc_cond_t          cond;57,1875
        bool                b_working;58,1909
    } processing;59,1948
vlc_module_begin 70,2321
static void QueueIncomingRequests(91,3059
static fingerprint_request_t * GetResult(104,3500
static void ApplyResult(118,3939
static int InputEventHandler(130,4375
static void DoFingerprint(151,5120
static int Open(229,8029
static void Close(272,9322
static void CleanSys(284,9620
static void fill_metas_with_results(303,10511
static void *Run(Run326,11521

stream_out/transcode/osd.c,135
int transcode_osd_new(39,1607
void transcode_osd_close(100,3546
int transcode_osd_process(113,3859
bool transcode_osd_add(156,5200

access/ftp.c,1972
# define IPPORT_FTP 51,1879
# define IPPORT_FTPS 55,1931
#define USER_TEXT 68,2332
#define USER_LONGTEXT 69,2365
#define PASS_TEXT 71,2487
#define PASS_LONGTEXT 72,2520
#define ACCOUNT_TEXT 74,2651
#define ACCOUNT_LONGTEXT 75,2690
#define LOGIN_DIALOG_TITLE 78,2777
#define LOGIN_DIALOG_TEXT 79,2828
vlc_module_begin 82,2941
typedef struct ftp_features_t126,4595
    bool b_unicode;128,4627
    bool b_authtls;129,4647
    bool b_mlst;130,4667
} ftp_features_t;131,4684
enum tls_mode_e133,4703
    NONE 135,4721
    IMPLICIT,136,4735
    EXPLICIT 137,4759
struct access_sys_t140,4788
    vlc_url_t  url;142,4810
    ftp_features_t   features;144,4831
    vlc_tls_creds_t *p_creds;p_creds145,4862
    enum tls_mode_e  tlsmode;146,4892
        vlc_tls_t   *p_tls;p_tls149,4939
        int          fd;150,4967
    } cmd,151,4992
    } cmd, data;151,4992
    char       sz_epsv_ip[sz_epsv_ip153,5010
    bool       out;154,5056
    uint64_t   offset;155,5076
    uint64_t   size;156,5099
#define GET_OUT_SYS(158,5123
static int ftp_SendCommand(161,5219
static int ftp_RecvAnswer(213,6830
static void DummyLine(280,8457
static int ftp_RecvCommand(285,8544
static int readTLSMode(294,8897
static int createCmdTLS(313,9384
static void clearCmdTLS(330,10005
static int Login(336,10157
static int LoginUserPwd(447,13648
static void FeaturesCheck(521,16179
static const char *IsASCII(IsASCII535,16550
static int Connect(544,16730
static int parseURL(600,18272
static int InOpen(648,19669
static int OutOpen(741,22052
static void Close(794,23425
static void InClose(817,23942
static void OutClose(823,24059
static int _Seek(833,24355
static int Seek(844,24683
static int OutSeek(858,24955
static ssize_t Read(867,25275
static int DirRead 894,26068
static int DirControl(962,28236
static ssize_t Write(980,28749
static int Control(1009,29612
static int ftp_StartStream(1058,31035
static int ftp_StopStream 1192,35360

access/screen/screen.c,781
#define FPS_TEXT 43,1826
#define FPS_LONGTEXT 44,1860
#define FRAGS_TEXT 48,1946
#define FRAGS_LONGTEXT 49,1993
#define TOP_TEXT 55,2199
#define TOP_LONGTEXT 56,2239
#define LEFT_TEXT 59,2317
#define LEFT_LONGTEXT 60,2362
#define WIDTH_TEXT 63,2441
#define HEIGHT_TEXT 65,2490
#define FOLLOW_MOUSE_TEXT 67,2540
#define FOLLOW_MOUSE_LONGTEXT 68,2591
#define MOUSE_TEXT 73,2708
#define MOUSE_LONGTEXT 74,2755
#define DISPLAY_ID_TEXT 80,2909
#define DISPLAY_ID_LONGTEXT 81,2952
#define INDEX_TEXT 83,3050
#define INDEX_LONGTEXT 84,3090
#   define SCREEN_FPS 92,3283
#   define SCREEN_FPS 94,3313
vlc_module_begin 97,3345
static void Close(249,8752
static int Demux(265,9205
static int Control(297,10092
void FollowMouse(332,11034
void RenderCursor(347,11422

demux/adaptive/Streams.hpp,2724
#define STREAM_HPP21,987
namespace adaptive35,1279
    namespace httpadaptive::http39,1327
    namespace playlistadaptive::playlist44,1400
    class AbstractStream adaptive::AbstractStream52,1521
            status_eof adaptive::AbstractStream::status_eof73,2302
            status_discontinuity,adaptive::AbstractStream::status_discontinuity74,2348
            status_demuxed,adaptive::AbstractStream::status_demuxed75,2382
            status_buffering,adaptive::AbstractStream::status_buffering76,2410
        } status;adaptive::AbstractStream::status77,2440
            buffering_end adaptive::AbstractStream::buffering_end79,2481
            buffering_suspended,adaptive::AbstractStream::buffering_suspended80,2530
            buffering_full,adaptive::AbstractStream::buffering_full81,2563
            buffering_ongoing,adaptive::AbstractStream::buffering_ongoing82,2591
            buffering_lessthanmin,adaptive::AbstractStream::buffering_lessthanmin83,2622
        } buffering_status;adaptive::AbstractStream::buffering_status84,2657
        bool discontinuity;adaptive::AbstractStream::discontinuity109,3579
        bool needrestart;adaptive::AbstractStream::needrestart110,3607
        bool inrestart;adaptive::AbstractStream::inrestart111,3633
        demux_t *p_realdemux;adaptive::AbstractStream::p_realdemux113,3658
        StreamFormat format;adaptive::AbstractStream::format114,3688
        AbstractConnectionManager *connManager;adaptive::AbstractStream::connManager116,3718
        SegmentTracker *segmentTracker;adaptive::AbstractStream::segmentTracker117,3782
        SegmentChunk *currentChunk;adaptive::AbstractStream::currentChunk119,3823
        bool eof;adaptive::AbstractStream::eof120,3859
        std::string language;adaptive::AbstractStream::language121,3877
        std::string description;adaptive::AbstractStream::description122,3907
        CommandsQueue *commandsqueue;adaptive::AbstractStream::commandsqueue124,3941
        AbstractDemuxer *demuxer;adaptive::AbstractStream::demuxer125,3979
        AbstractSourceStream *demuxersource;adaptive::AbstractStream::demuxersource126,4013
        FakeESOut *fakeesout;adaptive::AbstractStream::fakeesout127,4058
        vlc_mutex_t lock;adaptive::AbstractStream::lock128,4143
        buffering_status last_buffer_status;adaptive::AbstractStream::last_buffer_status132,4298
        bool dead;adaptive::AbstractStream::dead133,4343
        bool disabled;adaptive::AbstractStream::disabled134,4362
    class AbstractStreamFactoryadaptive::AbstractStreamFactory137,4393
            virtual ~AbstractStreamFactory(adaptive::AbstractStreamFactory::~AbstractStreamFactory140,4447

audio_filter/channel_mixer/headphone.c,974
#define VLC_MODULE_LICENSE 35,1541
#define MODULE_DESCRIPTION 52,2205
#define HEADPHONE_DIM_TEXT 60,2622
#define HEADPHONE_DIM_LONGTEXT 61,2680
#define HEADPHONE_COMPENSATE_TEXT 64,2786
#define HEADPHONE_COMPENSATE_LONGTEXT 65,2843
#define HEADPHONE_DOLBY_TEXT 70,3093
#define HEADPHONE_DOLBY_LONGTEXT 71,3158
vlc_module_begin 75,3345
struct atomic_operation_t98,4253
    int i_source_channel_offset;100,4281
    int i_dest_channel_offset;101,4314
    unsigned int i_delay;102,4345
    double d_amplitude_factor;103,4391
struct filter_sys_t106,4426
    size_t i_overflow_buffer_size;108,4448
    float * p_overflow_buffer;109,4497
    unsigned int i_nb_atomic_operations;110,4528
    struct atomic_operation_t * p_atomic_operations;111,4569
static void ComputeChannelOperations(132,5135
static int Init(189,7402
static void DoWork(333,12767
static int OpenFilter(440,16452
static void CloseFilter(491,18408
static block_t *Convert(Convert500,18634

demux/hls/playlist/Parser.hpp,229
#define PARSER_HPP21,985
namespace adaptive30,1122
    namespace playlistadaptive::playlist32,1143
namespace hls41,1310
    namespace playlisthls::playlist43,1326
        class M3U8Parserhls::playlist::M3U8Parser52,1499

codec/uleaddvaudio.c,302
vlc_module_begin(40,1549
struct decoder_sys_t48,1770
    date_t end_date;50,1793
    bool     is_pal;52,1815
    bool     is_12bit;53,1836
    uint16_t shuffle[shuffle54,1859
static void Flush(57,1891
static block_t *Decode(Decode64,2001
static int Open(125,3967
static void Close(168,5492

video_filter/gaussianblur.c,655
#define SIGMA_MIN 47,1891
#define SIGMA_MAX 48,1916
#define SIGMA_TEXT 50,1944
#define SIGMA_LONGTEXT 51,1994
#define GAUSSIAN_HELP 55,2151
#define FILTER_PREFIX 57,2202
vlc_module_begin 59,2241
#define DONT_USE_FLOATS88,3186
#   define type_t 91,3234
#   define type_t 93,3262
struct filter_sys_t96,3294
    double f_sigma;98,3316
    int i_dim;99,3336
    type_t *pt_distribution;pt_distribution101,3352
    type_t *pt_buffer;pt_buffer102,3381
    type_t *pt_scale;pt_scale103,3404
static void gaussianblur_InitDistribution(106,3430
static int Create(128,4120
static void Destroy(178,5708
static picture_t *Filter(Filter189,5958

video_filter/logo.c,1985
#   undef LoadImage42,1595
#define FILE_TEXT 48,1803
#define FILE_LONGTEXT 49,1842
#define REPEAT_TEXT 52,2052
#define REPEAT_LONGTEXT 53,2104
#define DELAY_TEXT 55,2216
#define DELAY_LONGTEXT 56,2274
#define POSX_TEXT 58,2351
#define POSX_LONGTEXT 59,2388
#define POSY_TEXT 61,2507
#define POSY_LONGTEXT 62,2544
#define OPACITY_TEXT 64,2663
#define OPACITY_LONGTEXT 65,2710
#define POS_TEXT 67,2824
#define POS_LONGTEXT 68,2861
#define LOGO_HELP 73,3058
#define CFG_PREFIX 75,3124
static const int pi_pos_values[pi_pos_values77,3152
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions78,3219
vlc_module_begin 86,3537
    int i_delay;126,5067
    int i_alpha;127,5123
    picture_t *p_pic;p_pic128,5179
} logo_t;130,5202
    logo_t *p_logo;p_logo137,5262
    unsigned int i_count;138,5317
    int i_repeat;140,5394
    mtime_t i_next_pic;141,5475
    unsigned int i_counter;143,5544
    int i_delay;145,5614
    int i_alpha;146,5677
} logo_list_t;148,5726
struct filter_sys_t153,5778
    filter_t *p_blend;p_blend155,5800
    vlc_mutex_t lock;157,5824
    logo_list_t list;159,5847
    int i_pos;161,5870
    int i_pos_x;162,5885
    int i_pos_y;163,5902
    bool b_absolute;164,5919
    bool b_spu_update;167,5979
    bool b_mouse_grab;170,6013
static const char *const ppsz_filter_options[ppsz_filter_options173,6040
static const char *const ppsz_filter_callbacks[ppsz_filter_callbacks177,6164
static int OpenSub(205,6986
static int OpenVideo(213,7106
static int OpenCommon(221,7228
static void Close(312,9828
static subpicture_t *FilterSub(FilterSub332,10314
static picture_t *FilterVideo(FilterVideo430,13004
static int Mouse(513,15527
static int LogoCallback(564,17443
static picture_t *LoadImage(LoadImage606,18556
static void LogoListLoad(637,19433
static void LogoListUnload(717,21764
static logo_t *LogoListNext(LogoListNext732,22086
static logo_t *LogoListCurrent(LogoListCurrent745,22468

access/screen/screen.h,824
#   define SCREEN_DISPLAY_ID30,1318
#define SCREEN_SUBSCREEN33,1355
#define SCREEN_MOUSE34,1380
typedef struct screen_data_t screen_data_t;40,1456
struct demux_sys_t42,1501
    es_format_t fmt;44,1522
    es_out_id_t *es;es45,1543
    float f_fps;47,1565
    mtime_t i_next_date;48,1582
    int i_incr;49,1607
    mtime_t i_start;51,1624
    bool b_follow_mouse;54,1670
    unsigned int i_screen_height;55,1695
    unsigned int i_screen_width;56,1729
    unsigned int i_top;58,1763
    unsigned int i_left;59,1787
    unsigned int i_height;60,1812
    unsigned int i_width;61,1839
    picture_t *p_mouse;p_mouse65,1893
    filter_t *p_blend;p_blend66,1917
    picture_t dst;67,1940
  unsigned int i_display_id;71,1992
  unsigned int i_screen_index;72,2021
    screen_data_t *p_data;p_data75,2060

services_discovery/mediadirs.c,773
#define VLC_MODULE_LICENSE 34,1429
enum type_e 45,1786
enum type_e { Video 45,1786
enum type_e { Video = 0, Audio 45,1786
enum type_e { Video = 0, Audio = 1, Picture 45,1786
enum type_e { Video = 0, Audio = 1, Picture = 2, Unknown 45,1786
#define OPEN_MODULE(51,1959
OPEN_MODULE(58,2227
#undef OPEN_MODULE62,2293
struct services_discovery_sys_t107,3706
    vlc_thread_t thread;109,3740
    enum type_e i_type;110,3765
    char* psz_dir[psz_dir112,3790
    const char* psz_var;113,3812
static int Open(119,4027
static void *Run(Run174,5661
static void Close(224,7235
static void input_item_subitem_added(243,7825
static int onNewFileAdded(258,8283
void formatSnapshotItem(310,9727
enum type_e fileType(325,9999
static int vlc_sd_probe_Open(348,10615

demux/dash/mpd/DASHSegment.cpp,92
DashIndexSegment::DashIndexSegment(39,1503
void DashIndexSegment::onChunkDownload(44,1593

access/http/h2output.c,1042
#define VLC_H2_MAX_QUEUE 36,1299
struct vlc_h2_queue38,1336
    struct vlc_h2_frame *first;first40,1358
    struct vlc_h2_frame **last;last41,1390
struct vlc_h2_output44,1426
    struct vlc_tls *tls;tls46,1449
    struct vlc_h2_queue prio;48,1475
    struct vlc_h2_queue queue;49,1532
    size_t size;50,1588
    bool failed;51,1639
    bool closing;52,1687
    vlc_mutex_t lock;54,1746
    vlc_cond_t wait;55,1768
    vlc_thread_t thread;56,1789
static int vlc_h2_output_queue(60,1853
int vlc_h2_output_send_prio(112,3104
int vlc_h2_output_send(117,3240
static struct vlc_h2_frame *vlc_h2_output_dequeue(vlc_h2_output_dequeue123,3409
static void vlc_h2_output_flush_unlocked(171,4382
static ssize_t vlc_https_send(190,4860
static int vlc_h2_frame_send(240,6004
static void *vlc_h2_output_thread(vlc_h2_output_thread254,6316
static void *vlc_h2_client_output_thread(vlc_h2_client_output_thread284,7288
struct vlc_h2_output *vlc_h2_output_create(vlc_h2_output_create300,7690
void vlc_h2_output_destroy(331,8506

demux/adaptive/StreamFormat.hpp,185
#define STREAMFORMAT_HPP21,998
namespace adaptive25,1043
    class StreamFormatadaptive::StreamFormat28,1065
            unsigned formatid;adaptive::StreamFormat::formatid47,1777

demux/dash/mpd/DASHCommonAttributesElements.cpp,1601
DASHCommonAttributesElements::DASHCommonAttributesElements(39,1472
DASHCommonAttributesElements::~DASHCommonAttributesElements(46,1590
int     DASHCommonAttributesElements::getParX 54,1827
void    DASHCommonAttributesElements::setParX(59,1926
int         DASHCommonAttributesElements::getParY 65,2036
void        DASHCommonAttributesElements::setParY(70,2139
int                 DASHCommonAttributesElements::getFrameRate 76,2257
void            DASHCommonAttributesElements::setFrameRate(81,2373
const std::list<std::string>&   DASHCommonAttributesElements::getNumberOfChannels(87,2516
void    DASHCommonAttributesElements::addChannel(92,2638
const std::list<int>&   DASHCommonAttributesElements::getSamplingRates(98,2803
void    DASHCommonAttributesElements::addSampleRate(103,2917
const std::list<ContentDescription*> &DASHCommonAttributesElements::getContentProtections(DASHCommonAttributesElements::getContentProtections109,3069
void DASHCommonAttributesElements::addContentProtection(114,3209
const std::list<ContentDescription*> &DASHCommonAttributesElements::getAccessibilities(DASHCommonAttributesElements::getAccessibilities120,3372
void DASHCommonAttributesElements::addAccessibility(125,3506
const std::list<ContentDescription*> &DASHCommonAttributesElements::getRatings(DASHCommonAttributesElements::getRatings131,3654
void DASHCommonAttributesElements::addRating(136,3772
const std::list<ContentDescription*> &DASHCommonAttributesElements::getViewpoints(DASHCommonAttributesElements::getViewpoints142,3905
void DASHCommonAttributesElements::addViewpoint(147,4029

lua/libs/input.c,1309
#   define  _GNU_SOURCE28,1321
input_thread_t * vlclua_get_input_internal(49,1655
static int vlclua_input_item_info(73,2227
static int vlclua_input_is_playing(99,2998
static int vlclua_input_metas_internal(108,3225
#define PUSH_META(125,3591
#undef PUSH_META158,4786
static int vlclua_input_item_stats(175,5196
#define STATS_INT(182,5409
#define STATS_FLOAT(184,5532
#undef STATS_INT205,6363
#undef STATS_FLOAT206,6380
static int vlclua_input_add_subtitle(212,6474
static input_item_t* vlclua_input_item_get_internal(229,7119
static int vlclua_input_item_delete(241,7438
static int vlclua_input_item_get_current(257,7823
static int vlclua_input_item_metas(274,8249
static int vlclua_input_item_is_preparsed(280,8394
static int vlclua_input_item_uri(286,8560
static int vlclua_input_item_name(294,8749
static int vlclua_input_item_duration(302,8943
static int vlclua_input_item_set_meta(309,9156
#define META_TYPE(316,9429
        const char psz_name[psz_name319,9508
        unsigned char type;320,9541
#undef META_TYPE350,10737
static const luaL_Reg vlclua_input_reg[vlclua_input_reg373,11496
void luaopen_input(380,11709
static const luaL_Reg vlclua_input_item_reg[vlclua_input_item_reg387,11856
static int vlclua_input_item_get(399,12283
void luaopen_input_item(420,12806

access/dshow/filter.cpp,3315
#   define QACONTAINERFLAGS 37,1512
#define DEBUG_DSHOW 52,1924
#define FILTER_NAME 54,1947
#define PIN_NAME 55,1995
void WINAPI FreeMediaType(57,2028
HRESULT WINAPI CopyMediaType(72,2307
int GetFourCCFromMediaType(101,3046
CapturePin::CapturePin(208,7668
CapturePin::~CapturePin(222,8202
HRESULT CapturePin::CustomGetSamples(242,8750
HRESULT CapturePin::CustomGetSample(265,9472
AM_MEDIA_TYPE &CapturePin::CustomGetMediaType(CapturePin::CustomGetMediaType280,9794
STDMETHODIMP CapturePin::QueryInterface(286,9896
STDMETHODIMP_(321,10868
STDMETHODIMP_(329,11028
STDMETHODIMP CapturePin::Connect(341,11258
STDMETHODIMP CapturePin::ReceiveConnection(386,12558
STDMETHODIMP CapturePin::Disconnect(422,13574
STDMETHODIMP CapturePin::ConnectedTo(441,14023
STDMETHODIMP CapturePin::ConnectionMediaType(456,14361
STDMETHODIMP CapturePin::QueryPinInfo(466,14636
STDMETHODIMP CapturePin::QueryDirection(480,14956
STDMETHODIMP CapturePin::QueryId(489,15157
STDMETHODIMP CapturePin::QueryAccept(499,15339
STDMETHODIMP CapturePin::EnumMediaTypes(561,17408
STDMETHODIMP CapturePin::QueryInternalConnections(573,17713
STDMETHODIMP CapturePin::EndOfStream(580,17901
STDMETHODIMP CapturePin::BeginFlush(587,18044
STDMETHODIMP CapturePin::EndFlush(594,18185
STDMETHODIMP CapturePin::NewSegment(613,18595
STDMETHODIMP CapturePin::GetAllocator(622,18798
STDMETHODIMP CapturePin::NotifyAllocator(630,18970
STDMETHODIMP CapturePin::GetAllocatorRequirements(638,19139
STDMETHODIMP CapturePin::Receive(646,19332
STDMETHODIMP CapturePin::ReceiveMultiple(673,20063
STDMETHODIMP CapturePin::ReceiveCanBlock(688,20487
CaptureFilter::CaptureFilter(700,20882
CaptureFilter::~CaptureFilter(708,21161
STDMETHODIMP CaptureFilter::QueryInterface(717,21326
STDMETHODIMP_(762,22527
STDMETHODIMP_(770,22693
STDMETHODIMP CaptureFilter::GetClassID(782,22932
STDMETHODIMP CaptureFilter::GetState(791,23114
STDMETHODIMP CaptureFilter::SetSyncSource(800,23309
STDMETHODIMP CaptureFilter::GetSyncSource(808,23475
STDMETHODIMP CaptureFilter::Stop(817,23671
STDMETHODIMP CaptureFilter::Pause(828,23853
STDMETHODIMP CaptureFilter::Run(837,24012
STDMETHODIMP CaptureFilter::EnumPins(848,24209
STDMETHODIMP CaptureFilter::FindPin(858,24525
STDMETHODIMP CaptureFilter::QueryFilterInfo(865,24684
STDMETHODIMP CaptureFilter::JoinFilterGraph(878,24991
STDMETHODIMP CaptureFilter::QueryVendorInfo(889,25247
CapturePin *CaptureFilter::CustomGetPin(CaptureFilter::CustomGetPin898,25435
CaptureEnumPins::CaptureEnumPins(907,25715
CaptureEnumPins::~CaptureEnumPins(927,26205
STDMETHODIMP CaptureEnumPins::QueryInterface(936,26384
STDMETHODIMP_(955,26774
STDMETHODIMP_(963,26944
STDMETHODIMP CaptureEnumPins::Next(975,27181
STDMETHODIMP CaptureEnumPins::Skip(997,27705
STDMETHODIMP CaptureEnumPins::Reset(1012,27944
STDMETHODIMP CaptureEnumPins::Clone(1021,28104
CaptureEnumMediaTypes::CaptureEnumMediaTypes(1036,28614
CaptureEnumMediaTypes::~CaptureEnumMediaTypes(1056,29194
STDMETHODIMP CaptureEnumMediaTypes::QueryInterface(1066,29428
STDMETHODIMP_(1085,29842
STDMETHODIMP_(1093,30024
STDMETHODIMP CaptureEnumMediaTypes::Next(1105,30279
STDMETHODIMP CaptureEnumMediaTypes::Skip(1156,31740
STDMETHODIMP CaptureEnumMediaTypes::Reset(1170,32087
STDMETHODIMP CaptureEnumMediaTypes::Clone(1181,32351

demux/smooth/playlist/Representation.cpp,186
Representation::Representation 32,1259
Representation::~Representation 38,1430
StreamFormat Representation::getStreamFormat(42,1470
std::string Representation::contextualize(47,1572

demux/adaptive/playlist/BaseRepresentation.cpp,946
BaseRepresentation::BaseRepresentation(39,1433
BaseRepresentation::~BaseRepresentation 47,1650
StreamFormat BaseRepresentation::getStreamFormat(51,1698
BaseAdaptationSet * BaseRepresentation::getAdaptationSet(56,1787
uint64_t     BaseRepresentation::getBandwidth 61,1877
void    BaseRepresentation::setBandwidth(66,1970
const std::list<std::string> & BaseRepresentation::getCodecs(71,2071
void BaseRepresentation::addCodec(76,2164
bool BaseRepresentation::needsUpdate(81,2258
bool BaseRepresentation::runLocalUpdates(86,2326
void BaseRepresentation::scheduleNextUpdate(91,2415
bool BaseRepresentation::consistentSegmentNumber(96,2475
void BaseRepresentation::pruneByPlaybackTime(101,2562
mtime_t BaseRepresentation::getMinAheadTime(108,2722
void BaseRepresentation::debug(140,3686
std::string BaseRepresentation::contextualize(153,4088
bool BaseRepresentation::bwCompare(159,4280
bool BaseRepresentation::validateCodec(165,4463

demux/adaptive/tools/Debug.hpp,135
#define DEBUG_HPP21,981
  #define AdvDebug(27,1104
  #define AdvDebug(29,1140
  #define BwDebug(33,1200
  #define BwDebug(35,1235

codec/wmafixed/bitstream.c,290
#define DEBUGF 34,1080
const uint8_t ff_sqrt_tab[ff_sqrt_tab47,1496
const uint8_t ff_log2_tab[ff_log2_tab54,1948
void align_put_bits(65,2568
void ff_put_string(74,2725
#define GET_DATA(85,2922
static int alloc_table(101,3258
static int build_table(116,3703
int init_vlc(241,8220

demux/mp4/id3genres.h,80
#define NUM_GENRES 29,1469
static const char *ppsz_genres[ppsz_genres31,1493

lua/libs/input.h,32
#define VLC_LUA_INPUT_H25,1153

hw/vdpau/picture.c,270
static void SurfaceDestroy(35,1312
static const VdpProcamp procamp_default 56,1900
vlc_vdp_video_field_t *vlc_vdp_video_create(vlc_vdp_video_create65,2074
VdpStatus vlc_vdp_video_attach(91,2826
vlc_vdp_video_field_t *vlc_vdp_video_copy(vlc_vdp_video_copy107,3399

visualization/visual/window.c,359
#define FT_A0 35,1349
#define FT_A1 36,1370
#define FT_A2 37,1391
#define FT_A3 38,1412
#define FT_A4 39,1433
#define BH_A0 42,1497
#define BH_A1 43,1520
#define BH_A2 44,1543
#define BH_A3 45,1566
static float bessi0(52,1790
void window_get_param(78,2591
bool window_init(114,3732
void window_scale_in_place(201,6595
void window_close(212,6815

codec/wmafixed/bitstream.h,5231
#define BITSTREAM_H27,903
#define av_always_inline 29,924
#define attribute_deprecated30,956
#define CONFIG_ALIGN 36,1044
#define WORDS_BIGENDIAN40,1101
static inline int av_log2(49,1247
#define ALT_BITSTREAM_READER68,1556
#       define A32_BITSTREAM_READER75,1789
#define ALT_BITSTREAM_READER77,1834
#define LIBMPEG2_BITSTREAM_READER_HACK 82,1947
static inline  int32_t NEG_SSR32(88,2120
static inline uint32_t NEG_USR32(95,2278
#    define NEG_SSR32(103,2442
#    define NEG_USR32(104,2497
typedef struct PutBitContext 110,2654
    uint8_t *buf,buf112,2713
    uint8_t *buf, *buf_end;buf_end112,2713
    int index;113,2741
    uint32_t bit_buf;115,2762
    int bit_left;116,2784
    uint8_t *buf,buf117,2802
    uint8_t *buf, *buf_ptr,buf_ptr117,2802
    uint8_t *buf, *buf_ptr, *buf_end;buf_end117,2802
} PutBitContext;119,2847
static inline void init_put_bits(121,2865
static inline int put_bits_count(142,3325
static inline void flush_put_bits(152,3550
typedef struct GetBitContext 174,4113
    const uint8_t *buffer,buffer175,4144
    const uint8_t *buffer, *buffer_end;buffer_end175,4144
    int index;177,4212
    uint8_t *buffer_ptr;buffer_ptr179,4267
    uint32_t cache;180,4292
    int bit_count;181,4312
    uint32_t *buffer_ptr;buffer_ptr183,4366
    uint32_t cache0;184,4392
    uint32_t cache1;185,4413
    int bit_count;186,4434
    int size_in_bits;188,4460
} GetBitContext;189,4482
#define VLC_TYPE 191,4500
typedef struct VLC 193,4526
    int bits;194,4547
    VLC_TYPE (*table)table195,4561
    int table_size,196,4604
    int table_size, table_allocated;196,4604
} VLC;197,4641
typedef struct RL_VLC_ELEM 199,4649
    int16_t level;200,4678
    int8_t len;201,4697
    uint8_t run;202,4713
} RL_VLC_ELEM;203,4730
#define UNALIGNED_STORES_ARE_BAD206,4838
#    define unaligned16(211,4996
#    define unaligned32(212,5047
#    define unaligned64(213,5098
#    define unaligned(216,5175
#    define unaligned(225,5609
#    define unaligned(230,5819
unaligned(235,6030
#undef unaligned238,6072
static inline void put_bits(281,7227
static inline uint8_t* pbBufPtr(346,9401
static inline void skip_put_bytes(359,9657
static inline void skip_put_bits(374,10058
static inline void set_put_bits_buffer_size(387,10300
static inline int unaligned32_be(436,11697
static inline int unaligned32_le(446,11926
#   define MIN_CACHE_BITS 457,12180
#   define OPEN_READER(459,12210
#   define CLOSE_READER(463,12315
#   define UPDATE_CACHE(467,12419
#   define SKIP_CACHE(470,12570
#   define UPDATE_CACHE(473,12647
#   define SKIP_CACHE(476,12798
#   define SKIP_COUNTER(481,12892
#   define SKIP_BITS(484,12965
#   define LAST_SKIP_BITS(490,13105
#   define LAST_SKIP_CACHE(491,13174
#   define SHOW_UBITS(494,13251
#   define SHOW_SBITS(497,13345
#   define SHOW_UBITS(500,13441
#   define SHOW_SBITS(503,13517
#   define GET_CACHE(507,13601
static inline int get_bits_count(510,13667
static inline void skip_bits_long(514,13743
#   define MIN_CACHE_BITS 521,13889
#   define OPEN_READER(523,13919
#   define CLOSE_READER(528,14096
#   define UPDATE_CACHE(535,14297
#   define UPDATE_CACHE(544,14534
#   define SKIP_CACHE(553,14776
#   define SKIP_COUNTER(556,14848
#   define SKIP_BITS(559,14925
#   define LAST_SKIP_BITS(565,15065
#   define LAST_SKIP_CACHE(566,15131
#   define SHOW_UBITS(568,15200
#   define SHOW_SBITS(571,15276
#   define GET_CACHE(574,15352
static inline int get_bits_count(577,15418
static inline void skip_bits_long(581,15535
#   define MIN_CACHE_BITS 593,15876
#   define OPEN_READER(595,15906
#   define CLOSE_READER(601,16138
#   define UPDATE_CACHE(607,16340
#   define SKIP_CACHE(617,16670
#   define SKIP_CACHE(625,16929
#   define SKIP_COUNTER(631,17098
#   define SKIP_BITS(634,17175
#   define LAST_SKIP_BITS(640,17315
#   define LAST_SKIP_CACHE(641,17381
#   define SHOW_UBITS(643,17450
#   define SHOW_SBITS(646,17527
#   define GET_CACHE(649,17604
static inline int get_bits_count(652,17661
static inline void skip_bits_long(656,17788
static inline int get_xbits(675,18243
static inline int get_sbits(687,18558
static inline unsigned int get_bits(701,18900
static inline unsigned int show_bits(715,19250
static inline void skip_bits(724,19458
static inline unsigned int get_bits1(732,19693
static inline unsigned int show_bits1(752,20079
static inline void skip_bits1(756,20167
static inline unsigned int get_bits_long(763,20268
static inline unsigned int show_bits_long(779,20629
static inline void init_get_bits(806,21349
static inline void align_get_bits(831,22087
#define INIT_VLC_USE_STATIC 841,22408
#define INIT_VLC_LE 842,22438
#define GET_VLC(851,22674
#define GET_RL_VLC(882,23448
static av_always_inline int get_vlc2(915,24386
static inline void print_bin(930,24694
static inline int get_bits_trace(940,24909
static inline int get_vlc_trace(948,25192
static inline int get_xbits_trace(961,25665
#define get_bits(970,25987
#define get_bits1(971,26073
#define get_xbits(972,26159
#define get_vlc(973,26246
#define get_vlc2(974,26369
#define tprintf(976,26480
#define tprintf(979,26556
static inline int decode012(982,26591

audio_filter/param_eq.c,759
vlc_module_begin 51,2090
struct filter_sys_t86,3858
    float   f_lowf,89,3911
    float   f_lowf, f_lowgain;89,3911
    float   f_f1,90,3942
    float   f_f1, f_Q1,90,3942
    float   f_f1, f_Q1, f_gain1;90,3942
    float   f_f2,91,3975
    float   f_f2, f_Q2,91,3975
    float   f_f2, f_Q2, f_gain2;91,3975
    float   f_f3,92,4008
    float   f_f3, f_Q3,92,4008
    float   f_f3, f_Q3, f_gain3;92,4008
    float   f_highf,93,4041
    float   f_highf, f_highgain;93,4041
    float   coeffs[coeffs95,4107
    float  *p_state;p_state97,4148
static int Open(106,4344
static void Close(155,6400
static block_t *DoWork(DoWork167,6834
static void CalcPeakEQCoeffs(187,7417
static void CalcShelfEQCoeffs(233,8502
void ProcessEQ(284,10106

audio_mixer/integer.c,118
vlc_module_begin 35,1290
static void FilterS16N 64,2043
static void FilterU8 85,2553
static int Activate 106,3086

visualization/visual/window.h,777
#define VLC_VISUAL_WINDOW_H_25,1198
enum _enum_window_type 30,1276
enum _enum_window_type { NONE,30,1276
enum _enum_window_type { NONE, HANN,30,1276
enum _enum_window_type { NONE, HANN, FLATTOP,30,1276
enum _enum_window_type { NONE, HANN, FLATTOP, BLACKMANHARRIS,30,1276
enum _enum_window_type { NONE, HANN, FLATTOP, BLACKMANHARRIS, KAISER 30,1276
struct _struct_window_context 33,1380
    float * pf_window_table;36,1458
    int i_buffer_size;39,1525
typedef enum _enum_window_type window_type;42,1552
struct _struct_window_param 45,1630
    window_type wind_type;48,1683
    float f_kaiser_alpha;51,1745
typedef struct _struct_window_context window_context;55,1816
typedef struct _struct_window_param window_param;56,1870
#define DEFINE_WIND_CONTEXT(64,2263

mux/mpeg/bits.h,302
typedef struct bits_buffer_s25,1188
    int     i_size;27,1219
    int     i_data;29,1240
    uint8_t i_mask;30,1260
    uint8_t *p_data;p_data31,1280
} bits_buffer_t;33,1302
static inline int bits_initwrite(35,1320
static inline void bits_align(51,1723
static inline void bits_write(61,1983

codec/avcodec/avcommon_compat.h,273
#define AVCOMMON_COMPAT_H 26,1260
#define LIBAVCODEC_VERSION_CHECK(35,1560
#define LIBAVUTIL_VERSION_CHECK(49,2120
#   define AV_PIX_FMT_FLAG_HWACCEL 54,2418
# define FF_API_AUDIOCONVERT 60,2550
# define PixelFormat 65,2634
#define LIBAVFORMAT_VERSION_CHECK(71,2748

video_splitter/wall.c,857
#define ROW_MAX 40,1559
#define COL_MAX 41,1580
#define COLS_TEXT 46,1782
#define COLS_LONGTEXT 47,1824
#define ROWS_TEXT 50,1920
#define ROWS_LONGTEXT 51,1959
#define ACTIVE_TEXT 54,2053
#define ACTIVE_LONGTEXT 55,2094
#define ASPECT_TEXT 58,2190
#define ASPECT_LONGTEXT 59,2237
#define CFG_PREFIX 62,2335
vlc_module_begin(67,2438
    bool b_active;96,3461
    int  i_output;97,3480
    int  i_width;98,3499
    int  i_height;99,3517
    int  i_align;100,3536
    int  i_left;101,3554
    int  i_top;102,3571
} wall_output_t;103,3587
struct video_splitter_sys_t105,3605
    int           i_col;107,3635
    int           i_row;108,3660
    int           i_output;109,3685
    wall_output_t pp_output[pp_output110,3713
static int Open(121,4084
static void Close(381,12370
static int Filter(390,12586
static int Mouse(428,13762

access/http/h2frame_test.c,2035
#undef NDEBUG25,1124
#define CTX 36,1283
static unsigned settings;38,1328
static void vlc_h2_setting(41,1371
static unsigned settings_acked;75,2376
static int vlc_h2_settings_done(77,2409
#define PING_VALUE 85,2533
static unsigned pings;87,2582
static int vlc_h2_ping(89,2606
static uint_fast32_t local_error;97,2752
static uint_fast32_t remote_error;98,2786
static void vlc_h2_error(100,2822
static int vlc_h2_reset(106,2931
static void vlc_h2_window_status(114,3105
#define STREAM_ID 120,3222
char stream_cookie;121,3251
static void *vlc_h2_stream_lookup(vlc_h2_stream_lookup123,3297
static const char *const resp_hdrv[resp_hdrv132,3463
static const unsigned resp_hdrc 141,3853
static unsigned stream_header_tables;143,3932
static void vlc_h2_stream_headers(145,3971
#define MESSAGE 160,4358
static unsigned stream_blocks;162,4390
static int vlc_h2_stream_data(164,4422
static unsigned stream_ends;177,4726
static void vlc_h2_stream_end(179,4756
static int vlc_h2_stream_error(185,4856
static int vlc_h2_stream_reset(194,5056
static struct vlc_h2_frame *resize(resize202,5229
static struct vlc_h2_frame *retype(retype210,5454
static struct vlc_h2_frame *reflag(reflag216,5575
static struct vlc_h2_frame *globalize(globalize222,5698
static struct vlc_h2_frame *localize(localize228,5810
static struct vlc_h2_frame *response(response237,6062
static struct vlc_h2_frame *data(data243,6256
static struct vlc_h2_frame *priority(priority248,6377
static struct vlc_h2_frame *rst_stream(rst_stream253,6483
static struct vlc_h2_frame *ping(ping258,6595
static struct vlc_h2_frame *goaway(goaway263,6681
static struct vlc_h2_frame *unknown(unknown268,6779
static unsigned test_raw_seqv(274,6877
static unsigned test_raw_seq(288,7151
static const struct vlc_h2_parser_cbs vlc_h2_frame_test_callbacks 300,7352
static unsigned test_seq(316,7701
static unsigned test_bad_seq(347,8439
static void test_preface_fail(370,8960
static void test_header_block_fail(382,9203
int main(394,9551

video_filter/grain.c,1341
#define BANK_SIZE 47,1785
#define CFG_PREFIX 49,1809
#define VARIANCE_MIN 51,1838
#define VARIANCE_MAX 52,1872
#define VARIANCE_TEXT 53,1907
#define VARIANCE_LONGTEXT 54,1950
#define PERIOD_MIN 56,2016
#define PERIOD_MAX 57,2046
#define PERIOD_MIN_TEXT 58,2084
#define PERIOD_MIN_LONGTEXT 59,2133
#define PERIOD_MAX_TEXT 60,2210
#define PERIOD_MAX_LONGTEXT 61,2259
vlc_module_begin(63,2337
#define BLEND_SIZE 83,3284
struct filter_sys_t 84,3307
    bool     is_uv_filtered;85,3329
    uint32_t seed;86,3358
    int      scale;88,3378
    int16_t  bank[bank89,3398
    int16_t  bank_y[bank_y90,3440
    int16_t  bank_uv[bank_uv91,3484
    void (*blend)blend93,3530
    void (*emms)emms96,3677
        vlc_mutex_t lock;99,3715
        double      variance;100,3741
    } cfg;101,3771
#define URAND_SEED 105,3840
static uint32_t urand(106,3872
static double drand(115,4056
static void grand(120,4206
static void BlockBlend(135,4502
static void BlockBlendC(148,4912
#define STRING_EXPAND(157,5199
#define STRING(158,5227
static void BlockBlendSse2(160,5270
static void Emms(196,6643
static void Scale(205,6792
static void PlaneFilter(223,7276
static picture_t *Filter(Filter252,8390
static int Generate(295,9572
static int Callback(367,11875
static int Open(381,12296
static void Close(427,13810

access/http/tunnel.c,417
static char *vlc_http_authority(vlc_http_authority38,1331
static struct vlc_http_msg *vlc_http_tunnel_open(vlc_http_tunnel_open49,1662
static int vlc_tls_ProxyGetFD(91,3088
static ssize_t vlc_tls_ProxyRead(98,3209
static ssize_t vlc_tls_ProxyWrite(106,3411
static int vlc_tls_ProxyShutdown(114,3622
static void vlc_tls_ProxyClose(121,3770
vlc_tls_t *vlc_https_connect_proxy(vlc_https_connect_proxy126,3838

demux/asf/asfpacket.c,589
# define ASF_DEBUG 30,1218
typedef struct asf_packet_t33,1247
    uint32_t property;35,1277
    uint32_t length;36,1300
    uint32_t padding_length;37,1321
    uint32_t send_time;38,1350
    bool multiple;39,1374
    int length_type;40,1393
    uint32_t i_skip;43,1461
    const uint8_t *p_peek;p_peek44,1482
    uint32_t left;45,1509
} asf_packet_t;46,1528
static inline int GetValue2b(48,1545
static uint32_t SkipBytes(73,2084
static int DemuxSubPayload(95,2595
static void ParsePayloadExtensions(122,3565
static int DemuxPayload(192,6324
int DemuxASFPacket(371,12916

stream_out/chromecast/cast_channel.pb.cc,7452
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION4,113
namespace castchannel 15,456
void protobuf_ShutdownFile_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto(castchannel::protobuf_ShutdownFile_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto17,481
void protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_impl(26,823
void protobuf_AddDesc_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto(52,2010
struct StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto 58,2391
  StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto(StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::StaticDescriptorInitializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto59,2479
} static_descriptor_initializer_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto_;62,2643
bool CastMessage_ProtocolVersion_IsValid(67,2808
const CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;77,2968
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;78,3027
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;79,3095
const int CastMessage::ProtocolVersion_ARRAYSIZE;80,3163
bool CastMessage_PayloadType_IsValid(82,3233
const CastMessage_PayloadType CastMessage::STRING;93,3401
const CastMessage_PayloadType CastMessage::BINARY;94,3452
const CastMessage_PayloadType CastMessage::PayloadType_MIN;95,3503
const CastMessage_PayloadType CastMessage::PayloadType_MAX;96,3563
const int CastMessage::PayloadType_ARRAYSIZE;97,3623
const int CastMessage::kProtocolVersionFieldNumber;100,3706
const int CastMessage::kSourceIdFieldNumber;101,3758
const int CastMessage::kDestinationIdFieldNumber;102,3803
const int CastMessage::kNamespaceFieldNumber;103,3853
const int CastMessage::kPayloadTypeFieldNumber;104,3899
const int CastMessage::kPayloadUtf8FieldNumber;105,3947
const int CastMessage::kPayloadBinaryFieldNumber;106,3995
CastMessage::CastMessage(109,4067
void CastMessage::InitAsDefaultInstance(114,4153
CastMessage::CastMessage(117,4200
void CastMessage::SharedCtor(123,4328
CastMessage::~CastMessage(135,4937
void CastMessage::SharedDtor(139,4986
void CastMessage::SetCachedSize(163,5660
const CastMessage& CastMessage::default_instance(168,5816
CastMessage* CastMessage::default_instance_ 177,6136
CastMessage* CastMessage::New(179,6189
void CastMessage::Clear(183,6258
bool CastMessage::MergePartialFromCodedStream(216,7187
#define DO_(218,7289
#undef DO_341,12118
void CastMessage::SerializeWithCachedSizes(344,12132
int CastMessage::ByteSize(390,13533
void CastMessage::CheckTypeAndMergeFrom(448,15231
void CastMessage::MergeFrom(453,15398
void CastMessage::CopyFrom(480,16158
bool CastMessage::IsInitialized(486,16274
void CastMessage::Swap(492,16399
::std::string CastMessage::GetTypeName(506,16948
AuthChallenge::AuthChallenge(516,17148
void AuthChallenge::InitAsDefaultInstance(521,17238
AuthChallenge::AuthChallenge(524,17287
void AuthChallenge::SharedCtor(530,17421
AuthChallenge::~AuthChallenge(535,17527
void AuthChallenge::SharedDtor(539,17580
void AuthChallenge::SetCachedSize(548,17758
const AuthChallenge& AuthChallenge::default_instance(553,17916
AuthChallenge* AuthChallenge::default_instance_ 562,18240
AuthChallenge* AuthChallenge::New(564,18297
void AuthChallenge::Clear(568,18372
bool AuthChallenge::MergePartialFromCodedStream(572,18452
#define DO_(574,18556
#undef DO_584,18963
void AuthChallenge::SerializeWithCachedSizes(587,18977
int AuthChallenge::ByteSize(591,19089
void AuthChallenge::CheckTypeAndMergeFrom(600,19284
void AuthChallenge::MergeFrom(605,19455
void AuthChallenge::CopyFrom(609,19549
bool AuthChallenge::IsInitialized(615,19669
void AuthChallenge::Swap(620,19732
::std::string AuthChallenge::GetTypeName(626,19863
const int AuthResponse::kSignatureFieldNumber;634,20045
const int AuthResponse::kClientAuthCertificateFieldNumber;635,20092
AuthResponse::AuthResponse(638,20173
void AuthResponse::InitAsDefaultInstance(643,20261
AuthResponse::AuthResponse(646,20309
void AuthResponse::SharedCtor(652,20440
AuthResponse::~AuthResponse(659,20737
void AuthResponse::SharedDtor(663,20788
void AuthResponse::SetCachedSize(678,21181
const AuthResponse& AuthResponse::default_instance(683,21338
AuthResponse* AuthResponse::default_instance_ 692,21660
AuthResponse* AuthResponse::New(694,21715
void AuthResponse::Clear(698,21787
bool AuthResponse::MergePartialFromCodedStream(714,22244
#define DO_(716,22347
#undef DO_759,23985
void AuthResponse::SerializeWithCachedSizes(762,23999
int AuthResponse::ByteSize(778,24480
void AuthResponse::CheckTypeAndMergeFrom(803,25150
void AuthResponse::MergeFrom(808,25319
void AuthResponse::CopyFrom(820,25666
bool AuthResponse::IsInitialized(826,25784
void AuthResponse::Swap(832,25910
::std::string AuthResponse::GetTypeName(841,26211
bool AuthError_ErrorType_IsValid(848,26374
const AuthError_ErrorType AuthError::INTERNAL_ERROR;859,26538
const AuthError_ErrorType AuthError::NO_TLS;860,26591
const AuthError_ErrorType AuthError::ErrorType_MIN;861,26636
const AuthError_ErrorType AuthError::ErrorType_MAX;862,26688
const int AuthError::ErrorType_ARRAYSIZE;863,26740
const int AuthError::kErrorTypeFieldNumber;866,26819
AuthError::AuthError(869,26885
void AuthError::InitAsDefaultInstance(874,26967
AuthError::AuthError(877,27012
void AuthError::SharedCtor(883,27134
AuthError::~AuthError(889,27255
void AuthError::SharedDtor(893,27300
void AuthError::SetCachedSize(902,27474
const AuthError& AuthError::default_instance(907,27628
AuthError* AuthError::default_instance_ 916,27944
AuthError* AuthError::New(918,27993
void AuthError::Clear(922,28056
bool AuthError::MergePartialFromCodedStream(929,28207
#define DO_(931,28307
#undef DO_965,29647
void AuthError::SerializeWithCachedSizes(968,29661
int AuthError::ByteSize(978,29962
void AuthError::CheckTypeAndMergeFrom(995,30415
void AuthError::MergeFrom(1000,30578
void AuthError::CopyFrom(1009,30803
bool AuthError::IsInitialized(1015,30915
void AuthError::Swap(1021,31038
::std::string AuthError::GetTypeName(1029,31261
const int DeviceAuthMessage::kChallengeFieldNumber;1037,31435
const int DeviceAuthMessage::kResponseFieldNumber;1038,31487
const int DeviceAuthMessage::kErrorFieldNumber;1039,31538
DeviceAuthMessage::DeviceAuthMessage(1042,31608
void DeviceAuthMessage::InitAsDefaultInstance(1047,31706
DeviceAuthMessage::DeviceAuthMessage(1068,32608
void DeviceAuthMessage::SharedCtor(1074,32754
DeviceAuthMessage::~DeviceAuthMessage(1082,32922
void DeviceAuthMessage::SharedDtor(1086,32983
void DeviceAuthMessage::SetCachedSize(1098,33229
const DeviceAuthMessage& DeviceAuthMessage::default_instance(1103,33391
DeviceAuthMessage* DeviceAuthMessage::default_instance_ 1112,33723
DeviceAuthMessage* DeviceAuthMessage::New(1114,33788
void DeviceAuthMessage::Clear(1118,33875
bool DeviceAuthMessage::MergePartialFromCodedStream(1133,34335
#define DO_(1135,34443
#undef DO_1192,36591
void DeviceAuthMessage::SerializeWithCachedSizes(1195,36605
int DeviceAuthMessage::ByteSize(1217,37262
void DeviceAuthMessage::CheckTypeAndMergeFrom(1249,38161
void DeviceAuthMessage::MergeFrom(1254,38340
void DeviceAuthMessage::CopyFrom(1269,38853
bool DeviceAuthMessage::IsInitialized(1275,38981
void DeviceAuthMessage::Swap(1286,39212
::std::string DeviceAuthMessage::GetTypeName(1296,39531

video_filter/edgedetection.c,533
#define EDGE_DETECTION_DESCRIPTION 38,1673
#define EDGE_DETECTION_TEXT 39,1744
#define EDGE_DETECTION_LONGTEXT 40,1795
#define WHITE 43,1899
static const signed char pi_kernel_x[pi_kernel_x55,2361
static const signed char pi_kernel_y[pi_kernel_y62,2483
vlc_module_begin 68,2581
struct filter_sys_t81,2929
    filter_chain_t *p_chain;p_chain83,2951
static int Open(93,3424
static int Close(142,5301
static picture_t *new_frame(new_frame152,5688
static picture_t *Filter(Filter163,6174
static uint8_t sobel(195,7496

demux/adaptive/logic/AlwaysLowestAdaptationLogic.cpp,197
AlwaysLowestAdaptationLogic::AlwaysLowestAdaptationLogic(30,1192
BaseRepresentation *AlwaysLowestAdaptationLogic::getNextRepresentation(AlwaysLowestAdaptationLogic::getNextRepresentation35,1287

codec/omxil/omxil_core.c,729
# define dll_open(34,1534
# define dll_close(35,1590
# define dlsym(36,1634
# define dll_open(38,1699
# define dll_close(39,1748
static const char *ppsz_dll_list[ppsz_dll_list54,2173
static const char *ppsz_extra_dll_list[ppsz_extra_dll_list71,2650
static vlc_mutex_t omx_core_mutex 81,2995
static unsigned int omx_refcount 82,3049
static void *dll_handle;dll_handle83,3087
static void *extra_dll_handle;extra_dll_handle96,3732
static void CloseExtraDll(100,3836
#define CloseExtraDll(108,4051
int InitOmxCore(111,4083
void DeinitOmxCore(189,6584
    const char *psz_role;psz_role208,7093
    const char *psz_name;psz_name209,7119
} role_mappings[role_mappings210,7145
int CreateComponentsList(220,7376

access/sdp.c,273
vlc_module_begin 32,1257
struct access_sys_t47,1682
    size_t offset;49,1704
    size_t length;50,1723
    char   data[data51,1742
static int Open 54,1765
static void Close 77,2344
static ssize_t Read 85,2483
static int Seek 98,2791
static int Control 109,3007

codec/omxil/OMX_Other.h,5712
#define OMX_Other_h30,1328
typedef enum OMX_OTHER_FORMATTYPE 50,1826
    OMX_OTHER_FormatTime 51,1862
    OMX_OTHER_FormatPower,53,2003
    OMX_OTHER_FormatStats,55,2147
    OMX_OTHER_FormatBinary,57,2277
    OMX_OTHER_FormatVendorReserved 58,2337
    OMX_OTHER_FormatKhronosExtensions 61,2481
    OMX_OTHER_FormatKhronosExtensions = 0x6F000000,x6F00000061,2481
    OMX_OTHER_FormatVendorStartUnused 62,2602
    OMX_OTHER_FormatVendorStartUnused = 0x7F000000,x7F00000062,2602
    OMX_OTHER_FormatMax 63,2712
    OMX_OTHER_FormatMax = 0x7FFFFFFFx7FFFFFFF63,2712
} OMX_OTHER_FORMATTYPE;64,2749
typedef enum OMX_TIME_SEEKMODETYPE 69,2813
    OMX_TIME_SeekModeFast 70,2850
    OMX_TIME_SeekModeAccurate,74,3122
    OMX_TIME_SeekModeKhronosExtensions 78,3397
    OMX_TIME_SeekModeKhronosExtensions = 0x6F000000,x6F00000078,3397
    OMX_TIME_SeekModeVendorStartUnused 79,3519
    OMX_TIME_SeekModeVendorStartUnused = 0x7F000000,x7F00000079,3519
    OMX_TIME_SeekModeMax 80,3630
    OMX_TIME_SeekModeMax = 0x7FFFFFFFx7FFFFFFF80,3630
} OMX_TIME_SEEKMODETYPE;81,3668
typedef struct OMX_TIME_CONFIG_SEEKMODETYPE 84,3753
    OMX_U32 nSize;85,3799
    OMX_VERSIONTYPE nVersion;86,3874
    OMX_TIME_SEEKMODETYPE eType;87,3956
} OMX_TIME_CONFIG_SEEKMODETYPE;88,4014
typedef struct OMX_TIME_CONFIG_TIMESTAMPTYPE 112,5030
    OMX_U32 nSize;113,5077
    OMX_VERSIONTYPE nVersion;114,5149
    OMX_U32 nPortIndex;116,5266
    OMX_TICKS nTimestamp;117,5338
} OMX_TIME_CONFIG_TIMESTAMPTYPE;118,5391
typedef enum OMX_TIME_UPDATETYPE 121,5494
      OMX_TIME_UpdateRequestFulfillment,122,5529
      OMX_TIME_UpdateScaleChanged,123,5632
      OMX_TIME_UpdateClockStateChanged,124,5731
      OMX_TIME_UpdateKhronosExtensions 125,5837
      OMX_TIME_UpdateKhronosExtensions = 0x6F000000,x6F000000125,5837
      OMX_TIME_UpdateVendorStartUnused 126,5959
      OMX_TIME_UpdateVendorStartUnused = 0x7F000000,x7F000000126,5959
      OMX_TIME_UpdateMax 127,6070
      OMX_TIME_UpdateMax = 0x7FFFFFFFx7FFFFFFF127,6070
} OMX_TIME_UPDATETYPE;128,6108
typedef enum OMX_TIME_REFCLOCKTYPE 131,6199
      OMX_TIME_RefClockNone,132,6236
      OMX_TIME_RefClockAudio,133,6295
      OMX_TIME_RefClockVideo,134,6402
      OMX_TIME_RefClockKhronosExtensions 135,6511
      OMX_TIME_RefClockKhronosExtensions = 0x6F000000,x6F000000135,6511
      OMX_TIME_RefClockVendorStartUnused 136,6635
      OMX_TIME_RefClockVendorStartUnused = 0x7F000000,x7F000000136,6635
      OMX_TIME_RefClockMax 137,6748
      OMX_TIME_RefClockMax = 0x7FFFFFFFx7FFFFFFF137,6748
} OMX_TIME_REFCLOCKTYPE;138,6788
typedef enum OMX_TIME_CLOCKSTATE 141,6850
      OMX_TIME_ClockStateRunning,142,6885
      OMX_TIME_ClockStateWaitingForStartTime,143,6954
      OMX_TIME_ClockStateStopped,146,7177
      OMX_TIME_ClockStateKhronosExtensions 147,7246
      OMX_TIME_ClockStateKhronosExtensions = 0x6F000000,x6F000000147,7246
      OMX_TIME_ClockStateVendorStartUnused 148,7372
      OMX_TIME_ClockStateVendorStartUnused = 0x7F000000,x7F000000148,7372
      OMX_TIME_ClockStateMax 149,7487
      OMX_TIME_ClockStateMax = 0x7FFFFFFFx7FFFFFFF149,7487
} OMX_TIME_CLOCKSTATE;150,7529
typedef struct OMX_TIME_CONFIG_MEDIATIMEREQUESTTYPE 175,8881
    OMX_U32 nSize;176,8935
    OMX_VERSIONTYPE nVersion;177,9006
    OMX_U32 nPortIndex;178,9084
    OMX_PTR pClientPrivate;179,9160
    OMX_TICKS nMediaTimestamp;184,9577
    OMX_TICKS nOffset;185,9644
} OMX_TIME_CONFIG_MEDIATIMEREQUESTTYPE;187,9795
typedef struct OMX_TIME_MEDIATIMETYPE 216,11539
    OMX_U32 nSize;217,11579
    OMX_VERSIONTYPE nVersion;218,11654
    OMX_U32 nClientPrivate;219,11736
    OMX_TIME_UPDATETYPE eUpdateType;222,12016
    OMX_TICKS nMediaTimestamp;223,12083
    OMX_TICKS nOffset;225,12260
    OMX_TICKS nWallTimeAtMediaTime;228,12423
    OMX_S32 xScale;233,12835
    OMX_TIME_CLOCKSTATE eState;234,12919
} OMX_TIME_MEDIATIMETYPE;236,13057
typedef struct OMX_TIME_CONFIG_SCALETYPE 243,13468
    OMX_U32 nSize;244,13511
    OMX_VERSIONTYPE nVersion;245,13586
    OMX_S32 xScale;246,13668
} OMX_TIME_CONFIG_SCALETYPE;248,13822
#define OMX_CLOCKPORT0 251,13953
#define OMX_CLOCKPORT1 252,13987
#define OMX_CLOCKPORT2 253,14021
#define OMX_CLOCKPORT3 254,14055
#define OMX_CLOCKPORT4 255,14089
#define OMX_CLOCKPORT5 256,14123
#define OMX_CLOCKPORT6 257,14157
#define OMX_CLOCKPORT7 258,14191
typedef struct OMX_TIME_CONFIG_CLOCKSTATETYPE 272,14890
    OMX_U32 nSize;273,14938
    OMX_VERSIONTYPE nVersion;274,15009
    OMX_TIME_CLOCKSTATE eState;276,15125
    OMX_TICKS nStartTime;277,15190
    OMX_TICKS nOffset;278,15260
    OMX_U32 nWaitMask;282,15515
} OMX_TIME_CONFIG_CLOCKSTATETYPE;283,15585
typedef struct OMX_TIME_CONFIG_ACTIVEREFCLOCKTYPE 288,15814
    OMX_U32 nSize;289,15866
    OMX_VERSIONTYPE nVersion;290,15941
    OMX_TIME_REFCLOCKTYPE eClock;291,16023
} OMX_TIME_CONFIG_ACTIVEREFCLOCKTYPE;292,16134
typedef struct OMX_OTHER_CONFIG_POWERTYPE 296,16292
    OMX_U32 nSize;297,16336
    OMX_VERSIONTYPE nVersion;298,16405
    OMX_BOOL bEnablePM;299,16481
} OMX_OTHER_CONFIG_POWERTYPE;300,16551
typedef struct OMX_OTHER_CONFIG_STATSTYPE 305,16702
    OMX_U32 nSize;306,16746
    OMX_VERSIONTYPE nVersion;307,16815
} OMX_OTHER_CONFIG_STATSTYPE;309,16916
typedef struct OMX_OTHER_PORTDEFINITIONTYPE 317,17117
    OMX_OTHER_FORMATTYPE eFormat;318,17163
} OMX_OTHER_PORTDEFINITIONTYPE;319,17245
typedef struct OMX_OTHER_PARAM_PORTFORMATTYPE 324,17413
    OMX_U32 nSize;325,17461
    OMX_VERSIONTYPE nVersion;326,17519
    OMX_U32 nPortIndex;327,17595
    OMX_U32 nIndex;328,17655
    OMX_OTHER_FORMATTYPE eFormat;329,17746
} OMX_OTHER_PARAM_PORTFORMATTYPE;330,17827

video_filter/deinterlace/yadif_template.h,1274
#define MANGLE(24,911
#define MANGLEVARIABLES 25,945
#define MANGLE(27,993
#define MANGLEVARIABLES 28,1024
#define REGMM 34,1166
#define MM 35,1186
#define MOV 36,1207
#define MOVQ 37,1227
#define MOVQU 38,1249
#define STEP 39,1272
#define LOAD(40,1287
#define PSRL1(43,1396
#define PSRL2(44,1439
#define PSHUF(45,1482
#define REGMM 48,1590
#define MM 49,1609
#define MOV 50,1630
#define MOVQ 51,1650
#define MOVQU 52,1670
#define STEP 53,1691
#define LOAD(54,1706
#define PSRL1(57,1815
#define PSRL2(58,1857
#define PSHUF(59,1900
#define PABS(63,1992
#define PABS(66,2064
#define CHECK(73,2222
#define CHECK1 98,3501
#define CHECK2 108,3978
VLC_TARGET static void RENAME(124,4682
#define FILTER\FILTER132,4998
#define prev2 254,10328
#define next2 255,10349
#undef prev2257,10384
#undef next2258,10397
#define prev2 260,10423
#define next2 261,10443
#undef prev2263,10479
#undef next2264,10492
#undef STEP267,10513
#undef REGMM268,10525
#undef MM269,10538
#undef MOV270,10548
#undef MOVQ271,10559
#undef MOVQU272,10571
#undef PSHUF273,10584
#undef PSRL1274,10597
#undef PSRL2275,10610
#undef LOAD276,10623
#undef PABS277,10635
#undef CHECK278,10647
#undef CHECK1279,10660
#undef CHECK2280,10674
#undef FILTER281,10688

audio_filter/spatializer/spatializer.cpp,1270
using std::nothrow;38,1555
#define SPAT_AMP 46,1695
#define ROOMSIZE_TEXT 54,1972
#define ROOMSIZE_LONGTEXT 55,2010
#define WIDTH_TEXT 58,2142
#define WIDTH_LONGTEXT 59,2178
#define WET_TEXT 61,2234
#define WET_LONGTEXT 62,2261
#define DRY_TEXT 64,2288
#define DRY_LONGTEXT 65,2315
#define DAMP_TEXT 67,2342
#define DAMP_LONGTEXT 68,2371
struct filter_sys_t94,3515
    vlc_mutex_t lock;filter_sys_t::lock96,3537
    revmodel *p_reverbm;filter_sys_t::p_reverbm97,3559
#define DECLARECB(100,3588
#undef  DECLARECB108,3868
struct callback_s 110,3887
  const char *psz_name;callback_s::psz_name111,3907
static const callback_s callbacks[callbacks117,4075
enum { num_callbacks=::num_callbacks124,4455
enum { num_callbacks=sizeof(::sizeof124,4455
enum { num_callbacks=sizeof(callbacks)::callbacks124,4455
enum { num_callbacks=sizeof(callbacks)/sizeof(::sizeof124,4455
enum { num_callbacks=sizeof(callbacks)/sizeof(callback_s)::callback_s124,4455
static int Open(131,4735
static void Close(171,6106
static void SpatFilter(195,6862
static block_t *DoWork(DoWork213,7374
static int RoomCallback(226,7838
static int WidthCallback(237,8212
static int WetCallback(248,8581
static int DryCallback(259,8950
static int DampCallback(270,9319

demux/asf/asfpacket.h,826
#define VLC_ASF_ASFPACKET_H_23,1138
#define ASFPACKET_PREROLL_FROM_CURRENT 29,1232
    block_t *p_frame;p_frame33,1292
    asf_object_stream_properties_t *p_sp;p_sp34,1350
    asf_object_extended_stream_properties_t *p_esp;p_esp35,1392
    int i_cat;36,1444
} asf_track_info_t;37,1459
typedef struct asf_packet_sys_s asf_packet_sys_t;39,1480
struct asf_packet_sys_s41,1531
    demux_t *p_demux;p_demux43,1557
    uint64_t *pi_preroll;pi_preroll46,1609
    int64_t *pi_preroll_start;pi_preroll_start47,1635
    void (*pf_send)pf_send50,1687
    asf_track_info_t * (*pf_gettrackinfo)pf_gettrackinfo51,1749
    bool (*pf_doskip)pf_doskip54,1851
    void (*pf_updatesendtime)pf_updatesendtime55,1909
    void (*pf_updatetime)pf_updatetime56,1969
    void (*pf_setaspectratio)pf_setaspectratio57,2034

codec/omxil/omxil_core.h,42
#define MAX_COMPONENTS_LIST_SIZE 44,1997

demux/adaptive/tools/Properties.hpp,245
#define PROPERTIES_HPP21,996
template <typename T> class Property23,1020
        Property(Property::Property26,1071
        T & Set(Property::Set28,1094
        T const & Get(Property::Get33,1173
        T value;Property::value39,1263

demux/hls/playlist/M3U8.hpp,206
#define M3U8_H_22,981
namespace hls26,1052
    namespace playlisthls::playlist28,1068
        class M3U8 hls::playlist::M3U832,1142
                std::string data;hls::playlist::M3U8::data42,1432

access_output/dummy.c,109
vlc_module_begin 43,1722
static void Close(78,2964
static ssize_t Write(87,3342
static int Seek(108,3837

demux/adaptive/logic/AlwaysBestAdaptationLogic.h,242
#define ALWAYSBESTADAPTATIONLOGIC_H_26,1200
        class AlwaysBestAdaptationLogic 34,1323
                AlwaysBestAdaptationLogic 37,1426
                virtual BaseRepresentation *getNextRepresentation(getNextRepresentation39,1483

lua/extension_thread.c,342
struct thread_sys_t32,1302
    extensions_manager_t *p_mgr;p_mgr34,1324
    extension_t *p_ext;p_ext35,1357
int Activate(49,1709
bool IsActivated(93,2983
static void FreeCommands(117,3620
int Deactivate(141,4227
static int RemoveActivated(180,5365
void KillExtension(216,6250
int PushCommand__(227,6609
static void* Run(315,9032

access/vdr.c,1416
#define HELP_TEXT 72,2636
#define CHAPTER_OFFSET_TEXT 74,2711
#define CHAPTER_OFFSET_LONGTEXT 75,2766
#define FPS_TEXT 78,2874
#define FPS_LONGTEXT 79,2908
vlc_module_begin 82,2983
#define MIN_CHAPTER_SIZE 105,3808
struct access_sys_t109,3878
    size_array_t file_sizes;112,3934
    uint64_t offset;113,3963
    uint64_t size;114,3984
    unsigned i_current_file;117,4065
    int fd;118,4094
    vlc_meta_t *p_meta;p_meta121,4127
    input_title_t *p_marks;p_marks124,4172
    uint64_t *offsets;offsets125,4200
    unsigned cur_seekpoint;126,4223
    float fps;127,4251
    bool b_ts_format;130,4309
#define CURRENT_FILE_SIZE 133,4335
#define FILE_SIZE(134,4413
#define FILE_COUNT 135,4473
static int Open(159,5762
static void Close(212,7590
static bool ScanDirectory(233,8239
static int Control(262,9032
static ssize_t Read(340,11356
static int Seek(387,12728
static void FindSeekpoint(418,13645
static char *GetFilePath(GetFilePath444,14436
static bool ImportNextFile(460,14986
static bool SwitchFile(494,15938
static void OptimizeForRead(556,17577
static void UpdateFileSize(575,18139
static FILE *OpenRelativeFile(OpenRelativeFile597,18827
static bool ReadLine(619,19594
static void ImportMeta(641,20211
static void ImportMarks(784,24299
static bool ReadIndexRecord(906,28030
static int64_t ParseFrameNumber(935,29068
static const char *BaseName(BaseName957,29828

access/http/access.c,425
struct access_sys_t41,1395
    struct vlc_http_mgr *manager;manager43,1417
    struct vlc_http_resource *resource;resource44,1451
static block_t *FileRead(FileRead47,1495
static int FileSeek(57,1709
static int FileControl(66,1907
static block_t *LiveRead(LiveRead113,3095
static int NoSeek(123,3367
static int LiveControl(130,3482
static int Open(158,4201
static void Close(277,7392
vlc_module_begin(287,7610

audio_filter/equalizer.c,1368
#define PRESET_TEXT 58,2093
#define PRESET_LONGTEXT 59,2138
#define BANDS_TEXT 61,2203
#define BANDS_LONGTEXT 62,2240
#define VLC_BANDS_TEXT 67,2468
#define VLC_BANDS_LONGTEXT 68,2523
#define TWOPASS_TEXT 72,2662
#define TWOPASS_LONGTEXT 73,2700
#define PREAMP_TEXT 76,2809
#define PREAMP_LONGTEXT 77,2848
vlc_module_begin 79,2920
struct filter_sys_t104,3945
    int i_band;107,3998
    float *f_alpha;f_alpha108,4014
    float *f_beta;f_beta109,4034
    float *f_gamma;f_gamma110,4053
    float *f_amp;f_amp113,4102
    float f_gamp;114,4141
    bool b_2eqz;115,4181
    float x[x118,4222
    float y[y119,4242
    float x2[x2122,4298
    float y2[y2123,4319
    vlc_mutex_t lock;125,4346
#define EQZ_IN_FACTOR 130,4422
static int Open(149,5253
static void Close(176,6073
static block_t * DoWork(191,6572
    int   i_band;204,7047
        float f_frequency;208,7083
        float f_alpha;209,7110
        float f_beta;210,7133
        float f_gamma;211,7155
    } band[band212,7178
} eqz_config_t;214,7206
static void EqzCoeffs(217,7290
static inline float EqzConvertdB(262,9043
static int EqzInit(279,9603
static void EqzFilter(388,13221
static void EqzClean(451,15262
static int PresetCallback(469,15809
static int PreampCallback(516,17201
static int BandsCallback(536,17779
static int TwoPassCallback(565,18641

video_output/gl.c,651
#define GL_TEXT 40,1316
#define GLES2_TEXT 41,1355
#define GLES_TEXT 42,1402
#define PROVIDER_LONGTEXT 43,1446
# define API 48,1596
# define MODULE_VARNAME 49,1624
    set_shortname 50,1656
# define API 59,2006
# define MODULE_VARNAME 60,2033
# define API 69,2386
# define MODULE_VARNAME 70,2410
struct vout_display_sys_t83,2830
    vout_display_opengl_t *vgl;vgl85,2858
    vlc_gl_t *gl;gl86,2890
    picture_pool_t *pool;pool87,2908
static int Open 99,3296
static void Close 157,4748
static picture_pool_t *Pool Pool176,5175
static void PictureRender 189,5485
static void PictureDisplay 198,5751
static int Control 210,6065

access/http/file_test.c,970
#undef NDEBUG25,1115
static const char url[url38,1321
static const char url_http[url_http39,1396
static const char url_mmsh[url_mmsh40,1475
static const char url_icyx[url_icyx41,1554
static const char ua[ua42,1633
static const char *replies[replies44,1709
static uintmax_t offset 45,1757
static bool secure 46,1786
static bool etags 47,1813
static int lang 48,1840
static vlc_http_cookie_jar_t *jar;jar50,1863
int main(52,1899
vlc_h2_frame_headers(279,9400
static struct vlc_http_stream stream;290,9684
static struct vlc_http_msg *stream_read_headers(stream_read_headers292,9723
static struct block_t *stream_read(stream_read313,10228
static void stream_close(319,10338
static const struct vlc_http_stream_cbs stream_callbacks 325,10453
static struct vlc_http_stream stream 332,10578
struct vlc_http_msg *vlc_http_mgr_request(vlc_http_mgr_request334,10641
struct vlc_http_cookie_jar_t *vlc_http_mgr_get_jar(vlc_http_mgr_get_jar396,12593

video_chroma/yuy2_i420.c,412
#define SRC_FOURCC 36,1511
#define DEST_FOURCC 37,1562
vlc_module_begin 55,2429
VIDEO_FILTER_WRAPPER(110,4253
    #define C_YUYV_YUV422_skip(146,5749
    #define C_YUYV_YUV422(163,6542
static void YVYU_I420(188,7554
    #define C_YVYU_YUV422_skip(217,8736
    #define C_YVYU_YUV422(234,9529
static void UYVY_I420(259,10541
    #define C_UYVY_YUV422_skip(288,11723
    #define C_UYVY_YUV422(305,12516

demux/dash/mpd/ProgramInformation.h,476
#define PROGRAMINFORMATION_H_26,1186
        class ProgramInformation35,1292
                virtual ~ProgramInformation(38,1355
                std::string         moreInformationUrl;ProgramInformation::moreInformationUrl50,1974
                std::string         title;ProgramInformation::title51,2030
                std::string         source;ProgramInformation::source52,2073
                std::string         copyright;ProgramInformation::copyright53,2117

access/dvdread.c,2324
#define ANGLE_TEXT 68,2545
#define ANGLE_LONGTEXT 69,2580
vlc_module_begin 75,2712
#define DVD_BLOCK_READ_ONCE 89,3262
struct demux_sys_t95,3473
    dvd_reader_t *p_dvdread;p_dvdread98,3518
    dvd_file_t   *p_title;p_title99,3547
    ifo_handle_t *p_vmg_file;p_vmg_file101,3575
    ifo_handle_t *p_vts_file;p_vts_file102,3605
    int i_title;104,3636
    int i_chapter,105,3653
    int i_chapter, i_chapters;105,3653
    int i_angle,106,3684
    int i_angle, i_angles;106,3684
    tt_srpt_t    *p_tt_srpt;p_tt_srpt108,3712
    pgc_t        *p_cur_pgc;p_cur_pgc109,3741
    dsi_t        dsi_pack;110,3770
    int          i_ttn;111,3797
    int i_pack_len;113,3822
    int i_cur_block;114,3842
    int i_next_vobu;115,3863
    int i_mux_rate;117,3885
    int i_title_start_block;120,3947
    int i_title_end_block;121,3976
    int i_title_blocks;122,4003
    int i_title_offset;123,4027
    mtime_t i_title_cur_time;124,4051
    int i_title_start_cell;126,4082
    int i_title_end_cell;127,4110
    int i_cur_cell;128,4136
    int i_next_cell;129,4156
    mtime_t i_cell_cur_time;130,4177
    mtime_t i_cell_duration;131,4206
    ps_track_t    tk[tk134,4252
    int           i_titles;136,4288
    input_title_t **titles;titles137,4316
    int i_sar_num;140,4361
    int i_sar_den;141,4380
    uint32_t clut[clut144,4414
static int Open(162,5046
static void Close(252,7677
static int64_t dvdtime_to_time(281,8494
#define BCD2D(284,8623
static int Control(322,9724
static int Demux(440,13680
#undef p_pgc549,17202
static int DemuxBlock(557,17427
static void ESNew(644,19715
static int DvdReadSetArea(716,21894
#define p_pgc 724,22109
#define p_vmg 725,22140
#define p_vts 726,22172
#define audio_control 900,27738
#undef audio_control942,29318
#define spu_palette 944,29340
#define spu_control 949,29499
#undef spu_control992,31027
#undef p_pgc1043,32495
#undef p_vts1044,32508
#undef p_vmg1045,32521
static void DvdReadSeek(1056,32976
#define p_pgc 1065,33188
#define p_vts 1066,33219
#undef p_vts1138,35594
#undef p_pgc1139,35607
static void DvdReadHandleDSI(1147,35815
static void DvdReadFindCell(1264,40171
#define cell 1272,40322
#undef cell1289,40746
static void DemuxTitles(1315,41689
#define tt_srpt 1324,41908
#undef tt_srpt1348,42544

audio_filter/channel_mixer/trivial.c,518
vlc_module_begin 41,1581
struct filter_sys_t49,1840
    int channel_map[channel_map51,1862
static block_t *Upmix(Upmix57,1931
static block_t *Downmix(Downmix97,3152
static block_t *CopyLeft(CopyLeft123,3974
static block_t *CopyRight(CopyRight136,4228
static block_t *ExtractLeft(ExtractLeft149,4483
static block_t *ExtractRight(ExtractRight163,4791
static block_t *ReverseStereo(ReverseStereo177,5101
static block_t *Equals(Equals193,5432
static int Create(202,5581
static void Destroy(361,11118

video_output/win32/directdraw.c,2394
#define DIRECTDRAWENUMERATEEX_NAME 60,2419
#define HW_YUV_TEXT 65,2660
#define HW_YUV_LONGTEXT 66,2720
#define OVERLAY_TEXT 70,2882
#define OVERLAY_LONGTEXT 71,2930
#define SYSMEM_TEXT 75,3115
#define SYSMEM_LONGTEXT 76,3176
#define TRIPLEBUF_TEXT 82,3505
#define TRIPLEBUF_LONGTEXT 83,3568
#define DEVICE_TEXT 87,3729
#define DEVICE_LONGTEXT 88,3786
#define DX_HELP 93,4036
vlc_module_begin(101,4335
struct picture_sys_t 126,5321
    LPDIRECTDRAWSURFACE2 surface;127,5344
    LPDIRECTDRAWSURFACE2 front_surface;128,5378
    picture_t            *fallback;fallback129,5418
#undef GUID_EXT138,5754
#define GUID_EXT139,5770
static int Open(164,6782
static void Close(241,8848
static picture_pool_t *Pool(Pool261,9291
static void Display(266,9408
static int Control(325,11655
static void Manage(348,12316
static int DirectXOpen(393,13607
static void DirectXClose(437,14910
static BOOL WINAPI DirectXOpenDDrawCallback(445,15050
static void DirectXGetDDrawCaps(508,17112
static int DirectXOpenDDraw(573,20142
static void DirectXCloseDDraw(661,22998
static void DirectXCreateClipper(682,23565
static uint32_t DirectXFindColorkey(720,24566
static int DirectXOpenDisplay(778,26105
static void DirectXCloseDisplay(820,27397
static int DirectXCreateSurface(844,28130
static void DirectXDestroySurface(920,30899
static int DirectXLockSurface(927,31082
static void DirectXUnlockSurface(964,32452
static int DirectXCheckLockingSurface(970,32666
    vlc_fourcc_t codec;983,32994
    DWORD        fourcc;984,33018
} dx_format_t;985,33043
static DWORD DirectXGetFourcc(987,33059
static int DirectXCreatePictureResourceYuvOverlay(1006,33688
static int DirectXCreatePictureResourceYuv(1056,35731
static int DirectXCreatePictureResourceRgb(1112,37716
static int DirectXCreatePictureResource(1173,39622
static void DirectXDestroyPictureResource(1229,41556
static int DirectXLock(1240,41910
static void DirectXUnlock(1250,42274
static int DirectXCreatePool(1256,42432
static void DirectXDestroyPool(1292,43460
static int DirectXUpdateOverlay(1310,43914
static void WallpaperChange(1368,46033
static int WallpaperCallback(1409,47259
    char **values;values1426,47830
    char **descs;descs1427,47849
    size_t count;1428,47867
} enum_context_t;1429,47885
static BOOL WINAPI DirectXEnumCallback2(1434,48091
static int FindDevicesCallback(1453,48733

codec/dmo/buffer.c,336
#    define LOADER36,1475
static long STDCALL QueryInterface(49,1654
static long STDCALL AddRef(67,2100
static long STDCALL Release(73,2223
static long STDCALL SetLength(88,2501
static long STDCALL GetMaxLength(96,2750
static long STDCALL GetBufferAndLength(104,2978
CMediaBuffer *CMediaBufferCreate(CMediaBufferCreate115,3360

logger/console.c,462
static const int ptr_width 34,1327
static const char msg_type[msg_type35,1397
# define COL(38,1488
# define RED 39,1528
# define GREEN 40,1556
# define YELLOW 41,1584
# define WHITE 42,1612
# define GRAY 43,1639
static const char msg_color[msg_color44,1667
static void LogConsoleColor(46,1734
static void LogConsoleGray(68,2413
static vlc_log_cb Open(88,3030
#define QUIET_TEXT 114,3643
#define QUIET_LONGTEXT 115,3677
vlc_module_begin(117,3745

codec/scte18.c,828
vlc_module_begin 40,1436
struct decoder_sys_t49,1686
    atsc_a65_handle_t *p_handle;p_handle51,1709
typedef struct scte18_cea_t57,1843
    uint16_t i_eas_event_id;59,1873
    char     rgc_eas_originator_code[rgc_eas_originator_code60,1902
    char *   psz_eas_event_code;61,1943
    char *   psz_nature_of_activation;62,1976
    uint8_t  alert_message_time_remaining;63,2015
    uint32_t event_start_time;64,2058
    uint16_t event_duration;65,2089
    uint8_t  alert_priority;66,2118
    char *   psz_alert_text;68,2148
} scte18_cea_t;70,2178
#define BUF_ADVANCE(75,2372
static inline scte18_cea_t * scte18_cea_New(77,2426
static void scte18_cea_Free(82,2523
static scte18_cea_t * scte18_cea_Decode(90,2717
static subpicture_t *Decode(Decode172,4777
static int Open(219,6541
static void Close(244,7099

demux/nuv.c,2899
vlc_module_begin 47,1815
    int64_t i_time;65,2344
    int64_t i_offset;66,2364
} demux_index_entry_t;68,2387
    int i_idx;72,2428
    int i_idx_max;73,2443
    demux_index_entry_t *idx;idx75,2463
} demux_index_t;76,2493
    char id[id92,2974
    char version[version93,3038
    int  i_width;95,3078
    int  i_height;96,3096
    int  i_width_desired;97,3115
    int  i_height_desired;98,3141
    char i_mode;100,3169
    double  d_aspect;102,3232
    double  d_fps;103,3284
    int     i_video_blocks;105,3304
    int     i_audio_blocks;106,3361
    int     i_text_blocks;107,3389
    int     i_keyframe_distance;109,3417
} header_t;111,3451
#define NUV_FH_SIZE 113,3464
    char i_type;116,3504
    char i_compression;120,3739
    char i_keyframe;139,4675
    uint8_t i_filters;140,4738
    int i_timecode;144,4914
    int i_length;146,4948
} frame_header_t;148,5064
    int             i_version;152,5100
    vlc_fourcc_t    i_video_fcc;153,5131
    vlc_fourcc_t    i_audio_fcc;155,5165
    int             i_audio_sample_rate;156,5198
    int             i_audio_bits_per_sample;157,5239
    int             i_audio_channels;158,5284
    int             i_audio_compression_ratio;159,5322
    int             i_audio_quality;160,5369
    int             i_rtjpeg_quality;161,5406
    int             i_rtjpeg_luma_filter;162,5444
    int             i_rtjpeg_chroma_filter;163,5486
    int             i_lavc_bitrate;164,5530
    int             i_lavc_qmin;165,5566
    int             i_lavc_qmax;166,5599
    int             i_lavc_maxqdiff;167,5632
    int64_t         i_seektable_offset;168,5669
    int64_t         i_keyframe_adjust_offset;169,5709
} extended_header_t;171,5756
struct demux_sys_t173,5778
    header_t          hdr;175,5799
    extended_header_t exh;176,5826
    int64_t     i_pcr;178,5854
    es_out_id_t *p_es_video;p_es_video179,5877
    int         i_extra_f;180,5906
    uint8_t     *p_extra_f;p_extra_f181,5933
    es_out_id_t *p_es_audio;p_es_audio183,5962
    demux_index_t idx;186,6008
    bool b_index;187,6031
    bool b_seekable;188,6049
    uint8_t fh_buffer[fh_buffer190,6099
    int64_t i_total_frames;191,6135
    int64_t i_total_length;192,6163
    int i_first_frame_offset;194,6268
static int Open(206,6806
static void Close(348,11354
static int Demux(363,11922
static int Control(447,14598
static int ControlSetPosition(553,18082
static inline void GetDoubleLE(612,19644
static int HeaderLoad(627,19950
static int FrameHeaderLoad(660,21135
static int ExtendedHeaderLoad(685,21863
static int SeekTableLoad(736,23936
#define DEMUX_INDEX_SIZE_MAX 880,28331
static void demux_IndexInit(881,28369
static void demux_IndexClean(887,28496
static void demux_IndexAppend(892,28600
static int64_t demux_IndexConvertTime(949,30596
static int64_t demux_IndexFindOffset(989,31573

demux/mkv/matroska_segment_seeker.cpp,994
    It greatest_lower_bound(::greatest_lower_bound37,1460
    template<class It> It prev_(::prev_48,1854
    template<class It> It next_(::next_49,1912
SegmentSeeker::add_cluster_position(53,2018
SegmentSeeker::add_cluster(65,2331
    struct Duration 91,3232
        static void fix(Duration::fix92,3254
SegmentSeeker::add_seekpoint(113,3713
SegmentSeeker::find_greatest_seekpoints_in_range(131,4194
SegmentSeeker::get_seekpoints_around(152,4784
    typedef seekpoints_t::const_iterator iterator;159,4964
SegmentSeeker::get_seekpoints_around(190,5874
        typedef track_ids_t::const_iterator track_iterator;199,6125
SegmentSeeker::get_seekpoints(249,7687
    struct contains_all_of_t 251,7801
        bool operator()(contains_all_of_t::operator()252,7832
SegmentSeeker::index_range(286,8812
SegmentSeeker::index_unsearched_range(295,9176
SegmentSeeker::mark_range_as_searched(349,10768
SegmentSeeker::get_search_areas(386,11800
SegmentSeeker::mkv_jump_to(414,12566

demux/dash/mpd/Period.cpp,49
Period::Period(33,1261
Period::~Period 38,1315

demux/pva.c,481
vlc_module_begin 42,1704
struct demux_sys_t55,2130
    es_out_id_t *p_video;p_video57,2151
    es_out_id_t *p_audio;p_audio58,2177
    int          i_vc;61,2222
    int          i_ac;62,2245
    block_t     *p_pes;p_pes65,2297
    block_t     *p_es;p_es66,2333
    int64_t     b_pcr_audio;68,2370
static int Open(80,2753
static void Close(126,4122
static int Demux(143,4684
static int Control(286,9297
static int ReSynch(353,11335
static void ParsePES(384,12074

access/rtsp/rtsp.c,2000
#define BUF_SIZE 37,1481
#define HEADER_SIZE 38,1503
#define MAX_FIELDS 39,1528
struct rtsp_s 41,1552
  int           s;43,1569
  char         *host;host45,1589
  int           port;46,1611
  char         *path;path47,1633
  char         *mrl;mrl48,1655
  char         *user_agent;user_agent49,1676
  char         *server;server51,1705
  unsigned int  server_state;52,1729
  uint32_t      server_caps;53,1759
  unsigned int  cseq;55,1789
  char         *session;session56,1811
  char        *answers[answers58,1837
  char        *scheduled[scheduled59,1902
const char rtsp_protocol_version[rtsp_protocol_version66,2002
#define RTSP_CONNECTED 69,2070
#define RTSP_INIT 70,2095
#define RTSP_READY 71,2120
#define RTSP_PLAYING 72,2145
#define RTSP_RECORDING 73,2170
#define RTSP_OPTIONS 76,2223
#define RTSP_DESCRIBE 77,2256
#define RTSP_ANNOUNCE 78,2289
#define RTSP_SETUP 79,2322
#define RTSP_GET_PARAMETER 80,2355
#define RTSP_SET_PARAMETER 81,2388
#define RTSP_TEARDOWN 82,2421
#define RTSP_PLAY 83,2454
#define RTSP_RECORD 84,2487
static char *rtsp_get(rtsp_get91,2623
static int rtsp_put(111,3018
static int rtsp_get_status_code(131,3504
static int rtsp_send_request(159,4148
static void rtsp_schedule_standard(195,4942
static int rtsp_get_answers(216,5490
int rtsp_send_ok(302,8112
int rtsp_request_options(318,8468
int rtsp_request_describe(335,8877
int rtsp_request_setup(356,9388
int rtsp_request_setparameter(362,9540
int rtsp_request_play(384,10061
int rtsp_request_tearoff(406,10567
int rtsp_read_data(416,10763
int rtsp_connect(475,12410
void rtsp_close(572,15252
char *rtsp_search_answers(rtsp_search_answers596,15882
void rtsp_set_session(631,16544
char *rtsp_get_session(rtsp_get_session637,16691
char *rtsp_get_mrl(rtsp_get_mrl642,16779
void rtsp_schedule_field(651,16905
void rtsp_unschedule_field(678,17486
static void pp_free_helper_ 708,18048
void rtsp_unschedule_all(724,18274
void rtsp_free_answers(735,18454

codec/sdl_image.c,398
struct decoder_sys_t41,1716
    const char *psz_sdl_type;psz_sdl_type43,1739
vlc_module_begin 57,2286
static const struct supported_fmt_t67,2610
    vlc_fourcc_t i_fourcc;69,2648
    const char *psz_sdl_type;psz_sdl_type70,2675
} p_supported_fmt[p_supported_fmt71,2705
static int OpenDecoder(89,3318
static picture_t *DecodeBlock(DecodeBlock129,4641
static void CloseDecoder(277,9377

codec/scte18.h,339
#define VLC_SCTE18_H20,998
#define SCTE18_SI_BASE_PID 22,1020
#define SCTE18_TABLE_ID 23,1054
#define SCTE18_DESCRIPTION 24,1086
    EAS_PRIORITY_TEST 28,1163
    EAS_PRIORITY_LOW 29,1190
    EAS_PRIORITY_MEDIUM 30,1216
    EAS_PRIORITY_HIGH 31,1245
    EAS_PRIORITY_MAX 32,1273
static inline int scte18_get_EAS_priority(37,1340

demux/smooth/playlist/MemoryChunk.hpp,327
#define MEMORYCHUNK_HPP21,988
namespace smooth25,1050
    namespace httpsmooth::http27,1069
        class MemoryChunkSource smooth::http::MemoryChunkSource31,1135
                block_t *data;smooth::http::MemoryChunkSource::data42,1524
                size_t   i_read;smooth::http::MemoryChunkSource::i_read43,1555

codec/cc.c,4706
#define OPAQUE_TEXT 54,1948
#define OPAQUE_LONGTEXT 55,1982
vlc_module_begin 58,2096
    EIA608_MODE_POPUP 75,2654
    EIA608_MODE_ROLLUP_2 76,2681
    EIA608_MODE_ROLLUP_3 77,2711
    EIA608_MODE_ROLLUP_4 78,2741
    EIA608_MODE_PAINTON 79,2771
    EIA608_MODE_TEXT 80,2800
} eia608_mode_t;81,2825
    EIA608_COLOR_WHITE 85,2858
    EIA608_COLOR_GREEN 86,2886
    EIA608_COLOR_BLUE 87,2914
    EIA608_COLOR_CYAN 88,2941
    EIA608_COLOR_RED 89,2968
    EIA608_COLOR_YELLOW 90,2994
    EIA608_COLOR_MAGENTA 91,3023
    EIA608_COLOR_USERDEFINED 92,3053
} eia608_color_t;93,3086
    EIA608_FONT_REGULAR 97,3120
    EIA608_FONT_REGULAR    = 0x00,x0097,3120
    EIA608_FONT_ITALICS 98,3155
    EIA608_FONT_ITALICS    = 0x01,x0198,3155
    EIA608_FONT_UNDERLINE 99,3190
    EIA608_FONT_UNDERLINE  = 0x02,x0299,3190
    EIA608_FONT_UNDERLINE_ITALICS 100,3225
    EIA608_FONT_UNDERLINE_ITALICS = EIA608_FONT_UNDERLINE 100,3225
    EIA608_FONT_UNDERLINE_ITALICS = EIA608_FONT_UNDERLINE | EIA608_FONT_ITALICS100,3225
} eia608_font_t;101,3305
#define EIA608_SCREEN_ROWS 103,3323
#define EIA608_SCREEN_COLUMNS 104,3353
struct eia608_screen 106,3387
    uint8_t characters[characters108,3425
    eia608_color_t colors[colors109,3494
    eia608_font_t fonts[fonts110,3566
    int row_used[row_used111,3669
typedef struct eia608_screen eia608_screen;113,3730
    EIA608_STATUS_DEFAULT 117,3790
    EIA608_STATUS_DEFAULT         = 0x00,x00117,3790
    EIA608_STATUS_CHANGED 118,3832
    EIA608_STATUS_CHANGED         = 0x01,x01118,3832
    EIA608_STATUS_CAPTION_ENDED 119,3912
    EIA608_STATUS_CAPTION_ENDED   = 0x02,x02119,3912
    EIA608_STATUS_CAPTION_CLEARED 120,3972
    EIA608_STATUS_CAPTION_CLEARED = 0x04,x04120,3972
    EIA608_STATUS_DISPLAY 121,4041
    EIA608_STATUS_DISPLAY         = EIA608_STATUS_CAPTION_CLEARED 121,4041
    EIA608_STATUS_DISPLAY         = EIA608_STATUS_CAPTION_CLEARED | EIA608_STATUS_CAPTION_ENDED,121,4041
} eia608_status_t;122,4138
    eia608_color_t  i_color;125,4180
    eia608_font_t   i_font;126,4209
    int             i_column;127,4237
} pac2_attribs[pac2_attribs128,4267
#define EIA608_COLOR_DEFAULT 164,6341
static const int rgi_eia608_colors[rgi_eia608_colors166,6390
    int i_channel;180,6745
    int           i_screen;183,6775
    eia608_screen screen[screen184,6826
        int i_row;188,6873
        int i_column;189,6892
    } cursor;190,6914
    eia608_mode_t mode;193,6939
    eia608_color_t color;194,6963
    eia608_font_t font;195,6989
    int i_row_rollup;196,7013
        uint8_t d1;201,7117
        uint8_t d2;202,7137
    } last;203,7157
} eia608_t;204,7169
#define CC_MAX_REORDER_SIZE 212,7471
struct decoder_sys_t213,7504
    int     i_block;215,7527
    block_t *pp_block[pp_block216,7548
    block_t *p_block;p_block217,7592
    int i_field;219,7663
    int i_channel;220,7680
    mtime_t i_display_time;222,7700
    eia608_t eia608;224,7729
    bool b_opaque;225,7750
static int Open(237,8235
static void Flush(287,9567
static subpicture_t *Decode(Decode304,10137
static void Close(342,11221
static void Push(355,11626
static block_t *Pop(Pop367,12025
static subpicture_t *Subtitle(Subtitle408,13478
static subpicture_t *Convert(Convert453,15184
static void Eia608Cursor(508,16975
static void Eia608ClearScreenRowX(516,17236
static void Eia608ClearScreenRow(547,18099
static void Eia608ClearScreen(552,18229
static int Eia608GetWritingScreenIndex(558,18391
static void Eia608EraseScreen(577,18857
static void Eia608Write(582,18998
static void Eia608Erase(599,19486
static void Eia608EraseToEndOfRow(616,19932
static void Eia608RollUp(624,20144
static void Eia608ParseChannel(666,21495
static eia608_status_t Eia608ParseTextAttribute(686,22003
static eia608_status_t Eia608ParseSingle(697,22310
static eia608_status_t Eia608ParseDouble(703,22474
static eia608_status_t Eia608ParseExtended(709,22688
static eia608_status_t Eia608ParseCommand0x14(724,23169
static bool Eia608ParseCommand0x17(801,25504
static bool Eia608ParsePac(817,25857
static eia608_status_t Eia608ParseData(845,26605
#define ON(852,26793
#undef ON874,27586
static void Eia608TextUtf8(884,27777
#define E1(886,27867
#define E2(887,27902
#define E3(888,27946
        uint8_t c;890,28023
        char utf8[utf8891,28042
#undef E3992,33524
#undef E2993,33534
#undef E1994,33544
static void Eia608Strlcat(1006,33815
#define CAT(1014,34005
static text_segment_t * Eia608TextLine(1016,34062
#undef CAT1118,37175
static void Eia608Init(1131,37393
static eia608_status_t Eia608Parse(1153,37869
static text_segment_t *Eia608Text(Eia608Text1183,38867

hw/vdpau/deinterlace.c,189
struct filter_sys_t33,1256
    mtime_t last_pts;35,1278
static picture_t *Deinterlace(Deinterlace38,1304
static int Open(98,3072
static void Close(124,3906
vlc_module_begin(132,4043

video_chroma/rv32.c,67
vlc_module_begin 44,1920
static picture_t *Filter(Filter78,3176

video_chroma/d3d11_surface.c,695
vlc_module_begin 44,1759
#define COBJMACROS51,1970
struct picture_sys_t55,2038
    ID3D11VideoDecoderOutputView  *decoder;decoder57,2061
    ID3D11Texture2D               *texture;texture58,2150
    ID3D11DeviceContext           *context;context59,2194
    unsigned                      slice_index;60,2238
    HINSTANCE                     hd3d11_dll;61,2285
struct filter_sys_t 64,2346
    copy_cache_t     cache;65,2368
    ID3D11Texture2D  *staging;staging66,2396
    vlc_mutex_t      staging_lock;67,2427
static int assert_staging(70,2466
static void D3D11_YUY2(102,3443
static void D3D11_NV12(183,6219
VIDEO_FILTER_WRAPPER 235,8055
static void CloseConverter(270,9082

access/rtsp/rtsp.h,452
#define HAVE_RTSP_H27,969
#define RTSP_STATUS_SET_PARAMETER 31,1045
#define RTSP_STATUS_OK 32,1083
typedef struct rtsp_s rtsp_t;34,1122
    void *p_userdata;p_userdata38,1170
    int (*pf_connect)pf_connect40,1193
    int (*pf_disconnect)pf_disconnect41,1264
    int (*pf_read)pf_read42,1310
    int (*pf_read_line)pf_read_line43,1383
    int (*pf_write)pf_write44,1461
    rtsp_t *p_private;p_private46,1536
} rtsp_client_t;48,1560

access/vcd/cdrom_internals.h,3107
struct vcddev_s28,1411
    char   *psz_dev;psz_dev30,1429
    int    i_vcdimage_handle;33,1551
    int    i_tracks;34,1631
    int    *p_sectors;p_sectors35,1711
    HANDLE h_device_handle;40,1849
    HFILE  hcd;42,1954
    int    i_device_handle;44,2040
#   define O_BINARY 50,2149
#define VCDDEV_T 53,2179
#define darwin_freeTOC(59,2405
#define CD_MIN_TRACK_NO 60,2450
#define CD_MAX_TRACK_NO 61,2477
#    define MAXIMUM_NUMBER_TRACKS 68,2603
typedef struct _TRACK_DATA 70,2648
    UCHAR Reserved;71,2677
    UCHAR Control 72,2697
    UCHAR Adr 73,2720
    UCHAR TrackNumber;74,2739
    UCHAR Reserved1;75,2762
    UCHAR Address[Address76,2783
} TRACK_DATA, *PTRACK_DATA;PTRACK_DATA77,2805
typedef struct _CDROM_TOC 78,2833
    UCHAR Length[Length79,2861
    UCHAR FirstTrack;80,2882
    UCHAR LastTrack;81,2904
    TRACK_DATA TrackData[TrackData82,2925
} CDROM_TOC, *PCDROM_TOC;PCDROM_TOC83,2974
typedef enum _TRACK_MODE_TYPE 84,3000
    YellowMode2,85,3032
    XAForm2,86,3049
    CDDA87,3062
} TRACK_MODE_TYPE, *PTRACK_MODE_TYPE;PTRACK_MODE_TYPE88,3071
typedef struct __RAW_READ_INFO 89,3109
    LARGE_INTEGER DiskOffset;90,3142
    ULONG SectorCount;91,3172
    TRACK_MODE_TYPE TrackMode;92,3195
} RAW_READ_INFO, *PRAW_READ_INFO;PRAW_READ_INFO93,3226
typedef struct _CDROM_READ_TOC_EX 94,3260
  UCHAR  Format 95,3296
  UCHAR  Reserved1 96,3317
  UCHAR  Msf 97,3341
  UCHAR  SessionTrack;98,3359
  UCHAR  Reserved2;99,3382
  UCHAR  Reserved3;100,3402
} CDROM_READ_TOC_EX, *PCDROM_READ_TOC_EX;PCDROM_READ_TOC_EX101,3422
#    define IOCTL_CDROM_BASE 104,3490
#    define IOCTL_CDROM_READ_TOC 107,3574
#define IOCTL_CDROM_RAW_READ 111,3757
#define IOCTL_CDROM_READ_TOC_EX 114,3905
#define MINIMUM_CDROM_READ_TOC_EX_SIZE 118,4052
#define CDROM_READ_TOC_EX_FORMAT_CDTEXT 119,4096
typedef struct os2_msf_s125,4204
    unsigned char frame;127,4231
    unsigned char second;128,4256
    unsigned char minute;129,4282
    unsigned char reserved;130,4308
} os2_msf_t;131,4336
typedef struct cdrom_get_tochdr_s133,4350
    unsigned char sign[sign135,4386
} cdrom_get_tochdr_t;136,4413
typedef struct cdrom_tochdr_s138,4436
    unsigned char first_track;140,4468
    unsigned char last_track;141,4499
    os2_msf_t     lead_out;142,4529
} cdrom_tochdr_t;143,4557
typedef struct cdrom_get_track_s145,4576
    unsigned char sign[sign147,4611
    unsigned char track;148,4638
} cdrom_get_track_t;149,4663
typedef struct cdrom_track_s151,4685
    os2_msf_t     start;153,4716
    unsigned char adr:adr154,4741
    unsigned char control:control155,4766
} cdrom_track_t;156,4795
typedef struct cdrom_readlong_s158,4813
    unsigned char  sign[sign160,4847
    unsigned char  addr_mode;161,4875
    unsigned short sectors;162,4905
    unsigned long  start;163,4933
    unsigned char  reserved;164,4959
    unsigned char  interleaved_size;165,4988
} cdrom_readlong_t;166,5025
#define SECTOR_TYPE_MODE2_FORM2 171,5074
#define SECTOR_TYPE_CDDA 172,5111
#define READ_CD_RAW_MODE2 173,5141
#define READ_CD_USERDATA 174,5172

access/http/connmgr.c,1574
static char *vlc_http_proxy_find(vlc_http_proxy_find38,1379
struct vlc_https_connecting59,1941
    vlc_tls_creds_t *creds;creds61,1971
    const char *host;host62,1999
    unsigned port;63,2021
    bool *http2;http264,2040
    vlc_sem_t done;65,2057
static void *vlc_https_connect_thread(vlc_https_connect_thread68,2081
static vlc_tls_t *vlc_https_connect_i11e(vlc_https_connect_i11e87,2606
struct vlc_http_connecting117,3376
    vlc_object_t *obj;obj119,3405
    const char *host;host120,3428
    unsigned port;121,3450
    bool *proxy;proxy122,3469
    vlc_sem_t done;123,3486
static void *vlc_http_connect_thread(vlc_http_connect_thread126,3510
static vlc_tls_t *vlc_http_connect_i11e(vlc_http_connect_i11e155,4162
struct vlc_http_mgr184,4830
    vlc_object_t *obj;obj186,4852
    vlc_tls_creds_t *creds;creds187,4875
    struct vlc_http_cookie_jar_t *jar;jar188,4903
    struct vlc_http_conn *conn;conn189,4942
    bool use_h2c;190,4974
static struct vlc_http_conn *vlc_http_mgr_find(vlc_http_mgr_find193,4996
static void vlc_http_mgr_release(200,5206
struct vlc_http_msg *vlc_http_mgr_reuse(vlc_http_mgr_reuse210,5425
static struct vlc_http_msg *vlc_https_request(vlc_https_request235,6334
static struct vlc_http_msg *vlc_http_request(vlc_http_request284,7910
struct vlc_http_msg *vlc_http_mgr_request(vlc_http_mgr_request318,8833
struct vlc_http_cookie_jar_t *vlc_http_mgr_get_jar(vlc_http_mgr_get_jar325,9144
struct vlc_http_mgr *vlc_http_mgr_create(vlc_http_mgr_create330,9247
void vlc_http_mgr_destroy(346,9671

access/http/message.c,2892
struct vlc_http_msg40,1384
    short status;42,1406
    char *method;method43,1424
    char *scheme;scheme44,1442
    char *authority;authority45,1460
    char *path;path46,1481
    char *(*headers)headers47,1497
    unsigned count;48,1522
    struct vlc_http_stream *payload;payload49,1542
static const char alignas 53,1661
static int vlc_http_msg_vadd_header(68,2090
int vlc_http_msg_add_header(142,3936
const char *vlc_http_msg_get_header(vlc_http_msg_get_header154,4200
int vlc_http_msg_get_status(166,4483
const char *vlc_http_msg_get_method(vlc_http_msg_get_method171,4568
const char *vlc_http_msg_get_scheme(vlc_http_msg_get_scheme176,4661
const char *vlc_http_msg_get_authority(vlc_http_msg_get_authority181,4754
const char *vlc_http_msg_get_path(vlc_http_msg_get_path186,4853
void vlc_http_msg_destroy(191,4942
vlc_http_req_create(211,5339
struct vlc_http_msg *vlc_http_resp_create(vlc_http_resp_create239,6169
void vlc_http_msg_attach(257,6552
struct vlc_http_msg *vlc_http_msg_iterate(vlc_http_msg_iterate263,6685
struct vlc_http_msg *vlc_http_msg_get_initial(vlc_http_msg_get_initial272,6900
struct vlc_http_msg *vlc_http_msg_get_final(vlc_http_msg_get_final280,7114
block_t *vlc_http_msg_read(vlc_http_msg_read287,7303
char *vlc_http_msg_format(vlc_http_msg_format297,7495
struct vlc_http_msg *vlc_http_msg_headers(vlc_http_msg_headers348,8935
struct vlc_h2_frame *vlc_http_msg_h2_frame(vlc_http_msg_h2_frame407,10309
struct vlc_http_msg *vlc_http_msg_h2_headers(vlc_http_msg_h2_headers469,11900
static int vlc_http_istoken(555,14074
static int vlc_http_isctext(563,14301
static size_t vlc_http_token_length(570,14523
static size_t vlc_http_quoted_length(579,14664
static bool vlc_http_is_token(606,15096
const char *vlc_http_next_token(vlc_http_next_token612,15233
static const char *vlc_http_get_token(vlc_http_get_token622,15514
static char *vlc_http_get_token_value(vlc_http_get_token_value638,15863
const char *vlc_http_msg_get_token(vlc_http_msg_get_token679,16690
static size_t vlc_http_comment_length(685,16910
static bool vlc_http_is_agent(715,17501
int vlc_http_msg_add_agent(753,18204
const char *vlc_http_msg_get_agent(vlc_http_msg_get_agent765,18490
static const char vlc_http_days[vlc_http_days773,18750
static const char vlc_http_months[vlc_http_months776,18847
int vlc_http_msg_add_time(781,18987
int vlc_http_msg_add_atime(796,19556
static time_t vlc_http_mktime(804,19696
time_t vlc_http_msg_get_time(834,20738
time_t vlc_http_msg_get_atime(842,20949
time_t vlc_http_msg_get_mtime(847,21059
unsigned vlc_http_msg_get_retry_after(852,21178
uintmax_t vlc_http_msg_get_size(875,21659
void vlc_http_msg_get_cookies(904,22546
int vlc_http_msg_add_cookies(916,22945
char *vlc_http_msg_get_basic_realm(vlc_http_msg_get_basic_realm957,23907
int vlc_http_msg_add_creds_basic(975,24466

codec/cc.h,736
#define VLC_CC_H_25,1143
#define BLOCK_FLAG_ORDERED_CAPTIONS 29,1185
#define CC_PKT_BYTE0(31,1257
#define CC_MAX_DATA_SIZE 34,1366
    CC_PAYLOAD_NONE,37,1410
    CC_PAYLOAD_GA94,38,1431
    CC_PAYLOAD_DVD,39,1452
    CC_PAYLOAD_REPLAYTV,40,1472
    CC_PAYLOAD_SCTE20,41,1497
    bool pb_present[pb_present46,1576
    bool b_reorder;49,1611
    int i_payload_type;52,1642
    int i_payload_other_count;53,1666
    int     i_data;60,1820
    uint8_t p_data[p_data61,1840
} cc_data_t;62,1878
static inline void cc_Init(64,1892
static inline void cc_Exit(75,2136
static inline void cc_Flush(80,2214
static inline void cc_AppendData(85,2282
static inline void cc_Extract(99,2666
#define V(145,4446
#undef V152,4780

demux/mkv/virtual_segment.cpp,1683
matroska_segment_c * getSegmentbyUID(31,1376
virtual_chapter_c * virtual_chapter_c::CreateVirtualChapter(42,1695
virtual_chapter_c::~virtual_chapter_c(104,4228
virtual_edition_c::virtual_edition_c(111,4363
virtual_edition_c::~virtual_edition_c(222,8683
void virtual_edition_c::retimeSubChapters(228,8808
void virtual_edition_c::retimeChapters(245,9449
virtual_segment_c::virtual_segment_c(266,10019
virtual_segment_c::~virtual_segment_c(328,12321
virtual_chapter_c *virtual_segment_c::BrowseCodecPrivate(virtual_segment_c::BrowseCodecPrivate334,12446
virtual_chapter_c * virtual_edition_c::BrowseCodecPrivate(347,12950
virtual_chapter_c * virtual_chapter_c::BrowseCodecPrivate(366,13578
bool virtual_chapter_c::ContainsTimestamp(386,14318
virtual_chapter_c* virtual_chapter_c::getSubChapterbyTimecode(392,14562
virtual_chapter_c* virtual_edition_c::getChapterbyTimecode(403,14858
bool virtual_segment_c::UpdateCurrentToChapter(414,15139
bool virtual_chapter_c::Leave(489,18174
bool virtual_chapter_c::EnterAndLeave(497,18293
void virtual_segment_c::Seek(505,18514
            typedef void( matroska_segment_c:matroska_segment_c540,20119
virtual_chapter_c * virtual_chapter_c::FindChapter(554,20511
virtual_chapter_c * virtual_segment_c::FindChapter(569,20881
int virtual_chapter_c::PublishChapters(582,21263
int virtual_edition_c::PublishChapters(620,22662
std::string virtual_edition_c::GetMainName(649,23653
bool virtual_chapter_c::Enter(657,23793
bool virtual_chapter_c::Leave(664,23930
void virtual_chapter_c::print(672,24084
void virtual_segment_c::KeepTrackSelection(681,24385
    typedef matroska_segment_c::tracks_map_t tracks_map_t;683,24485

demux/adaptive/xml/Node.cpp,871
const std::string   Node::EmptyString 36,1309
Node::Node(38,1354
Node::~Node 42,1388
const std::vector<Node*>&           Node::getSubNodes 48,1500
void                                Node::addSubNode 52,1604
const std::string&                  Node::getName 56,1721
void                                Node::setName 60,1821
bool                                Node::hasAttribute 65,1939
const std::string&                  Node::getAttributeValue 72,2139
void                                Node::addAttribute 81,2422
std::vector<std::string>            Node::getAttributeKeys 85,2577
const std::string&                         Node::getText 97,2889
void Node::setText(102,2991
const std::map<std::string,std::string>&   Node::getAttributes 107,3063
int Node::getType(112,3177
void Node::setType(117,3231
std::vector<std::string> Node::toString(122,3288

packetizer/mpegaudio.c,893
struct decoder_sys_t48,1964
    int        i_state;53,2026
    block_bytestream_t bytestream;55,2051
    date_t          end_date;60,2127
    mtime_t i_pts;62,2158
    int i_frame_size,64,2178
    int i_frame_size, i_free_frame_size;64,2178
    unsigned int i_channels_conf,65,2219
    unsigned int i_channels_conf, i_channels;65,2219
    unsigned int i_rate,66,2265
    unsigned int i_rate, i_max_frame_size,66,2265
    unsigned int i_rate, i_max_frame_size, i_frame_length;66,2265
    unsigned int i_layer,67,2324
    unsigned int i_layer, i_bit_rate;67,2324
    bool   b_discontinuity;69,2363
#define MAD_BUFFER_GUARD 72,2395
#define MPGA_HEADER_SIZE 73,2422
vlc_module_begin 85,2883
static uint8_t *GetOutBuffer(GetOutBuffer109,3719
static int SyncInfo(149,5199
static block_t *DecodeBlock(DecodeBlock281,9677
static void Close(578,20571
static int Open(591,20978

demux/adaptive/playlist/AbstractPlaylist.hpp,1835
#define ABSTRACTPLAYLIST_HPP_22,1056
namespace adaptive30,1189
    namespace playlistadaptive::playlist33,1211
        class AbstractPlaylist adaptive::playlist::AbstractPlaylist37,1267
                Property<mtime_t>                   duration;adaptive::playlist::AbstractPlaylist::duration64,2606
                Property<time_t>                    playbackStart;adaptive::playlist::AbstractPlaylist::playbackStart65,2668
                Property<time_t>                    availabilityEndTime;adaptive::playlist::AbstractPlaylist::availabilityEndTime66,2735
                Property<time_t>                    availabilityStartTime;adaptive::playlist::AbstractPlaylist::availabilityStartTime67,2808
                Property<mtime_t>                   minUpdatePeriod;adaptive::playlist::AbstractPlaylist::minUpdatePeriod68,2883
                Property<mtime_t>                   maxSegmentDuration;adaptive::playlist::AbstractPlaylist::maxSegmentDuration69,2952
                Property<mtime_t>                   timeShiftBufferDepth;adaptive::playlist::AbstractPlaylist::timeShiftBufferDepth70,3024
                vlc_object_t                       *p_object;adaptive::playlist::AbstractPlaylist::p_object73,3122
                std::vector<BasePeriod *>           periods;adaptive::playlist::AbstractPlaylist::periods74,3184
                std::vector<std::string>            baseUrls;adaptive::playlist::AbstractPlaylist::baseUrls75,3245
                std::string                         playlistUrl;adaptive::playlist::AbstractPlaylist::playlistUrl76,3307
                std::string                         type;adaptive::playlist::AbstractPlaylist::type77,3372
                mtime_t                             minBufferTime;adaptive::playlist::AbstractPlaylist::minBufferTime78,3430

misc/inhibit/dbus.c,600
enum vlc_inhibit_api39,1445
    FDO_SS,41,1468
    FDO_PM,42,1515
    MATE,43,1557
    GNOME,44,1583
#define MAX_API 47,1622
static const char dbus_service[dbus_service50,1723
static const char dbus_path[dbus_path58,1957
static const char dbus_method_uninhibit[dbus_method_uninhibit66,2168
struct vlc_inhibit_sys74,2334
    DBusConnection *conn;conn76,2359
    DBusPendingCall *pending;pending77,2385
    dbus_uint32_t cookie;78,2415
    enum vlc_inhibit_api api;79,2441
static void Inhibit(82,2475
static int Open 173,5672
static void Close 213,6647
vlc_module_begin 231,7036

access/http/message.h,577
vlc_http_req_create(47,1645
struct vlc_http_stream_cbs333,9970
    struct vlc_http_msg *(*read_headers)read_headers335,9999
    struct block_t *(*read)read336,10067
    void (*close)close337,10122
struct vlc_http_stream341,10202
    const struct vlc_http_stream_cbs *cbs;cbs343,10227
struct vlc_http_msg *vlc_http_stream_read_headers(vlc_http_stream_read_headers358,10752
static inline struct block_t *vlc_http_stream_read(vlc_http_stream_read372,11166
static inline void vlc_http_stream_close(383,11421
char *vlc_http_msg_format(vlc_http_msg_format403,12044

video_filter/dynamicoverlay/dynamicoverlay_queue.c,148
int QueueInit(37,1533
int QueueDestroy(46,1698
int QueueEnqueue(61,1988
command_t *QueueDequeue(QueueDequeue77,2294
int QueueTransfer(98,2708

services_discovery/windrive.c,29
VLC_SD_PROBE_HELPER(33,1206

demux/smooth/playlist/Manifest.hpp,232
#define MANIFEST_HPP21,989
namespace smooth27,1146
    namespace playlistsmooth::playlist29,1165
        class Manifest smooth::playlist::Manifest33,1239
                bool b_live;smooth::playlist::Manifest::b_live46,1630

stream_out/description.c,294
vlc_module_begin 53,2248
struct sout_stream_sys_t60,2449
    sout_description_data_t *data;data62,2476
    mtime_t i_stream_start;63,2511
static int Open(69,2711
static void Close(97,3598
static sout_stream_id_sys_t *Add(Add107,3803
static void Del(126,4331
static int Send(133,4533

video_filter/deinterlace/algo_basic.c,133
void RenderDiscard(45,1795
void RenderBob(75,2753
void RenderLinear(127,4410
void RenderMean(182,6173
void RenderBlend(215,7189

arm_neon/i420_rv16.S,130
coefficients:coefficients80,1977
i420_rv16_neon:i420_rv16_neon88,2116
loop_row:loop_row117,2756
loop_col:loop_col125,2916

demux/adaptive/ID.hpp,136
#define ID_HPP21,978
namespace adaptive26,1035
    class IDadaptive::ID28,1056
            std::string id;adaptive::ID::id38,1306

video_filter/magnify.c,528
vlc_module_begin 46,1847
struct filter_sys_t70,2773
    image_handler_t *p_image;p_image72,2795
    int64_t i_hide_timeout;74,2826
    int i_zoom;76,2855
    int i_x,77,2899
    int i_x, i_y;77,2899
    bool b_visible;79,2970
    int64_t i_last_activity;81,3022
#define VIS_ZOOM 84,3055
#define ZOOM_FACTOR 85,3074
static int Create(90,3267
static void Destroy(139,4641
static picture_t *Filter(Filter152,5048
static void DrawZoomStatus(273,8739
static void DrawRectangle(309,10260
static int Mouse(329,10812

access/imem.c,1959
#define ID_TEXT 49,1892
#define ID_LONGTEXT 50,1917
#define GROUP_TEXT 53,1986
#define GROUP_LONGTEXT 54,2017
#define CAT_TEXT 57,2092
#define CAT_LONGTEXT 58,2124
static const int cat_values[cat_values60,2199
static const char *cat_texts[cat_texts63,2255
#define CODEC_TEXT 67,2366
#define CODEC_LONGTEXT 68,2397
#define LANGUAGE_TEXT 71,2472
#define LANGUAGE_LONGTEXT 72,2509
#define SAMPLERATE_TEXT 75,2605
#define SAMPLERATE_LONGTEXT 76,2647
#define CHANNELS_TEXT 79,2730
#define CHANNELS_LONGTEXT 80,2773
#define WIDTH_TEXT 83,2857
#define WIDTH_LONGTEXT 84,2888
#define HEIGHT_TEXT 86,2964
#define HEIGHT_LONGTEXT 87,2997
#define DAR_TEXT 89,3075
#define DAR_LONGTEXT 90,3119
#define FPS_TEXT 93,3203
#define FPS_LONGTEXT 94,3237
#define COOKIE_TEXT 97,3311
#define COOKIE_LONGTEXT 98,3360
#define DATA_TEXT 101,3440
#define DATA_LONGTEXT 102,3478
#define GET_TEXT 105,3552
#define GET_LONGTEXT 106,3588
#define RELEASE_TEXT 109,3659
#define RELEASE_LONGTEXT 110,3703
#define SIZE_TEXT 113,3782
#define SIZE_LONGTEXT 114,3811
vlc_module_begin(117,3870
typedef int  (*imem_get_t)imem_get_t193,6439
typedef void (*imem_release_t)imem_release_t196,6617
        imem_get_t      get;212,7096
        imem_release_t  release;213,7125
        void           *data;data214,7158
        char           *cookie;cookie215,7188
    } source;216,7220
    es_out_id_t  *es;es218,7235
    mtime_t      dts;220,7258
    mtime_t      deadline;222,7281
} imem_sys_t;223,7308
static void CloseCommon(230,7444
static int OpenCommon(239,7607
static int OpenAccess(293,9090
static void CloseAccess(319,9659
static int ControlAccess(329,9837
static block_t *Block(Block368,10851
static int OpenDemux(397,11561
static void CloseDemux(495,14642
static int ControlDemux(505,14821
static int Demux(559,16149
static void ParseMRL(611,17548
        const char *name;name614,17641
        int        type;615,17667

video_filter/deinterlace/algo_basic.h,46
#define VLC_DEINTERLACE_ALGO_BASIC_H 27,1341

video_output/directfb.c,522
vlc_module_begin(46,1854
struct vout_display_sys_t 64,2547
    IDirectFB        *directfb;directfb65,2575
    IDirectFBSurface *primary;primary66,2607
    picture_pool_t *pool;pool68,2639
    picture_t      *pics[pics69,2665
    int             idx;70,2694
static int Open(74,2729
static void Close(170,5147
struct picture_sys_t 189,5555
    vout_display_sys_t *sys;sys190,5578
static int Lock(193,5611
static picture_pool_t *Pool(Pool200,5769
static void Display(255,7250
static int Control(268,7570

demux/adaptive/http/ConnectionParams.cpp,435
ConnectionParams::ConnectionParams(31,1134
ConnectionParams::ConnectionParams(35,1176
const std::string & ConnectionParams::getUrl(41,1274
const std::string & ConnectionParams::getScheme(46,1348
const std::string & ConnectionParams::getHostname(51,1428
const std::string & ConnectionParams::getPath(56,1512
void ConnectionParams::setPath(61,1588
uint16_t ConnectionParams::getPort(79,1981
void ConnectionParams::parse(84,2046

access/dtv/en50221_capmt.h,938
#define EN50221_CAPMT_H21,1081
    uint8_t  i_stream_type;25,1123
    uint16_t i_es_pid;26,1151
    size_t   i_descriptors;27,1174
    uint8_t *p_descriptors;p_descriptors28,1202
} en50221_capmt_es_info_t;29,1230
typedef struct en50221_capmt_info_s31,1258
    uint8_t  i_version;33,1296
    uint16_t i_program_number;34,1320
    size_t   i_program_descriptors;35,1351
    uint8_t *p_program_descriptors;p_program_descriptors36,1387
    size_t   i_es_count;37,1423
    en50221_capmt_es_info_t *p_es;p_es38,1448
} en50221_capmt_info_t;39,1483
static inline void en50221_capmt_CADescriptorAppend(41,1508
static inline en50221_capmt_es_info_t *en50221_capmt_EsAdd(en50221_capmt_EsAdd55,2011
static inline void en50221_capmt_AddESCADescriptor(74,2785
static inline void en50221_capmt_AddCADescriptor(81,3104
static inline void en50221_capmt_Delete(89,3470
static inline en50221_capmt_info_t * en50221_capmt_New(98,3720

demux/adaptive/logic/Representationselectors.cpp,602
RepresentationSelector::RepresentationSelector(33,1270
RepresentationSelector::~RepresentationSelector(37,1324
BaseRepresentation * RepresentationSelector::lowest(41,1379
BaseRepresentation * RepresentationSelector::highest(47,1600
BaseRepresentation * RepresentationSelector::higher(53,1821
BaseRepresentation * RepresentationSelector::lower(61,2261
BaseRepresentation * RepresentationSelector::select(69,2705
BaseRepresentation * RepresentationSelector::select(73,2863
BaseRepresentation * RepresentationSelector::select(91,3415
BaseRepresentation * RepresentationSelector::select(123,4332

demux/adaptive/tools/Helper.cpp,211
std::string Helper::combinePaths 32,1263
std::string Helper::getDirectoryPath 50,1768
std::string Helper::getFileExtension 57,1954
bool Helper::ifind(71,2374
std::list<std::string> Helper::tokenize(78,2641

demux/mpeg/ts_decoders.c,442
    ts_dvbpsi_rawsections_callback_t pf_callback;39,1289
    void *                           p_cb_data;40,1339
} ts_dvbpsi_rawtable_decoder_t;42,1388
static void ts_dvbpsi_RawSubDecoderGatherSections(44,1421
static void ts_dvbpsi_RawDecoderGatherSections(84,2833
void ts_dvbpsi_DetachRawSubDecoder(90,3076
bool ts_dvbpsi_AttachRawSubDecoder(103,3532
bool ts_dvbpsi_AttachRawDecoder(138,4865
void ts_dvbpsi_DetachRawDecoder(157,5479

demux/adaptive/playlist/BasePeriod.cpp,432
BasePeriod::BasePeriod(38,1369
BasePeriod::~BasePeriod 46,1533
AbstractPlaylist *BasePeriod::getPlaylist(BasePeriod::getPlaylist52,1623
const std::vector<BaseAdaptationSet*>&  BasePeriod::getAdaptationSets(57,1699
void BasePeriod::addAdaptationSet(62,1809
BaseAdaptationSet *BasePeriod::getAdaptationSetByID(BasePeriod::getAdaptationSetByID71,2017
void BasePeriod::debug(82,2312
mtime_t BasePeriod::getPeriodStart(92,2639

demux/adaptive/Streams.cpp,1459
AbstractStream::AbstractStream(39,1423
bool AbstractStream::init(59,1896
AbstractStream::~AbstractStream(100,3278
void AbstractStream::prepareRestart(115,3571
void AbstractStream::setLanguage(135,4149
void AbstractStream::setDescription(140,4233
mtime_t AbstractStream::getPCR(145,4323
mtime_t AbstractStream::getMinAheadTime(153,4568
mtime_t AbstractStream::getFirstDTS(160,4709
int AbstractStream::esCount(178,5106
bool AbstractStream::seekAble(183,5180
bool AbstractStream::isSelected(191,5360
bool AbstractStream::reactivate(196,5444
bool AbstractStream::startDemux(210,5683
bool AbstractStream::restartDemux(224,6011
void AbstractStream::setDisabled(250,6619
bool AbstractStream::isDisabled(257,6755
bool AbstractStream::canActivate(262,6829
bool AbstractStream::drain(267,6893
AbstractStream::buffering_status AbstractStream::getLastBufferStatus(272,6958
mtime_t AbstractStream::getDemuxedAmount(277,7071
AbstractStream::buffering_status AbstractStream::bufferize(282,7171
AbstractStream::buffering_status AbstractStream::doBufferize(289,7487
AbstractStream::status AbstractStream::dequeue(393,11111
block_t * AbstractStream::readNextBlock(431,12347
bool AbstractStream::setPosition(470,13209
mtime_t AbstractStream::getPlaybackTime(499,13974
void AbstractStream::runUpdates(504,14073
void AbstractStream::fillExtraFMTInfo(510,14176
void AbstractStream::setTimeOffset(518,14471
void AbstractStream::trackerEvent(533,14849

demux/hls/playlist/Parser.cpp,502
M3U8Parser::M3U8Parser(48,1638
M3U8Parser::~M3U8Parser 52,1668
static std::list<Tag *> getTagsFromList(56,1702
static void releaseTagsList(68,1996
void M3U8Parser::setFormatFromExtension(76,2183
Representation * M3U8Parser::createRepresentation(102,3151
void M3U8Parser::createAndFillRepresentation(149,4486
bool M3U8Parser::appendSegmentsFromPlaylistURI(161,4911
void M3U8Parser::parseSegments(182,5526
M3U8 * M3U8Parser::parse(383,13364
std::list<Tag *> M3U8Parser::parseEntries(514,18545

hw/vdpau/avcodec.c,622
struct vlc_va_sys_t42,1490
    vdp_t *vdp;vdp44,1512
    VdpDevice device;45,1528
    VdpChromaType type;46,1550
    uint32_t width;47,1574
    uint32_t height;48,1594
    vlc_vdp_video_field_t *pool[pool49,1615
static int av_vdpau_get_surface_parameters(53,1705
# define AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH 67,2191
static vlc_vdp_video_field_t *CreateSurface(CreateSurface70,2245
static void DestroySurface(91,2893
static vlc_vdp_video_field_t *GetSurface(GetSurface97,3009
static int Lock(118,3578
static int Copy(137,4158
static int Open(143,4288
static void Close(337,9775
vlc_module_begin(353,10211

demux/mpeg/ts_decoders.h,92
#define VLC_TS_DECODERS_H20,1025
typedef void (* ts_dvbpsi_rawsections_callback_t)22,1052

video_filter/scale.c,96
vlc_module_begin 46,2066
static picture_t *Filter(Filter87,3750
#define SHIFT_SIZE 120,5147

video_filter/mosaic.c,2568
#define BLANK_DELAY 43,1632
struct filter_sys_t58,2321
    vlc_mutex_t lock;60,2343
    image_handler_t *p_image;p_image62,2401
    int i_position;64,2432
    bool b_ar;65,2494
    bool b_keep;66,2554
    int i_width,67,2625
    int i_width, i_height;67,2625
    int i_cols,68,2685
    int i_cols, i_rows;68,2685
    int i_align;69,2742
    int i_xoffset,70,2815
    int i_xoffset, i_yoffset;70,2815
    int i_borderw,71,2874
    int i_borderw, i_borderh;71,2874
    int i_alpha;72,2949
    char **ppsz_order;ppsz_order74,3011
    int i_order_length;75,3067
    int *pi_x_offsets;pi_x_offsets77,3092
    int *pi_y_offsets;pi_y_offsets78,3157
    int i_offsets_length;79,3222
    mtime_t i_delay;81,3249
#define ALPHA_TEXT 87,3454
#define ALPHA_LONGTEXT 88,3492
#define HEIGHT_TEXT 92,3638
#define HEIGHT_LONGTEXT 93,3671
#define WIDTH_TEXT 94,3742
#define WIDTH_LONGTEXT 95,3773
#define XOFFSET_TEXT 97,3843
#define XOFFSET_LONGTEXT 98,3899
#define YOFFSET_TEXT 100,3992
#define YOFFSET_LONGTEXT 101,4048
#define BORDERW_TEXT 104,4142
#define BORDERW_LONGTEXT 105,4182
#define BORDERH_TEXT 107,4275
#define BORDERH_LONGTEXT 108,4316
#define ALIGN_TEXT 111,4411
#define ALIGN_LONGTEXT 112,4454
#define POS_TEXT 117,4682
#define POS_LONGTEXT 118,4724
#define ROWS_TEXT 124,5012
#define ROWS_LONGTEXT 125,5051
#define COLS_TEXT 129,5195
#define COLS_LONGTEXT 130,5237
#define AR_TEXT 134,5384
#define AR_LONGTEXT 135,5424
#define KEEP_TEXT 138,5537
#define KEEP_LONGTEXT 139,5580
#define ORDER_TEXT 142,5664
#define ORDER_LONGTEXT 143,5705
#define OFFSETS_TEXT 148,5940
#define OFFSETS_LONGTEXT 149,5985
#define DELAY_TEXT 154,6248
#define DELAY_LONGTEXT 155,6279
    position_auto 162,6510
    position_auto = 0, position_fixed 162,6510
    position_auto = 0, position_fixed = 1, position_offsets 162,6510
static const int pi_pos_values[pi_pos_values164,6577
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions165,6625
static const int pi_align_values[pi_align_values168,6725
static const char *const ppsz_align_descriptions[ppsz_align_descriptions169,6794
#define CFG_PREFIX 173,6998
vlc_module_begin 175,7028
static void mosaic_ParseSetOffsets(240,9567
#define mosaic_ParseSetOffsets(272,10751
static int CreateFilter(278,11060
#define GET_VAR(300,11640
#undef GET_VAR321,12431
static void DestroyFilter(378,14423
#define DEL_CB(383,14563
#undef DEL_CB402,14980
static subpicture_t *Filter(Filter431,15690
static int MosaicCallback(728,26203
#define VAR_IS(735,26462

codec/flac.c,1515
#define assert(30,1484
# define FLAC__NO_DLL41,1654
#   define USE_NEW_FLAC_API51,1875
struct decoder_sys_t57,2113
    block_t *p_block;p_block62,2182
    block_t *p_aout_buffer;p_aout_buffer63,2204
    date_t   end_date;64,2232
    FLAC__StreamDecoder *p_flac;p_flac69,2294
    FLAC__StreamMetadata_StreamInfo stream_info;70,2327
    bool b_stream_info;71,2376
static const int pi_channels_maps[pi_channels_maps74,2404
vlc_module_begin 111,3869
            union { int32_t i;143,4926
            union { int32_t i; uint32_t u;143,4926
DecoderWriteCallback(154,5370
DecoderReadCallback(209,7438
static void DecoderMetadataCallback(235,8351
static void DecoderErrorCallback(267,9809
static int OpenDecoder(301,11170
static void CloseDecoder(373,13762
static void ProcessHeader(389,14286
static void decoder_state_error(437,15945
static void Flush(502,18495
static block_t *DecodeBlock(DecodeBlock512,18806
struct encoder_sys_t573,20664
    int i_headers;578,20726
    int i_samples_delay;580,20746
    FLAC__int32 *p_buffer;p_buffer582,20772
    unsigned int i_buffer;583,20799
    block_t *p_chain;p_chain585,20827
    FLAC__StreamEncoder *p_flac;p_flac590,20888
    FLAC__StreamMetadata_StreamInfo stream_info;591,20921
    mtime_t i_pts;596,21011
#define STREAMINFO_SIZE 599,21034
EncoderWriteCallback(607,21379
static void EncoderMetadataCallback(655,23119
static int OpenEncoder(669,23688
static block_t *Encode(Encode743,26308
static void CloseEncoder(782,27621

access/bluray.c,5768
#define BD_MENU_TEXT 68,2453
#define BD_MENU_LONGTEXT 69,2501
#define BD_REGION_TEXT 71,2633
#define BD_REGION_LONGTEXT 72,2679
static const char *const ppsz_region_code[ppsz_region_code75,2836
static const char *const ppsz_region_code_text[ppsz_region_code_text77,2905
#define REGION_DEFAULT 80,3001
#define LANGUAGE_DEFAULT 81,3100
# define BLURAY_DEMUX84,3183
vlc_module_begin 91,3312
#define MAX_OVERLAY 119,4243
typedef enum OverlayStatus 121,4266
    Closed 122,4295
    ToDisplay,123,4311
    Displayed,124,4386
    Outdated 125,4401
} OverlayStatus;126,4481
typedef struct bluray_overlay_t128,4499
    vlc_mutex_t         lock;130,4533
    int                 i_channel;131,4563
    OverlayStatus       status;132,4598
    subpicture_region_t *p_regions;p_regions133,4630
    int                 width,134,4666
    int                 width, height;134,4666
    struct subpicture_updater_sys_t *p_updater;p_updater141,4909
} bluray_overlay_t;142,4957
struct  demux_sys_t144,4978
    BLURAY              *bluray;bluray146,5000
    unsigned int        i_title;149,5051
    unsigned int        i_longest_title;150,5084
    input_title_t       **pp_title;pp_title151,5125
    vlc_mutex_t             pl_info_lock;153,5162
    BLURAY_TITLE_INFO      *p_pl_info;p_pl_info154,5204
    const BLURAY_CLIP_INFO *p_clip_info;p_clip_info155,5243
    int                 i_attachments;158,5307
    input_attachment_t  **attachments;attachments159,5346
    int                 i_cover_idx;160,5385
    const META_DL       *p_meta;p_meta163,5450
    bluray_overlay_t    *p_overlays[p_overlays166,5500
    bool                b_fatal_error;167,5550
    bool                b_menu;168,5589
    bool                b_menu_open;169,5621
    bool                b_popup_available;170,5658
    mtime_t             i_still_end_time;171,5701
    vlc_mutex_t         bdj_overlay_lock;173,5744
    vout_thread_t       *p_vout;p_vout176,5878
    es_out_id_t         *p_dummy_video;p_dummy_video178,5912
    es_out_t            *p_out;p_out181,5973
    vlc_array_t         es;182,6005
    int                 i_audio_stream_idx;183,6033
    int                 i_spu_stream_idx;184,6120
    bool                b_spu_enable;185,6210
    int                 i_video_stream;186,6279
    vlc_demux_chained_t *p_parser;p_parser187,6319
    bool                b_flushed;188,6354
    bool                b_pl_playing;189,6389
    vlc_mutex_t         read_block_lock;192,6490
    char                *psz_bd_path;psz_bd_path195,6573
struct subpicture_updater_sys_t198,6615
    vlc_mutex_t          lock;200,6649
    bluray_overlay_t    *p_overlay;p_overlay201,6726
    int                  ref_cnt;202,6797
static void unref_subpicture_updater(210,7089
static const char *DemuxGetLanguageCode(DemuxGetLanguageCode226,7466
#define FROM_TICKS(281,9299
#define TO_TICKS(282,9355
#define CUR_LENGTH 283,9409
static void FindMountPoint(286,9487
static void blurayReleaseVout(334,10967
static void startBackground(370,12243
static void stopBackground(417,13629
static void setTitleInfo(435,14111
static void attachThumbnail(456,14742
static int probeStream(488,15842
static int blurayReadBlock(514,16448
static int decode_descriptor_tag(549,17434
static int probeFile(572,17863
static int blurayOpen(619,18992
#define BLURAY_ERROR(627,19184
#undef BLURAY_ERROR857,27421
static void blurayClose(864,27644
struct es_out_sys_t 912,29071
    demux_t *p_demux;p_demux913,29093
typedef struct  fmt_es_pair 916,29119
    int         i_id;917,29149
    es_out_id_t *p_es;p_es918,29171
}               fmt_es_pair_t;919,29194
static int  findEsPairIndex(921,29226
static int  findEsPairIndexByEs(930,29469
static void setStreamLang(939,29725
static int blurayEsPid(967,30593
static es_out_id_t *esOutAdd(esOutAdd990,31257
static int esOutSend(1048,33276
static void esOutDel(1053,33423
static int esOutControl(1063,33777
static void esOutDestroy(1068,33922
static es_out_t *esOutNew(esOutNew1077,34224
static bluray_overlay_t *updater_lock_overlay(updater_lock_overlay1103,35012
static void updater_unlock_overlay(1120,35530
static int subpictureUpdaterValidate(1128,35734
static void subpictureUpdaterUpdate(1153,36449
static void subpictureUpdaterDestroy(1193,37645
static subpicture_t *bluraySubpictureCreate(bluraySubpictureCreate1208,38115
static int onMouseEvent(1246,39179
static int sendKeyEvent(1265,39819
static void blurayCloseOverlay(1277,40182
static void blurayActivateOverlay(1315,41314
static void blurayInitOverlay(1340,42073
static void blurayClearOverlay(1367,42808
static void blurayDrawOverlay(1385,43292
static void blurayOverlayProc(1460,45839
static void blurayInitArgbOverlay(1505,47206
static void blurayDrawArgbOverlay(1520,47674
static void blurayArgbOverlayProc(1559,48991
static void bluraySendOverlayToVout(1588,49982
static void blurayUpdateTitleInfo(1625,51094
static void blurayInitTitles(1644,51665
static void blurayResetParser(1691,53275
static int bluraySetTitle(1711,53969
#  define BLURAY_AUDIO_STREAM 1755,55287
static void blurayStreamSelected(1758,55327
static int blurayControl(1790,56606
static void streamFlush(1995,63780
static void blurayResetStillImage(2043,65611
static void blurayStillImage(2055,65885
static void blurayStreamSelect(2090,66954
static void blurayUpdatePlaylist(2118,67896
static void blurayUpdateCurrentClip(2141,68670
static void blurayHandleEvent(2166,69358
static bool blurayIsBdjTitle(2279,73082
static void blurayHandleOverlays(2295,73560
static int onIntfEvent(2341,75239
#define BD_TS_PACKET_SIZE 2362,75817
#define NB_TS_PACKETS 2363,75849
static int blurayDemux(2365,75878

stream_out/transcode/video.c,1019
#define ENC_FRAMERATE 38,1632
#define ENC_FRAMERATE_BASE 39,1666
struct decoder_owner_sys_t41,1699
    sout_stream_sys_t *p_sys;p_sys43,1728
static int video_update_format_decoder(46,1762
static picture_t *video_new_buffer_decoder(video_new_buffer_decoder52,1900
static picture_t *video_new_buffer_encoder(video_new_buffer_encoder57,2027
static picture_t *transcode_video_filter_buffer_new(transcode_video_filter_buffer_new63,2211
static void* EncoderThread(69,2418
int transcode_video_new(123,3992
static void transcode_video_filter_init(252,9059
static void conversion_video_filter_append(328,12289
static void transcode_video_framerate_init(348,13089
static void transcode_video_size_init(390,14754
static void transcode_video_sar_init(514,19952
static void transcode_video_encoder_init(556,21770
static int transcode_video_encoder_open(578,22487
void transcode_video_close(614,23623
static void OutputFrame(655,24908
int transcode_video_process(725,27324
bool transcode_video_add(861,32109

demux/adaptive/StreamFormat.cpp,317
StreamFormat::operator unsigned(StreamFormat::operator unsigned29,1080
std::string StreamFormat::str(34,1146
StreamFormat::StreamFormat(56,1601
StreamFormat::~StreamFormat(61,1681
bool StreamFormat::operator ==(StreamFormat::operator ==66,1717
bool StreamFormat::operator !=(StreamFormat::operator !=71,1825

video_filter/mosaic.h,491
typedef struct bridged_es_t25,1205
    es_format_t fmt;27,1235
    picture_t *p_picture;p_picture28,1256
    picture_t **pp_last;pp_last29,1282
    bool b_empty;30,1307
    char *psz_id;psz_id31,1325
    int i_alpha;33,1344
    int i_x;34,1361
    int i_y;35,1374
} bridged_es_t;36,1387
typedef struct bridge_t38,1404
    bridged_es_t **pp_es;pp_es40,1430
    int i_es_num;41,1456
} bridge_t;42,1474
static bridge_t *GetBridge(GetBridge44,1487
#define GetBridge(48,1622

demux/adaptive/plumbing/CommandsQueue.hpp,2093
#define COMMANDSQUEUE_HPP_21,998
namespace adaptive29,1112
    class AbstractCommandadaptive::AbstractCommand34,1178
            int type;adaptive::AbstractCommand::type45,1490
    class AbstractFakeEsCommand adaptive::AbstractFakeEsCommand48,1520
            FakeESOutID *p_fakeid;adaptive::AbstractFakeEsCommand::p_fakeid52,1659
    class EsOutSendCommand adaptive::EsOutSendCommand55,1702
            block_t *p_block;adaptive::EsOutSendCommand::p_block65,2035
    class EsOutDelCommand adaptive::EsOutDelCommand68,2073
    class EsOutAddCommand adaptive::EsOutAddCommand78,2315
    class EsOutControlPCRCommand adaptive::EsOutControlPCRCommand89,2597
            int group;adaptive::EsOutControlPCRCommand::group98,2883
            mtime_t pcr;adaptive::EsOutControlPCRCommand::pcr99,2906
    class EsOutDestroyCommand adaptive::EsOutDestroyCommand102,2939
    class EsOutControlResetPCRCommand adaptive::EsOutControlResetPCRCommand112,3168
    class EsOutMetaCommand adaptive::EsOutMetaCommand122,3413
            int group;adaptive::EsOutMetaCommand::group131,3688
            vlc_meta_t *p_meta;adaptive::EsOutMetaCommand::p_meta132,3711
    class CommandsFactoryadaptive::CommandsFactory136,3819
            virtual ~CommandsFactory(adaptive::CommandsFactory::~CommandsFactory139,3867
    class CommandsQueueadaptive::CommandsQueue150,4595
            CommandsFactory *commandsFactory;adaptive::CommandsQueue::commandsFactory172,5323
            vlc_mutex_t lock;adaptive::CommandsQueue::lock173,5369
            std::list<AbstractCommand *> incoming;adaptive::CommandsQueue::incoming175,5432
            std::list<AbstractCommand *> commands;adaptive::CommandsQueue::commands176,5483
            mtime_t bufferinglevel;adaptive::CommandsQueue::bufferinglevel177,5534
            mtime_t pcr;adaptive::CommandsQueue::pcr178,5570
            bool b_flushing;adaptive::CommandsQueue::b_flushing179,5595
            bool b_drop;adaptive::CommandsQueue::b_drop180,5624
            bool b_eof;adaptive::CommandsQueue::b_eof181,5649

demux/smooth/mp4/IndexReader.hpp,238
#define SMOOTHINDEXREADER_HPP21,1002
namespace adaptive25,1077
    namespace playlistadaptive::playlist27,1098
namespace smooth33,1170
    namespace mp4smooth::mp435,1189
        class IndexReader smooth::mp4::IndexReader40,1297

codec/opus_header.c,663
    unsigned char *data;data65,2225
    int maxlen;66,2250
    int pos;67,2266
} Packet;68,2279
    const unsigned char *data;data71,2307
    int maxlen;72,2338
    int pos;73,2354
} ROPacket;74,2367
static int write_uint32(76,2380
static int write_uint16(88,2679
static int write_chars(98,2894
static int read_uint32(107,3109
static int read_uint16(119,3418
static int read_chars(129,3636
int opus_header_parse(138,3846
static char *comment_init(comment_init238,6471
static int comment_add(260,7047
static int comment_pad(284,7932
void opus_prepare_header(302,8458
static int opus_header_to_packet(314,8849
int opus_write_header(368,9984

demux/adaptive/xml/DOMParser.cpp,353
DOMParser::DOMParser(36,1311
DOMParser::DOMParser 43,1402
DOMParser::~DOMParser 50,1515
Node*   DOMParser::getRootNode 57,1639
bool    DOMParser::parse 61,1713
bool DOMParser::reset(80,2144
Node* DOMParser::processNode(91,2349
void    DOMParser::addAttributesToNode 157,3841
void    DOMParser::print 169,4170
void    DOMParser::print 190,4765

demux/playlist/shoutcast.c,271
#define SHOUTCAST_BASE_URL 41,1664
#define SHOUTCAST_TUNEIN_BASE_URL 42,1749
#define SHOUTCAST_TV_TUNEIN_URL 43,1810
int Import_Shoutcast(58,2591
static int Demux(73,2935
static int DemuxGenre(132,4503
static int DemuxStation(216,7253
#define SADD_INFO(331,11798

video_filter/deinterlace/merge.c,247
void Merge8BitGeneric(49,1837
void Merge16BitGeneric(60,2140
void MergeMMXEXT(73,2516
void Merge3DNow(99,3264
void Merge8BitSSE2(125,4010
void Merge16BitSSE2(152,4848
void MergeAltivec(182,5749
void EndMMX(254,7788
void End3DNow(261,7890

video_filter/deinterlace/mmx.h,4762
    int64_t          q;31,1124
    uint64_t        uq;32,1181
    int32_t          d[d33,1232
    uint32_t        ud[ud34,1294
    int16_t          w[w35,1349
    uint16_t        uw[uw36,1405
    int8_t           b[b37,1454
    uint8_t         ub[ub38,1509
    float            s[s39,1558
} ATTR_ALIGN(40,1623
#define    mmx_i2r(43,1689
#define    mmx_m2r(49,1864
#define    mmx_r2m(55,2039
#define    mmx_r2r(61,2222
#define    emms(65,2325
#define    movd_m2r(67,2374
#define    movd_r2m(68,2431
#define    movd_r2r(69,2488
#define    movq_m2r(71,2550
#define    movq_r2m(72,2607
#define    movq_r2r(73,2664
#define    packssdw_m2r(75,2726
#define    packssdw_r2r(76,2791
#define    packsswb_m2r(77,2857
#define    packsswb_r2r(78,2922
#define    packuswb_m2r(80,2989
#define    packuswb_r2r(81,3054
#define    paddb_m2r(83,3121
#define    paddb_r2r(84,3180
#define    paddd_m2r(85,3243
#define    paddd_r2r(86,3302
#define    paddw_m2r(87,3365
#define    paddw_r2r(88,3424
#define    paddsb_m2r(90,3488
#define    paddsb_r2r(91,3549
#define    paddsw_m2r(92,3614
#define    paddsw_r2r(93,3675
#define    paddusb_m2r(95,3741
#define    paddusb_r2r(96,3804
#define    paddusw_m2r(97,3871
#define    paddusw_r2r(98,3934
#define    pand_m2r(100,4002
#define    pand_r2r(101,4059
#define    pandn_m2r(103,4121
#define    pandn_r2r(104,4180
#define    pcmpeqb_m2r(106,4244
#define    pcmpeqb_r2r(107,4307
#define    pcmpeqd_m2r(108,4374
#define    pcmpeqd_r2r(109,4437
#define    pcmpeqw_m2r(110,4504
#define    pcmpeqw_r2r(111,4567
#define    pcmpgtb_m2r(113,4635
#define    pcmpgtb_r2r(114,4698
#define    pcmpgtd_m2r(115,4765
#define    pcmpgtd_r2r(116,4828
#define    pcmpgtw_m2r(117,4895
#define    pcmpgtw_r2r(118,4958
#define    pmaddwd_m2r(120,5026
#define    pmaddwd_r2r(121,5089
#define    pmulhw_m2r(123,5157
#define    pmulhw_r2r(124,5218
#define    pmullw_m2r(126,5284
#define    pmullw_r2r(127,5345
#define    por_m2r(129,5411
#define    por_r2r(130,5466
#define    pslld_i2r(132,5526
#define    pslld_m2r(133,5585
#define    pslld_r2r(134,5644
#define    psllq_i2r(135,5707
#define    psllq_m2r(136,5766
#define    psllq_r2r(137,5825
#define    psllw_i2r(138,5888
#define    psllw_m2r(139,5947
#define    psllw_r2r(140,6006
#define    psrad_i2r(142,6070
#define    psrad_m2r(143,6129
#define    psrad_r2r(144,6188
#define    psraw_i2r(145,6251
#define    psraw_m2r(146,6310
#define    psraw_r2r(147,6369
#define    psrld_i2r(149,6433
#define    psrld_m2r(150,6492
#define    psrld_r2r(151,6551
#define    psrlq_i2r(152,6614
#define    psrlq_m2r(153,6673
#define    psrlq_r2r(154,6732
#define    psrlw_i2r(155,6795
#define    psrlw_m2r(156,6854
#define    psrlw_r2r(157,6913
#define    psubb_m2r(159,6977
#define    psubb_r2r(160,7036
#define    psubd_m2r(161,7099
#define    psubd_r2r(162,7158
#define    psubw_m2r(163,7221
#define    psubw_r2r(164,7280
#define    psubsb_m2r(166,7344
#define    psubsb_r2r(167,7405
#define    psubsw_m2r(168,7470
#define    psubsw_r2r(169,7531
#define    psubusb_m2r(171,7597
#define    psubusb_r2r(172,7660
#define    psubusw_m2r(173,7727
#define    psubusw_r2r(174,7790
#define    punpckhbw_m2r(176,7858
#define    punpckhbw_r2r(177,7929
#define    punpckhdq_m2r(178,8000
#define    punpckhdq_r2r(179,8071
#define    punpckhwd_m2r(180,8142
#define    punpckhwd_r2r(181,8213
#define    punpcklbw_m2r(183,8285
#define    punpcklbw_r2r(184,8357
#define    punpckldq_m2r(185,8428
#define    punpckldq_r2r(186,8499
#define    punpcklwd_m2r(187,8570
#define    punpcklwd_r2r(188,8641
#define    pxor_m2r(190,8713
#define    pxor_r2r(191,8770
#define pavgusb_m2r(196,8857
#define pavgusb_r2r(197,8917
#define mmx_m2ri(203,9040
#define mmx_r2ri(208,9271
#define    mmx_fetch(214,9505
#define    maskmovq(220,9658
#define    movntq_r2m(222,9735
#define    pavgb_m2r(224,9805
#define    pavgb_r2r(225,9868
#define    pavgw_m2r(226,9935
#define    pavgw_r2r(227,9998
#define    pextrw_r2r(229,10066
#define    pinsrw_r2r(231,10142
#define    pmaxsw_m2r(233,10218
#define    pmaxsw_r2r(234,10283
#define    pmaxub_m2r(236,10353
#define    pmaxub_r2r(237,10418
#define    pminsw_m2r(239,10488
#define    pminsw_r2r(240,10553
#define    pminub_m2r(242,10623
#define    pminub_r2r(243,10688
#define    pmovmskb(245,10758
#define    pmulhuw_m2r(248,10861
#define    pmulhuw_r2r(249,10928
#define    prefetcht0(251,11000
#define    prefetcht1(252,11058
#define    prefetcht2(253,11116
#define    prefetchnta(254,11174
#define    psadbw_m2r(256,11231
#define    psadbw_r2r(257,11296
#define    pshufw_m2r(259,11366
#define    pshufw_r2r(260,11440
#define    sfence(262,11515

codec/opus_header.h,328
#define OPUS_HEADER_H29,1379
    int version;34,1440
    int channels;35,1457
    int preskip;36,1508
    uint32_t input_sample_rate;37,1525
    int gain;38,1557
    int channel_mapping;39,1621
    int nb_streams;41,1702
    int nb_coupled;42,1722
    unsigned char stream_map[stream_map43,1742
} OpusHeader;44,1777

access/fs.c,26
vlc_module_begin 33,1341

demux/dash/mpd/ContentDescription.h,285
#define CONTENTDESCRIPTION_H_26,1186
        class ContentDescription34,1277
                std::string                 schemeIdUri;ContentDescription::schemeIdUri43,1689
                std::string                 schemeInformation;ContentDescription::schemeInformation44,1746

codec/avcodec/dxva2.c,2138
#define DXVA2API_USE_BITFIELDS40,1519
#define COBJMACROS41,1550
vlc_module_begin(48,1774
#define MS_GUID(60,2244
#  undef MS_GUID66,2390
#  define MS_GUID 67,2407
#  define DXVA2_E_NEW_VIDEO_DEVICE 68,2497
    const char   *name;name85,3131
    D3DFORMAT    format;86,3155
    vlc_fourcc_t codec;87,3180
} d3d_format_t;88,3204
static const d3d_format_t d3d_formats[d3d_formats90,3262
static const d3d_format_t *D3dFindFormat(D3dFindFormat99,3594
struct vlc_va_sys_t108,3815
    directx_sys_t         dx_sys;110,3837
    vlc_fourcc_t          i_chroma;111,3871
    HINSTANCE             hd3d9_dll;114,3922
    LPDIRECT3D9            d3dobj;117,3979
    D3DADAPTER_IDENTIFIER9 d3dai;118,4014
    IDirect3DDeviceManager9  *devmng;devmng121,4074
    HANDLE                   device;122,4112
    D3DFORMAT                    render;125,4174
    DXVA2_ConfigPictureDecode    cfg;128,4240
    filter_t                 *filter;filter131,4307
    struct dxva_context hw;134,4374
struct picture_sys_t137,4406
    LPDIRECT3DSURFACE9 surface;139,4429
static void DeleteFilter(164,5256
static picture_t *video_new_buffer(video_new_buffer175,5516
static filter_t *CreateFilter(CreateFilter180,5608
static void Setup(219,6764
void SetupAVCodecContext(226,6925
static int Extract(240,7393
static int CheckDevice(283,9035
static int Get(299,9493
static void Close(304,9619
vlc_fourcc_t d3d9va_fourcc(325,9980
static int Open(339,10318
static int D3dCreateDevice(418,12733
static void D3dDestroyDevice(488,15259
static char *DxDescribe(DxDescribe496,15420
        unsigned id;499,15490
        char     name[name500,15511
static int D3dCreateDeviceManager(530,16324
static void D3dDestroyDeviceManager(566,17523
static int DxCreateVideoService(575,17707
static void DxDestroyVideoService(617,18879
static void ReleaseInputList(623,19042
static int DxGetInputList(628,19131
static int DxSetupOutput(646,19820
static int DxCreateVideoDecoder(695,21528
static void DxDestroyVideoDecoder(835,28137
static int DxResetVideoDecoder(840,28210
static picture_t *DxAllocPicture(DxAllocPicture846,28339

demux/mpeg/ts_pid_fwd.h,127
#define VLC_TS_PID_FWD_H20,1025
typedef struct ts_pid_t ts_pid_t;22,1051
typedef struct ts_pid_list_t ts_pid_list_t;23,1085

video_filter/deinterlace/algo_phosphor.c,99
static void DarkenField(71,2626
static void DarkenFieldMMX(153,5513
int RenderPhosphor(276,9842

video_filter/ball.c,2057
enum { RED,46,1722
enum { RED, GREEN,46,1722
enum { RED, GREEN, BLUE,46,1722
enum { RED, GREEN, BLUE, WHITE 46,1722
#define COLORS_RGB 48,1757
#define COLORS_YUV 58,2516
#define BALL_COLOR_TEXT 98,4692
#define EDGE_VISIBLE_TEXT 100,4734
#define EDGE_VISIBLE_LONGTEXT 101,4779
#define BALL_SPEED_TEXT 103,4837
#define BALL_SPEED_LONGTEXT 104,4878
#define BALL_SIZE_TEXT 107,5016
#define BALL_SIZE_LONGTEXT 108,5055
#define GRAD_THRESH_TEXT 111,5175
#define GRAD_THRESH_LONGTEXT 112,5225
#define BALL_HELP 114,5306
#define FILTER_PREFIX 116,5359
static const char *const mode_list[mode_list118,5390
static const char *const mode_list_text[mode_list_text119,5466
vlc_module_begin 122,5610
struct filter_sys_t162,7183
    vlc_mutex_t lock;164,7205
    int ballColor;166,7228
    image_handler_t *p_image;p_image168,7248
    int i_ball_x;171,7303
    int i_ball_y;172,7321
    int i_ballSpeed;174,7340
    int i_ballSize;176,7362
    bool b_edgeVisible;178,7383
    int i_y_offset;181,7448
    int i_u_offset;182,7468
    int i_v_offset;183,7488
    uint32_t *p_smooth;p_smooth186,7535
    int32_t *p_grad_x;p_grad_x187,7559
    int32_t *p_grad_y;p_grad_y188,7582
    int i_gradThresh;191,7635
    float f_lastVect_x;194,7683
    float f_lastVect_y;195,7707
    float f_newVect_x;197,7732
    float f_newVect_y;198,7755
    float f_contVect_x;200,7779
    float f_contVect_y;201,7803
    void ( *drawingPixelFunction drawingPixelFunction204,7866
        uint8_t comp1;209,8065
        uint8_t comp2;210,8088
        uint8_t comp3;211,8111
    } colorList[colorList212,8134
static int Create(221,8515
static void Destroy(317,12025
static picture_t *Filter(Filter350,13197
static void drawBall(375,13828
static void drawPixelRGB24(407,14970
static void drawPixelI420(422,15403
static void drawPixelPacked(438,15967
static void NormalizeVector(458,16750
static void GaussianConvolution(480,17516
static void FilterBall(537,20251
static int ballCallback(808,29915
static int getBallColor(848,31204

video_chroma/i420_10_p010.c,172
struct filter_sys_t42,1777
    copy_cache_t cache;44,1799
static int Create(52,2164
static void Delete(89,3461
VIDEO_FILTER_WRAPPER(97,3668
vlc_module_begin 128,4856

audio_filter/audiobargraph_a.c,1252
#define BARGRAPH_TEXT 39,1587
#define BARGRAPH_LONGTEXT 40,1662
#define BARGRAPH_REPETITION_TEXT 42,1825
#define BARGRAPH_REPETITION_LONGTEXT 43,1917
#define SILENCE_TEXT 45,2106
#define SILENCE_LONGTEXT 46,2185
#define TIME_WINDOW_TEXT 48,2352
#define TIME_WINDOW_LONGTEXT 49,2408
#define ALARM_THRESHOLD_TEXT 52,2658
#define ALARM_THRESHOLD_LONGTEXT 53,2732
#define REPETITION_TIME_TEXT 56,2948
#define REPETITION_TIME_LONGTEXT 57,3022
#define CFG_PREFIX 60,3183
vlc_module_begin 69,3525
typedef struct ValueDate_t 89,4620
    float value;90,4649
    mtime_t date;91,4666
    struct ValueDate_t* next;92,4684
} ValueDate_t;93,4714
struct filter_sys_t95,4730
    bool            bargraph;97,4752
    int             bargraph_repetition;98,4782
    bool            silence;99,4823
    int64_t         time_window;100,4852
    float           alarm_threshold;101,4885
    int64_t         repetition_time;102,4922
    int             counter;103,4959
    ValueDate_t*    first;104,4988
    ValueDate_t*    last;105,5015
    int             started;106,5041
    mtime_t         lastAlarm;107,5070
static int Open(113,5293
static void SendValues(148,6730
static block_t *DoWork(DoWork166,7332
static void Close(245,9937

video_filter/deinterlace/merge.h,118
#define VLC_DEINTERLACE_MERGE_H 28,1479
#define Merge 61,2575
# define EndMerge(68,2794
# define EndMerge(71,2894

lua/libs/video.c,163
#   define  _GNU_SOURCE28,1354
static int vlclua_fullscreen(45,1718
static const luaL_Reg vlclua_video_reg[vlclua_video_reg70,2378
void luaopen_video(75,2487

lua/libs/misc.c,585
#   define  _GNU_SOURCE30,1436
void vlclua_set_object(53,1931
void *vlclua_get_object(vlclua_get_object60,2113
#undef vlclua_set_this69,2331
void vlclua_set_this(70,2354
vlc_object_t * vlclua_get_this(75,2471
int vlclua_push_ret(83,2764
static int vlclua_version(93,3102
static int vlclua_copyright(102,3389
static int vlclua_license(111,3694
static int vlclua_quit(120,3964
static int vlclua_mdate(129,4204
static int vlclua_mwait(135,4297
static int vlclua_action_id(148,4591
static const luaL_Reg vlclua_misc_reg[vlclua_misc_reg160,4956
void luaopen_misc(175,5266

video_output/win32/direct2d.c,378
#define D2D_HELP 51,1877
vlc_module_begin 53,1963
static void Close(169,5329
static picture_pool_t *Pool(Pool191,5762
static void Prepare(208,6126
static void Display(233,6979
static int Control(272,8174
static void Manage(281,8386
static int D2D_CreateRenderTarget(296,8695
static void D2D_ResizeRenderTarget(384,11170
static void D2D_DestroyRenderTarget(402,11708

services_discovery/upnp.hpp,1796
namespace SD40,1560
class UpnpInstanceWrapper55,2061
    static UpnpInstanceWrapper* s_instance;UpnpInstanceWrapper::s_instance72,2575
    static vlc_mutex_t s_lock;UpnpInstanceWrapper::s_lock73,2619
    UpnpClient_Handle m_handle;UpnpInstanceWrapper::m_handle74,2650
    static SD::MediaServerList* p_server_list;UpnpInstanceWrapper::p_server_list75,2682
    int m_refcount;UpnpInstanceWrapper::m_refcount76,2729
namespace SD79,2753
struct MediaServerDescSD::MediaServerDesc82,2769
    std::string UDN;SD::MediaServerDesc::UDN87,2963
    std::string friendlyName;SD::MediaServerDesc::friendlyName88,2984
    std::string location;SD::MediaServerDesc::location89,3014
    std::string iconUrl;SD::MediaServerDesc::iconUrl90,3040
    input_item_t* inputItem;SD::MediaServerDesc::inputItem91,3065
    bool isSatIp;SD::MediaServerDesc::isSatIp92,3094
    std::string satIpHost;SD::MediaServerDesc::satIpHost93,3112
class MediaServerList97,3144
    services_discovery_t* const m_sd;MediaServerList::m_sd114,3654
    std::vector<MediaServerDesc*> m_list;MediaServerList::m_list115,3692
namespace Access120,3741
class Upnp_i11e_cbAccess::Upnp_i11e_cb123,3761
    vlc_sem_t       m_sem;Access::Upnp_i11e_cb::m_sem132,3963
    vlc_mutex_t     m_lock;Access::Upnp_i11e_cb::m_lock133,3990
    int             m_refCount;Access::Upnp_i11e_cb::m_refCount134,4018
    Upnp_FunPtr     m_callback;Access::Upnp_i11e_cb::m_callback135,4050
    void*           m_cookie;Access::Upnp_i11e_cb::m_cookie136,4082
class MediaServer139,4116
    char* m_psz_root;MediaServer::m_psz_root158,4639
    char* m_psz_objectId;MediaServer::m_psz_objectId159,4661
    access_t* m_access;MediaServer::m_access160,4687
    input_item_node_t* m_node;MediaServer::m_node161,4711

video_filter/deinterlace/algo_phosphor.h,711
#define VLC_DEINTERLACE_ALGO_PHOSPHOR_H 25,1233
typedef enum { PC_LATEST 39,1767
typedef enum { PC_LATEST = 1, PC_ALTLINE 39,1767
               PC_BLEND 40,1815
               PC_BLEND  = 3, PC_UPCONVERT 40,1815
               PC_BLEND  = 3, PC_UPCONVERT = 4 } phosphor_chroma_t;40,1815
static const int phosphor_chroma_list[phosphor_chroma_list42,1942
static const char *const phosphor_chroma_list_text[phosphor_chroma_list_text45,2155
static const int phosphor_dimmer_list[phosphor_dimmer_list53,2605
static const char *const phosphor_dimmer_list_text[phosphor_dimmer_list_text55,2727
    phosphor_chroma_t i_chroma_for_420;63,3069
    int i_dimmer_strength;64,3109
} phosphor_sys_t;65,3136

access/rtp/srtp-test-recv.c,39
#undef NDEBUG32,988
int main 36,1024

video_output/xcb/window.c,1292
typedef xcb_atom_t Atom;34,1268
struct vout_window_sys_t43,1433
    xcb_connection_t *conn;conn45,1460
    key_handler_t *keys;keys46,1488
    vlc_thread_t thread;47,1513
    xcb_window_t root;49,1539
    xcb_atom_t wm_state;50,1562
    xcb_atom_t wm_state_above;51,1587
    xcb_atom_t wm_state_below;52,1618
    xcb_atom_t wm_state_fullscreen;53,1649
    bool embedded;55,1686
static void ProcessEvent 58,1709
static void *Thread Thread88,2470
static void set_wm_state 120,3222
#define NET_WM_STATE_REMOVE 133,3607
#define NET_WM_STATE_ADD 134,3637
#define NET_WM_STATE_TOGGLE 135,3667
static void change_wm_state 138,3751
static int Control 161,4486
void set_string 211,5978
void set_ascii_prop 220,6301
void set_wm_hints 227,6498
void set_hostname_prop 241,6960
xcb_intern_atom_cookie_t intern_string 259,7520
xcb_atom_t get_atom 266,7716
static void CacheAtoms 280,8006
static int Open 300,8775
static void Close 464,14078
static vlc_mutex_t serializer 480,14460
static int AcquireDrawable 483,14537
static void ReleaseDrawable 524,15593
static int EmOpen 557,16285
static void EmClose 634,18523
#define DISPLAY_TEXT 642,18677
#define DISPLAY_LONGTEXT 643,18716
#define XID_TEXT 647,18854
#define XID_LONGTEXT 648,18891
vlc_module_begin 655,19054

lua/libs/misc.h,31
#define VLC_LUA_MISC_H26,1211

demux/mkv/chapters.hpp,1919
#define VLC_MKV_CHAPTERS_HPP_28,1316
class chapter_translation_c32,1367
    chapter_translation_c(chapter_translation_c::chapter_translation_c35,1405
    ~chapter_translation_c(chapter_translation_c::~chapter_translation_c39,1469
    KaxChapterTranslateID  *p_translated;chapter_translation_c::p_translated44,1540
    unsigned int           codec_id;chapter_translation_c::codec_id45,1582
    std::vector<uint64_t>  editions;chapter_translation_c::editions46,1619
class chapter_item_c50,1688
    chapter_item_c(chapter_item_c::chapter_item_c53,1719
    int64_t                     i_start_time,chapter_item_c::i_start_time75,2624
    int64_t                     i_start_time, i_end_time;chapter_item_c::i_end_time75,2624
    std::vector<chapter_item_c*> sub_chapters;chapter_item_c::sub_chapters76,2682
    KaxChapterSegmentUID        *p_segment_uid;chapter_item_c::p_segment_uid77,2729
    KaxChapterSegmentEditionUID *p_segment_edition_uid;chapter_item_c::p_segment_edition_uid78,2777
    int64_t                     i_uid;chapter_item_c::i_uid79,2833
    bool                        b_display_seekpoint;chapter_item_c::b_display_seekpoint80,2872
    bool                        b_user_display;chapter_item_c::b_user_display81,2925
    std::string                 psz_name;chapter_item_c::psz_name82,2973
    chapter_item_c              *p_parent;chapter_item_c::p_parent83,3015
    bool                        b_is_leaving;chapter_item_c::b_is_leaving84,3058
    std::vector<chapter_codec_cmds_c*> codecs;chapter_item_c::codecs86,3105
class chapter_edition_c 96,3436
    chapter_edition_c(chapter_edition_c::chapter_edition_c99,3494
    bool                        b_ordered;chapter_edition_c::b_ordered103,3616
    bool                        b_default;chapter_edition_c::b_default104,3659
    bool                        b_hidden;chapter_edition_c::b_hidden106,3740

demux/adaptive/playlist/SegmentTemplate.cpp,597
BaseSegmentTemplate::BaseSegmentTemplate(34,1409
MediaSegmentTemplate::MediaSegmentTemplate(40,1505
void MediaSegmentTemplate::mergeWith(51,1861
void MediaSegmentTemplate::pruneByPlaybackTime(67,2442
size_t MediaSegmentTemplate::pruneBySequenceNumber(73,2603
uint64_t MediaSegmentTemplate::getCurrentLiveTemplateNumber(80,2789
stime_t MediaSegmentTemplate::getMinAheadScaledTime(99,3463
uint64_t MediaSegmentTemplate::getSequenceNumber(108,3748
void MediaSegmentTemplate::setSourceUrl(113,3840
void MediaSegmentTemplate::debug(118,3957
InitSegmentTemplate::InitSegmentTemplate(125,4150

access/dshow/filter.h,1669
typedef struct VLCMediaSample31,1439
    IMediaSample *p_sample;p_sample33,1471
    mtime_t i_timestamp;34,1499
} VLCMediaSample;36,1525
class CapturePin:CapturePin49,2015
    vlc_object_t *p_input;CapturePin::p_input53,2109
    access_sys_t *p_sys;CapturePin::p_sys54,2136
    CaptureFilter  *p_filter;CapturePin::p_filter55,2161
    IPin *p_connected_pin;CapturePin::p_connected_pin57,2192
    AM_MEDIA_TYPE *media_types;CapturePin::media_types59,2220
    size_t media_type_count;CapturePin::media_type_count60,2252
    AM_MEDIA_TYPE cx_media_type;CapturePin::cx_media_type62,2282
    std::deque<VLCMediaSample> samples_queue;CapturePin::samples_queue64,2316
    long i_ref;CapturePin::i_ref66,2363
class CaptureFilter 118,4540
    vlc_object_t   *p_input;CaptureFilter::p_input122,4613
    CapturePin     *p_pin;CaptureFilter::p_pin123,4642
    IFilterGraph   *p_graph;CaptureFilter::p_graph124,4669
    FILTER_STATE   state;CaptureFilter::state126,4731
    long i_ref;CaptureFilter::i_ref128,4758
class CaptureEnumPins 165,6067
    vlc_object_t *p_input;CaptureEnumPins::p_input167,6110
    CaptureFilter  *p_filter;CaptureEnumPins::p_filter168,6137
    int i_position;CaptureEnumPins::i_position170,6168
    long i_ref;CaptureEnumPins::i_ref171,6188
class CaptureEnumMediaTypes 193,6937
    vlc_object_t *p_input;CaptureEnumMediaTypes::p_input195,6992
    CapturePin     *p_pin;CaptureEnumMediaTypes::p_pin196,7019
    AM_MEDIA_TYPE cx_media_type;CaptureEnumMediaTypes::cx_media_type197,7046
    size_t i_position;CaptureEnumMediaTypes::i_position199,7080
    long i_ref;CaptureEnumMediaTypes::i_ref200,7103

demux/hls/playlist/M3U8.cpp,94
M3U8::M3U8 34,1243
M3U8::~M3U8(40,1360
bool M3U8::isLive(45,1380
void M3U8::debug(74,2399

demux/adaptive/tools/Conversions.hpp,329
#define CONVERSIONS_HPP21,995
class IsoTime27,1082
        time_t time;IsoTime::time34,1194
class UTCTime37,1219
        mtime_t t;UTCTime::t45,1359
template<typename T> class Integer48,1382
        Integer(Integer::Integer51,1431
        operator T(Integer::operator T63,1708
        T value;Integer::value69,1795

codec/wmafixed/wmafixed.c,394
int64_t IntTo64(22,903
int IntFrom64(40,1279
int32_t Fixed32From64(53,1534
int64_t Fixed32To64(58,1597
int64_t fixmul64byfixed(67,1702
int32_t fixdiv32(73,1827
int64_t fixdiv64(86,2035
int32_t fixsqrt32(99,2255
#define STEP(103,2337
#undef STEP123,2649
static const long cordic_circular_gain 129,2774
static const unsigned long atan_table[atan_table132,2939
long fsincos(182,4589

logger/android.c,131
static const int ptr_width 37,1294
static void AndroidPrintMsg(39,1365
static vlc_log_cb Open(71,2257
vlc_module_begin(84,2520

codec/aom.c,222
vlc_module_begin 48,1966
#define AOM_ERR(67,2537
struct decoder_sys_t72,2825
    aom_codec_ctx_t ctx;74,2848
static picture_t *Decode(Decode80,3061
static int OpenDecoder(174,5607
static void CloseDecoder(221,6956

video_filter/vhs.c,1628
static inline int64_t MOD(40,1541
#define MAX_BLUE_RED_LINES 43,1628
    int32_t  i_offset;46,1677
    uint16_t i_intensity;47,1700
    bool     b_blue_red;48,1726
    mtime_t  i_stop_trigger;49,1751
} blue_red_line_t;50,1780
struct filter_sys_t 52,1800
    bool b_init;55,1846
    int32_t  i_planes;56,1863
    int32_t *i_height;i_height57,1886
    int32_t *i_width;i_width58,1962
    int32_t *i_visible_pitch;i_visible_pitch59,1984
    mtime_t  i_start_time;60,2014
    mtime_t  i_last_time;61,2041
    mtime_t  i_cur_time;62,2067
    int32_t  i_phase_speed;65,2127
    int32_t  i_phase_ofs;66,2155
    int32_t  i_offset_ofs;67,2181
    int32_t  i_sliding_ofs;68,2208
    int32_t  i_sliding_speed;69,2236
    mtime_t  i_offset_trigger;70,2266
    mtime_t  i_sliding_trigger;71,2297
    mtime_t  i_sliding_stop_trig;72,2329
    bool     i_sliding_type_duplicate;73,2363
    mtime_t  i_BR_line_trigger;76,2435
    blue_red_line_t *p_BR_lines[p_BR_lines77,2467
vlc_module_begin(103,3375
static void Close(154,4866
static picture_t *Filter(Filter166,5121
static int vhs_allocate_data(216,6392
static void vhs_free_allocated_data(245,7421
static int vhs_blue_red_line_effect(261,7835
#define BR_LINES_GENERATOR_PERIOD 264,7961
#define BR_LINES_DURATION 265,8015
static void vhs_blue_red_dots_effect(336,10980
#define BR_DOTS_RATIO 337,11063
static int vhs_sliding_effect(388,12910
#define OFFSET_AVERAGE_PERIOD 395,13076
#define MAX_PHASE_OFS 420,13914
#define SLIDING_AVERAGE_PERIOD 433,14305
#define SLIDING_AVERAGE_DURATION 434,14356
static int vhs_sliding_effect_apply(497,17010

audio_output/windows_audio_common.h,1710
#define INITGUID 34,1541
static const GUID __KSDATAFORMAT_SUBTYPE_IEEE_FLOAT 43,2061
static const GUID __KSDATAFORMAT_SUBTYPE_PCM 44,2207
static const GUID __KSDATAFORMAT_SUBTYPE_DOLBY_AC3_SPDIF 45,2339
#define FRAMES_NUM 47,2496
#   define SPEAKER_FRONT_LEFT 52,2625
#   define SPEAKER_FRONT_RIGHT 53,2671
#   define SPEAKER_FRONT_CENTER 54,2717
#   define SPEAKER_LOW_FREQUENCY 55,2763
#   define SPEAKER_BACK_LEFT 56,2809
#   define SPEAKER_BACK_RIGHT 57,2856
#   define SPEAKER_FRONT_LEFT_OF_CENTER 58,2903
#   define SPEAKER_FRONT_RIGHT_OF_CENTER 59,2950
#   define SPEAKER_BACK_CENTER 60,2997
#   define SPEAKER_SIDE_LEFT 61,3045
#   define SPEAKER_SIDE_RIGHT 62,3093
#   define SPEAKER_TOP_CENTER 63,3141
#   define SPEAKER_TOP_FRONT_LEFT 64,3189
#   define SPEAKER_TOP_FRONT_CENTER 65,3238
#   define SPEAKER_TOP_FRONT_RIGHT 66,3287
#   define SPEAKER_TOP_BACK_LEFT 67,3336
#   define SPEAKER_TOP_BACK_CENTER 68,3385
#   define SPEAKER_TOP_BACK_RIGHT 69,3435
#   define SPEAKER_RESERVED 70,3485
#   define DSSPEAKER_DSSPEAKER_DIRECTOUT 74,3584
#   define DSSPEAKER_HEADPHONE 77,3672
#   define DSSPEAKER_MONO 80,3755
#   define DSSPEAKER_QUAD 83,3838
#   define DSSPEAKER_STEREO 86,3923
#   define DSSPEAKER_SURROUND 89,4010
#   define DSSPEAKER_5POINT1 92,4096
#   define DSSPEAKER_5POINT1_BACK 95,4187
#   define DSSPEAKER_7POINT1 98,4280
#   define DSSPEAKER_7POINT1_SURROUND 101,4375
#   define DSSPEAKER_5POINT1_SURROUND 104,4470
#   define DSSPEAKER_7POINT1_WIDE 107,4561
static const uint32_t pi_channels_in[pi_channels_in110,4629
static const uint32_t pi_channels_out[pi_channels_out115,4884
#define FLOAT_TEXT 122,5147
#define FLOAT_LONGTEXT 123,5191

codec/wmafixed/wmafixed.h,490
#define PRECISION 30,1203
#define PRECISION64 31,1230
#define fixtof64(33,1258
#define ftofix32(34,1367
#define itofix64(35,1461
#define itofix32(36,1500
#define fixtoi32(37,1545
#define fixtoi64(38,1590
#define fixmul32(56,2016
#define fixmul32b(70,2454
static inline int32_t fixmul32(84,2819
static inline int32_t fixmul32b(103,3384
static inline int32_t fixmul32(116,3645
static inline int32_t fixmul32b(127,3802
void CMUL(143,4019
void CMUL(165,4733
void CMUL(184,5363

video_chroma/i420_rgb.c,317
#define RGB2PIXEL(62,2692
vlc_module_begin 76,3401
# define vlc_CPU_capable(81,3594
# define vlc_CPU_capable(86,3809
# define vlc_CPU_capable(91,4007
static void Deactivate(286,11196
VIDEO_FILTER_WRAPPER(299,11472
static void SetYUV(332,12749
static void Set8bppPalette(408,16554
    #define CLIP(410,16622

misc/addons/xmlreading.h,445
#define BINDNODE(21,1087
        char ** ppsz;37,1495
        int * pi;38,1517
        long * pl;39,1535
    } u_data;40,1554
        TYPE_NONE,43,1583
        TYPE_NONE, TYPE_STRING,43,1583
        TYPE_NONE, TYPE_STRING, TYPE_INTEGER,43,1583
        TYPE_NONE, TYPE_STRING, TYPE_INTEGER, TYPE_LONG43,1583
    } e_type;44,1639
} data_pointer 45,1653
static inline int ReadType(48,1695
static inline const char * getTypePsz(66,2244

demux/dash/mpd/AdaptationSet.h,230
#define ADAPTATIONSET_H_26,1176
        class AdaptationSet 44,1478
                AdaptationSet(48,1650
                virtual ~AdaptationSet(49,1691
                virtual StreamFormat            getStreamFormat(51,1734

audio_output/audiotrack.c,6838
#define SMOOTHPOS_SAMPLE_COUNT 38,1434
#define SMOOTHPOS_INTERVAL_US 39,1468
#define AUDIOTIMESTAMP_INTERVAL_US 41,1522
enum at_dev 56,2283
    AT_DEV_STEREO 57,2297
    AT_DEV_HDMI,58,2320
#define AT_DEV_DEFAULT 60,2340
#define AT_DEV_MAX_CHANNELS 61,2377
    const char *id;id64,2430
    const char *name;name65,2450
    enum at_dev at_dev;66,2472
} at_devs[at_devs67,2496
struct aout_sys_t 73,2691
    float soft_gain;75,2729
    bool soft_mute;76,2750
    enum at_dev at_dev;78,2771
    jobject p_audiotrack;80,2796
    audio_sample_format_t fmt;82,2844
        unsigned int i_rate;85,2914
        int i_channel_config;86,2943
        int i_format;87,2973
        int i_size;88,2995
    } audiotrack_args;89,3015
        uint32_t i_wrap_count;93,3105
        uint32_t i_last;94,3136
    } headpos;95,3161
        jobject p_obj;99,3242
        jlong i_frame_us;100,3290
        jlong i_frame_pos;101,3316
        mtime_t i_play_time;102,3343
        mtime_t i_last_time;103,3404
    } timestamp;104,3433
        uint32_t i_idx;108,3513
        uint32_t i_count;109,3537
        mtime_t p_us[p_us110,3563
        mtime_t i_us;111,3609
        mtime_t i_last_time;112,3631
        mtime_t i_latency_us;113,3660
    } smoothpos;114,3690
    uint32_t i_max_audiotrack_samples;116,3708
    bool b_spdif;117,3747
    uint8_t i_chans_to_reorder;118,3765
    uint8_t p_chan_table[p_chan_table119,3833
        WRITE_BYTEARRAY,122,3886
        WRITE_BYTEARRAYV23,123,3911
        WRITE_SHORTARRAYV23,124,3939
        WRITE_BYTEBUFFER,125,3968
        WRITE_FLOATARRAY126,3994
    } i_write_type;127,4019
    vlc_thread_t thread;129,4040
    vlc_mutex_t lock;130,4092
    vlc_cond_t aout_cond;131,4114
    vlc_cond_t thread_cond;132,4167
    bool b_thread_running;135,4291
    bool b_thread_paused;136,4365
    bool b_thread_waiting;138,4486
    uint64_t i_samples_written;141,4632
    bool b_audiotrack_exception;142,4713
    bool b_error;143,4790
        uint64_t i_read;146,4842
        uint64_t i_write;147,4897
        size_t i_size;148,4955
            jbyteArray p_bytearray;150,5042
            jfloatArray p_floatarray;151,5078
            jshortArray p_shortarray;152,5116
                uint8_t *p_data;p_data154,5175
                jobject p_obj;155,5208
            } bytebuffer;156,5239
        } u;157,5265
    } circular;158,5278
#define AUDIOTRACK_NATIVE_SAMPLERATE170,5602
vlc_module_begin 172,5640
#define THREAD_NAME 183,5973
#define GET_ENV(184,6014
        jclass clazz;189,6112
        jmethodID ctor;190,6134
        jmethodID release;191,6158
        jmethodID getState;192,6185
        jmethodID play;193,6213
        jmethodID stop;194,6237
        jmethodID flush;195,6261
        jmethodID pause;196,6286
        jmethodID write;197,6311
        jmethodID writeV23;198,6336
        jmethodID writeShortV23;199,6364
        jmethodID writeBufferV21;200,6397
        jmethodID writeFloat;201,6431
        jmethodID getPlaybackHeadPosition;202,6461
        jmethodID getTimestamp;203,6504
        jmethodID getMinBufferSize;204,6536
        jmethodID getNativeOutputSampleRate;205,6572
        jint STATE_INITIALIZED;206,6617
        jint MODE_STREAM;207,6649
        jint ERROR;208,6675
        jint ERROR_BAD_VALUE;209,6695
        jint ERROR_INVALID_OPERATION;210,6725
        jint WRITE_NON_BLOCKING;211,6763
    } AudioTrack;212,6796
        jint ENCODING_PCM_8BIT;214,6827
        jint ENCODING_PCM_16BIT;215,6859
        jint ENCODING_PCM_FLOAT;216,6892
        bool has_ENCODING_PCM_FLOAT;217,6925
        jint ENCODING_AC3;218,6962
        jint ENCODING_E_AC3;219,6989
        bool has_ENCODING_AC3;220,7018
        jint ENCODING_DTS;221,7049
        jint ENCODING_DTS_HD;222,7076
        bool has_ENCODING_DTS;223,7106
        jint ENCODING_IEC61937;224,7137
        bool has_ENCODING_IEC61937;225,7169
        jint CHANNEL_OUT_MONO;226,7205
        jint CHANNEL_OUT_STEREO;227,7236
        jint CHANNEL_OUT_FRONT_LEFT;228,7269
        jint CHANNEL_OUT_FRONT_RIGHT;229,7306
        jint CHANNEL_OUT_BACK_LEFT;230,7344
        jint CHANNEL_OUT_BACK_RIGHT;231,7380
        jint CHANNEL_OUT_FRONT_CENTER;232,7417
        jint CHANNEL_OUT_LOW_FREQUENCY;233,7456
        jint CHANNEL_OUT_BACK_CENTER;234,7496
        jint CHANNEL_OUT_5POINT1;235,7534
        jint CHANNEL_OUT_SIDE_LEFT;236,7568
        jint CHANNEL_OUT_SIDE_RIGHT;237,7604
        bool has_CHANNEL_OUT_SIDE;238,7641
    } AudioFormat;239,7676
        jint ERROR_DEAD_OBJECT;241,7708
        bool has_ERROR_DEAD_OBJECT;242,7740
        jint STREAM_MUSIC;243,7776
    } AudioManager;244,7803
        jclass clazz;246,7836
        jmethodID getOutputLatency;247,7858
    } AudioSystem;248,7894
        jclass clazz;250,7926
        jmethodID ctor;251,7948
        jfieldID framePosition;252,7972
        jfieldID nanoTime;253,8004
    } AudioTimestamp;254,8031
} jfields;255,8053
InitJNIFields(260,8158
#define CHECK_EXCEPTION(273,8426
#define GET_CLASS(285,8742
#define GET_ID(289,8901
#define GET_CONST_INT(293,9082
#undef CHECK_EXCEPTION438,15814
#undef GET_CLASS439,15837
#undef GET_ID440,15854
#undef GET_CONST_INT441,15868
check_exception(453,16087
#define CHECK_AT_EXCEPTION(469,16560
#define JNI_CALL(471,16637
#define JNI_CALL_INT(473,16729
#define JNI_CALL_BOOL(474,16824
#define JNI_CALL_VOID(475,16924
#define JNI_CALL_STATIC_INT(476,17021
#define JNI_AT_NEW(478,17134
#define JNI_AT_CALL_INT(479,17248
#define JNI_AT_CALL_BOOL(480,17365
#define JNI_AT_CALL_VOID(481,17484
#define JNI_AT_CALL_STATIC_INT(482,17603
#define JNI_AUDIOTIMESTAMP_GET_LONG(484,17750
frames_to_us(487,17897
#define FRAMES_TO_US(491,18015
bytes_to_frames(494,18090
#define BYTES_TO_FRAMES(498,18226
#define BYTES_TO_US(499,18283
frames_to_bytes(502,18381
#define FRAMES_TO_BYTES(506,18521
AudioTrack_getPlaybackHeadPosition(515,18758
AudioTrack_ResetPlaybackHeadPosition(546,19851
AudioTrack_ResetPositions(559,20131
AudioTrack_Reset(580,20667
AudioTrack_GetSmoothPositionUs(596,21081
AudioTrack_GetTimestampPositionUs(640,22856
TimeGet(699,25206
    vlc_mutex_unlock( &p_sys->lock lock760,27081
AudioTrack_GetChanOrder(765,27149
#define HAS_CHAN(767,27231
#undef HAS_CHAN796,28208
AudioTrack_New(804,28317
AudioTrack_Recreate(838,29519
AudioTrack_Create(856,30120
Start(909,31953
Stop(1260,44044
AudioTrack_PlayByteArray(1341,46340
AudioTrack_PlayByteArrayV23(1385,47828
AudioTrack_PlayByteBuffer(1401,48369
AudioTrack_PlayShortArrayV23(1438,49796
AudioTrack_PlayFloatArray(1459,50455
AudioTrack_Play(1475,50943
AudioTrack_Thread(1540,53209
Play(1641,56740
Pause(1720,59696
Flush(1749,60335
static int DeviceSelect(1813,62549
Open(1841,63222
Close(1878,64119

video_output/glx.c,440
typedef struct vlc_gl_sys_t38,1268
    Display *display;display40,1298
    GLXWindow win;41,1320
    GLXContext ctx;42,1339
} vlc_gl_sys_t;43,1359
static int MakeCurrent 45,1376
static void ReleaseCurrent 54,1583
static void SwapBuffers 61,1724
static void *GetSymbol(GetSymbol68,1847
static bool CheckGLX 78,2049
static bool CheckGLXext 99,2588
static int Open 116,2997
static void Close 248,6471
vlc_module_begin 260,6735

misc/logger.c,89
#define VLC_MODULE_LICENSE 32,1363
vlc_module_begin 48,1950
static void Close(80,3046

video_chroma/i420_rgb.h,799
# define PLAIN25,1227
#define CMAP_RGB2_SIZE 29,1299
struct filter_sys_t37,1494
    uint8_t  *p_buffer;p_buffer39,1516
    int *p_offset;p_offset40,1540
    void *p_base;p_base44,1618
    uint8_t   *p_rgb8;p_rgb845,1696
    uint16_t  *p_rgb16;p_rgb1646,1760
    uint32_t  *p_rgb32;p_rgb3247,1825
    uint16_t  p_rgb_r[p_rgb_r53,2073
    uint16_t  p_rgb_g[p_rgb_g54,2143
    uint16_t  p_rgb_b[p_rgb_b55,2215
#define CONVERT_Y_PIXEL(83,3651
#define CONVERT_YUV_PIXEL(90,4132
#define CONVERT_Y_PIXEL_DITHER(99,4773
#define CONVERT_YUV_PIXEL_DITHER(106,5311
#define CONVERT_4YUV_PIXEL(115,5952
#define CONVERT_4YUV_PIXEL_SCALE(133,7313
#define SCALE_WIDTH 169,10015
#define SCALE_WIDTH_DITHER(213,13507
#define SCALE_HEIGHT(249,16289
#define SCALE_HEIGHT_DITHER(302,20784

codec/wmafixed/asf.h,504
#define _ASF_H24,1142
#define ASF_CODEC_ID_WMAV1 29,1201
#define ASF_CODEC_ID_WMAV2 30,1234
struct asf_waveformatex_s 32,1268
    uint32_t packet_size;33,1296
    int audiostream;34,1322
    uint16_t codec_id;35,1343
    uint16_t channels;36,1366
    uint32_t rate;37,1389
    uint32_t bitrate;38,1408
    uint16_t blockalign;39,1430
    uint16_t bitspersample;40,1455
    uint16_t datalen;41,1483
    uint8_t data[data42,1505
typedef struct asf_waveformatex_s asf_waveformatex_t;44,1529

audio_output/mmdevice.c,3576
# undef _WIN32_WINNT22,1154
# define _WIN32_WINNT 23,1175
#define INITGUID30,1261
#define COBJMACROS31,1278
#define CONST_VTABLE32,1297
static int TryEnterMTA(54,1854
#define TryEnterMTA(64,2102
static void EnterMTA(66,2153
static void LeaveMTA(73,2293
static wchar_t default_device[default_device78,2347
struct aout_sys_t80,2388
    aout_stream_t *stream;stream82,2408
    module_t *module;module83,2474
    audio_output_t *aout;aout84,2496
    IMMDeviceEnumerator *it;it85,2522
    IMMDevice *dev;dev86,2596
    struct IMMNotificationClient device_events;88,2662
    struct IAudioSessionEvents session_events;89,2710
    struct IAudioVolumeDuckNotification duck;90,2757
    LONG refs;92,2804
    unsigned ducks;93,2819
    float gain;94,2839
    wchar_t *device;device96,2893
    float volume;97,2964
    signed char mute;98,3025
    CRITICAL_SECTION lock;99,3088
    CONDITION_VARIABLE work;100,3115
    CONDITION_VARIABLE ready;101,3144
    vlc_thread_t thread;102,3174
static int vlc_FromHR(118,4008
static int TimeGet(128,4347
static void Play(140,4586
static void Pause(152,4802
static void Flush(165,5049
static int VolumeSet(177,5261
static int MuteSet(200,5730
static inline aout_sys_t *vlc_AudioSessionEvents_sys(vlc_AudioSessionEvents_sys212,6003
vlc_AudioSessionEvents_QueryInterface(218,6184
static STDMETHODIMP_(235,6565
static STDMETHODIMP_(242,6756
vlc_AudioSessionEvents_OnDisplayNameChanged(250,6968
vlc_AudioSessionEvents_OnIconPathChanged(262,7319
vlc_AudioSessionEvents_OnSimpleVolumeChanged(274,7661
vlc_AudioSessionEvents_OnChannelVolumeChanged(291,8261
vlc_AudioSessionEvents_OnGroupingParamChanged(309,8845
vlc_AudioSessionEvents_OnStateChanged(323,9213
vlc_AudioSessionEvents_OnSessionDisconnected(334,9525
static const struct IAudioSessionEventsVtbl vlc_AudioSessionEvents 368,10893
static inline aout_sys_t *vlc_AudioVolumeDuckNotification_sys(vlc_AudioVolumeDuckNotification_sys383,11423
vlc_AudioVolumeDuckNotification_QueryInterface(389,11612
static STDMETHODIMP_(406,11987
static STDMETHODIMP_(413,12205
vlc_AudioVolumeDuckNotification_OnVolumeDuckNotification(421,12444
vlc_AudioVolumeDuckNotification_OnVolumeUnduckNotification(434,12838
static const struct IAudioVolumeDuckNotificationVtbl vlc_AudioVolumeDuckNotification 446,13191
static char *DeviceName(DeviceName460,13620
static bool DeviceIsRender(483,14153
static HRESULT DeviceUpdated(503,14624
static inline aout_sys_t *vlc_MMNotificationClient_sys(vlc_MMNotificationClient_sys535,15266
vlc_MMNotificationClient_QueryInterface(541,15450
static STDMETHODIMP_(558,15839
static STDMETHODIMP_(565,16036
vlc_MMNotificationClient_OnDefaultDeviceChange(573,16254
vlc_MMNotificationClient_OnDeviceAdded(590,16773
vlc_MMNotificationClient_OnDeviceRemoved(601,17096
vlc_MMNotificationClient_OnDeviceStateChanged(618,17550
vlc_MMNotificationClient_OnPropertyValueChanged(653,18709
static const struct IMMNotificationClientVtbl vlc_MMNotificationClient 668,19194
static int DevicesEnum(681,19640
static int DeviceSelectLocked(736,20965
static int DeviceSelect(763,21664
static wchar_t *var_InheritWide(var_InheritWide772,21922
#define var_InheritWide(782,22143
static HRESULT MMSession(795,22826
static void *MMThread(MMThread1020,30211
static HRESULT ActivateDevice(1051,31129
static int aout_stream_Start(1058,31359
static void aout_stream_Stop(1071,31793
static int Start(1079,31953
static void Stop(1120,32967
static int Open(1134,33240
static void Close(1206,35177
vlc_module_begin(1222,35631

misc/gnutls.c,1336
static int gnutls_Init 43,1441
# define gnutls_Deinit(55,1725
#define GNUTLS_SEC_PARAM_MEDIUM 57,1764
static vlc_mutex_t gnutls_mutex 58,1820
static int gnutls_Init 64,1987
static void gnutls_Deinit 94,2628
static int gnutls_Error(102,2776
static ssize_t vlc_gnutls_read(134,3472
static ssize_t vlc_gnutls_writev(146,3744
static int gnutls_GetFD(174,4362
static ssize_t gnutls_Recv(182,4538
static ssize_t gnutls_Send 205,5018
static int gnutls_Shutdown(230,5621
static void gnutls_Close 247,6021
static int gnutls_SessionOpen(254,6139
static int gnutls_ContinueHandshake(338,8514
static int gnutls_ClientSessionOpen(391,9880
static int gnutls_ClientHandshake(412,10563
static int OpenClient 545,15060
static void CloseClient 578,15982
typedef struct vlc_tls_creds_sys590,16230
    gnutls_certificate_credentials_t x509_cred;592,16265
    gnutls_dh_params_t dh_params;593,16313
} vlc_tls_creds_sys_t;594,16347
static int gnutls_ServerSessionOpen(599,16421
static int gnutls_ServerHandshake(610,16823
static int OpenServer 621,17168
static void CloseServer 721,19876
#define PRIORITIES_TEXT 733,20188
#define PRIORITIES_LONGTEXT 734,20240
static const char *const priorities_values[priorities_values737,20431
static const char *const priorities_text[priorities_text744,20564
vlc_module_begin 752,20840

demux/adaptive/adaptive.cpp,599
#define ADAPT_WIDTH_TEXT 66,2333
#define ADAPT_HEIGHT_TEXT 68,2381
#define ADAPT_BW_TEXT 70,2431
#define ADAPT_BW_LONGTEXT 71,2484
#define ADAPT_LOGIC_TEXT 73,2562
#define ADAPT_ACCESS_TEXT 75,2609
#define ADAPT_ACCESS_LONGTEXT 76,2666
static const AbstractAdaptationLogic::LogicType pi_logics[pi_logics78,2757
static const char *const ppsz_logics_values[ppsz_logics_values86,3234
static const char *const ppsz_logics[ppsz_logics94,3538
static int Open(133,5726
static void Close(241,9173
static PlaylistManager * HandleDash(253,9567
static PlaylistManager * HandleSmooth(276,10416

access/rtp/srtp-test-aes.c,180
static void printhex 23,858
static void fatal 30,1023
static void test_derivation 37,1136
static void test_keystream 95,3350
static void srtp_test 144,5154
int main 150,5235

video_chroma/i422_yuy2.c,470
#define SRC_FOURCC 40,1595
#    define DEST_FOURCC 42,1661
#    define DEST_FOURCC 44,1733
vlc_module_begin 68,2977
# define vlc_CPU_capable(72,3154
# define VLC_TARGET73,3188
# define vlc_CPU_capable(77,3376
# define VLC_TARGET 78,3417
# define vlc_CPU_capable(82,3615
# define VLC_TARGET 83,3657
VIDEO_FILTER_WRAPPER(150,5629
static void I422_YVYU(259,9855
static void I422_UYVY(356,13642
static void I422_IUYV(452,17430
static void I422_Y211(464,17963

demux/mpeg/timestamps.h,203
#define VLC_MPEG_TIMESTAMPS_H20,1031
#define FROM_SCALE_NZ(22,1062
#define TO_SCALE_NZ(23,1103
#define FROM_SCALE(25,1145
#define TO_SCALE(26,1197
static inline int64_t TimeStampWrapAround(28,1248

stream_out/bridge.c,2404
#define ID_TEXT 41,1736
#define ID_LONGTEXT 42,1761
#define DEST_TEXT 46,1901
#define DEST_LONGTEXT 47,1954
#define DELAY_TEXT 51,2118
#define DELAY_LONGTEXT 52,2149
#define ID_OFFSET_TEXT 56,2388
#define ID_OFFSET_LONGTEXT 57,2427
#define NAME_TEXT 60,2580
#define NAME_LONGTEXT 61,2631
#define PLACEHOLDER_TEXT 65,2793
#define PLACEHOLDER_LONGTEXT 66,2874
#define PLACEHOLDER_DELAY_TEXT 72,3214
#define PLACEHOLDER_DELAY_LONGTEXT 73,3271
#define PLACEHOLDER_IFRAME_TEXT 76,3368
#define PLACEHOLDER_IFRAME_LONGTEXT 77,3453
#define SOUT_CFG_PREFIX_OUT 88,3934
#define SOUT_CFG_PREFIX_IN 89,3981
vlc_module_begin 91,4027
static const char *const ppsz_sout_options_in[ppsz_sout_options_in137,5899
typedef struct bridged_es_t151,6553
    es_format_t fmt;153,6583
    block_t *p_block;p_block154,6604
    block_t **pp_last;pp_last155,6626
    bool b_empty;156,6649
    sout_stream_id_sys_t *id;id159,6693
    mtime_t i_last;160,6723
    bool b_changed;161,6743
} bridged_es_t;162,6763
typedef struct bridge_t164,6780
    bridged_es_t **pp_es;pp_es166,6806
    int i_es_num;167,6832
} bridge_t;168,6850
static vlc_mutex_t lock 170,6863
typedef struct out_sout_stream_sys_t176,6930
    bridged_es_t *p_es;p_es178,6969
    int i_id;179,6993
    bool b_inited;180,7007
    char *psz_name;psz_name182,7027
} out_sout_stream_sys_t;183,7047
static int OpenOut(188,7244
static void CloseOut(227,8414
static sout_stream_id_sys_t * AddOut(236,8649
static void DelOut(298,10370
static int SendOut(321,10853
typedef struct in_sout_stream_sys_t353,11487
    int i_id_offset;355,11525
    mtime_t i_delay;356,11546
    char *psz_name;psz_name358,11568
    bool b_placeholder;360,11589
    bool b_switch_on_iframe;361,11613
    int i_state;362,11642
    mtime_t i_placeholder_delay;363,11659
    sout_stream_id_sys_t *id_video;id_video364,11692
    mtime_t i_last_video;365,11728
    sout_stream_id_sys_t *id_audio;id_audio366,11754
    mtime_t i_last_audio;367,11790
} in_sout_stream_sys_t;368,11816
enum { placeholder_on,370,11841
enum { placeholder_on, placeholder_off 370,11841
static int OpenIn(375,12054
static void CloseIn(439,13989
struct sout_stream_id_sys_t448,14221
    sout_stream_id_sys_t *id;id450,14251
    int i_cat;451,14281
static sout_stream_id_sys_t * AddIn(454,14347
static void DelIn(489,15319
static int SendIn(500,15658

audio_output/mmdevice.h,756
# define VLC_AOUT_MMDEVICE_H 22,1126
typedef struct aout_stream aout_stream_t;24,1158
struct aout_stream29,1252
    void *sys;sys32,1296
    HRESULT (*time_get)time_get34,1312
    HRESULT (*play)play35,1365
    HRESULT (*pause)pause36,1414
    HRESULT (*flush)flush37,1459
        void *device;device41,1516
        HRESULT (*activate)activate42,1538
    } owner;43,1613
typedef HRESULT (*aout_stream_start_t)aout_stream_start_t52,1862
typedef HRESULT (*aout_stream_stop_t)aout_stream_stop_t58,2014
static inline HRESULT aout_stream_TimeGet(60,2071
static inline HRESULT aout_stream_Play(65,2188
static inline HRESULT aout_stream_Pause(70,2298
static inline HRESULT aout_stream_Flush(75,2408
HRESULT aout_stream_Activate(90,2745

audio_output/audioqueue.c,645
#define AudioSessionSetActive(37,1427
struct aout_sys_t43,1518
    AudioQueueRef           audioQueueRef;45,1538
    AudioQueueTimelineRef   timelineRef;46,1581
    bool                    b_started;48,1623
    mtime_t                 i_played_length;50,1663
    int                     i_rate;51,1708
    float                   f_volume;52,1744
vlc_module_begin 64,2426
static void Close(96,3128
static int VolumeSet(105,3310
static int Start(119,3681
static void Stop(186,6592
static void Play(200,7008
void UnusedAudioQueueCallback(221,7768
static void Pause(228,8088
static void Flush(241,8407
static int TimeGet(260,8995

audio_output/winstore.c,747
#define INITGUID25,1148
#define COBJMACROS26,1165
static void EnterMTA(41,1494
static void LeaveMTA(48,1634
struct aout_sys_t53,1688
    aout_stream_t *stream;stream55,1708
    module_t *module;module56,1774
    IAudioClient *client;client57,1796
static int vlc_FromHR(60,1826
static int VolumeSet(72,2167
static int MuteSet(111,3083
static int TimeGet(139,3786
static void Play(153,4096
static void Pause(166,4362
static void Flush(180,4659
static HRESULT ActivateDevice(193,4921
static int aout_stream_Start(209,5310
static void aout_stream_Stop(220,5670
static int Start(228,5830
static void Stop(256,6473
static int DeviceSelect(270,6747
static int Open(286,7286
static void Close(311,8000
vlc_module_begin(319,8141

demux/smooth/playlist/MemoryChunk.cpp,229
MemoryChunkSource::MemoryChunkSource(30,1097
MemoryChunkSource::~MemoryChunkSource(37,1225
bool MemoryChunkSource::hasMoreData(43,1312
block_t * MemoryChunkSource::readBlock(48,1396
block_t * MemoryChunkSource::read(59,1561

demux/dvb-text.h,48
static char *vlc_from_EIT vlc_from_EIT26,1204

video_filter/blend.cpp,8410
vlc_module_begin(42,1768
void merge(57,2183
struct CPixel 62,2282
    unsigned i,CPixel::i63,2298
    unsigned i, j,CPixel::j63,2298
    unsigned i, j, k;CPixel::k63,2298
    unsigned a;CPixel::a64,2320
class CPicture 67,2340
    CPicture(CPicture::CPicture69,2365
    CPicture(CPicture::CPicture74,2534
    const video_format_t *getFormat(CPicture::getFormat77,2637
    bool isFull(CPicture::isFull81,2713
    uint8_t *getLine(CPicture::getLine88,2817
    const picture_t *picture;CPicture::picture92,2958
    const video_format_t *fmt;CPicture::fmt93,2988
    unsigned x;CPicture::x94,3019
    unsigned y;CPicture::y95,3035
template <typename pixel,98,3055
template <typename pixel, unsigned rx,98,3055
template <typename pixel, unsigned rx, unsigned ry,98,3055
template <typename pixel, unsigned rx, unsigned ry, bool has_alpha,98,3055
class CPictureYUVPlanar 99,3137
    CPictureYUVPlanar(CPictureYUVPlanar::CPictureYUVPlanar101,3189
    void get(CPictureYUVPlanar::get109,3490
    void merge(CPictureYUVPlanar::merge119,3773
    bool isFull(CPictureYUVPlanar::isFull127,4031
    void nextLine(CPictureYUVPlanar::nextLine131,4132
    pixel *getPointer(CPictureYUVPlanar::getPointer143,4456
    uint8_t *data[CPictureYUVPlanar::data150,4720
class CPictureYUVSemiPlanar 154,4770
    CPictureYUVSemiPlanar(CPictureYUVSemiPlanar::CPictureYUVSemiPlanar156,4826
    void get(CPictureYUVSemiPlanar::get161,4987
    void merge(CPictureYUVSemiPlanar::merge169,5224
    bool isFull(CPictureYUVSemiPlanar::isFull177,5504
    void nextLine(CPictureYUVSemiPlanar::nextLine181,5603
    uint8_t *getPointer(CPictureYUVSemiPlanar::getPointer189,5771
    uint8_t *data[CPictureYUVSemiPlanar::data196,5971
template <unsigned offset_y,199,5997
template <unsigned offset_y, unsigned offset_u,199,5997
class CPictureYUVPacked 200,6064
    CPictureYUVPacked(CPictureYUVPacked::CPictureYUVPacked202,6116
    void get(CPictureYUVPacked::get206,6227
    void merge(CPictureYUVPacked::merge215,6475
    bool isFull(CPictureYUVPacked::isFull224,6767
    void nextLine(CPictureYUVPacked::nextLine228,6850
    uint8_t *getPointer(CPictureYUVPacked::getPointer234,6943
    uint8_t *data;CPictureYUVPacked::data238,7034
class CPictureYUVP 241,7057
    CPictureYUVP(CPictureYUVP::CPictureYUVP243,7104
    void get(CPictureYUVP::get247,7210
    void nextLine(CPictureYUVP::nextLine251,7312
    uint8_t *getPointer(CPictureYUVP::getPointer257,7405
    uint8_t *data;CPictureYUVP::data261,7490
template <unsigned bytes,264,7513
class CPictureRGBX 265,7555
    CPictureRGBX(CPictureRGBX::CPictureRGBX267,7602
    void get(CPictureRGBX::get293,8388
    void merge(CPictureRGBX::merge302,8653
    void nextLine(CPictureRGBX::nextLine329,9921
    uint8_t *getPointer(CPictureRGBX::getPointer335,10014
    unsigned offset_r;CPictureRGBX::offset_r339,10109
    unsigned offset_g;CPictureRGBX::offset_g340,10132
    unsigned offset_b;CPictureRGBX::offset_b341,10155
    unsigned offset_a;CPictureRGBX::offset_a342,10178
    uint8_t *data;CPictureRGBX::data343,10201
class CPictureRGB16 346,10224
    CPictureRGB16(CPictureRGB16::CPictureRGB16348,10272
    void get(CPictureRGB16::get352,10379
    void merge(CPictureRGB16::merge359,10666
    void nextLine(CPictureRGB16::nextLine372,11065
    uint16_t *getPointer(CPictureRGB16::getPointer378,11158
    uint8_t *data;CPictureRGB16::data382,11261
typedef CPictureYUVPlanar<uint8_t,uint8_t385,11284
typedef CPictureYUVPlanar<uint8_t,  1,1, true,385,11284
typedef CPictureYUVPlanar<uint8_t,  1,1, true,  false> CPictureYUVA;385,11284
typedef CPictureYUVPlanar<uint8_t,uint8_t387,11354
typedef CPictureYUVPlanar<uint8_t,  4,4, false,387,11354
typedef CPictureYUVPlanar<uint8_t,  4,4, false, true>  CPictureYV9;387,11354
typedef CPictureYUVPlanar<uint8_t,uint8_t388,11422
typedef CPictureYUVPlanar<uint8_t,  4,4, false,388,11422
typedef CPictureYUVPlanar<uint8_t,  4,4, false, false> CPictureI410_8;388,11422
typedef CPictureYUVPlanar<uint8_t,uint8_t390,11494
typedef CPictureYUVPlanar<uint8_t,  4,1, false,390,11494
typedef CPictureYUVPlanar<uint8_t,  4,1, false, false> CPictureI411_8;390,11494
typedef CPictureYUVSemiPlanar<false>                   CPictureNV12;392,11566
typedef CPictureYUVSemiPlanar<true>                    CPictureNV21;393,11635
typedef CPictureYUVPlanar<uint8_t,uint8_t395,11705
typedef CPictureYUVPlanar<uint8_t,  2,2, false,395,11705
typedef CPictureYUVPlanar<uint8_t,  2,2, false, true>  CPictureYV12;395,11705
typedef CPictureYUVPlanar<uint8_t,uint8_t396,11774
typedef CPictureYUVPlanar<uint8_t,  2,2, false,396,11774
typedef CPictureYUVPlanar<uint8_t,  2,2, false, false> CPictureI420_8;396,11774
typedef CPictureYUVPlanar<uint16_t,uint16_t397,11845
typedef CPictureYUVPlanar<uint16_t, 2,2, false,397,11845
typedef CPictureYUVPlanar<uint16_t, 2,2, false, false> CPictureI420_16;397,11845
typedef CPictureYUVPlanar<uint8_t,uint8_t399,11918
typedef CPictureYUVPlanar<uint8_t,  2,1, false,399,11918
typedef CPictureYUVPlanar<uint8_t,  2,1, false, false> CPictureI422_8;399,11918
typedef CPictureYUVPlanar<uint16_t,uint16_t400,11989
typedef CPictureYUVPlanar<uint16_t, 2,1, false,400,11989
typedef CPictureYUVPlanar<uint16_t, 2,1, false, false> CPictureI422_16;400,11989
typedef CPictureYUVPlanar<uint8_t,uint8_t402,12062
typedef CPictureYUVPlanar<uint8_t,  1,1, false,402,12062
typedef CPictureYUVPlanar<uint8_t,  1,1, false, false> CPictureI444_8;402,12062
typedef CPictureYUVPlanar<uint16_t,uint16_t403,12133
typedef CPictureYUVPlanar<uint16_t, 1,1, false,403,12133
typedef CPictureYUVPlanar<uint16_t, 1,1, false, false> CPictureI444_16;403,12133
typedef CPictureYUVPacked<0, 1, 3> CPictureYUYV;405,12206
typedef CPictureYUVPacked<1, 0, 2> CPictureUYVY;406,12255
typedef CPictureYUVPacked<0, 3, 1> CPictureYVYU;407,12304
typedef CPictureYUVPacked<1, 2, 0> CPictureVYUY;408,12353
typedef CPictureRGBX<4, true>  CPictureRGBA;410,12403
typedef CPictureRGBX<4, true>  CPictureBGRA;411,12448
typedef CPictureRGBX<4, false> CPictureRGB32;412,12493
typedef CPictureRGBX<3, false> CPictureRGB24;413,12539
struct convertNone 415,12586
    convertNone(convertNone::convertNone416,12607
    void operator()(convertNone::operator()417,12674
template <unsigned dst,422,12720
struct convertBits 423,12758
    convertBits(convertBits::convertBits424,12779
    void operator()(convertBits::operator()425,12846
typedef convertBits< 9, 8> convert8To9Bits;432,13066
typedef convertBits<10, 8> convert8To10Bits;433,13110
typedef convertBits<16, 8> convert8To16Bits;434,13155
struct convertRgbToYuv8 436,13201
    convertRgbToYuv8(convertRgbToYuv8::convertRgbToYuv8437,13227
    void operator()(convertRgbToYuv8::operator()438,13299
struct convertYuv8ToRgb 448,13469
    convertYuv8ToRgb(convertYuv8ToRgb::convertYuv8ToRgb449,13495
    void operator()(convertYuv8ToRgb::operator()450,13567
struct convertRgbToRgbSmall 460,13733
    convertRgbToRgbSmall(convertRgbToRgbSmall::convertRgbToRgbSmall461,13763
    void operator()(convertRgbToRgbSmall::operator()462,13854
    const video_format_t &fmt;convertRgbToRgbSmall::fmt469,13999
struct convertYuvpToAny 472,14034
    void operator()(convertYuvpToAny::operator()473,14060
    video_palette_t palette;convertYuvpToAny::palette482,14308
struct convertYuvpToYuva8 484,14340
    convertYuvpToYuva8(convertYuvpToYuva8::convertYuvpToYuva8485,14394
struct convertYuvpToRgba 490,14518
    convertYuvpToRgba(convertYuvpToRgba::convertYuvpToRgba491,14571
struct compose 509,15153
    compose(compose::compose510,15170
    void operator()(compose::operator()511,15266
    F f;compose::f517,15346
    G g;compose::g518,15355
void Blend(522,15418
typedef void (*blend_function_t)blend_function_t550,16129
    vlc_fourcc_t     dst;::dst554,16315
    vlc_fourcc_t     src;::src555,16341
    blend_function_t blend;::blend556,16367
} blends[blends557,16395
#undef RGB558,16410
#undef YUV559,16421
#define RGB(560,16432
#define YUV(564,16740
#undef RGB621,19407
#undef YUV622,19418
struct filter_sys_t 625,19433
    filter_sys_t(filter_sys_t::filter_sys_t626,19455
    blend_function_t blend;filter_sys_t::blend629,19500
static void Blend(635,19573
static int Open(666,20756
static void Close(690,21486

video_chroma/i422_yuy2.h,1116
#define MMX_CALL(31,1317
#define MMX_END 44,1839
#define MMX_YUV422_YUYV 46,1888
#define MMX_YUV422_YVYU 58,2671
#define MMX_YUV422_UYVY 70,3454
#define MMX_YUV422_Y211 82,4237
#define MMX_CALL(91,4399
#define MMX_END 99,4643
#define MMX_YUV422_YUYV 101,4672
#define MMX_YUV422_YVYU 112,5132
#define MMX_YUV422_UYVY 123,5591
#define SSE2_CALL(142,6159
#define SSE2_END 155,6681
#define SSE2_YUV422_YUYV_ALIGNED 157,6747
#define SSE2_YUV422_YUYV_UNALIGNED 169,7530
#define SSE2_YUV422_YVYU_ALIGNED 182,8391
#define SSE2_YUV422_YVYU_UNALIGNED 194,9174
#define SSE2_YUV422_UYVY_ALIGNED 207,10035
#define SSE2_YUV422_UYVY_UNALIGNED 219,10818
#define SSE2_CALL(238,11763
#define SSE2_END 246,12032
#define SSE2_YUV422_YUYV_ALIGNED 248,12064
#define SSE2_YUV422_YUYV_UNALIGNED 259,12567
#define SSE2_YUV422_YVYU_ALIGNED 270,13070
#define SSE2_YUV422_YVYU_UNALIGNED 281,13572
#define SSE2_YUV422_UYVY_ALIGNED 292,14074
#define SSE2_YUV422_UYVY_UNALIGNED 303,14576
#define C_YUV422_YUYV(318,15094
#define C_YUV422_YVYU(324,15485
#define C_YUV422_UYVY(330,15876
#define C_YUV422_Y211(336,16267

codec/avcodec/va.c,177
vlc_fourcc_t vlc_va_GetChroma(33,1318
static int vlc_va_Start(91,3133
static void vlc_va_Stop(104,3638
vlc_va_t *vlc_va_New(vlc_va_New113,3867
void vlc_va_Delete(144,4826

codec/libmpeg2.c,1784
#define DPB_COUNT 55,2337
    picture_t *p_picture;p_picture58,2378
    bool      b_linked;59,2404
    bool      b_displayed;60,2428
} picture_dpb_t;61,2455
struct decoder_sys_t63,2473
    mpeg2dec_t          *p_mpeg2dec;p_mpeg2dec68,2538
    const mpeg2_info_t  *p_info;p_info69,2575
    bool                b_skip;70,2608
    mtime_t          i_previous_pts;75,2680
    mtime_t          i_current_pts;76,2717
    mtime_t          i_previous_dts;77,2753
    mtime_t          i_current_dts;78,2790
    bool             b_garbage_pic;79,2826
    bool             b_after_sequence_header;80,2862
    bool             b_slice_i;82,3015
    bool             b_second_field;83,3092
    bool             b_preroll;85,3130
    picture_dpb_t        p_dpb[p_dpb88,3173
    decoder_synchro_t *p_synchro;p_synchro93,3257
    int             i_sar_num;94,3291
    int             i_sar_den;95,3322
    mtime_t         i_last_frame_pts;96,3353
    uint32_t        i_cc_flags;99,3428
    mtime_t         i_cc_pts;100,3460
    mtime_t         i_cc_dts;101,3490
    cc_data_t       cc;102,3520
    uint8_t        *p_gop_user_data;p_gop_user_data103,3544
    uint32_t        i_gop_user_data;104,3581
vlc_module_begin 135,4670
static picture_t *DecodeBlock(DecodeBlock254,8206
static void CloseDecoder(602,20957
static void Reset(621,21505
static picture_t *GetNewPicture(GetNewPicture633,21914
static block_t *GetCc(GetCc682,23799
static void GetAR(709,24709
static void PutPicture(763,26866
static void DpbInit(784,27462
static void DpbClean(794,27674
static picture_t *DpbNewPicture(DpbNewPicture814,28146
static picture_dpb_t *DpbFindPicture(DpbFindPicture844,28742
static void DpbUnlinkPicture(860,29139
static int DpbDisplayPicture(883,29701

demux/avi/avi.c,4249
#define INTERLEAVE_TEXT 53,1882
#define INDEX_TEXT 55,1939
#define INDEX_LONGTEXT 56,1985
#define BI_RAWRGB 60,2133
#define BI_RGBBITFIELDS 61,2156
static const int pi_index[pi_index66,2261
static const char *const ppsz_indexes[ppsz_indexes68,2303
vlc_module_begin 73,2564
#define IGNORE_ES 102,3542
#define READ_LENGTH 103,3567
#define READ_LENGTH_NONINTERLEAVED 104,3607
    vlc_fourcc_t i_fourcc;110,3702
    off_t        i_pos;111,3729
    uint32_t     i_size;112,3753
    vlc_fourcc_t i_type;113,3778
    uint8_t      i_peek[i_peek115,3838
    unsigned int i_stream;117,3888
    unsigned int i_cat;118,3915
} avi_packet_t;119,3939
    vlc_fourcc_t i_id;124,3974
    uint32_t     i_flags;125,3997
    off_t        i_pos;126,4023
    uint32_t     i_length;127,4047
    int64_t      i_lengthtotal;128,4074
} avi_entry_t;130,4107
    unsigned int    i_size;134,4140
    unsigned int    i_max;135,4168
    avi_entry_t     *p_entry;p_entry136,4195
} avi_index_t;138,4226
    bool            b_activated;145,4421
    bool            b_eof;146,4454
    unsigned int    i_cat;148,4482
    vlc_fourcc_t    i_codec;149,4534
    unsigned int    i_rate;151,4564
    int             i_scale;152,4592
    unsigned int    i_samplesize;153,4621
    unsigned int    i_width_bytes;155,4656
    bool            b_flipped;156,4691
    es_out_id_t     *p_es;p_es158,4723
    int             i_dv_audio_rate;160,4751
    es_out_id_t     *p_es_dv_audio;p_es_dv_audio161,4788
    avi_index_t     idx;164,4845
    unsigned int    i_idxposc;166,4871
    unsigned int    i_idxposb;167,4925
    unsigned int    i_blockno;170,5019
    unsigned int    i_blocksize;171,5050
} avi_track_t;173,5084
struct demux_sys_t175,5100
    mtime_t i_time;177,5121
    mtime_t i_length;178,5141
    bool  b_interleaved;180,5164
    bool  b_seekable;181,5189
    bool  b_fastseekable;182,5211
    bool  b_indexloaded;183,5237
    mtime_t i_read_increment;184,5320
    uint32_t i_avih_flags;185,5350
    avi_chunk_t ck_root;186,5377
    bool  b_odml;188,5403
    off_t   i_movi_begin;190,5422
    off_t   i_movi_lastchunk_pos;191,5448
    unsigned int i_track;194,5568
    avi_track_t  **track;track195,5594
    vlc_meta_t  *meta;meta198,5636
    unsigned int       i_attachment;200,5660
    input_attachment_t **attachment;attachment201,5697
static inline off_t __EVEN(204,5738
static int Open(260,7966
static void Close 857,31543
block_t * ReadFrame(886,32384
    bool b_ok;967,34902
    int i_toread;969,34918
    off_t i_posf;971,34937
} avi_track_toread_t;974,35107
static int Demux_Seekable(976,35130
static int Demux_UnSeekable(1327,46159
#define p_stream 1382,47618
#undef p_stream1471,50751
static int Seek(1480,51005
static double ControlGetPosition(1611,55817
static int Control(1627,56232
static mtime_t AVI_PTSToChunk(1730,59573
static mtime_t AVI_PTSToByte(1740,59861
static mtime_t AVI_GetDPTS(1752,60216
static mtime_t AVI_GetPTS(1771,60636
static int AVI_StreamChunkFind(1806,61506
static int AVI_StreamChunkSet(1880,63717
static int AVI_StreamBytesSet(1907,64432
static int AVI_TrackSeek(1970,66594
#define p_stream 1977,66815
#undef p_stream2059,69359
static int AVI_GetKeyFlag(2065,69570
vlc_fourcc_t AVI_FourccGetCodec(2107,70934
static void AVI_ParseStreamHeader(2124,71466
#define SET_PTR(2127,71606
#undef SET_PTR2163,72655
static int AVI_PacketGetHeader(2169,72833
static int AVI_PacketNext(2196,73616
static int AVI_PacketSearch(2228,74305
static void avi_index_Init(2271,75669
static void avi_index_Clean(2277,75805
static void avi_index_Append(2281,75891
static int AVI_IndexFind_idx1(2312,76809
static int AVI_IndexLoad_idx1(2375,79112
static void __Parse_indx(2432,81093
static void AVI_IndexLoad_indx(2472,82598
#define p_stream 2488,83122
#undef p_stream2526,84534
static void AVI_IndexLoad(2530,84559
static void AVI_IndexCreate(2589,86509
static void AVI_MetaLoad(2721,90571
        vlc_fourcc_t i_id;2743,91382
        int          i_type;2744,91409
static void AVI_DvHandleAudio(2798,93393
static void AVI_ExtractSubtitle(2829,94426
static int AVI_TrackStopFinishedStreams(2963,98594
static mtime_t  AVI_MovieGetLength(2987,99230

codec/mpg123.c,506
static unsigned int mpg123_refcount 47,1803
static vlc_mutex_t mpg123_mutex 48,1844
struct decoder_sys_t53,2076
    mpg123_handle * p_handle;55,2099
    date_t          end_date;56,2129
    block_t       * p_out;57,2159
vlc_module_begin 63,2370
static void Flush(129,4592
static int UpdateAudioFormat(140,4813
static block_t *DecodeBlock(DecodeBlock193,6527
static int InitMPG123(317,10584
static void ExitMPG123(336,11159
static int OpenDecoder(348,11524
static void CloseDecoder(398,13092

access/archive/archive.c,187
vlc_module_begin(31,1334
        const uint16_t i_offset;51,1995
        const uint8_t  i_length;52,2028
        const char * const p_bytes;53,2061
void EnableArchiveFormats(83,3023

video_chroma/i420_rgb8.c,56
void I420_RGB8(43,1772
static void SetOffset(122,5455

codec/twolame.c,1035
#define MPEG_FRAME_SIZE 39,1601
#define MAX_CODED_FRAME_SIZE 40,1630
#define ENC_CFG_PREFIX 52,2166
#define ENC_QUALITY_TEXT 54,2206
#define ENC_QUALITY_LONGTEXT 55,2254
#define ENC_MODE_TEXT 59,2454
#define ENC_MODE_LONGTEXT 60,2494
#define ENC_VBR_TEXT 61,2561
#define ENC_VBR_LONGTEXT 62,2597
#define ENC_PSY_TEXT 64,2698
#define ENC_PSY_LONGTEXT 65,2747
static const int pi_stereo_values[pi_stereo_values68,2818
static const char *const ppsz_stereo_descriptions[ppsz_stereo_descriptions69,2869
vlc_module_begin 73,2980
struct encoder_sys_t99,4042
    int16_t p_buffer[p_buffer104,4104
    int i_nb_samples;105,4147
    mtime_t i_pts;106,4169
    twolame_options *p_twolame;p_twolame111,4233
    unsigned char p_out_buffer[p_out_buffer112,4265
static const uint16_t mpa_bitrate_tab[mpa_bitrate_tab118,4533
static const uint16_t mpa_freq_tab[mpa_freq_tab124,4726
static int OpenEncoder(127,4813
static void Bufferize(252,8785
static block_t *Encode(Encode274,9417
static void CloseEncoder(354,12157

codec/avcodec/va.h,528
#define VLC_AVCODEC_VA_H 27,1228
typedef struct vlc_va_t vlc_va_t;29,1256
typedef struct vlc_va_sys_t vlc_va_sys_t;30,1290
struct vlc_va_t 32,1333
    vlc_va_sys_t *sys;sys35,1375
    module_t *module;module36,1398
    const char *description;description37,1420
    void (*setup)setup41,1483
    int  (*get)get43,1543
    void (*release)release44,1604
    int  (*extract)extract45,1636
static inline int vlc_va_Get(81,3010
static inline void vlc_va_Release(96,3479
static inline int vlc_va_Extract(111,4044

access/rtp/srtp.c,1330
#define debug(48,1222
typedef struct srtp_proto_t50,1252
    gcry_cipher_hd_t cipher;52,1282
    gcry_md_hd_t     mac;53,1311
    uint64_t         window;54,1337
    uint32_t         salt[salt55,1366
} srtp_proto_t;56,1396
struct srtp_session_t58,1413
    srtp_proto_t rtp;60,1437
    srtp_proto_t rtcp;61,1459
    unsigned flags;62,1482
    unsigned kdr;63,1502
    uint32_t rtcp_index;64,1520
    uint32_t rtp_roc;65,1545
    uint16_t rtp_seq;66,1567
    uint16_t rtp_rcc;67,1589
    uint8_t  tag_len;68,1611
    SRTP_CRYPT,73,1644
    SRTP_AUTH,74,1660
    SRTP_SALT,75,1675
    SRTCP_CRYPT,76,1690
    SRTCP_AUTH,77,1707
    SRTCP_SALT78,1723
static inline unsigned rcc_mode 82,1743
static void proto_destroy 88,1839
void srtp_destroy 98,2024
static int proto_create 108,2166
srtp_create 134,2980
do_ctr_crypt 206,4370
do_derive 236,5072
srtp_setkey 266,5958
static int hexdigit 316,7484
static ssize_t hexstring 327,7719
srtp_setkeystring 352,8368
void srtp_setrcc_rate 384,9773
rtp_crypt 393,9948
srtp_compute_roc 410,10457
static inline uint16_t rtp_seq 431,10913
rtp_digest 439,11081
static int srtp_crypt 461,11702
srtp_send 540,13903
srtp_recv 623,15994
rtcp_crypt 691,17786
rtcp_digest 700,18072
static int srtcp_crypt 719,18557
srtcp_send 781,20364
srtcp_recv 821,21513

misc/stats.c,570
#define kBufferSize 34,1428
#define VLC_MODULE_LICENSE 36,1455
static picture_t *DecodeBlock(DecodeBlock43,1618
static int OpenDecoder 80,2640
static block_t *EncodeVideo(EncodeVideo103,3219
static block_t *EncodeAudio(EncodeAudio118,3631
static int OpenEncoder 125,3755
struct demux_sys_t139,4036
    es_format_t     fmt;141,4057
    es_out_id_t     *p_es;p_es142,4082
    date_t          pts;144,4110
static int Demux(147,4139
static int DemuxControl(167,4661
static int OpenDemux 174,4882
static void CloseDemux 206,5658
vlc_module_begin 215,5828

access/archive/archive.h,69
#define ARCHIVE_READ_SIZE 38,1415
#define ARCHIVE_SEP_CHAR 39,1446

misc/addons/vorepository.c,449
#define ADDONS_MODULE_SHORTCUT 51,1994
#define ADDONS_REPO_SCHEMEHOST 52,2037
vlc_module_begin 57,2281
struct addons_finder_sys_t75,2969
    char *psz_tempfile;psz_tempfile77,2998
static int ParseManifest(80,3026
static int ParseCategoriesInfo(200,6856
static int Find(321,11056
static int Retrieve(348,11693
static int FindDesignated(455,14816
static int Open(487,15695
static void Close(507,16257
static int OpenDesignated(517,16500

demux/adaptive/playlist/AbstractPlaylist.cpp,788
AbstractPlaylist::AbstractPlaylist 36,1306
AbstractPlaylist::~AbstractPlaylist(50,1672
const std::vector<BasePeriod *>& AbstractPlaylist::getPeriods(56,1805
void AbstractPlaylist::addBaseUrl(61,1894
void AbstractPlaylist::setPlaylistUrl(66,1986
void AbstractPlaylist::addPeriod(71,2076
void AbstractPlaylist::setType(76,2165
void AbstractPlaylist::setMinBuffering(81,2245
mtime_t AbstractPlaylist::getMinBuffering(86,2329
mtime_t AbstractPlaylist::getMaxBuffering(91,2434
Url AbstractPlaylist::getUrlSegment(97,2597
vlc_object_t * AbstractPlaylist::getVLCObject(110,2834
BasePeriod* AbstractPlaylist::getFirstPeriod(115,2914
BasePeriod* AbstractPlaylist::getNextPeriod(125,3110
void AbstractPlaylist::mergeWith(138,3413
void AbstractPlaylist::pruneByPlaybackTime(146,3780

demux/dash/mpd/Period.h,56
#define PERIOD_H_25,1161
        class Period 38,1420

video_output/win32/wgl.c,317
#define HW_GPU_AFFINITY_TEXT 42,1586
vlc_module_begin(44,1635
static void DestroyGPUAffinityDC(115,4042
static int Open(149,5085
static void Close(220,7194
static void Swap(235,7490
static void *OurGetProcAddress(OurGetProcAddress241,7594
static int MakeCurrent(247,7718
static void ReleaseCurrent(254,7907

access/rtp/srtp.h,733
# define LIBVLC_SRTP_H 21,917
typedef struct srtp_session_t srtp_session_t;23,943
    SRTP_UNENCRYPTED=27,997
    SRTP_UNENCRYPTED=0x1,x127,997
    SRTCP_UNENCRYPTED=28,1057
    SRTCP_UNENCRYPTED=0x2,x228,1057
    SRTP_UNAUTHENTICATED=29,1118
    SRTP_UNAUTHENTICATED=0x4,x429,1118
    SRTP_RCC_MODE1=31,1185
    SRTP_RCC_MODE1=0x10,x1031,1185
    SRTP_RCC_MODE2=32,1252
    SRTP_RCC_MODE2=0x20,x2032,1252
    SRTP_RCC_MODE3=33,1319
    SRTP_RCC_MODE3=0x30,x3033,1319
    SRTP_FLAGS_MASK=35,1398
    SRTP_FLAGS_MASK=0x37 x3735,1398
    SRTP_ENCR_NULL=41,1528
    SRTP_ENCR_AES_CM=42,1570
    SRTP_ENCR_AES_F8=43,1615
    SRTP_AUTH_NULL=49,1743
    SRTP_AUTH_HMAC_SHA1=50,1797
    SRTP_PRF_AES_CM=56,1906

video_output/android/android_window.c,3089
#define USE_ANWP45,1744
#define CHROMA_TEXT 46,1761
#define CHROMA_LONGTEXT 47,1799
#define CFG_PREFIX 50,1897
vlc_module_begin(55,2081
#define THREAD_NAME 70,2643
typedef struct android_window android_window;84,3101
struct android_window85,3147
    video_format_t fmt;87,3171
    int i_android_hal;88,3195
    unsigned int i_angle;89,3218
    unsigned int i_pic_count;90,3244
    unsigned int i_min_undequeued;91,3274
    bool b_use_priv;92,3309
    bool b_opaque;93,3330
    enum AWindow_ID id;95,3350
    ANativeWindow *p_handle;p_handle96,3374
    native_window_priv *p_handle_priv;p_handle_priv97,3403
typedef struct buffer_bounds buffer_bounds;100,3446
struct buffer_bounds101,3490
    uint8_t *p_pixels;p_pixels103,3513
    ARect bounds;104,3536
struct vout_display_sys_t107,3558
    picture_pool_t *pool;pool109,3586
    int i_display_width;111,3613
    int i_display_height;112,3638
    AWindowHandler *p_awh;p_awh114,3665
    native_window_api_t *anw;anw115,3692
    native_window_priv_api_t *anwp;anwp116,3722
    android_window *p_window;p_window118,3759
    android_window *p_sub_window;p_sub_window119,3789
    bool b_sub_invalid;121,3824
    filter_t *p_spu_blend;p_spu_blend122,3848
    picture_t *p_sub_pic;p_sub_pic123,3875
    buffer_bounds *p_sub_buffer_bounds;p_sub_buffer_bounds124,3901
    bool b_sub_pic_locked;125,3941
    int64_t i_sub_last_order;126,3968
    ARect sub_last_region;127,3998
    bool b_has_subpictures;129,4026
    uint8_t hash[hash131,4055
#define PRIV_WINDOW_FORMAT_YV12 134,4081
static inline int ChromaToAndroidHal(136,4125
static int UpdateWindowSize(153,4581
static void AndroidOpaquePicture_DetachVout(181,5472
static picture_t *PictureAlloc(PictureAlloc199,6014
static void FixSubtitleFormat(230,6735
#define ALIGN_16_PIXELS(295,8742
static void SetupPictureYV12(296,8800
static void AndroidWindow_DisconnectSurface(330,10099
static int AndroidWindow_ConnectSurface(344,10589
static android_window *AndroidWindow_New(AndroidWindow_New357,11005
static void AndroidWindow_Destroy(414,12609
static int AndroidWindow_UpdateCrop(421,12827
static int AndroidWindow_SetupANWP(434,13300
static int AndroidWindow_ConfigureJavaSurface(488,15169
static int AndroidWindow_SetupANW(513,16314
static int AndroidWindow_Setup(529,16920
static void AndroidWindow_UnlockPicture(565,18171
static int AndroidWindow_LockPicture(583,18742
static void SetRGBMask(622,20125
static void SendEventDisplaySize(640,20586
static int Open(653,21106
static void Close(758,24242
static void UnlockPicture(794,25194
static int PoolLockPicture(809,25620
static void PoolUnlockPicture(822,25930
static picture_pool_t *PoolAlloc(PoolAlloc827,26016
static void SubtitleRegionToBounds(872,27368
static void SubtitleGetDirtyBounds(902,28569
static void SubpicturePrepare(958,30664
static picture_pool_t *Pool(Pool994,31976
static void Prepare(1003,32196
static void Display(1052,33877
static void CopySourceAspect(1069,34375
static int Control(1076,34575
static void Manage(1139,36567

video_filter/filter_picture.h,668
#define CASE_PLANAR_YUV_SQUARE 25,1256
#define CASE_PLANAR_YUV_NONSQUARE 35,1563
#define CASE_PLANAR_YUV10 39,1672
#define CASE_PLANAR_YUV9 45,1890
#define CASE_PLANAR_YUV 51,2107
#define CASE_PACKED_YUV_422 55,2246
static inline int GetPackedYuvOffsets(60,2388
static inline int GetPackedRgbIndexes(94,3280
static inline uint8_t vlc_uint8(113,3975
static inline void yuv_to_rgb(122,4112
#   define SCALEBITS 126,4285
#   define ONE_HALF 127,4309
#   define FIX(128,4353
#undef FIX142,4881
#undef ONE_HALF143,4892
#undef SCALEBITS144,4908
static inline void rgb_to_yuv(147,4928
static inline picture_t *CopyInfoAndRelease(CopyInfoAndRelease158,5413

video_chroma/dxa9.c,255
vlc_module_begin 44,1780
struct picture_sys_t53,2010
    LPDIRECT3DSURFACE9 surface;55,2033
static bool GetLock(58,2069
static void DXA9_YV12(73,2479
static void DXA9_NV12(136,4499
VIDEO_FILTER_WRAPPER 163,5311
static void CloseConverter(197,6328

access/sftp.c,691
#define PORT_TEXT 53,1930
#define PORT_LONGTEXT 54,1964
#define USER_TEXT 55,2030
#define USER_LONGTEXT 56,2063
#define PASS_TEXT 58,2185
#define PASS_LONGTEXT 59,2218
vlc_module_begin 62,2350
struct access_sys_t86,3269
    int i_socket;88,3291
    LIBSSH2_SESSION* ssh_session;89,3309
    LIBSSH2_SFTP* sftp_session;90,3343
    LIBSSH2_SFTP_HANDLE* file;91,3375
    uint64_t filesize;92,3406
    char *psz_base_url;psz_base_url93,3429
static int AuthPublicKey(97,3458
static int Open(131,4468
static void Close(386,12449
static ssize_t Read(405,12946
static int Seek(420,13233
static int Control(429,13402
static int DirRead 480,14650
static int DirControl(549,16700

demux/smooth/playlist/Manifest.cpp,118
Manifest::Manifest 31,1148
Manifest::~Manifest(39,1340
bool Manifest::isLive(44,1368
void Manifest::debug(49,1422

control/lirc.c,362
#define VLC_MODULE_LICENSE 35,1408
#define LIRC_TEXT 47,1631
#define LIRC_LONGTEXT 48,1690
vlc_module_begin 58,2092
struct intf_sys_t73,2680
    struct lirc_config *config;config75,2700
    vlc_thread_t thread;76,2732
    int i_fd;77,2757
static int Open(90,3213
static void Close(138,4532
static void *Run(Run155,5024
static void Process(182,5538

access/dvb/scan.c,7326
#define PSI_PAT_PID 54,1890
#define SI_NIT_PID 55,1915
#define SI_SDT_PID 56,1940
#define NIT_CURRENT_NETWORK_TABLE_ID 58,1966
#define NIT_OTHER_NETWORK_TABLE_ID 59,2011
#define SDT_CURRENT_TS_TABLE_ID 60,2056
#define SDT_OTHER_TS_TABLE_ID 61,2101
#define NETWORK_ID_RESERVED 63,2147
    SERVICE_TYPE_RESERVED 67,2210
    SERVICE_TYPE_RESERVED                        = 0x00,x0067,2210
    SERVICE_TYPE_DIGITAL_TELEVISION 68,2267
    SERVICE_TYPE_DIGITAL_TELEVISION              = 0x01,x0168,2267
    SERVICE_TYPE_DIGITAL_RADIO 69,2324
    SERVICE_TYPE_DIGITAL_RADIO                   = 0x02,x0269,2324
    SERVICE_TYPE_DIGITAL_MPEG2_HD 70,2381
    SERVICE_TYPE_DIGITAL_MPEG2_HD                = 0x11,x1170,2381
    SERVICE_TYPE_DIGITAL_TELEVISION_AC_SD 71,2438
    SERVICE_TYPE_DIGITAL_TELEVISION_AC_SD        = 0x16,x1671,2438
    SERVICE_TYPE_DIGITAL_TELEVISION_AC_HD 72,2495
    SERVICE_TYPE_DIGITAL_TELEVISION_AC_HD        = 0x19,x1972,2495
    SERVICE_TYPE_DIGITAL_RADIO_AC 73,2552
    SERVICE_TYPE_DIGITAL_RADIO_AC                = 0x0A,x0A73,2552
} scan_service_type_t;74,2609
typedef struct scan_multiplex_t scan_multiplex_t;76,2633
struct scan_service_t78,2684
    const scan_multiplex_t *p_mplex;p_mplex80,2708
    const void * stickyref;81,2771
    uint16_t i_original_network_id;83,2844
    uint16_t i_program;84,2880
    scan_service_type_t type;86,2943
    char *psz_name;psz_name88,2974
    char *psz_provider;psz_provider89,3025
    uint16_t i_channel;90,3072
    bool b_crypted;91,3125
    char *psz_original_network_name;psz_original_network_name93,3184
struct scan_multiplex_t97,3226
    scan_tuner_config_t cfg;99,3252
    uint16_t         i_network_id;100,3281
    uint16_t         i_ts_id;101,3316
    char            *psz_network_name;psz_network_name102,3346
    size_t           i_services;103,3385
    scan_service_t **pp_services;pp_services104,3418
    int i_snr;105,3452
    bool b_scanned;106,3467
    uint8_t i_nit_version;108,3488
    uint8_t i_sdt_version;109,3515
    scan_modulation_t modulation;114,3563
    unsigned i_symbolrate_index;115,3597
    unsigned i_index;116,3630
} scan_enumeration_t;117,3652
struct scan_t119,3675
    vlc_object_t *p_obj;p_obj121,3691
    scan_frontend_tune_cb pf_tune;122,3716
    scan_demux_filter_cb pf_filter;123,3751
    scan_frontend_stats_cb pf_stats;124,3787
    scan_demux_read_cb   pf_read;125,3824
    scan_service_notify_cb pf_notify_service;126,3858
    void *p_cbdata;p_cbdata127,3904
    vlc_dialog_id *p_dialog_id;p_dialog_id129,3925
    scan_parameter_t parameter;131,3958
    int64_t i_time_start;132,3990
    size_t i_multiplex_toscan;134,4017
    size_t             i_multiplex;136,4049
    scan_multiplex_t **pp_multiplex;pp_multiplex137,4085
    bool               b_multiplexes_from_nit;138,4122
    scan_list_entry_t *p_scanlist;p_scanlist140,4170
    size_t             i_scanlist;141,4205
    const scan_list_entry_t *p_current;p_current142,4240
    scan_enumeration_t spectrum;144,4281
    vlc_object_t *p_obj;p_obj149,4335
    scan_tuner_config_t cfg;151,4361
    int i_snr;152,4390
        dvbpsi_pat_t *p_pat;p_pat156,4423
        dvbpsi_sdt_t *p_sdt;p_sdt157,4452
        dvbpsi_nit_t *p_nit;p_nit158,4481
    } local;159,4510
        dvbpsi_sdt_t **pp_sdt;pp_sdt163,4541
        size_t i_sdt;164,4572
        dvbpsi_nit_t **pp_nit;pp_nit165,4594
        size_t i_nit;166,4625
    } others;167,4647
    scan_type_t type;169,4662
    bool b_use_nit;170,4684
    uint16_t i_nit_pid;171,4704
    dvbpsi_t *p_pathandle;p_pathandle173,4729
    dvbpsi_t *p_sdthandle;p_sdthandle174,4756
    dvbpsi_t *p_nithandle;p_nithandle175,4783
} scan_session_t;176,4810
static void scan_tuner_config_Init(184,5173
static bool scan_tuner_config_StandardValidate(200,5801
static scan_service_t *scan_service_New(scan_service_New212,6152
static void scan_service_Delete(233,6681
static uint32_t decode_BCD(241,6870
static int scan_service_type_Supported(252,7095
static scan_multiplex_t *scan_multiplex_New(scan_multiplex_New269,7572
static void scan_multiplex_Clean(288,8178
static void scan_multiplex_Delete(296,8424
static bool scan_multiplex_AddService(302,8550
static scan_service_t * scan_multiplex_FindService(318,9159
void scan_parameter_Init(328,9459
void scan_parameter_Clean(333,9556
static void scan_parameter_Copy(338,9652
static void scan_Prepare(346,9909
static void scan_Debug_Parameters(368,10839
scan_t *scan_New(scan_New396,11979
void scan_Destroy(440,13367
static void scan_SetMultiplexScanStatus(458,13817
static bool scan_AddMultiplex(467,14079
static scan_multiplex_t * scan_FindMultiplex(481,14581
static scan_multiplex_t *scan_FindOrCreateMultiplex(scan_FindOrCreateMultiplex491,14858
static size_t scan_CountServices(510,15457
static int Scan_Next_DVB_SpectrumExhaustive(518,15700
static int Scan_Next_DVBC(541,16695
        enum { num_symbols 571,17828
        enum { num_symbols = (sizeof(571,17828
        enum { num_symbols = (sizeof(symbolrates)571,17828
        enum { num_symbols = (sizeof(symbolrates)/sizeof(sizeof571,17828
        enum { num_symbols = (sizeof(symbolrates)/sizeof(*symbolrates)symbolrates571,17828
    enum { num_frequencies 613,19791
    enum { num_frequencies = (sizeof(613,19791
    enum { num_frequencies = (sizeof(frequencies)613,19791
    enum { num_frequencies = (sizeof(frequencies)/sizeof(sizeof613,19791
    enum { num_frequencies = (sizeof(frequencies)/sizeof(*frequencies)frequencies613,19791
static int Scan_Next_DVBT(630,20336
        const char *psz_name;psz_name645,21046
        int i_min;646,21076
        int i_max;647,21095
static int Scan_GetNextSpectrumTunerConfig(712,23129
static int Scan_GetNextTunerConfig(729,23644
static int scan_Next(796,26070
bool scan_IsCancelled(844,27864
int scan_Run(851,28043
static void scan_NotifyService(908,29774
#define scan_NotifyNewService(917,30209
#define scan_NotifyUpdatedService(918,30281
static bool GetOtherNetworkNIT(920,30357
static bool GetOtherTsSDT(935,30757
static void ParsePAT(950,31136
static void PATCallBack(993,32639
static void ParseSDT(1025,33573
static void SDTCallBack(1084,35695
static scan_coderate_t ConvertDelDrInnerFec(1162,38415
static scan_coderate_t ConvertDelDrCodeRate(1181,39007
static void ParseNIT(1189,39178
static void NITCallBack(1437,50779
static void PSINewTableCallBack(1516,53521
static scan_session_t *scan_session_New(scan_session_New1532,54305
static void scan_session_Delete(1556,55125
static void scan_session_Destroy(1590,56099
static int ScanServiceCmp(1620,57108
static block_t *BlockString(BlockString1639,57602
void scan_set_NotifyCB(1647,57774
const char * scan_service_GetName(1652,57883
const char * scan_service_GetProvider(1657,57973
uint16_t scan_service_GetProgram(1662,58071
const char * scan_service_GetNetworkName(1667,58161
char * scan_service_GetUri(1675,58330
block_t *scan_GetM3U(scan_GetM3U1706,59702
#define dvbpsi_packet_push(1789,62907
static bool scan_session_Push(1791,62976
static unsigned scan_session_GetTablesTimeout(1861,65413
const char *scan_value_modulation(scan_value_modulation1883,65885
const char *scan_value_coderate(scan_value_coderate1906,66837

video_output/android/android_window.h,543
#define ANDROID_WINDOW_H_28,1339
struct picture_sys_t39,1526
    vout_display_sys_t *p_vd_sys;p_vd_sys41,1549
            vlc_mutex_t lock;45,1613
            decoder_t *p_dec;p_dec46,1643
            int i_index;47,1673
            void (*pf_release)pf_release48,1698
        } hw;50,1816
            void *p_handle;p_handle52,1847
            ANativeWindow_Buffer buf;53,1875
        } sw;54,1913
    } priv;55,1927
    bool b_locked;56,1939
AndroidOpaquePicture_DetachDecoder(60,1981
AndroidOpaquePicture_Release(85,2871

demux/adaptive/ID.cpp,133
ID::ID(29,1078
ID::ID(34,1128
bool ID::operator==(ID::operator==42,1263
bool ID::operator<(47,1355
std::string ID::str(52,1441

access/dvb/scan.h,4537
    SCAN_NONE 26,1194
    SCAN_DVB_T,27,1213
    SCAN_DVB_S,28,1229
    SCAN_DVB_C,29,1245
} scan_type_t;30,1261
    SCAN_DELIVERY_UNKNOWN 34,1292
    SCAN_DELIVERY_DVB_T,35,1323
    SCAN_DELIVERY_DVB_T2,36,1348
    SCAN_DELIVERY_DVB_S,37,1374
    SCAN_DELIVERY_DVB_S2,38,1399
    SCAN_DELIVERY_DVB_C,39,1425
    SCAN_DELIVERY_ISDB_T,40,1450
} scan_delivery_t;41,1476
    SCAN_MODULATION_AUTO 45,1511
    SCAN_MODULATION_AUTO       = 0x00,x0045,1511
    SCAN_MODULATION_QAM_16 46,1550
    SCAN_MODULATION_QAM_16     = 0x01,x0146,1550
    SCAN_MODULATION_QAM_32 47,1589
    SCAN_MODULATION_QAM_32     = 0x02,x0247,1589
    SCAN_MODULATION_QAM_64 48,1628
    SCAN_MODULATION_QAM_64     = 0x03,x0348,1628
    SCAN_MODULATION_QAM_128 49,1667
    SCAN_MODULATION_QAM_128    = 0x04,x0449,1667
    SCAN_MODULATION_QAM_256 50,1706
    SCAN_MODULATION_QAM_256    = 0x05,x0550,1706
    SCAN_MODULATION_QAM_4NR,51,1745
    SCAN_MODULATION_QAM_AUTO,52,1774
    SCAN_MODULATION_PSK_8,53,1804
    SCAN_MODULATION_QPSK,54,1831
    SCAN_MODULATION_DQPSK,55,1857
    SCAN_MODULATION_APSK_16,56,1884
    SCAN_MODULATION_APSK_32,57,1913
    SCAN_MODULATION_VSB_8,58,1942
    SCAN_MODULATION_VSB_16,59,1969
} scan_modulation_t;60,1997
#define make_tuple(62,2019
    SCAN_CODERATE_AUTO 65,2072
    SCAN_CODERATE_NONE 66,2101
    SCAN_CODERATE_1_2 67,2129
    SCAN_CODERATE_1_2  = make_tuple(67,2129
    SCAN_CODERATE_2_3 68,2171
    SCAN_CODERATE_2_3  = make_tuple(68,2171
    SCAN_CODERATE_3_4 69,2213
    SCAN_CODERATE_3_4  = make_tuple(69,2213
    SCAN_CODERATE_3_5 70,2255
    SCAN_CODERATE_3_5  = make_tuple(70,2255
    SCAN_CODERATE_4_5 71,2297
    SCAN_CODERATE_4_5  = make_tuple(71,2297
    SCAN_CODERATE_5_6 72,2339
    SCAN_CODERATE_5_6  = make_tuple(72,2339
    SCAN_CODERATE_7_8 73,2381
    SCAN_CODERATE_7_8  = make_tuple(73,2381
    SCAN_CODERATE_8_9 74,2423
    SCAN_CODERATE_8_9  = make_tuple(74,2423
    SCAN_CODERATE_9_10 75,2465
    SCAN_CODERATE_9_10 = make_tuple(75,2465
} scan_coderate_t;76,2508
    SCAN_POLARIZATION_NONE 80,2543
    SCAN_POLARIZATION_HORIZONTAL 81,2581
    SCAN_POLARIZATION_CIRC_LEFT 82,2621
    SCAN_POLARIZATION_CIRC_RIGHT 83,2661
    SCAN_POLARIZATION_VERTICAL 84,2701
} scan_polarization_t;85,2741
    SCAN_GUARD_INTERVAL_AUTO 89,2780
    SCAN_GUARD_INTERVAL_1_4 90,2816
    SCAN_GUARD_INTERVAL_1_4    = make_tuple(90,2816
    SCAN_GUARD_INTERVAL_1_8 91,2866
    SCAN_GUARD_INTERVAL_1_8    = make_tuple(91,2866
    SCAN_GUARD_INTERVAL_1_16 92,2916
    SCAN_GUARD_INTERVAL_1_16   = make_tuple(92,2916
    SCAN_GUARD_INTERVAL_1_32 93,2967
    SCAN_GUARD_INTERVAL_1_32   = make_tuple(93,2967
    SCAN_GUARD_INTERVAL_1_128 94,3018
    SCAN_GUARD_INTERVAL_1_128  = make_tuple(94,3018
    SCAN_GUARD_INTERVAL_19_128 95,3070
    SCAN_GUARD_INTERVAL_19_128 = make_tuple(95,3070
    SCAN_GUARD_INTERVAL_19_256 96,3123
    SCAN_GUARD_INTERVAL_19_256 = make_tuple(96,3123
} scan_guard_t;97,3176
    unsigned i_frequency;101,3210
        unsigned i_bandwidth;104,3252
        unsigned i_symbolrate;105,3282
    scan_modulation_t modulation;108,3321
    scan_coderate_t coderate_lp;109,3355
    scan_coderate_t coderate_hp;110,3388
    scan_coderate_t inner_fec;111,3421
    scan_polarization_t polarization;112,3452
    scan_type_t type;114,3491
    scan_delivery_t delivery;115,3513
} scan_tuner_config_t;117,3544
typedef struct scan_parameter_t119,3568
    scan_type_t type;121,3602
    bool b_exhaustive;122,3624
    bool b_use_nit;123,3647
    bool b_free_only;124,3667
    bool b_modulation_set;126,3690
    unsigned i_symbolrate;127,3717
        unsigned i_min;131,3762
        unsigned i_max;132,3786
        unsigned i_step;133,3810
    } frequency;134,3835
        unsigned i_min;138,3870
        unsigned i_max;139,3894
    } bandwidth;140,3918
    char *psz_scanlist_file;psz_scanlist_file142,3971
        FORMAT_DVBv3,145,4015
        FORMAT_DVBv5,146,4037
    } scanlist_format;147,4059
} scan_parameter_t;149,4083
#define SCAN_READ_BUFFER_COUNT 151,4104
typedef struct scan_t scan_t;153,4139
typedef int (*scan_frontend_tune_cb)scan_frontend_tune_cb154,4169
typedef int (*scan_frontend_stats_cb)scan_frontend_stats_cb155,4256
typedef int (*scan_demux_filter_cb)scan_demux_filter_cb156,4322
typedef int (*scan_demux_read_cb)scan_demux_read_cb157,4395
typedef struct scan_service_t scan_service_t;159,4490
typedef const void * (*scan_service_notify_cb)scan_service_notify_cb160,4536

mux/mpeg/tables.c,273
block_t *WritePSISection(WritePSISection45,1512
void BuildPAT(80,2337
static uint32_t GetDescriptorLength24b(109,3378
static void GetPMTmpeg4(120,3632
static void UpdateServiceType(254,9328
static inline size_t Write_AnnexA_String(323,11000
void BuildPMT(353,11758

access/dvb/linux_dvb.c,1348
#define DMX 50,1784
#define FRONTEND 51,1830
#define DVR 52,1879
struct frontend_t57,1944
    fe_status_t i_last_status;59,1964
    struct dvb_frontend_info info;60,1995
#define FRONTEND_LOCK_TIMEOUT 63,2034
int FrontendOpen(75,2632
void FrontendClose(198,6699
int FrontendSet(213,7133
void FrontendPoll(265,8494
#define IF_UP(286,9111
#undef IF_UP341,11232
int FrontendGetStatistic(345,11254
void FrontendGetStatus(363,11887
static int ScanParametersDvbS(372,12249
static int ScanParametersDvbC(398,13097
static int ScanParametersDvbT(420,13872
int FrontendFillScanParameter(438,14449
static int FrontendInfo(456,15295
static fe_spectral_inversion_t DecodeInversion(589,21108
static fe_sec_voltage_t DecodeVoltage(613,21931
static fe_sec_tone_mode_t DecodeTone(624,22230
struct diseqc_cmd_t634,22476
    struct dvb_diseqc_master_cmd cmd;636,22498
    uint32_t wait;637,22536
static int DoDiseqc(640,22559
static int FrontendSetQPSK(742,25736
static int FrontendSetQAM(847,29114
static fe_bandwidth_t DecodeBandwidth(894,30584
static fe_transmit_mode_t DecodeTransmission(915,31271
static fe_hierarchy_t DecodeHierarchy(935,31976
static int FrontendSetOFDM(957,32705
static int FrontendSetATSC(997,34037
int DMXSetFilter(1033,35014
int DMXUnsetFilter(1169,40331
int DVROpen(1191,40878
void DVRClose(1226,41977

codec/arib/aribsub.c,799
#define IGNORE_RUBY_TEXT 46,1683
#define IGNORE_RUBY_LONGTEXT 47,1736
#define USE_CORETEXT_TEXT 48,1810
#define USE_CORETEXT_LONGTEXT 49,1865
#   define ARIBSUB_CFG_PREFIX 52,1962
    set_description(53,2003
struct decoder_sys_t69,2645
    bool              b_a_profile;71,2668
    bool              b_ignore_ruby;72,2703
    bool              b_use_coretext;73,2740
    bool              b_ignore_position_adjustment;74,2778
    arib_instance_t  *p_arib_instance;p_arib_instance76,2831
    char             *psz_arib_base_dir;psz_arib_base_dir77,2870
static int Open(95,3701
static void Close(147,5326
static subpicture_t *Decode(Decode164,5868
static void messages_callback_handler(198,6717
static char* get_arib_base_dir(204,6893
static subpicture_t *render(render222,7266

codec/avcodec/vaapi.c,708
#define vaCreateSurfaces(54,1752
struct vlc_va_sys_t58,1853
        Display  *p_display_x11;p_display_x1161,1902
        int       drm_fd;64,1968
    struct vaapi_context hw_ctx;66,2001
    vlc_mutex_t  lock;69,2045
    int          width;70,2068
    int          height;71,2092
    VAImageFormat format;72,2117
    copy_cache_t image_cache;74,2144
    bool         do_derive;76,2175
    uint8_t      count;77,2203
    uint32_t     available;78,2227
    VASurfaceID  surfaces[surfaces79,2255
static int Extract(82,2290
static int Get(147,4384
static void Release(170,4886
static void Delete(187,5371
static int FindFormat(210,5996
static int Create(279,7831
vlc_module_begin 484,13799

video_output/yuv.c,562
#define YUV_FILE_TEXT 41,1675
#define YUV_FILE_LONGTEXT 42,1728
#define CHROMA_TEXT 44,1811
#define CHROMA_LONGTEXT 45,1849
#define YUV4MPEG2_TEXT 48,1929
#define YUV4MPEG2_LONGTEXT 49,1981
#define CFG_PREFIX 52,2120
vlc_module_begin(57,2218
struct vout_display_sys_t 86,3379
    FILE *f;f87,3407
    bool  is_first;88,3420
    bool  is_yuv4mpeg2;89,3440
    picture_pool_t *pool;pool91,3465
static int Open(95,3501
static void Close(175,5656
static picture_pool_t *Pool(Pool189,6049
static void Display(197,6264
static int Control(279,8590

mux/mpeg/tables.h,453
#define VLC_MPEG_TABLES_H_21,1077
#define MAX_SDT_DESC 23,1105
    ts_stream_t ts;27,1147
    int i_netid;28,1167
        char *psz_provider;psz_provider31,1201
        char *psz_service_name;psz_service_name32,1252
    } desc[desc33,1306
} sdt_psi_t;34,1332
    const pes_stream_t *pes;pes46,1699
    const ts_stream_t  *ts;ts47,1728
    const es_format_t  *fmt;fmt48,1756
    int i_mapped_prog;49,1785
} pes_mapped_stream_t;50,1808

codec/rtpvideo.c,65
vlc_module_begin 44,1956
static block_t *Encode(Encode66,2578

services_discovery/mtp.c,655
#define VLC_MODULE_LICENSE 27,1139
VLC_SD_PROBE_HELPER(40,1548
struct services_discovery_sys_t70,2587
    int i_tracks_num;72,2621
    input_item_t **pp_items;pp_items73,2643
    int i_count;74,2672
    char *psz_name;psz_name75,2689
    uint32_t i_bus;76,2709
    uint8_t i_dev;77,2729
    uint16_t i_product_id;78,2748
    vlc_thread_t thread;79,2775
static vlc_mutex_t mtp_lock 82,2804
static bool b_mtp_initialized 83,2852
static int Open(88,3088
static void Close(117,3890
static void *Run(Run130,4326
static int AddDevice(179,5780
static void AddTrack(231,7679
static void CloseDevice(273,9160
static int CountTracks(291,9606

access/archive/access.c,1058
typedef struct callback_data_t30,1195
    char *psz_uri;psz_uri32,1228
    access_t *p_access;p_access33,1247
} callback_data_t;34,1271
struct access_sys_t36,1291
    struct archive *p_archive;p_archive38,1313
    bool b_source_canseek;39,1344
    uint8_t buffer[buffer40,1371
    callback_data_t *p_callback_data;p_callback_data42,1411
    unsigned int i_callback_data;43,1449
    struct archive_entry *p_entry;p_entry45,1484
    stream_t *p_stream;p_stream46,1519
    bool b_seekable;47,1543
static ssize_t Read(50,1605
static int Seek(64,1875
static int FindVolumes(75,2172
        char const * const psz_match;84,2449
        char const * const psz_format;85,2487
        uint16_t i_min;86,2526
        uint16_t i_max;87,2550
static ssize_t ReadCallback(146,4436
static ssize_t SkipCallback(156,4788
static ssize_t SeekCallback(185,5652
static int SwitchCallback(215,6383
static int OpenCallback(228,6937
static int CloseCallback(247,7593
static int Control(262,7942
int AccessOpen(304,8882
void AccessClose(421,12798

codec/omxil/OMX_Video.h,26458
#define OMX_Video_h30,1337
typedef enum OMX_VIDEO_CODINGTYPE 61,2239
    OMX_VIDEO_CodingUnused,62,2275
    OMX_VIDEO_CodingAutoDetect,63,2340
    OMX_VIDEO_CodingMPEG2,64,2409
    OMX_VIDEO_CodingH263,65,2460
    OMX_VIDEO_CodingMPEG4,66,2506
    OMX_VIDEO_CodingWMV,67,2553
    OMX_VIDEO_CodingRV,68,2629
    OMX_VIDEO_CodingAVC,69,2696
    OMX_VIDEO_CodingMJPEG,70,2746
    OMX_VIDEO_CodingKhronosExtensions 71,2798
    OMX_VIDEO_CodingKhronosExtensions = 0x6F000000,x6F00000071,2798
    OMX_VIDEO_CodingVendorStartUnused 72,2919
    OMX_VIDEO_CodingVendorStartUnused = 0x7F000000,x7F00000072,2919
    OMX_VIDEO_CodingMax 73,3029
    OMX_VIDEO_CodingMax = 0x7FFFFFFFx7FFFFFFF73,3029
} OMX_VIDEO_CODINGTYPE;74,3066
typedef struct OMX_VIDEO_PORTDEFINITIONTYPE 124,5847
    OMX_STRING cMIMEType;125,5893
    OMX_NATIVE_DEVICETYPE pNativeRender;126,5919
    OMX_U32 nFrameWidth;127,5960
    OMX_U32 nFrameHeight;128,5985
    OMX_S32 nStride;129,6011
    OMX_U32 nSliceHeight;130,6032
    OMX_U32 nBitrate;131,6058
    OMX_U32 xFramerate;132,6080
    OMX_BOOL bFlagErrorConcealment;133,6104
    OMX_VIDEO_CODINGTYPE eCompressionFormat;134,6140
    OMX_COLOR_FORMATTYPE eColorFormat;135,6185
    OMX_NATIVE_WINDOWTYPE pNativeWindow;136,6224
} OMX_VIDEO_PORTDEFINITIONTYPE;137,6265
typedef struct OMX_VIDEO_PARAM_PORTFORMATTYPE 155,7082
    OMX_U32 nSize;156,7130
    OMX_VERSIONTYPE nVersion;157,7149
    OMX_U32 nPortIndex;158,7179
    OMX_U32 nIndex;159,7203
    OMX_VIDEO_CODINGTYPE eCompressionFormat;160,7223
    OMX_COLOR_FORMATTYPE eColorFormat;161,7269
    OMX_U32 xFramerate;162,7308
} OMX_VIDEO_PARAM_PORTFORMATTYPE;163,7332
typedef struct OMX_VIDEO_PARAM_QUANTIZATIONTYPE 179,7865
    OMX_U32 nSize;180,7915
    OMX_VERSIONTYPE nVersion;181,7946
    OMX_U32 nPortIndex;182,7976
    OMX_U32 nQpI;183,8000
    OMX_U32 nQpP;184,8018
    OMX_U32 nQpB;185,8036
} OMX_VIDEO_PARAM_QUANTIZATIONTYPE;186,8054
typedef struct OMX_VIDEO_PARAM_VIDEOFASTUPDATETYPE 202,8639
    OMX_U32 nSize;203,8692
    OMX_VERSIONTYPE nVersion;204,8723
    OMX_U32 nPortIndex;205,8754
    OMX_BOOL bEnableVFU;206,8785
    OMX_U32 nFirstGOB;207,8816
    OMX_U32 nFirstMB;208,8867
    OMX_U32 nNumMBs;209,8917
} OMX_VIDEO_PARAM_VIDEOFASTUPDATETYPE;210,8972
typedef enum OMX_VIDEO_CONTROLRATETYPE 216,9072
    OMX_Video_ControlRateDisable,217,9113
    OMX_Video_ControlRateVariable,218,9147
    OMX_Video_ControlRateConstant,219,9182
    OMX_Video_ControlRateVariableSkipFrames,220,9217
    OMX_Video_ControlRateConstantSkipFrames,221,9262
    OMX_Video_ControlRateKhronosExtensions 222,9307
    OMX_Video_ControlRateKhronosExtensions = 0x6F000000,x6F000000222,9307
    OMX_Video_ControlRateVendorStartUnused 223,9433
    OMX_Video_ControlRateVendorStartUnused = 0x7F000000,x7F000000223,9433
    OMX_Video_ControlRateMax 224,9548
    OMX_Video_ControlRateMax = 0x7FFFFFFFx7FFFFFFF224,9548
} OMX_VIDEO_CONTROLRATETYPE;225,9590
typedef struct OMX_VIDEO_PARAM_BITRATETYPE 238,9948
    OMX_U32 nSize;239,9993
    OMX_VERSIONTYPE nVersion;240,10038
    OMX_U32 nPortIndex;241,10083
    OMX_VIDEO_CONTROLRATETYPE eControlRate;242,10128
    OMX_U32 nTargetBitrate;243,10173
} OMX_VIDEO_PARAM_BITRATETYPE;244,10218
typedef enum OMX_VIDEO_MOTIONVECTORTYPE 250,10313
    OMX_Video_MotionVectorPixel,251,10355
    OMX_Video_MotionVectorHalfPel,252,10388
    OMX_Video_MotionVectorQuarterPel,253,10423
    OMX_Video_MotionVectorEighthPel,254,10461
    OMX_Video_MotionVectorKhronosExtensions 255,10498
    OMX_Video_MotionVectorKhronosExtensions = 0x6F000000,x6F000000255,10498
    OMX_Video_MotionVectorVendorStartUnused 256,10625
    OMX_Video_MotionVectorVendorStartUnused = 0x7F000000,x7F000000256,10625
    OMX_Video_MotionVectorMax 257,10741
    OMX_Video_MotionVectorMax = 0x7FFFFFFFx7FFFFFFF257,10741
} OMX_VIDEO_MOTIONVECTORTYPE;258,10784
typedef struct OMX_VIDEO_PARAM_MOTIONVECTORTYPE 275,11363
    OMX_U32 nSize;276,11413
    OMX_VERSIONTYPE nVersion;277,11432
    OMX_U32 nPortIndex;278,11462
    OMX_VIDEO_MOTIONVECTORTYPE eAccuracy;279,11486
    OMX_BOOL bUnrestrictedMVs;280,11528
    OMX_BOOL bFourMV;281,11559
    OMX_S32 sXSearchRange;282,11581
    OMX_S32 sYSearchRange;283,11608
} OMX_VIDEO_PARAM_MOTIONVECTORTYPE;284,11635
typedef enum OMX_VIDEO_INTRAREFRESHTYPE 290,11743
    OMX_VIDEO_IntraRefreshCyclic,291,11785
    OMX_VIDEO_IntraRefreshAdaptive,292,11819
    OMX_VIDEO_IntraRefreshBoth,293,11855
    OMX_VIDEO_IntraRefreshKhronosExtensions 294,11887
    OMX_VIDEO_IntraRefreshKhronosExtensions = 0x6F000000,x6F000000294,11887
    OMX_VIDEO_IntraRefreshVendorStartUnused 295,12014
    OMX_VIDEO_IntraRefreshVendorStartUnused = 0x7F000000,x7F000000295,12014
    OMX_VIDEO_IntraRefreshMax 296,12130
    OMX_VIDEO_IntraRefreshMax = 0x7FFFFFFFx7FFFFFFF296,12130
} OMX_VIDEO_INTRAREFRESHTYPE;297,12173
typedef struct OMX_VIDEO_PARAM_INTRAREFRESHTYPE 315,12823
    OMX_U32 nSize;316,12873
    OMX_VERSIONTYPE nVersion;317,12892
    OMX_U32 nPortIndex;318,12922
    OMX_VIDEO_INTRAREFRESHTYPE eRefreshMode;319,12946
    OMX_U32 nAirMBs;320,12991
    OMX_U32 nAirRef;321,13012
    OMX_U32 nCirMBs;322,13033
} OMX_VIDEO_PARAM_INTRAREFRESHTYPE;323,13054
typedef struct OMX_VIDEO_PARAM_ERRORCORRECTIONTYPE 342,13849
    OMX_U32 nSize;343,13902
    OMX_VERSIONTYPE nVersion;344,13921
    OMX_U32 nPortIndex;345,13951
    OMX_BOOL bEnableHEC;346,13975
    OMX_BOOL bEnableResync;347,14000
    OMX_U32  nResynchMarkerSpacing;348,14028
    OMX_BOOL bEnableDataPartitioning;349,14064
    OMX_BOOL bEnableRVLC;350,14102
} OMX_VIDEO_PARAM_ERRORCORRECTIONTYPE;351,14128
typedef struct OMX_VIDEO_PARAM_VBSMCTYPE 369,14760
    OMX_U32 nSize;370,14803
    OMX_VERSIONTYPE nVersion;371,14823
    OMX_U32 nPortIndex;372,14854
    OMX_BOOL b16x16;373,14885
    OMX_BOOL b16x8;374,14907
    OMX_BOOL b8x16;375,14928
    OMX_BOOL b8x8;376,14948
    OMX_BOOL b8x4;377,14967
    OMX_BOOL b4x8;378,14986
    OMX_BOOL b4x4;379,15005
} OMX_VIDEO_PARAM_VBSMCTYPE;380,15024
typedef enum OMX_VIDEO_H263PROFILETYPE 407,16561
    OMX_VIDEO_H263ProfileBaseline 408,16602
    OMX_VIDEO_H263ProfileBaseline            = 0x01,x01408,16602
    OMX_VIDEO_H263ProfileH320Coding 409,16663
    OMX_VIDEO_H263ProfileH320Coding          = 0x02,x02409,16663
    OMX_VIDEO_H263ProfileBackwardCompatible 410,16726
    OMX_VIDEO_H263ProfileBackwardCompatible  = 0x04,x04410,16726
    OMX_VIDEO_H263ProfileISWV2 411,16781
    OMX_VIDEO_H263ProfileISWV2               = 0x08,x08411,16781
    OMX_VIDEO_H263ProfileISWV3 412,16849
    OMX_VIDEO_H263ProfileISWV3               = 0x10,x10412,16849
    OMX_VIDEO_H263ProfileHighCompression 413,16917
    OMX_VIDEO_H263ProfileHighCompression     = 0x20,x20413,16917
    OMX_VIDEO_H263ProfileInternet 414,16975
    OMX_VIDEO_H263ProfileInternet            = 0x40,x40414,16975
    OMX_VIDEO_H263ProfileInterlace 415,17040
    OMX_VIDEO_H263ProfileInterlace           = 0x80,x80415,17040
    OMX_VIDEO_H263ProfileHighLatency 416,17104
    OMX_VIDEO_H263ProfileHighLatency         = 0x100,x100416,17104
    OMX_VIDEO_H263ProfileKhronosExtensions 417,17167
    OMX_VIDEO_H263ProfileKhronosExtensions = 0x6F000000,x6F000000417,17167
    OMX_VIDEO_H263ProfileVendorStartUnused 418,17293
    OMX_VIDEO_H263ProfileVendorStartUnused = 0x7F000000,x7F000000418,17293
    OMX_VIDEO_H263ProfileMax 419,17408
    OMX_VIDEO_H263ProfileMax                 = 0x7FFFFFFF x7FFFFFFF419,17408
} OMX_VIDEO_H263PROFILETYPE;420,17468
typedef enum OMX_VIDEO_H263LEVELTYPE 427,17620
    OMX_VIDEO_H263Level10 428,17659
    OMX_VIDEO_H263Level10  = 0x01,x01428,17659
    OMX_VIDEO_H263Level20 429,17696
    OMX_VIDEO_H263Level20  = 0x02,x02429,17696
    OMX_VIDEO_H263Level30 430,17737
    OMX_VIDEO_H263Level30  = 0x04,x04430,17737
    OMX_VIDEO_H263Level40 431,17778
    OMX_VIDEO_H263Level40  = 0x08,x08431,17778
    OMX_VIDEO_H263Level45 432,17819
    OMX_VIDEO_H263Level45  = 0x10,x10432,17819
    OMX_VIDEO_H263Level50 433,17860
    OMX_VIDEO_H263Level50  = 0x20,x20433,17860
    OMX_VIDEO_H263Level60 434,17901
    OMX_VIDEO_H263Level60  = 0x40,x40434,17901
    OMX_VIDEO_H263Level70 435,17942
    OMX_VIDEO_H263Level70  = 0x80,x80435,17942
    OMX_VIDEO_H263LevelKhronosExtensions 436,17978
    OMX_VIDEO_H263LevelKhronosExtensions = 0x6F000000,x6F000000436,17978
    OMX_VIDEO_H263LevelVendorStartUnused 437,18102
    OMX_VIDEO_H263LevelVendorStartUnused = 0x7F000000,x7F000000437,18102
    OMX_VIDEO_H263LevelMax 438,18215
    OMX_VIDEO_H263LevelMax = 0x7FFFFFFF x7FFFFFFF438,18215
} OMX_VIDEO_H263LEVELTYPE;439,18257
typedef enum OMX_VIDEO_PICTURETYPE 452,18596
    OMX_VIDEO_PictureTypeI 453,18633
    OMX_VIDEO_PictureTypeI   = 0x01,x01453,18633
    OMX_VIDEO_PictureTypeP 454,18670
    OMX_VIDEO_PictureTypeP   = 0x02,x02454,18670
    OMX_VIDEO_PictureTypeB 455,18707
    OMX_VIDEO_PictureTypeB   = 0x04,x04455,18707
    OMX_VIDEO_PictureTypeSI 456,18744
    OMX_VIDEO_PictureTypeSI  = 0x08,x08456,18744
    OMX_VIDEO_PictureTypeSP 457,18781
    OMX_VIDEO_PictureTypeSP  = 0x10,x10457,18781
    OMX_VIDEO_PictureTypeEI 458,18818
    OMX_VIDEO_PictureTypeEI  = 0x11,x11458,18818
    OMX_VIDEO_PictureTypeEP 459,18855
    OMX_VIDEO_PictureTypeEP  = 0x12,x12459,18855
    OMX_VIDEO_PictureTypeS 460,18892
    OMX_VIDEO_PictureTypeS   = 0x14,x14460,18892
    OMX_VIDEO_PictureTypeKhronosExtensions 461,18929
    OMX_VIDEO_PictureTypeKhronosExtensions = 0x6F000000,x6F000000461,18929
    OMX_VIDEO_PictureTypeVendorStartUnused 462,19055
    OMX_VIDEO_PictureTypeVendorStartUnused = 0x7F000000,x7F000000462,19055
    OMX_VIDEO_PictureTypeMax 463,19170
    OMX_VIDEO_PictureTypeMax = 0x7FFFFFFFx7FFFFFFF463,19170
} OMX_VIDEO_PICTURETYPE;464,19212
typedef struct OMX_VIDEO_PARAM_H263TYPE 493,20666
    OMX_U32 nSize;494,20708
    OMX_VERSIONTYPE nVersion;495,20727
    OMX_U32 nPortIndex;496,20757
    OMX_U32 nPFrames;497,20781
    OMX_U32 nBFrames;498,20803
    OMX_VIDEO_H263PROFILETYPE eProfile;499,20825
	OMX_VIDEO_H263LEVELTYPE eLevel;500,20865
    OMX_BOOL bPLUSPTYPEAllowed;501,20898
    OMX_U32 nAllowedPictureTypes;502,20930
    OMX_BOOL bForceRoundingTypeToZero;503,20964
    OMX_U32 nPictureHeaderRepetition;504,21003
    OMX_U32 nGOBHeaderInterval;505,21041
} OMX_VIDEO_PARAM_H263TYPE;506,21073
typedef enum OMX_VIDEO_MPEG2PROFILETYPE 513,21226
    OMX_VIDEO_MPEG2ProfileSimple 514,21268
    OMX_VIDEO_MPEG2ProfileMain,515,21330
    OMX_VIDEO_MPEG2Profile422,516,21390
    OMX_VIDEO_MPEG2ProfileSNR,517,21451
    OMX_VIDEO_MPEG2ProfileSpatial,518,21510
    OMX_VIDEO_MPEG2ProfileHigh,519,21573
    OMX_VIDEO_MPEG2ProfileKhronosExtensions 520,21633
    OMX_VIDEO_MPEG2ProfileKhronosExtensions = 0x6F000000,x6F000000520,21633
    OMX_VIDEO_MPEG2ProfileVendorStartUnused 521,21760
    OMX_VIDEO_MPEG2ProfileVendorStartUnused = 0x7F000000,x7F000000521,21760
    OMX_VIDEO_MPEG2ProfileMax 522,21876
    OMX_VIDEO_MPEG2ProfileMax = 0x7FFFFFFF x7FFFFFFF522,21876
} OMX_VIDEO_MPEG2PROFILETYPE;523,21921
typedef enum OMX_VIDEO_MPEG2LEVELTYPE 530,22085
    OMX_VIDEO_MPEG2LevelLL 531,22125
    OMX_VIDEO_MPEG2LevelML,532,22177
    OMX_VIDEO_MPEG2LevelH14,533,22230
    OMX_VIDEO_MPEG2LevelHL,534,22282
    OMX_VIDEO_MPEG2LevelKhronosExtensions 535,22337
    OMX_VIDEO_MPEG2LevelKhronosExtensions = 0x6F000000,x6F000000535,22337
    OMX_VIDEO_MPEG2LevelVendorStartUnused 536,22462
    OMX_VIDEO_MPEG2LevelVendorStartUnused = 0x7F000000,x7F000000536,22462
    OMX_VIDEO_MPEG2LevelMax 537,22576
    OMX_VIDEO_MPEG2LevelMax = 0x7FFFFFFF x7FFFFFFF537,22576
} OMX_VIDEO_MPEG2LEVELTYPE;538,22619
typedef struct OMX_VIDEO_PARAM_MPEG2TYPE 553,23051
    OMX_U32 nSize;554,23094
    OMX_VERSIONTYPE nVersion;555,23124
    OMX_U32 nPortIndex;556,23154
    OMX_U32 nPFrames;557,23184
    OMX_U32 nBFrames;558,23214
    OMX_VIDEO_MPEG2PROFILETYPE eProfile;559,23244
	OMX_VIDEO_MPEG2LEVELTYPE eLevel;560,23285
} OMX_VIDEO_PARAM_MPEG2TYPE;561,23322
typedef enum OMX_VIDEO_MPEG4PROFILETYPE 585,24119
    OMX_VIDEO_MPEG4ProfileSimple 586,24161
    OMX_VIDEO_MPEG4ProfileSimple           = 0x01,x01586,24161
    OMX_VIDEO_MPEG4ProfileSimpleScalable 587,24220
    OMX_VIDEO_MPEG4ProfileSimpleScalable   = 0x02,x02587,24220
    OMX_VIDEO_MPEG4ProfileCore 588,24275
    OMX_VIDEO_MPEG4ProfileCore             = 0x04,x04588,24275
    OMX_VIDEO_MPEG4ProfileMain 589,24340
    OMX_VIDEO_MPEG4ProfileMain             = 0x08,x08589,24340
    OMX_VIDEO_MPEG4ProfileNbit 590,24404
    OMX_VIDEO_MPEG4ProfileNbit             = 0x10,x10590,24404
    OMX_VIDEO_MPEG4ProfileScalableTexture 591,24469
    OMX_VIDEO_MPEG4ProfileScalableTexture  = 0x20,x20591,24469
    OMX_VIDEO_MPEG4ProfileSimpleFace 592,24523
    OMX_VIDEO_MPEG4ProfileSimpleFace       = 0x40,x40592,24523
    OMX_VIDEO_MPEG4ProfileSimpleFBA 593,24582
    OMX_VIDEO_MPEG4ProfileSimpleFBA        = 0x80,x80593,24582
    OMX_VIDEO_MPEG4ProfileBasicAnimated 594,24642
    OMX_VIDEO_MPEG4ProfileBasicAnimated    = 0x100,x100594,24642
    OMX_VIDEO_MPEG4ProfileHybrid 595,24699
    OMX_VIDEO_MPEG4ProfileHybrid           = 0x200,x200595,24699
    OMX_VIDEO_MPEG4ProfileAdvancedRealTime 596,24763
    OMX_VIDEO_MPEG4ProfileAdvancedRealTime = 0x400,x400596,24763
    OMX_VIDEO_MPEG4ProfileCoreScalable 597,24817
    OMX_VIDEO_MPEG4ProfileCoreScalable     = 0x800,x800597,24817
    OMX_VIDEO_MPEG4ProfileAdvancedCoding 598,24875
    OMX_VIDEO_MPEG4ProfileAdvancedCoding   = 0x1000,x1000598,24875
    OMX_VIDEO_MPEG4ProfileAdvancedCore 599,24932
    OMX_VIDEO_MPEG4ProfileAdvancedCore     = 0x2000,x2000599,24932
    OMX_VIDEO_MPEG4ProfileAdvancedScalable 600,24991
    OMX_VIDEO_MPEG4ProfileAdvancedScalable = 0x4000,x4000600,24991
    OMX_VIDEO_MPEG4ProfileAdvancedSimple 601,25044
    OMX_VIDEO_MPEG4ProfileAdvancedSimple   = 0x8000,x8000601,25044
    OMX_VIDEO_MPEG4ProfileKhronosExtensions 602,25097
    OMX_VIDEO_MPEG4ProfileKhronosExtensions = 0x6F000000,x6F000000602,25097
    OMX_VIDEO_MPEG4ProfileVendorStartUnused 603,25224
    OMX_VIDEO_MPEG4ProfileVendorStartUnused = 0x7F000000,x7F000000603,25224
    OMX_VIDEO_MPEG4ProfileMax 604,25340
    OMX_VIDEO_MPEG4ProfileMax              = 0x7FFFFFFF x7FFFFFFF604,25340
} OMX_VIDEO_MPEG4PROFILETYPE;605,25398
typedef enum OMX_VIDEO_MPEG4LEVELTYPE 612,25562
    OMX_VIDEO_MPEG4Level0 613,25602
    OMX_VIDEO_MPEG4Level0  = 0x01,x01613,25602
    OMX_VIDEO_MPEG4Level0b 614,25658
    OMX_VIDEO_MPEG4Level0b = 0x02,x02614,25658
    OMX_VIDEO_MPEG4Level1 615,25715
    OMX_VIDEO_MPEG4Level1  = 0x04,x04615,25715
    OMX_VIDEO_MPEG4Level2 616,25769
    OMX_VIDEO_MPEG4Level2  = 0x08,x08616,25769
    OMX_VIDEO_MPEG4Level3 617,25823
    OMX_VIDEO_MPEG4Level3  = 0x10,x10617,25823
    OMX_VIDEO_MPEG4Level4 618,25877
    OMX_VIDEO_MPEG4Level4  = 0x20,x20618,25877
    OMX_VIDEO_MPEG4Level4a 619,25932
    OMX_VIDEO_MPEG4Level4a = 0x40,x40619,25932
    OMX_VIDEO_MPEG4Level5 620,25988
    OMX_VIDEO_MPEG4Level5  = 0x80,x80620,25988
    OMX_VIDEO_MPEG4LevelKhronosExtensions 621,26043
    OMX_VIDEO_MPEG4LevelKhronosExtensions = 0x6F000000,x6F000000621,26043
    OMX_VIDEO_MPEG4LevelVendorStartUnused 622,26168
    OMX_VIDEO_MPEG4LevelVendorStartUnused = 0x7F000000,x7F000000622,26168
    OMX_VIDEO_MPEG4LevelMax 623,26282
    OMX_VIDEO_MPEG4LevelMax = 0x7FFFFFFF x7FFFFFFF623,26282
} OMX_VIDEO_MPEG4LEVELTYPE;624,26325
typedef struct OMX_VIDEO_PARAM_MPEG4TYPE 655,27862
    OMX_U32 nSize;656,27905
    OMX_VERSIONTYPE nVersion;657,27924
    OMX_U32 nPortIndex;658,27954
    OMX_U32 nSliceHeaderSpacing;659,27978
    OMX_BOOL bSVH;660,28011
    OMX_BOOL bGov;661,28030
    OMX_U32 nPFrames;662,28049
    OMX_U32 nBFrames;663,28071
    OMX_U32 nIDCVLCThreshold;664,28093
    OMX_BOOL bACPred;665,28123
    OMX_U32 nMaxPacketSize;666,28145
    OMX_U32 nTimeIncRes;667,28173
    OMX_VIDEO_MPEG4PROFILETYPE eProfile;668,28198
    OMX_VIDEO_MPEG4LEVELTYPE eLevel;669,28239
    OMX_U32 nAllowedPictureTypes;670,28276
    OMX_U32 nHeaderExtension;671,28310
    OMX_BOOL bReversibleVLC;672,28340
} OMX_VIDEO_PARAM_MPEG4TYPE;673,28369
typedef enum OMX_VIDEO_WMVFORMATTYPE 679,28426
    OMX_VIDEO_WMVFormatUnused 680,28465
    OMX_VIDEO_WMVFormatUnused = 0x01,x01680,28465
    OMX_VIDEO_WMVFormat7 681,28538
    OMX_VIDEO_WMVFormat7      = 0x02,x02681,28538
    OMX_VIDEO_WMVFormat8 682,28615
    OMX_VIDEO_WMVFormat8      = 0x04,x04682,28615
    OMX_VIDEO_WMVFormat9 683,28692
    OMX_VIDEO_WMVFormat9      = 0x08,x08683,28692
    OMX_VIDEO_WMFFormatKhronosExtensions 684,28769
    OMX_VIDEO_WMFFormatKhronosExtensions = 0x6F000000,x6F000000684,28769
    OMX_VIDEO_WMFFormatVendorStartUnused 685,28893
    OMX_VIDEO_WMFFormatVendorStartUnused = 0x7F000000,x7F000000685,28893
    OMX_VIDEO_WMVFormatMax 686,29006
    OMX_VIDEO_WMVFormatMax    = 0x7FFFFFFFx7FFFFFFF686,29006
} OMX_VIDEO_WMVFORMATTYPE;687,29049
typedef struct OMX_VIDEO_PARAM_WMVTYPE 699,29326
    OMX_U32 nSize;700,29367
    OMX_VERSIONTYPE nVersion;701,29387
    OMX_U32 nPortIndex;702,29417
    OMX_VIDEO_WMVFORMATTYPE eFormat;703,29441
} OMX_VIDEO_PARAM_WMVTYPE;704,29478
typedef enum OMX_VIDEO_RVFORMATTYPE 710,29539
    OMX_VIDEO_RVFormatUnused 711,29577
    OMX_VIDEO_RVFormat8,712,29644
    OMX_VIDEO_RVFormat9,713,29706
    OMX_VIDEO_RVFormatG2,714,29768
    OMX_VIDEO_RVFormatKhronosExtensions 715,29831
    OMX_VIDEO_RVFormatKhronosExtensions = 0x6F000000,x6F000000715,29831
    OMX_VIDEO_RVFormatVendorStartUnused 716,29954
    OMX_VIDEO_RVFormatVendorStartUnused = 0x7F000000,x7F000000716,29954
    OMX_VIDEO_RVFormatMax 717,30066
    OMX_VIDEO_RVFormatMax = 0x7FFFFFFFx7FFFFFFF717,30066
} OMX_VIDEO_RVFORMATTYPE;718,30105
typedef struct OMX_VIDEO_PARAM_RVTYPE 744,31268
    OMX_U32 nSize;745,31308
    OMX_VERSIONTYPE nVersion;746,31327
    OMX_U32 nPortIndex;747,31357
    OMX_VIDEO_RVFORMATTYPE eFormat;748,31381
    OMX_U16 nBitsPerPixel;749,31417
    OMX_U16 nPaddedWidth;750,31444
    OMX_U16 nPaddedHeight;751,31470
    OMX_U32 nFrameRate;752,31497
    OMX_U32 nBitstreamFlags;753,31521
    OMX_U32 nBitstreamVersion;754,31550
    OMX_U32 nMaxEncodeFrameSize;755,31581
    OMX_BOOL bEnablePostFilter;756,31614
    OMX_BOOL bEnableTemporalInterpolation;757,31646
    OMX_BOOL bEnableLatencyMode;758,31689
} OMX_VIDEO_PARAM_RVTYPE;759,31722
typedef enum OMX_VIDEO_AVCPROFILETYPE 766,31870
    OMX_VIDEO_AVCProfileBaseline 767,31910
    OMX_VIDEO_AVCProfileBaseline = 0x01,x01767,31910
    OMX_VIDEO_AVCProfileMain 768,31978
    OMX_VIDEO_AVCProfileMain     = 0x02,x02768,31978
    OMX_VIDEO_AVCProfileExtended 769,32042
    OMX_VIDEO_AVCProfileExtended = 0x04,x04769,32042
    OMX_VIDEO_AVCProfileHigh 770,32110
    OMX_VIDEO_AVCProfileHigh     = 0x08,x08770,32110
    OMX_VIDEO_AVCProfileHigh10 771,32174
    OMX_VIDEO_AVCProfileHigh10   = 0x10,x10771,32174
    OMX_VIDEO_AVCProfileHigh422 772,32241
    OMX_VIDEO_AVCProfileHigh422  = 0x20,x20772,32241
    OMX_VIDEO_AVCProfileHigh444 773,32311
    OMX_VIDEO_AVCProfileHigh444  = 0x40,x40773,32311
    OMX_VIDEO_AVCProfileKhronosExtensions 774,32381
    OMX_VIDEO_AVCProfileKhronosExtensions = 0x6F000000,x6F000000774,32381
    OMX_VIDEO_AVCProfileVendorStartUnused 775,32506
    OMX_VIDEO_AVCProfileVendorStartUnused = 0x7F000000,x7F000000775,32506
    OMX_VIDEO_AVCProfileMax 776,32620
    OMX_VIDEO_AVCProfileMax      = 0x7FFFFFFF x7FFFFFFF776,32620
} OMX_VIDEO_AVCPROFILETYPE;777,32668
typedef enum OMX_VIDEO_AVCLEVELTYPE 784,32827
    OMX_VIDEO_AVCLevel1 785,32865
    OMX_VIDEO_AVCLevel1   = 0x01,x01785,32865
    OMX_VIDEO_AVCLevel1b 786,32919
    OMX_VIDEO_AVCLevel1b  = 0x02,x02786,32919
    OMX_VIDEO_AVCLevel11 787,32974
    OMX_VIDEO_AVCLevel11  = 0x04,x04787,32974
    OMX_VIDEO_AVCLevel12 788,33030
    OMX_VIDEO_AVCLevel12  = 0x08,x08788,33030
    OMX_VIDEO_AVCLevel13 789,33086
    OMX_VIDEO_AVCLevel13  = 0x10,x10789,33086
    OMX_VIDEO_AVCLevel2 790,33142
    OMX_VIDEO_AVCLevel2   = 0x20,x20790,33142
    OMX_VIDEO_AVCLevel21 791,33196
    OMX_VIDEO_AVCLevel21  = 0x40,x40791,33196
    OMX_VIDEO_AVCLevel22 792,33252
    OMX_VIDEO_AVCLevel22  = 0x80,x80792,33252
    OMX_VIDEO_AVCLevel3 793,33308
    OMX_VIDEO_AVCLevel3   = 0x100,x100793,33308
    OMX_VIDEO_AVCLevel31 794,33362
    OMX_VIDEO_AVCLevel31  = 0x200,x200794,33362
    OMX_VIDEO_AVCLevel32 795,33418
    OMX_VIDEO_AVCLevel32  = 0x400,x400795,33418
    OMX_VIDEO_AVCLevel4 796,33474
    OMX_VIDEO_AVCLevel4   = 0x800,x800796,33474
    OMX_VIDEO_AVCLevel41 797,33528
    OMX_VIDEO_AVCLevel41  = 0x1000,x1000797,33528
    OMX_VIDEO_AVCLevel42 798,33584
    OMX_VIDEO_AVCLevel42  = 0x2000,x2000798,33584
    OMX_VIDEO_AVCLevel5 799,33640
    OMX_VIDEO_AVCLevel5   = 0x4000,x4000799,33640
    OMX_VIDEO_AVCLevel51 800,33694
    OMX_VIDEO_AVCLevel51  = 0x8000,x8000800,33694
    OMX_VIDEO_AVCLevelKhronosExtensions 801,33750
    OMX_VIDEO_AVCLevelKhronosExtensions = 0x6F000000,x6F000000801,33750
    OMX_VIDEO_AVCLevelVendorStartUnused 802,33873
    OMX_VIDEO_AVCLevelVendorStartUnused = 0x7F000000,x7F000000802,33873
    OMX_VIDEO_AVCLevelMax 803,33985
    OMX_VIDEO_AVCLevelMax = 0x7FFFFFFF x7FFFFFFF803,33985
} OMX_VIDEO_AVCLEVELTYPE;804,34026
typedef enum OMX_VIDEO_AVCLOOPFILTERTYPE 814,34283
    OMX_VIDEO_AVCLoopFilterEnable 815,34326
    OMX_VIDEO_AVCLoopFilterDisable,816,34365
    OMX_VIDEO_AVCLoopFilterDisableSliceBoundary,817,34401
    OMX_VIDEO_AVCLoopFilterKhronosExtensions 818,34450
    OMX_VIDEO_AVCLoopFilterKhronosExtensions = 0x6F000000,x6F000000818,34450
    OMX_VIDEO_AVCLoopFilterVendorStartUnused 819,34578
    OMX_VIDEO_AVCLoopFilterVendorStartUnused = 0x7F000000,x7F000000819,34578
    OMX_VIDEO_AVCLoopFilterMax 820,34695
    OMX_VIDEO_AVCLoopFilterMax = 0x7FFFFFFFx7FFFFFFF820,34695
} OMX_VIDEO_AVCLOOPFILTERTYPE;821,34739
typedef struct OMX_VIDEO_PARAM_AVCTYPE 877,38106
    OMX_U32 nSize;878,38147
    OMX_VERSIONTYPE nVersion;879,38183
    OMX_U32 nPortIndex;880,38219
    OMX_U32 nSliceHeaderSpacing;881,38255
    OMX_U32 nPFrames;882,38290
    OMX_U32 nBFrames;883,38317
    OMX_BOOL bUseHadamard;884,38344
    OMX_U32 nRefFrames;885,38371
	OMX_U32 nRefIdx10ActiveMinus1;886,38397
	OMX_U32 nRefIdx11ActiveMinus1;887,38429
    OMX_BOOL bEnableUEP;888,38461
    OMX_BOOL bEnableFMO;889,38488
    OMX_BOOL bEnableASO;890,38515
    OMX_BOOL bEnableRS;891,38542
    OMX_VIDEO_AVCPROFILETYPE eProfile;892,38569
	OMX_VIDEO_AVCLEVELTYPE eLevel;893,38608
    OMX_U32 nAllowedPictureTypes;894,38641
	OMX_BOOL bFrameMBsOnly;895,38677
    OMX_BOOL bMBAFF;896,38719
    OMX_BOOL bEntropyCodingCABAC;897,38755
    OMX_BOOL bWeightedPPrediction;898,38791
    OMX_U32 nWeightedBipredicitonMode;899,38827
    OMX_BOOL bconstIpred 900,38867
    OMX_BOOL bDirect8x8Inference;901,38894
	OMX_BOOL bDirectSpatialTemporal;902,38930
	OMX_U32 nCabacInitIdc;903,38964
	OMX_VIDEO_AVCLOOPFILTERTYPE eLoopFilterMode;904,38988
} OMX_VIDEO_PARAM_AVCTYPE;905,39034
typedef struct OMX_VIDEO_PARAM_PROFILELEVELTYPE 907,39062
   OMX_U32 nSize;908,39112
   OMX_VERSIONTYPE nVersion;909,39147
   OMX_U32 nPortIndex;910,39182
   OMX_U32 eProfile;911,39217
   OMX_U32 eLevel;913,39397
   OMX_U32 nProfileIndex;915,39573
} OMX_VIDEO_PARAM_PROFILELEVELTYPE;919,39900
typedef struct OMX_VIDEO_CONFIG_BITRATETYPE 930,40248
    OMX_U32 nSize;931,40294
    OMX_VERSIONTYPE nVersion;932,40339
    OMX_U32 nPortIndex;933,40384
    OMX_U32 nEncodeBitrate;934,40429
} OMX_VIDEO_CONFIG_BITRATETYPE;935,40474
typedef struct OMX_CONFIG_FRAMERATETYPE 946,40819
    OMX_U32 nSize;947,40861
    OMX_VERSIONTYPE nVersion;948,40880
    OMX_U32 nPortIndex;949,40910
    OMX_U32 xEncodeFramerate;950,40934
} OMX_CONFIG_FRAMERATETYPE;951,40981
typedef struct OMX_CONFIG_INTRAREFRESHVOPTYPE 953,41010
    OMX_U32 nSize;954,41058
    OMX_VERSIONTYPE nVersion;955,41077
    OMX_U32 nPortIndex;956,41107
    OMX_BOOL IntraRefreshVOP;957,41131
} OMX_CONFIG_INTRAREFRESHVOPTYPE;958,41161
typedef struct OMX_CONFIG_MACROBLOCKERRORMAPTYPE 960,41196
    OMX_U32 nSize;961,41247
    OMX_VERSIONTYPE nVersion;962,41266
    OMX_U32 nPortIndex;963,41296
    OMX_U32 nErrMapSize;964,41320
    OMX_U8  ErrMap[ErrMap965,41392
} OMX_CONFIG_MACROBLOCKERRORMAPTYPE;966,41448
typedef struct OMX_CONFIG_MBERRORREPORTINGTYPE 968,41486
    OMX_U32 nSize;969,41535
    OMX_VERSIONTYPE nVersion;970,41554
    OMX_U32 nPortIndex;971,41584
    OMX_BOOL bEnabled;972,41608
} OMX_CONFIG_MBERRORREPORTINGTYPE;973,41631
typedef struct OMX_PARAM_MACROBLOCKSTYPE 975,41667
    OMX_U32 nSize;976,41710
    OMX_VERSIONTYPE nVersion;977,41729
    OMX_U32 nPortIndex;978,41759
    OMX_U32 nMacroblocks;979,41783
} OMX_PARAM_MACROBLOCKSTYPE;980,41809
typedef enum OMX_VIDEO_AVCSLICEMODETYPE 989,42103
    OMX_VIDEO_SLICEMODE_AVCDefault 990,42145
    OMX_VIDEO_SLICEMODE_AVCMBSlice,991,42185
    OMX_VIDEO_SLICEMODE_AVCByteSlice,992,42221
    OMX_VIDEO_SLICEMODE_AVCKhronosExtensions 993,42259
    OMX_VIDEO_SLICEMODE_AVCKhronosExtensions = 0x6F000000,x6F000000993,42259
    OMX_VIDEO_SLICEMODE_AVCVendorStartUnused 994,42387
    OMX_VIDEO_SLICEMODE_AVCVendorStartUnused = 0x7F000000,x7F000000994,42387
    OMX_VIDEO_SLICEMODE_AVCLevelMax 995,42504
    OMX_VIDEO_SLICEMODE_AVCLevelMax = 0x7FFFFFFFx7FFFFFFF995,42504
} OMX_VIDEO_AVCSLICEMODETYPE;996,42553
typedef struct OMX_VIDEO_PARAM_AVCSLICEFMO 1009,42965
    OMX_U32 nSize;1010,43010
    OMX_VERSIONTYPE nVersion;1011,43030
    OMX_U32 nPortIndex;1012,43060
    OMX_U8 nNumSliceGroups;1013,43084
    OMX_U8 nSliceGroupMapType;1014,43112
    OMX_VIDEO_AVCSLICEMODETYPE eSliceMode;1015,43143
} OMX_VIDEO_PARAM_AVCSLICEFMO;1016,43186
typedef struct OMX_VIDEO_CONFIG_AVCINTRAPERIOD 1028,43541
    OMX_U32 nSize;1029,43590
    OMX_VERSIONTYPE nVersion;1030,43610
    OMX_U32 nPortIndex;1031,43640
    OMX_U32 nIDRPeriod;1032,43664
    OMX_U32 nPFrames;1033,43688
} OMX_VIDEO_CONFIG_AVCINTRAPERIOD;1034,43710
typedef struct OMX_VIDEO_CONFIG_NALSIZE 1045,44002
    OMX_U32 nSize;1046,44044
    OMX_VERSIONTYPE nVersion;1047,44064
    OMX_U32 nPortIndex;1048,44094
    OMX_U32 nNaluBytes;1049,44118
} OMX_VIDEO_CONFIG_NALSIZE;1050,44142

demux/subtitle.c,3259
#define SUB_DELAY_LONGTEXT 54,2010
#define SUB_FPS_LONGTEXT 56,2110
#define SUB_TYPE_LONGTEXT 59,2266
#define SUB_DESCRIPTION_LONGTEXT 61,2394
static const char *const ppsz_sub_type[ppsz_sub_type64,2480
vlc_module_begin 72,2742
    SUB_TYPE_UNKNOWN 99,3719
    SUB_TYPE_MICRODVD,100,3746
    SUB_TYPE_SUBRIP,101,3769
    SUB_TYPE_SSA1,102,3790
    SUB_TYPE_SSA2_4,103,3809
    SUB_TYPE_ASS,104,3830
    SUB_TYPE_VPLAYER,105,3848
    SUB_TYPE_SAMI,106,3870
    SUB_TYPE_SUBVIEWER,107,3889
    SUB_TYPE_DVDSUBTITLE,108,3931
    SUB_TYPE_MPL2,109,3991
    SUB_TYPE_AQT,110,4010
    SUB_TYPE_PJS,111,4028
    SUB_TYPE_MPSUB,112,4046
    SUB_TYPE_JACOSUB,113,4066
    SUB_TYPE_PSB,114,4088
    SUB_TYPE_RT,115,4106
    SUB_TYPE_DKS,116,4123
    SUB_TYPE_SUBVIEW1,117,4141
    SUB_TYPE_VTT,119,4270
    SUB_TYPE_SBV120,4288
    int     i_line_count;125,4326
    int     i_line;126,4352
    char    **line;line127,4372
} text_t;128,4392
    int64_t i_start;135,4504
    int64_t i_stop;136,4525
    char    *psz_text;psz_text138,4546
} subtitle_t;139,4569
struct demux_sys_t142,4585
    int         i_type;144,4606
    text_t      txt;145,4630
    es_out_id_t *es;es146,4651
    int64_t     i_next_demux_date;148,4673
    int64_t     i_microsecperframe;149,4708
    char        *psz_header;psz_header151,4745
    int         i_subtitle;152,4774
    int         i_subtitles;153,4802
    subtitle_t  *subtitle;subtitle154,4831
    int64_t     i_length;156,4859
        bool b_inited;161,4913
        int i_comment;163,4937
        int i_time_resolution;164,4960
        int i_time_shift;165,4991
    } jss;166,5017
        bool  b_inited;169,5045
        float f_total;171,5070
        float f_factor;172,5093
    } mpsub;173,5117
    const char *psz_type_name;psz_type_name196,6212
    int  i_type;197,6243
    const char *psz_name;psz_name198,6260
    int  (*pf_read)pf_read199,6286
} sub_read_subtitle_function 200,6338
static int Open 237,8366
static void Close(597,20347
static int Control(614,20830
static int Demux(712,23958
static int subtitle_cmp(766,25419
static void Fix(776,25924
static int TextLoad(784,26144
static void TextUnload(822,27013
static char *TextGetLine(TextGetLine835,27232
static void TextPreviousLine(842,27381
static int ParseMicroDvd(856,27805
static int ParseSubRipSubViewer(924,29654
static int subtitle_ParseSubRipTimingValue(990,31228
static int subtitle_ParseSubRipTiming(1016,31954
static int  ParseSubRip(1038,32595
static int subtitle_ParseSubViewerTiming(1050,32952
static int  ParseSubViewer(1074,33754
static int  ParseSSA(1086,34071
static int ParseVplayer(1182,37690
static char *ParseSamiSearch(ParseSamiSearch1228,38797
static int  ParseSami(1250,39328
static int ParseDVDSubtitle(1348,41494
static int ParseMPL2(1415,43170
static int ParseAQT(1465,44469
static int ParsePJS(1522,45883
static int ParseMPSub(1569,46980
static int ParseJSS(1667,49415
static int ParsePSB(1909,57018
static int64_t ParseRealTime(1955,58275
static int ParseRealText(1970,58794
static int ParseDKS(2059,61342
static int ParseSubViewer1(2117,62880
static int ParseCommonVTTSBV(2172,64353
static char * get_language_from_filename(2259,67003

visualization/visual/fft.c,283
  #define PI 32,1271
  #define PI 34,1296
fft_state *visual_fft_init(visual_fft_init58,2381
void fft_perform(90,3271
void fft_close(104,3719
static void fft_prepare(115,4030
static void fft_output(133,4544
static void fft_calculate(155,5095
static int reverseBits(198,6632

video_chroma/copy.c,1029
int CopyInitCache(35,1321
void CopyCleanCache(48,1634
#define COPY16(63,1980
#define COPY64(69,2212
# undef vlc_CPU_SSE4_182,2739
# define vlc_CPU_SSE4_1(83,2762
# undef vlc_CPU_SSSE387,2844
# define vlc_CPU_SSSE3(88,2866
# undef vlc_CPU_SSE292,2945
# define vlc_CPU_SSE2(93,2966
static void CopyFromUswc(101,3205
static void Copy2d(150,4695
static void SSE_SplitUV(177,5442
#define LOAD64 195,6190
#define STORE2X32 201,6350
#undef STORE2X32251,8442
#undef LOAD64252,8459
static void SSE_CopyPlane(264,8677
static void SSE_SplitPlanes(295,9640
static void SSE_CopyFromNv12(323,10632
static void SSE_CopyFromYv12(340,11309
static void SSE_CopyFromNv12ToNv12(356,11850
static void SSE_CopyFromI420ToNv12(372,12462
#undef COPY64406,13665
static void CopyPlane(409,13710
static void SplitPlanes(423,14094
void CopyFromNv12(439,14580
void CopyFromNv12ToNv12(458,15186
void CopyFromNv12ToI420(476,15745
void CopyFromI420ToNv12(486,16126
void CopyFromI420_10ToP010(524,17318
void CopyFromYv12(565,18702

demux/playlist/wpl.c,232
struct demux_sys_t33,1256
    xml_reader_t* p_reader;35,1277
    char* psz_prefix;36,1305
static void read_head(39,1331
static void read_body(88,3495
static int Demux(134,5193
void Close_WPL(160,6073
int Import_WPL(171,6322

demux/ty.c,4998
vlc_module_begin 58,2402
#define SERIES1_PES_LENGTH 78,3108
#define SERIES2_PES_LENGTH 79,3180
#define AC3_PES_LENGTH 80,3252
#define VIDEO_PES_LENGTH 81,3326
#define DTIVO_PTS_OFFSET 82,3395
#define SA_PTS_OFFSET 83,3473
#define AC3_PTS_OFFSET 84,3550
#define VIDEO_PTS_OFFSET 85,3629
#define AC3_PKT_LENGTH 86,3708
static const uint8_t ty_MPEGAudioPacket[ty_MPEGAudioPacket88,3854
static const uint8_t ty_AC3AudioPacket[ty_AC3AudioPacket89,3926
#define CHUNK_PEEK_COUNT 91,3998
#define TIVO_PES_FILEID 111,4611
#define TIVO_PART_LENGTH 112,4652
#define CHUNK_SIZE 113,4720
  long l_rec_size;117,4779
  uint8_t ex[ex118,4798
  uint8_t rec_type;119,4815
  uint8_t subrec_type;120,4835
  bool b_ext;121,4858
  uint64_t l_ty_pts;122,4872
} ty_rec_hdr_t;123,4938
    uint64_t l_timestamp;127,4972
    uint8_t chunk_bitmask[chunk_bitmask128,4998
} ty_seq_table_t;129,5028
    TIVO_TYPE_UNKNOWN,133,5062
    TIVO_TYPE_SA,134,5085
    TIVO_TYPE_DTIVO135,5103
} tivo_type_t;136,5123
    TIVO_SERIES_UNKNOWN,140,5154
    TIVO_SERIES1,141,5179
    TIVO_SERIES2142,5197
} tivo_series_t;143,5214
    TIVO_AUDIO_UNKNOWN,147,5247
    TIVO_AUDIO_AC3,148,5271
    TIVO_AUDIO_MPEG149,5291
} tivo_audio_t;150,5311
#define XDS_MAX_DATA_SIZE 152,5328
    XDS_CLASS_CURRENT 155,5374
    XDS_CLASS_FUTURE 156,5408
    XDS_CLASS_CHANNEL 157,5442
    XDS_CLASS_MISCELLANEOUS 158,5476
    XDS_CLASS_PUBLIC_SERVICE 159,5510
    XDS_CLASS_RESERVED 160,5544
    XDS_CLASS_UNDEFINED 161,5578
    XDS_CLASS_OTHER 162,5612
    XDS_MAX_CLASS_COUNT164,5647
} xds_class_t;165,5671
    bool b_started;168,5703
    int        i_data;169,5723
    uint8_t    p_data[p_data170,5746
    int        i_sum;171,5788
} xds_packet_t;172,5810
    XDS_META_PROGRAM_RATING_NONE,175,5841
    XDS_META_PROGRAM_RATING_MPAA,176,5875
    XDS_META_PROGRAM_RATING_TPG,177,5909
} xds_meta_program_rating_t;179,5974
    char *psz_name;psz_name182,6020
    xds_meta_program_rating_t rating;183,6040
    char *psz_rating;psz_rating184,6078
} xds_meta_program_t;186,6155
    char *psz_channel_name;psz_channel_name189,6194
    char *psz_channel_call_letter;psz_channel_call_letter190,6222
    char *psz_channel_number;psz_channel_number191,6257
    xds_meta_program_t  current;193,6288
    xds_meta_program_t  future;194,6321
} xds_meta_t;195,6353
    bool b_xds;199,6413
    xds_class_t i_class;202,6459
    int         i_type;203,6484
    bool  b_future;204,6508
    xds_packet_t pkt[pkt207,6539
    bool  b_meta_changed;210,6640
    xds_meta_t  meta;211,6666
} xds_t;213,6689
struct demux_sys_t215,6699
  es_out_id_t *p_video;p_video217,6720
  es_out_id_t *p_audio;p_audio218,6783
  cc_data_t   cc;220,6863
  es_out_id_t *p_cc[p_cc221,6881
  xds_t       xds;223,6906
  int             i_cur_chunk;225,6926
  int             i_stuff_cnt;226,6957
  size_t          i_stream_size;227,6988
  bool      b_seekable;229,7140
  bool      b_have_master;230,7203
  tivo_type_t     tivo_type;231,7268
  tivo_series_t   tivo_series;232,7335
  tivo_audio_t    audio_type;233,7398
  int             i_Pes_Length;234,7454
  int             i_Pts_Offset;235,7525
  uint8_t         pes_buffer[pes_buffer236,7598
  int             i_pes_buf_cnt;237,7671
  size_t          l_ac3_pkt_size;238,7744
  uint64_t        l_last_ty_pts;239,7821
  uint64_t        l_first_ty_pts;241,7973
  uint64_t        l_final_ty_pts;242,8051
  unsigned        i_seq_table_size;243,8129
  unsigned        i_bits_per_seq_entry;244,8204
  mtime_t         firstAudioPTS;246,8282
  mtime_t         lastAudioPTS;247,8315
  mtime_t         lastVideoPTS;248,8347
  ty_rec_hdr_t    *rec_hdrs;rec_hdrs250,8380
  int             i_cur_rec;251,8445
  int             i_num_recs;252,8518
  int             i_seq_rec;253,8591
  ty_seq_table_t  *seq_table;seq_table254,8668
  bool      eof;255,8747
  bool      b_first_chunk;256,8764
#define TY_ES_GROUP 281,9829
static int Open(293,10155
static int Demux(391,13323
static int Control(499,16598
static void Close(552,18462
static mtime_t get_pts(568,18891
static int find_es_header(583,19335
static int check_sync_pes(605,20126
static int DemuxRecVideo(666,22696
static int DemuxRecAudio(821,28817
static int DemuxRecCc(1023,36967
static int ty_stream_seek_pct(1050,37692
static void XdsInit(1105,39605
static void XdsExit(1119,39966
static void XdsStringUtf8(1133,40310
#define E2(1140,40490
#undef E21150,41070
static bool XdsChangeString(1158,41196
static void XdsDecodeCurrentFuture(1175,41598
static void XdsDecodeChannel(1256,45242
static void XdsDecode(1316,47483
static void XdsParse(1343,48194
static void DemuxDecodeXds(1424,50386
static int ty_stream_seek_time(1479,52419
static void parse_master(1623,58835
static int probe_stream(1692,61626
static void analyze_chunk(1736,63211
static int get_chunk_header(1847,67673
static ty_rec_hdr_t *parse_chunk_headers(parse_chunk_headers1931,70088

audio_mixer/float.c,85
vlc_module_begin 46,1932
static void FilterFL64(70,2563
static int Create(87,2963

visualization/visual/fft.h,415
#define VLC_VISUAL_FFT_H_26,1182
#define FFT_BUFFER_SIZE_LOG 28,1209
#define FFT_BUFFER_SIZE 30,1240
typedef short int sound_sample;33,1346
struct _struct_fft_state 35,1379
     float real[real37,1458
     float imag[imag38,1492
     unsigned int bitReverse[bitReverse41,1538
     float sintable[sintable45,1704
     float costable[costable46,1746
typedef struct _struct_fft_state fft_state;50,1813

video_chroma/copy.h,126
#define VLC_VIDEOCHROMA_COPY_H_25,1192
    uint8_t *buffer;buffer29,1267
    size_t  size;30,1288
} copy_cache_t;32,1314

codec/omxil/mediacodec.c,3858
#define BLOCK_FLAG_CSD 52,1900
struct csd55,1985
    const uint8_t *p_buf;p_buf57,1998
    size_t i_size;58,2024
#define NEWBLOCK_FLAG_RESTART 61,2047
#define NEWBLOCK_FLAG_FLUSH 62,2084
typedef int (*dec_on_new_block_cb)dec_on_new_block_cb67,2273
typedef void (*dec_on_flush_cb)dec_on_flush_cb72,2395
typedef int (*dec_process_output_cb)dec_process_output_cb78,2607
struct decoder_sys_t80,2699
    mc_api *api;api82,2722
    block_t **pp_csd;pp_csd86,2870
    size_t i_csd_count;87,2892
    size_t i_csd_send;88,2916
    bool b_has_format;90,2940
    int64_t i_preroll_end;92,2964
    int     i_quirks;93,2991
    dec_on_new_block_cb     pf_on_new_block;96,3055
    dec_on_flush_cb         pf_on_flush;97,3100
    dec_process_output_cb   pf_process_output;98,3141
    vlc_mutex_t     lock;100,3189
    vlc_thread_t    out_thread;101,3215
    vlc_cond_t      cond;103,3295
    vlc_cond_t      dec_cond;105,3370
    bool            b_flush_out;107,3471
    bool            b_output_ready;109,3579
    bool            b_input_dequeued;111,3682
    bool            b_aborted;112,3720
            AWindowHandler *p_awh;p_awh118,3793
            unsigned int i_stride,119,3828
            unsigned int i_stride, i_slice_height,119,3828
            unsigned int i_stride, i_slice_height, i_width,119,3828
            unsigned int i_stride, i_slice_height, i_width, i_height;119,3828
            int i_pixel_format;120,3898
            uint8_t i_nal_length_size;121,3930
            size_t i_h264_profile;122,3969
            picture_sys_t** pp_inflight_pictures;124,4081
            unsigned int i_inflight_pictures;125,4131
            timestamp_fifo_t *timestamp_fifo;timestamp_fifo126,4177
        } video;127,4223
            date_t i_end_date;129,4257
            int i_channels;130,4288
            bool b_extract;131,4316
            bool b_need_channels;133,4409
            int pi_extraction[pi_extraction134,4443
        } audio;135,4489
    } u;136,4506
#define DIRECTRENDERING_TEXT 171,5980
#define DIRECTRENDERING_LONGTEXT 172,6040
#define MEDIACODEC_AUDIO_TEXT 175,6144
#define MEDIACODEC_AUDIO_LONGTEXT 176,6210
#define MEDIACODEC_TUNNELEDPLAYBACK_TEXT 178,6267
#define CFG_PREFIX 180,6347
vlc_module_begin 182,6381
static int CSDDup(218,7715
static bool CSDCmp(245,8400
static inline uint8_t RestoreSyncCode(261,8851
static int H264SetCSD(276,9240
static int ParseVideoExtraH264(346,11564
static int ParseVideoExtraHEVC(378,12774
static int ParseVideoExtraVc1(399,13339
static int ParseVideoExtraWmv3(426,14041
static int ParseVideoExtra(463,15191
static int StartMediaCodec(486,15969
static void StopMediaCodec(578,19414
static int OpenDecoder(596,20152
static int OpenDecoderNdk(832,27921
static int OpenDecoderJni(837,28026
static void AbortDecoderLocked(842,28131
static void CleanDecoder(853,28338
static void CloseDecoder(880,29122
static void ReleasePicture(900,29724
static void InvalidateAllPictures(907,29909
static int InsertInflightPicture(916,30204
static void RemoveInflightPictures(932,30711
static int Video_ProcessOutput(942,31071
static uint32_t pi_audio_order_src[pi_audio_order_src1068,36396
static int Audio_ProcessOutput(1075,36627
static void DecodeFlushLocked(1178,40656
static void DecodeFlush(1204,41322
static void *OutThread(OutThread1213,41511
static block_t *GetNextBlock(GetNextBlock1320,44783
static int DecodeCommon(1332,45101
static int Video_OnNewBlock(1563,52249
static int VideoH264_OnNewBlock(1579,52696
static int VideoHEVC_OnNewBlock(1611,53800
static int VideoVC1_OnNewBlock(1628,54303
static void Video_OnFlush(1645,54803
static picture_t *DecodeVideo(DecodeVideo1657,55178
static int Audio_OnNewBlock(1663,55303
static void Audio_OnFlush(1680,55758
static block_t *DecodeAudio(DecodeAudio1687,55907

audio_output/file.c,698
#define A52_FRAME_NB 42,1637
struct aout_sys_t50,2086
    FILE     * p_file;52,2106
    bool b_add_wav_header;53,2129
    WAVEHEADER waveh;55,2157
#define CHANNELS_MAX 58,2241
static const int pi_channels_maps[pi_channels_maps59,2264
#define FORMAT_TEXT 83,3280
#define CHANNELS_TEXT 85,3321
#define CHANNELS_LONGTEXT 86,3375
#define WAV_TEXT 89,3530
#define WAV_LONGTEXT 90,3569
static const char *const format_list[format_list93,3695
static const int format_int[format_int100,3817
#define FILE_TEXT 108,3962
#define FILE_LONGTEXT 109,3998
vlc_module_begin 111,4097
static void Stop(279,9290
static void Play(316,10494
static void Flush(333,10926
static int Open(340,11106

control/dbus/dbus_player.c,1565
MarshalPosition(44,1634
DBUS_METHOD(64,2115
DBUS_METHOD(114,3404
MarshalVolume(148,4229
DBUS_METHOD(162,4580
DBUS_METHOD(175,4850
DBUS_METHOD(182,4957
DBUS_METHOD(189,5068
DBUS_METHOD(196,5169
DBUS_METHOD(203,5251
DBUS_METHOD(210,5335
DBUS_METHOD(217,5429
MarshalCanGoNext(245,6066
MarshalCanGoPrevious(259,6401
MarshalCanPlay(273,6748
MarshalCanPause(289,7167
MarshalCanControl(308,7657
MarshalCanSeek(321,7992
MarshalShuffle(340,8477
DBUS_METHOD(351,8809
MarshalPlaybackStatus(365,9094
MarshalRate(398,10037
DBUS_METHOD(418,10534
MarshalMinimumRate(440,11018
MarshalMaximumRate(452,11341
MarshalLoopStatus(464,11664
DBUS_METHOD(484,12232
MarshalMetadata(514,13011
DBUS_SIGNAL(553,14094
#define PROPERTY_MAPPING_BEGIN 575,14566
#define PROPERTY_GET_FUNC(576,14608
#define PROPERTY_SET_FUNC(587,15173
#define PROPERTY_MAPPING_END 591,15325
DBUS_METHOD(593,15408
DBUS_METHOD(646,17068
#undef PROPERTY_MAPPING_BEGIN675,17856
#undef PROPERTY_GET_FUNC676,17886
#undef PROPERTY_SET_FUNC677,17911
#undef PROPERTY_MAPPING_END678,17936
#define ADD_PROPERTY(680,17965
DBUS_METHOD(687,18232
#undef ADD_PROPERTY737,19839
#define METHOD_FUNC(739,19860
handle_player 744,20055
#undef METHOD_FUNC766,21137
int SeekedEmit(771,21355
#define PROPERTY_MAPPING_BEGIN 780,21537
#define PROPERTY_ENTRY(781,21579
#define PROPERTY_MAPPING_END 788,21891
PropertiesChangedSignal(795,22122
#undef PROPERTY_MAPPING_BEGIN856,24275
#undef PROPERTY_ADD857,24305
#undef PROPERTY_MAPPING_END858,24325
int PlayerPropertiesChangedEmit(863,24563

video_output/vdummy.c,413
#define CHROMA_TEXT 36,1497
#define CHROMA_LONGTEXT 37,1549
vlc_module_begin 46,1875
struct vout_display_sys_t 68,2609
    picture_pool_t *pool;pool69,2637
static int Open(79,3165
static int OpenDummy(112,4037
static int OpenStats(117,4119
static void Close(122,4205
static picture_pool_t *Pool(Pool132,4416
static void Display(140,4631
static void DisplayStat(147,4800
static int Control(160,5218

codec/omxil/OMX_IVCommon.h,18120
#define OMX_IVCommon_h30,1348
typedef enum OMX_COLOR_FORMATTYPE 88,3997
    OMX_COLOR_FormatUnused,89,4033
    OMX_COLOR_FormatMonochrome,90,4061
    OMX_COLOR_Format8bitRGB332,91,4093
    OMX_COLOR_Format12bitRGB444,92,4125
    OMX_COLOR_Format16bitARGB4444,93,4158
    OMX_COLOR_Format16bitARGB1555,94,4193
    OMX_COLOR_Format16bitRGB565,95,4228
    OMX_COLOR_Format16bitBGR565,96,4261
    OMX_COLOR_Format18bitRGB666,97,4294
    OMX_COLOR_Format18bitARGB1665,98,4327
    OMX_COLOR_Format19bitARGB1666,99,4362
    OMX_COLOR_Format24bitRGB888,100,4398
    OMX_COLOR_Format24bitBGR888,101,4431
    OMX_COLOR_Format24bitARGB1887,102,4464
    OMX_COLOR_Format25bitARGB1888,103,4499
    OMX_COLOR_Format32bitBGRA8888,104,4534
    OMX_COLOR_Format32bitARGB8888,105,4569
    OMX_COLOR_FormatYUV411Planar,106,4604
    OMX_COLOR_FormatYUV411PackedPlanar,107,4638
    OMX_COLOR_FormatYUV420Planar,108,4678
    OMX_COLOR_FormatYUV420PackedPlanar,109,4712
    OMX_COLOR_FormatYUV420SemiPlanar,110,4752
    OMX_COLOR_FormatYUV422Planar,111,4790
    OMX_COLOR_FormatYUV422PackedPlanar,112,4824
    OMX_COLOR_FormatYUV422SemiPlanar,113,4864
    OMX_COLOR_FormatYCbYCr,114,4902
    OMX_COLOR_FormatYCrYCb,115,4930
    OMX_COLOR_FormatCbYCrY,116,4958
    OMX_COLOR_FormatCrYCbY,117,4986
    OMX_COLOR_FormatYUV444Interleaved,118,5014
    OMX_COLOR_FormatRawBayer8bit,119,5053
    OMX_COLOR_FormatRawBayer10bit,120,5087
    OMX_COLOR_FormatRawBayer8bitcompressed,121,5122
    OMX_COLOR_FormatL2,122,5166
    OMX_COLOR_FormatL4,123,5191
    OMX_COLOR_FormatL8,124,5216
    OMX_COLOR_FormatL16,125,5241
    OMX_COLOR_FormatL24,126,5267
    OMX_COLOR_FormatL32,127,5293
    OMX_COLOR_FormatYUV420PackedSemiPlanar,128,5318
    OMX_COLOR_FormatYUV422PackedSemiPlanar,129,5362
    OMX_COLOR_Format18BitBGR666,130,5406
    OMX_COLOR_Format24BitARGB6666,131,5439
    OMX_COLOR_Format24BitABGR6666,132,5474
    OMX_COLOR_FormatKhronosExtensions 133,5509
    OMX_COLOR_FormatKhronosExtensions = 0x6F000000,x6F000000133,5509
    OMX_COLOR_FormatVendorStartUnused 134,5630
    OMX_COLOR_FormatVendorStartUnused = 0x7F000000,x7F000000134,5630
    OMX_COLOR_FormatMax 135,5740
    OMX_COLOR_FormatMax = 0x7FFFFFFFx7FFFFFFF135,5740
} OMX_COLOR_FORMATTYPE;136,5777
typedef struct OMX_CONFIG_COLORCONVERSIONTYPE 144,5986
    OMX_U32 nSize;145,6034
    OMX_VERSIONTYPE nVersion;146,6105
    OMX_U32 nPortIndex;147,6177
    OMX_S32 xColorMatrix[xColorMatrix148,6250
    OMX_S32 xColorOffset[xColorOffset149,6318
}OMX_CONFIG_COLORCONVERSIONTYPE;OMX_CONFIG_COLORCONVERSIONTYPE150,6386
typedef struct OMX_CONFIG_SCALEFACTORTYPE 158,6622
    OMX_U32 nSize;159,6666
    OMX_VERSIONTYPE nVersion;160,6735
    OMX_U32 nPortIndex;161,6805
    OMX_S32 xWidth;162,6876
    OMX_S32 xHeight;163,6946
}OMX_CONFIG_SCALEFACTORTYPE;OMX_CONFIG_SCALEFACTORTYPE164,7016
typedef enum OMX_IMAGEFILTERTYPE 170,7103
    OMX_ImageFilterNone,171,7138
    OMX_ImageFilterNoise,172,7163
    OMX_ImageFilterEmboss,173,7189
    OMX_ImageFilterNegative,174,7216
    OMX_ImageFilterSketch,175,7245
    OMX_ImageFilterOilPaint,176,7272
    OMX_ImageFilterHatch,177,7301
    OMX_ImageFilterGpen,178,7327
    OMX_ImageFilterAntialias,179,7352
    OMX_ImageFilterDeRing,180,7383
    OMX_ImageFilterSolarize,181,7417
    OMX_ImageFilterKhronosExtensions 182,7446
    OMX_ImageFilterKhronosExtensions = 0x6F000000,x6F000000182,7446
    OMX_ImageFilterVendorStartUnused 183,7566
    OMX_ImageFilterVendorStartUnused = 0x7F000000,x7F000000183,7566
    OMX_ImageFilterMax 184,7675
    OMX_ImageFilterMax = 0x7FFFFFFFx7FFFFFFF184,7675
} OMX_IMAGEFILTERTYPE;185,7711
typedef struct OMX_CONFIG_IMAGEFILTERTYPE 197,8023
    OMX_U32 nSize;198,8067
    OMX_VERSIONTYPE nVersion;199,8086
    OMX_U32 nPortIndex;200,8116
    OMX_IMAGEFILTERTYPE eImageFilter;201,8140
} OMX_CONFIG_IMAGEFILTERTYPE;202,8178
typedef struct OMX_CONFIG_COLORENHANCEMENTTYPE 218,8751
    OMX_U32 nSize;219,8800
    OMX_VERSIONTYPE nVersion;220,8819
    OMX_U32 nPortIndex;221,8850
    OMX_BOOL bColorEnhancement;222,8874
    OMX_U8 nCustomizedU;223,8906
    OMX_U8 nCustomizedV;224,8931
} OMX_CONFIG_COLORENHANCEMENTTYPE;225,8956
typedef struct OMX_CONFIG_COLORKEYTYPE 238,9339
    OMX_U32 nSize;239,9380
    OMX_VERSIONTYPE nVersion;240,9399
    OMX_U32 nPortIndex;241,9429
    OMX_U32 nARGBColor;242,9453
    OMX_U32 nARGBMask;243,9477
} OMX_CONFIG_COLORKEYTYPE;244,9500
typedef enum OMX_COLORBLENDTYPE 260,10017
    OMX_ColorBlendNone,261,10051
    OMX_ColorBlendAlphaConstant,262,10075
    OMX_ColorBlendAlphaPerPixel,263,10108
    OMX_ColorBlendAlternate,264,10141
    OMX_ColorBlendAnd,265,10170
    OMX_ColorBlendOr,266,10193
    OMX_ColorBlendInvert,267,10215
    OMX_ColorBlendKhronosExtensions 268,10241
    OMX_ColorBlendKhronosExtensions = 0x6F000000,x6F000000268,10241
    OMX_ColorBlendVendorStartUnused 269,10360
    OMX_ColorBlendVendorStartUnused = 0x7F000000,x7F000000269,10360
    OMX_ColorBlendMax 270,10468
    OMX_ColorBlendMax = 0x7FFFFFFFx7FFFFFFF270,10468
} OMX_COLORBLENDTYPE;271,10503
typedef struct OMX_CONFIG_COLORBLENDTYPE 284,10981
    OMX_U32 nSize;285,11024
    OMX_VERSIONTYPE nVersion;286,11043
    OMX_U32 nPortIndex;287,11073
    OMX_U32 nRGBAlphaConstant;288,11097
    OMX_COLORBLENDTYPE  eColorBlend;289,11128
} OMX_CONFIG_COLORBLENDTYPE;290,11165
typedef struct OMX_FRAMESIZETYPE 303,11530
    OMX_U32 nSize;304,11565
    OMX_VERSIONTYPE nVersion;305,11584
    OMX_U32 nPortIndex;306,11614
    OMX_U32 nWidth;307,11638
    OMX_U32 nHeight;308,11658
} OMX_FRAMESIZETYPE;309,11679
typedef struct OMX_CONFIG_ROTATIONTYPE 321,11987
    OMX_U32 nSize;322,12028
    OMX_VERSIONTYPE nVersion;323,12047
    OMX_U32 nPortIndex;324,12077
    OMX_S32 nRotation;325,12101
} OMX_CONFIG_ROTATIONTYPE;326,12125
typedef enum OMX_MIRRORTYPE 338,12456
    OMX_MirrorNone 339,12486
    OMX_MirrorVertical,340,12510
    OMX_MirrorHorizontal,341,12534
    OMX_MirrorBoth,342,12560
    OMX_MirrorKhronosExtensions 343,12581
    OMX_MirrorKhronosExtensions = 0x6F000000,x6F000000343,12581
    OMX_MirrorVendorStartUnused 344,12696
    OMX_MirrorVendorStartUnused = 0x7F000000,x7F000000344,12696
    OMX_MirrorMax 345,12800
    OMX_MirrorMax = 0x7FFFFFFF x7FFFFFFF345,12800
} OMX_MIRRORTYPE;346,12834
typedef struct OMX_CONFIG_MIRRORTYPE 358,13132
    OMX_U32 nSize;359,13171
    OMX_VERSIONTYPE nVersion;360,13190
    OMX_U32 nPortIndex;361,13221
    OMX_MIRRORTYPE  eMirror;362,13245
} OMX_CONFIG_MIRRORTYPE;363,13274
typedef struct OMX_CONFIG_POINTTYPE 376,13665
    OMX_U32 nSize;377,13703
    OMX_VERSIONTYPE nVersion;378,13722
    OMX_U32 nPortIndex;379,13752
    OMX_S32 nX;380,13776
    OMX_S32 nY;381,13792
} OMX_CONFIG_POINTTYPE;382,13808
typedef struct OMX_CONFIG_RECTTYPE 397,14360
    OMX_U32 nSize;398,14397
    OMX_VERSIONTYPE nVersion;399,14416
    OMX_U32 nPortIndex;400,14448
    OMX_S32 nLeft;401,14473
    OMX_S32 nTop;402,14493
    OMX_U32 nWidth;403,14511
    OMX_U32 nHeight;404,14531
} OMX_CONFIG_RECTTYPE;405,14552
typedef struct OMX_PARAM_DEBLOCKINGTYPE 417,14903
    OMX_U32 nSize;418,14945
    OMX_VERSIONTYPE nVersion;419,14964
    OMX_U32 nPortIndex;420,14994
    OMX_BOOL bDeblocking;421,15018
} OMX_PARAM_DEBLOCKINGTYPE;422,15044
typedef struct OMX_CONFIG_FRAMESTABTYPE 434,15360
    OMX_U32 nSize;435,15402
    OMX_VERSIONTYPE nVersion;436,15421
    OMX_U32 nPortIndex;437,15451
    OMX_BOOL bStab;438,15475
} OMX_CONFIG_FRAMESTABTYPE;439,15495
typedef enum OMX_WHITEBALCONTROLTYPE 449,15677
    OMX_WhiteBalControlOff 450,15716
    OMX_WhiteBalControlAuto,451,15748
    OMX_WhiteBalControlSunLight,452,15777
    OMX_WhiteBalControlCloudy,453,15810
    OMX_WhiteBalControlShade,454,15841
    OMX_WhiteBalControlTungsten,455,15871
    OMX_WhiteBalControlFluorescent,456,15904
    OMX_WhiteBalControlIncandescent,457,15940
    OMX_WhiteBalControlFlash,458,15977
    OMX_WhiteBalControlHorizon,459,16007
    OMX_WhiteBalControlKhronosExtensions 460,16039
    OMX_WhiteBalControlKhronosExtensions = 0x6F000000,x6F000000460,16039
    OMX_WhiteBalControlVendorStartUnused 461,16163
    OMX_WhiteBalControlVendorStartUnused = 0x7F000000,x7F000000461,16163
    OMX_WhiteBalControlMax 462,16276
    OMX_WhiteBalControlMax = 0x7FFFFFFFx7FFFFFFF462,16276
} OMX_WHITEBALCONTROLTYPE;463,16316
typedef struct OMX_CONFIG_WHITEBALCONTROLTYPE 475,16675
    OMX_U32 nSize;476,16723
    OMX_VERSIONTYPE nVersion;477,16742
    OMX_U32 nPortIndex;478,16772
    OMX_WHITEBALCONTROLTYPE eWhiteBalControl;479,16796
} OMX_CONFIG_WHITEBALCONTROLTYPE;480,16842
typedef enum OMX_EXPOSURECONTROLTYPE 486,16913
    OMX_ExposureControlOff 487,16952
    OMX_ExposureControlAuto,488,16984
    OMX_ExposureControlNight,489,17013
    OMX_ExposureControlBackLight,490,17043
    OMX_ExposureControlSpotLight,491,17077
    OMX_ExposureControlSports,492,17111
    OMX_ExposureControlSnow,493,17142
    OMX_ExposureControlBeach,494,17171
    OMX_ExposureControlLargeAperture,495,17201
    OMX_ExposureControlSmallApperture,496,17239
    OMX_ExposureControlKhronosExtensions 497,17278
    OMX_ExposureControlKhronosExtensions = 0x6F000000,x6F000000497,17278
    OMX_ExposureControlVendorStartUnused 498,17402
    OMX_ExposureControlVendorStartUnused = 0x7F000000,x7F000000498,17402
    OMX_ExposureControlMax 499,17515
    OMX_ExposureControlMax = 0x7FFFFFFFx7FFFFFFF499,17515
} OMX_EXPOSURECONTROLTYPE;500,17555
typedef struct OMX_CONFIG_EXPOSURECONTROLTYPE 512,17912
    OMX_U32 nSize;513,17960
    OMX_VERSIONTYPE nVersion;514,17979
    OMX_U32 nPortIndex;515,18009
    OMX_EXPOSURECONTROLTYPE eExposureControl;516,18033
} OMX_CONFIG_EXPOSURECONTROLTYPE;517,18079
typedef struct OMX_PARAM_SENSORMODETYPE 531,18540
    OMX_U32 nSize;532,18582
    OMX_VERSIONTYPE nVersion;533,18601
    OMX_U32 nPortIndex;534,18631
    OMX_U32 nFrameRate;535,18655
    OMX_BOOL bOneShot;536,18679
    OMX_FRAMESIZETYPE sFrameSize;537,18702
} OMX_PARAM_SENSORMODETYPE;538,18736
typedef struct OMX_CONFIG_CONTRASTTYPE 550,19122
    OMX_U32 nSize;551,19163
    OMX_VERSIONTYPE nVersion;552,19182
    OMX_U32 nPortIndex;553,19212
    OMX_S32 nContrast;554,19236
} OMX_CONFIG_CONTRASTTYPE;555,19259
typedef struct OMX_CONFIG_BRIGHTNESSTYPE 567,19552
    OMX_U32 nSize;568,19595
    OMX_VERSIONTYPE nVersion;569,19614
    OMX_U32 nPortIndex;570,19644
    OMX_U32 nBrightness;571,19668
} OMX_CONFIG_BRIGHTNESSTYPE;572,19693
typedef struct OMX_CONFIG_BACKLIGHTTYPE 586,20183
    OMX_U32 nSize;587,20225
    OMX_VERSIONTYPE nVersion;588,20244
    OMX_U32 nPortIndex;589,20274
    OMX_U32 nBacklight;590,20298
    OMX_U32 nTimeout;591,20322
} OMX_CONFIG_BACKLIGHTTYPE;592,20344
typedef struct OMX_CONFIG_GAMMATYPE 604,20668
    OMX_U32 nSize;605,20706
    OMX_VERSIONTYPE nVersion;606,20725
    OMX_U32 nPortIndex;607,20755
    OMX_S32 nGamma;608,20779
} OMX_CONFIG_GAMMATYPE;609,20799
typedef struct OMX_CONFIG_SATURATIONTYPE 622,21151
    OMX_U32 nSize;623,21194
    OMX_VERSIONTYPE nVersion;624,21213
    OMX_U32 nPortIndex;625,21243
    OMX_S32 nSaturation;626,21267
} OMX_CONFIG_SATURATIONTYPE;627,21292
typedef struct OMX_CONFIG_LIGHTNESSTYPE 640,21641
    OMX_U32 nSize;641,21683
    OMX_VERSIONTYPE nVersion;642,21702
    OMX_U32 nPortIndex;643,21732
    OMX_S32 nLightness;644,21756
} OMX_CONFIG_LIGHTNESSTYPE;645,21780
typedef struct OMX_CONFIG_PLANEBLENDTYPE 661,22369
    OMX_U32 nSize;662,22412
    OMX_VERSIONTYPE nVersion;663,22431
    OMX_U32 nPortIndex;664,22461
    OMX_U32 nDepth;665,22485
    OMX_U32 nAlpha;666,22505
} OMX_CONFIG_PLANEBLENDTYPE;667,22525
typedef struct OMX_PARAM_INTERLEAVETYPE 683,23114
    OMX_U32 nSize;684,23156
    OMX_VERSIONTYPE nVersion;685,23175
    OMX_U32 nPortIndex;686,23205
    OMX_BOOL bEnable;687,23229
    OMX_U32 nInterleavePortIndex;688,23251
} OMX_PARAM_INTERLEAVETYPE;689,23285
typedef enum OMX_TRANSITIONEFFECTTYPE 695,23381
    OMX_EffectNone,696,23421
    OMX_EffectFadeFromBlack,697,23441
    OMX_EffectFadeToBlack,698,23470
    OMX_EffectUnspecifiedThroughConstantColor,699,23497
    OMX_EffectDissolve,700,23544
    OMX_EffectWipe,701,23568
    OMX_EffectUnspecifiedMixOfTwoScenes,702,23588
    OMX_EffectKhronosExtensions 703,23629
    OMX_EffectKhronosExtensions = 0x6F000000,x6F000000703,23629
    OMX_EffectVendorStartUnused 704,23744
    OMX_EffectVendorStartUnused = 0x7F000000,x7F000000704,23744
    OMX_EffectMax 705,23848
    OMX_EffectMax = 0x7FFFFFFFx7FFFFFFF705,23848
} OMX_TRANSITIONEFFECTTYPE;706,23879
typedef struct OMX_CONFIG_TRANSITIONEFFECTTYPE 718,24185
    OMX_U32 nSize;719,24234
    OMX_VERSIONTYPE nVersion;720,24253
    OMX_U32 nPortIndex;721,24283
    OMX_TRANSITIONEFFECTTYPE eEffect;722,24307
} OMX_CONFIG_TRANSITIONEFFECTTYPE;723,24345
typedef enum OMX_DATAUNITTYPE 731,24578
    OMX_DataUnitCodedPicture,732,24610
    OMX_DataUnitVideoSegment,733,24640
    OMX_DataUnitSeveralSegments,734,24670
    OMX_DataUnitArbitraryStreamSection,735,24703
    OMX_DataUnitKhronosExtensions 736,24743
    OMX_DataUnitKhronosExtensions = 0x6F000000,x6F000000736,24743
    OMX_DataUnitVendorStartUnused 737,24860
    OMX_DataUnitVendorStartUnused = 0x7F000000,x7F000000737,24860
    OMX_DataUnitMax 738,24966
    OMX_DataUnitMax = 0x7FFFFFFFx7FFFFFFF738,24966
} OMX_DATAUNITTYPE;739,24999
typedef enum OMX_DATAUNITENCAPSULATIONTYPE 747,25234
    OMX_DataEncapsulationElementaryStream,748,25279
    OMX_DataEncapsulationGenericPayload,749,25322
    OMX_DataEncapsulationRtpPayload,750,25363
    OMX_DataEncapsulationKhronosExtensions 751,25400
    OMX_DataEncapsulationKhronosExtensions = 0x6F000000,x6F000000751,25400
    OMX_DataEncapsulationVendorStartUnused 752,25526
    OMX_DataEncapsulationVendorStartUnused = 0x7F000000,x7F000000752,25526
    OMX_DataEncapsulationMax 753,25641
    OMX_DataEncapsulationMax = 0x7FFFFFFFx7FFFFFFF753,25641
} OMX_DATAUNITENCAPSULATIONTYPE;754,25683
typedef struct OMX_PARAM_DATAUNITTYPE 760,25793
    OMX_U32 nSize;761,25833
    OMX_VERSIONTYPE nVersion;762,25902
    OMX_U32 nPortIndex;763,25979
    OMX_DATAUNITTYPE eUnitType;764,26053
    OMX_DATAUNITENCAPSULATIONTYPE eEncapsulationType;765,26085
} OMX_PARAM_DATAUNITTYPE;766,26139
typedef enum OMX_DITHERTYPE 772,26200
    OMX_DitherNone,773,26230
    OMX_DitherOrdered,774,26250
    OMX_DitherErrorDiffusion,775,26273
    OMX_DitherOther,776,26303
    OMX_DitherKhronosExtensions 777,26324
    OMX_DitherKhronosExtensions = 0x6F000000,x6F000000777,26324
    OMX_DitherVendorStartUnused 778,26439
    OMX_DitherVendorStartUnused = 0x7F000000,x7F000000778,26439
    OMX_DitherMax 779,26543
    OMX_DitherMax = 0x7FFFFFFFx7FFFFFFF779,26543
} OMX_DITHERTYPE;780,26574
typedef struct OMX_CONFIG_DITHERTYPE 786,26661
    OMX_U32 nSize;787,26700
    OMX_VERSIONTYPE nVersion;788,26769
    OMX_U32 nPortIndex;789,26846
    OMX_DITHERTYPE eDither;790,26920
} OMX_CONFIG_DITHERTYPE;791,26983
typedef struct OMX_CONFIG_CAPTUREMODETYPE 793,27009
    OMX_U32 nSize;794,27053
    OMX_VERSIONTYPE nVersion;795,27072
    OMX_U32 nPortIndex;796,27102
    OMX_BOOL bContinuous;797,27174
    OMX_BOOL bFrameLimited;799,27353
    OMX_U32 nFrameLimit;804,27789
} OMX_CONFIG_CAPTUREMODETYPE;806,27951
typedef enum OMX_METERINGTYPE 808,27982
    OMX_MeteringModeAverage,810,28016
    OMX_MeteringModeSpot,811,28091
    OMX_MeteringModeMatrix,812,28158
    OMX_MeteringKhronosExtensions 814,28232
    OMX_MeteringKhronosExtensions = 0x6F000000,x6F000000814,28232
    OMX_MeteringVendorStartUnused 815,28349
    OMX_MeteringVendorStartUnused = 0x7F000000,x7F000000815,28349
    OMX_EVModeMax 816,28455
    OMX_EVModeMax = 0x7fffffffx7fffffff816,28455
} OMX_METERINGTYPE;817,28486
typedef struct OMX_CONFIG_EXPOSUREVALUETYPE 819,28508
    OMX_U32 nSize;820,28554
    OMX_VERSIONTYPE nVersion;821,28573
    OMX_U32 nPortIndex;822,28603
    OMX_METERINGTYPE eMetering;823,28627
    OMX_S32 xEVCompensation;824,28659
    OMX_U32 nApertureFNumber;825,28733
    OMX_BOOL bAutoAperture;826,28828
    OMX_U32 nShutterSpeedMsec;827,28914
    OMX_BOOL bAutoShutterSpeed;828,28986
    OMX_U32 nSensitivity;829,29074
    OMX_BOOL bAutoSensitivity;830,29158
} OMX_CONFIG_EXPOSUREVALUETYPE;831,29242
typedef struct OMX_CONFIG_FOCUSREGIONTYPE 850,30130
    OMX_U32 nSize;851,30174
    OMX_VERSIONTYPE nVersion;852,30193
    OMX_U32 nPortIndex;853,30223
    OMX_BOOL bCenter;854,30247
    OMX_BOOL bLeft;855,30269
    OMX_BOOL bRight;856,30289
    OMX_BOOL bTop;857,30310
    OMX_BOOL bBottom;858,30329
    OMX_BOOL bTopLeft;859,30351
    OMX_BOOL bTopRight;860,30374
    OMX_BOOL bBottomLeft;861,30398
    OMX_BOOL bBottomRight;862,30424
} OMX_CONFIG_FOCUSREGIONTYPE;863,30451
typedef enum OMX_FOCUSSTATUSTYPE 868,30513
    OMX_FocusStatusOff 869,30548
    OMX_FocusStatusRequest,870,30576
    OMX_FocusStatusReached,871,30604
    OMX_FocusStatusUnableToReach,872,30632
    OMX_FocusStatusLost,873,30666
    OMX_FocusStatusKhronosExtensions 874,30691
    OMX_FocusStatusKhronosExtensions = 0x6F000000,x6F000000874,30691
    OMX_FocusStatusVendorStartUnused 875,30811
    OMX_FocusStatusVendorStartUnused = 0x7F000000,x7F000000875,30811
    OMX_FocusStatusMax 876,30920
    OMX_FocusStatusMax = 0x7FFFFFFFx7FFFFFFF876,30920
} OMX_FOCUSSTATUSTYPE;877,30956
typedef struct OMX_PARAM_FOCUSSTATUSTYPE 897,31936
    OMX_U32 nSize;898,31979
    OMX_VERSIONTYPE nVersion;899,31998
    OMX_U32 nPortIndex;900,32028
    OMX_FOCUSSTATUSTYPE eFocusStatus;901,32052
    OMX_BOOL bCenterStatus;902,32090
    OMX_BOOL bLeftStatus;903,32118
    OMX_BOOL bRightStatus;904,32144
    OMX_BOOL bTopStatus;905,32171
    OMX_BOOL bBottomStatus;906,32196
    OMX_BOOL bTopLeftStatus;907,32224
    OMX_BOOL bTopRightStatus;908,32253
    OMX_BOOL bBottomLeftStatus;909,32283
    OMX_BOOL bBottomRightStatus;910,32315
} OMX_PARAM_FOCUSSTATUSTYPE;911,32348

codec/aes3.c,517
vlc_module_begin 43,1804
struct decoder_sys_t61,2423
    date_t end_date;66,2486
#define AES3_HEADER_LEN 69,2511
static int OpenDecoder(82,3091
static int OpenPacketizer(92,3398
static void Close(102,3724
static const uint8_t reverse[reverse108,3840
static block_t *Decode(Decode138,5848
static void Flush(229,8795
static block_t *Packetize(Packetize241,9266
static int Open(261,9947
static const unsigned int pi_original_channels[pi_original_channels302,10975
static block_t *Parse(Parse315,11471

control/oldrc.c,2031
#define VLC_MODULE_LICENSE 38,1597
#    define PF_LOCAL 57,1998
#define MAX_LINE_LENGTH 64,2110
#define STATUS_CHANGE 65,2139
static const char *ppsz_input_state[ppsz_input_state68,2219
struct intf_sys_t120,4478
    int *pi_socket_listen;pi_socket_listen122,4498
    int i_socket;123,4525
    char *psz_unix_path;psz_unix_path124,4543
    vlc_thread_t thread;125,4568
    vlc_mutex_t       status_lock;128,4619
    int               i_last_state;129,4654
    playlist_t        *p_playlist;p_playlist130,4690
    input_thread_t    *p_input;p_input131,4725
    bool              b_input_buffering;132,4757
    HANDLE hConsoleIn;135,4813
    bool b_quiet;136,4836
VLC_FORMAT(140,4865
#define msg_rc(155,5297
#define POS_TEXT 160,5530
#define POS_LONGTEXT 161,5574
#define TTY_TEXT 164,5706
#define TTY_LONGTEXT 165,5738
#define UNIX_TEXT 167,5819
#define UNIX_LONGTEXT 168,5869
#define HOST_TEXT 171,5983
#define HOST_LONGTEXT 172,6025
#define QUIET_TEXT 176,6196
#define QUIET_LONGTEXT 177,6261
vlc_module_begin 187,6592
static void Deactivate(366,12206
static void RegisterCallbacks(398,13247
#define ADD(401,13380
#undef ADD459,15228
static void *Run(Run468,15639
static void Help(771,25093
static int VolumeChanged(835,29454
static void StateChanged(849,29964
static void RateChanged(883,30794
static void PositionChanged(891,31096
static void CacheChanged(901,31522
static int InputEvent(908,31726
static int Input(940,32626
static void print_playlist(1143,39420
static int Playlist(1161,40144
static int Quit(1392,47179
static int Intf(1402,47469
static int Volume(1411,47781
static int VolumeMove(1455,49126
static int VideoConfig(1489,50150
static int AudioDevice(1613,53977
static int AudioChannel(1656,55138
static int Statistics 1700,56576
static int updateStatistics(1716,57097
static bool ReadWin32(1774,59409
bool ReadCommand(1841,61485
static input_item_t *parse_MRL(parse_MRL1900,63452
#define SKIPSPACE(1902,63504
#define SKIPTRAILINGSPACE(1903,63569

codec/omxil/mediacodec.h,2575
#define VLC_MEDIACODEC_H22,1134
typedef struct mc_api mc_api;27,1231
typedef struct mc_api_sys mc_api_sys;28,1261
typedef struct mc_api_out mc_api_out;29,1299
typedef int (*pf_MediaCodecApi_init)pf_MediaCodecApi_init31,1338
#define MC_API_ERROR 36,1453
#define MC_API_INFO_TRYAGAIN 37,1479
#define MC_API_INFO_OUTPUT_FORMAT_CHANGED 38,1514
#define MC_API_INFO_OUTPUT_BUFFERS_CHANGED 39,1562
#define MC_API_NO_QUIRKS 42,1647
#define MC_API_QUIRKS_NEED_CSD 43,1674
#define MC_API_VIDEO_QUIRKS_IGNORE_PADDING 44,1709
#define MC_API_AUDIO_QUIRKS_NEED_CHANNELS 45,1756
struct mc_api_out47,1803
        MC_OUT_TYPE_BUF,50,1834
        MC_OUT_TYPE_CONF,51,1859
    } type;52,1885
    bool b_eos;53,1897
            int i_index;58,1954
            mtime_t i_ts;59,1979
            const uint8_t *p_ptr;p_ptr60,2005
            size_t i_size;61,2039
        } buf;62,2066
                unsigned int width,67,2138
                unsigned int width, height;67,2138
                unsigned int stride;68,2182
                unsigned int slice_height;69,2219
                int pixel_format;70,2262
                int crop_left;71,2296
                int crop_top;72,2327
                int crop_right;73,2357
                int crop_bottom;74,2389
            } video;75,2422
                int channel_count;78,2476
                int channel_mask;79,2511
                int sample_rate;80,2545
            } audio;81,2578
        } conf;82,2599
    } u;83,2615
union mc_api_args86,2628
        AWindowHandler *p_awh;p_awh90,2665
        int i_width;91,2696
        int i_height;92,2717
        int i_angle;93,2739
        bool b_tunneled_playback;94,2760
    } video;95,2794
        int i_sample_rate;98,2824
        int i_channel_count;99,2851
    } audio;100,2880
struct mc_api103,2897
    mc_api_sys *p_sys;p_sys105,2913
    vlc_object_t *  p_obj;108,2963
    const char *    psz_mime;109,2990
    int             i_cat;110,3020
    vlc_fourcc_t    i_codec;111,3047
    int  i_quirks;114,3107
    char *psz_name;psz_name115,3126
    bool b_support_interlaced;116,3146
    bool b_started;118,3178
    bool b_direct_rendering;119,3198
    void (*clean)clean121,3228
    int (*configure)configure122,3257
    int (*start)start123,3312
    int (*stop)stop124,3367
    int (*flush)flush125,3394
    int (*dequeue_in)dequeue_in133,3769
    int (*dequeue_out)dequeue_out134,3821
    int (*queue_in)queue_in138,4015
    int (*get_out)get_out144,4375
    int (*release_out)release_out147,4512

demux/playlist/ifo.c,83
int Import_IFO(46,1997
static int Demux(96,3403
static int DemuxDVD_VR(118,4002

control/dbus/dbus_player.h,763
#define VLC_DBUS_DBUS_PLAYER_H_28,1345
#define DBUS_MPRIS_PLAYER_INTERFACE 33,1431
#define LOOP_STATUS_NONE 35,1503
#define LOOP_STATUS_TRACK 36,1536
#define LOOP_STATUS_PLAYLIST 37,1570
#define PLAYBACK_STATUS_STOPPED 39,1611
#define PLAYBACK_STATUS_PLAYING 40,1653
#define PLAYBACK_STATUS_PAUSED 41,1695
     PLAYER_CAPS_NONE 51,1970
     PLAYER_CAN_GO_NEXT 52,2008
     PLAYER_CAN_GO_PREVIOUS 53,2051
     PLAYER_CAN_PAUSE 54,2094
     PLAYER_CAN_PLAY 55,2137
     PLAYER_CAN_SEEK 56,2180
     PLAYER_CAN_PROVIDE_METADATA 57,2223
     PLAYER_CAN_PROVIDE_POSITION 58,2266
     PLAYER_CAN_REPEAT 59,2309
     PLAYER_CAN_LOOP 60,2352
     PLAYER_CAN_SHUFFLE 61,2395
     PLAYER_CAN_CONTROL_RATE 62,2438
     PLAYER_CAN_PLAY_BACKWARDS 63,2482

demux/adaptive/plumbing/CommandsQueue.cpp,2864
    ES_OUT_PRIVATE_COMMAND_ADD ::ES_OUT_PRIVATE_COMMAND_ADD36,1227
    ES_OUT_PRIVATE_COMMAND_ADD = ES_OUT_PRIVATE_START,::ES_OUT_PRIVATE_START36,1227
    ES_OUT_PRIVATE_COMMAND_DEL,::ES_OUT_PRIVATE_COMMAND_DEL37,1282
    ES_OUT_PRIVATE_COMMAND_DESTROY,::ES_OUT_PRIVATE_COMMAND_DESTROY38,1314
    ES_OUT_PRIVATE_COMMAND_SEND,::ES_OUT_PRIVATE_COMMAND_SEND39,1350
    ES_OUT_PRIVATE_COMMAND_DISCONTINUITY::ES_OUT_PRIVATE_COMMAND_DISCONTINUITY40,1383
AbstractCommand::AbstractCommand(43,1428
AbstractCommand::~AbstractCommand(48,1497
mtime_t AbstractCommand::getTime(53,1539
int AbstractCommand::getType(58,1612
AbstractFakeEsCommand::AbstractFakeEsCommand(63,1671
EsOutSendCommand::EsOutSendCommand(69,1803
EsOutSendCommand::~EsOutSendCommand(75,1972
void EsOutSendCommand::Execute(81,2067
mtime_t EsOutSendCommand::getTime(91,2399
EsOutDelCommand::EsOutDelCommand(99,2555
void EsOutDelCommand::Execute(104,2678
EsOutAddCommand::EsOutAddCommand(109,2752
EsOutAddCommand::~EsOutAddCommand(114,2875
void EsOutAddCommand::Execute(118,2916
EsOutControlPCRCommand::EsOutControlPCRCommand(124,3040
void EsOutControlPCRCommand::Execute(132,3235
mtime_t EsOutControlPCRCommand::getTime(137,3314
EsOutDestroyCommand::EsOutDestroyCommand(142,3383
void EsOutDestroyCommand::Execute(147,3487
EsOutControlResetPCRCommand::EsOutControlResetPCRCommand(151,3540
void EsOutControlResetPCRCommand::Execute(156,3666
EsOutMetaCommand::EsOutMetaCommand(160,3727
EsOutMetaCommand::~EsOutMetaCommand(167,3897
void EsOutMetaCommand::Execute(173,3992
EsOutSendCommand * CommandsFactory::createEsOutSendCommand(182,4146
EsOutDelCommand * CommandsFactory::createEsOutDelCommand(187,4316
EsOutAddCommand * CommandsFactory::createEsOutAddCommand(192,4456
EsOutControlPCRCommand * CommandsFactory::createEsOutControlPCRCommand(197,4596
EsOutDestroyCommand * CommandsFactory::createEsOutDestroyCommand(202,4772
EsOutControlResetPCRCommand * CommandsFactory::creatEsOutControlResetPCRCommand(207,4903
EsOutMetaCommand * CommandsFactory::createEsOutMetaCommand(212,5057
CommandsQueue::CommandsQueue(226,5396
CommandsQueue::~CommandsQueue(237,5630
static bool compareCommands(244,5745
void CommandsQueue::Schedule(249,5896
const CommandsFactory * CommandsQueue::factory(269,6305
mtime_t CommandsQueue::Process(274,6393
void CommandsQueue::LockedCommit(311,7401
void CommandsQueue::Commit(318,7604
void CommandsQueue::Abort(325,7714
bool CommandsQueue::isEmpty(345,8125
void CommandsQueue::setDrop(353,8353
void CommandsQueue::setFlush(360,8468
bool CommandsQueue::isFlushing(368,8616
void CommandsQueue::setEOF(376,8809
bool CommandsQueue::isEOF(385,8973
mtime_t CommandsQueue::getDemuxedAmount(393,9156
mtime_t CommandsQueue::getBufferingLevel(398,9252
mtime_t CommandsQueue::getFirstDTS(407,9490
mtime_t CommandsQueue::getPCR(426,10056

demux/smooth/mp4/IndexReader.cpp,72
IndexReader::IndexReader(34,1369
bool IndexReader::parseIndex(39,1441

demux/adaptive/PlaylistManager.cpp,1551
PlaylistManager::PlaylistManager(49,1743
PlaylistManager::~PlaylistManager 78,2727
void PlaylistManager::unsetPeriod(92,3049
bool PlaylistManager::setupPeriod(100,3232
bool PlaylistManager::start(150,4704
void PlaylistManager::stop(174,5305
static bool streamCompare(184,5454
AbstractStream::buffering_status PlaylistManager::bufferize(198,5917
AbstractStream::status PlaylistManager::dequeue(239,7477
void PlaylistManager::drain(262,8118
mtime_t PlaylistManager::getPCR(286,8642
mtime_t PlaylistManager::getFirstDTS(301,9052
mtime_t PlaylistManager::getDuration(316,9472
bool PlaylistManager::setPosition(324,9618
bool PlaylistManager::needsUpdate(343,10098
void PlaylistManager::scheduleNextUpdate(348,10199
bool PlaylistManager::updatePlaylist(353,10248
mtime_t PlaylistManager::getFirstPlaybackTime(364,10509
mtime_t PlaylistManager::getCurrentPlaybackTime(369,10582
void PlaylistManager::pruneLiveStream(374,10669
bool PlaylistManager::reactivateStream(392,11173
#define DEMUX_INCREMENT 397,11282
int PlaylistManager::demux_callback(398,11324
int PlaylistManager::doDemux(404,11513
int PlaylistManager::control_callback(481,14123
int PlaylistManager::doControl(487,14341
void PlaylistManager::setBufferingRunState(604,17493
void PlaylistManager::Run(613,17682
void * PlaylistManager::managerThread(666,19437
void PlaylistManager::updateControlsPosition(672,19569
void PlaylistManager::updateControlsContentType(692,20092
AbstractAdaptationLogic *PlaylistManager::createLogic(PlaylistManager::createLogic707,20381

control/ntservice.c,910
#define VLC_MODULE_LICENSE 31,1372
#define VLCSERVICENAME 37,1523
#define INSTALL_TEXT 45,1827
#define INSTALL_LONGTEXT 46,1880
#define UNINSTALL_TEXT 48,1949
#define UNINSTALL_LONGTEXT 49,2006
#define NAME_TEXT 51,2079
#define NAME_LONGTEXT 52,2133
#define OPTIONS_TEXT 54,2209
#define OPTIONS_LONGTEXT 55,2258
#define EXTRAINTF_TEXT 59,2475
#define EXTRAINTF_LONGTEXT 60,2528
vlc_module_begin 66,2812
struct intf_sys_t86,3603
    SERVICE_STATUS_HANDLE hStatus;88,3623
    SERVICE_STATUS status;89,3658
    char *psz_service;psz_service90,3685
    vlc_thread_t thread;91,3708
static intf_thread_t *p_global_intf;p_global_intf104,4203
static int Activate(109,4441
void Close(127,4999
static void *Run(Run139,5371
static int NTServiceInstall(180,6576
static int NTServiceUninstall(247,8634
static void WINAPI ServiceDispatch(285,9610
static void WINAPI ServiceCtrlHandler(346,11505

keystore/list_util.c,101
ks_list_free(31,1242
ks_values_copy(40,1436
ks_list_new_entry(56,1803
ks_list_find_entry(79,2456

video_chroma/yuvp.c,272
vlc_module_begin 46,1842
static void Close(89,3629
static picture_t *Filter(Filter97,3885
static inline uint8_t vlc_uint8(216,7974
static void Yuv2Rgb(224,8110
#   define SCALEBITS 227,8242
#   define ONE_HALF 228,8266
#   define FIX(229,8310
#undef FIX243,8838

access/v4l2/vbi.c,242
# define VBI_NUM_CC_STREAMS 39,1404
struct vlc_v4l2_vbi41,1435
    vbi_capture *cap;cap43,1457
    es_out_id_t *es[es44,1479
vlc_v4l2_vbi_t *OpenVBI OpenVBI47,1524
int GetFdVBI 101,3101
void GrabVBI 106,3178
void CloseVBI 156,4793

packetizer/flac.c,1531
vlc_module_begin(47,1856
#define MAX_FLAC_HEADER_SIZE 58,2283
#define MIN_FLAC_FRAME_SIZE 59,2315
struct decoder_sys_t60,2369
    int i_state;65,2431
    block_bytestream_t bytestream;67,2449
        unsigned min_blocksize,74,2540
        unsigned min_blocksize, max_blocksize;74,2540
        unsigned min_framesize,75,2587
        unsigned min_framesize, max_framesize;75,2587
        unsigned sample_rate;76,2634
        unsigned channels;77,2664
        unsigned bits_per_sample;78,2691
    } stream_info;80,2726
    bool b_stream_info;81,2745
    mtime_t i_pts;86,2810
    mtime_t i_firstpts;87,2829
    mtime_t i_firstframepts;88,2853
    mtime_t i_duration;89,2882
    unsigned int i_frame_length;91,2907
    size_t i_frame_size;92,2940
    uint16_t crc;93,2965
    unsigned int i_rate,94,2983
    unsigned int i_rate, i_channels,94,2983
    unsigned int i_rate, i_channels, i_bits_per_sample;94,2983
    size_t i_buf;95,3039
    uint8_t *p_buf;p_buf96,3057
static const int pi_channels_maps[pi_channels_maps99,3081
static void ProcessHeader(123,4090
static int64_t read_utf8(169,5569
static const uint8_t flac_crc8_table[flac_crc8_table214,6919
static uint8_t flac_crc8(249,8760
static const uint16_t flac_crc16_table[flac_crc16_table260,8983
static uint16_t flac_crc16(295,11434
static uint16_t flac_crc16_undo(301,11627
static int SyncInfo(350,14182
static void Flush(526,19521
static block_t *Packetize(Packetize535,19692
static int Open(775,29148
static void Close(810,30057

video_filter/sharpen.c,456
#define SIG_TEXT 46,1724
#define SIG_LONGTEXT 47,1770
#define SHARPEN_HELP 59,2299
#define FILTER_PREFIX 60,2361
vlc_module_begin 65,2575
struct filter_sys_t89,3501
    vlc_mutex_t lock;91,3523
    int tab_precalc[tab_precalc92,3545
inline static int32_t clip(98,3780
static void init_precalc_table(103,3871
static int Create(116,4403
static void Destroy(153,5811
static picture_t *Filter(Filter170,6534
static int SharpenCallback(237,9005

video_output/fb.c,1801
#define FB_DEV_VAR 54,2350
#define DEVICE_TEXT 56,2378
#define DEVICE_LONGTEXT 57,2423
#define TTY_TEXT 60,2520
#define TTY_LONGTEXT 61,2565
#define FB_MODE_TEXT 65,2701
#define FB_MODE_LONGTEXT 66,2758
#define HW_ACCEL_TEXT 70,2932
#define HW_ACCEL_LONGTEXT 71,2993
#define CHROMA_TEXT 73,3068
#define CHROMA_LONGTEXT 74,3121
vlc_module_begin 79,3330
struct vout_display_sys_t 117,4754
    int                 tty;119,4811
    bool                is_tty;120,4889
    struct termios      old_termios;121,4921
    struct sigaction            sig_usr1;125,5010
    struct sigaction            sig_usr2;126,5090
    struct vt_mode              vt_mode;128,5177
    int                         fd;131,5292
    struct fb_var_screeninfo    old_info;132,5370
    struct fb_var_screeninfo    var_info;133,5450
    bool                        has_pan;134,5530
    struct fb_cmap              fb_cmap;135,5610
    uint16_t                    *palette;palette136,5690
    bool                        is_hw_accel;137,5770
    uint32_t width;140,5879
    uint32_t height;141,5899
    uint32_t line_length;142,5920
    vlc_fourcc_t chroma;143,5946
    int      bytes_per_pixel;144,5971
    uint8_t     *video_ptr;video_ptr147,6025
    size_t      video_size;148,6104
    picture_t       *picture;picture150,6184
    picture_pool_t  *pool;pool151,6214
static void ClearScreen(155,6246
static int Open(174,6782
static void Close(324,10893
static picture_pool_t *Pool(Pool343,11259
static void Display(368,11986
static int Control(395,12819
static int TtyInit(402,12991
static void TtyExit(474,15046
static int OpenDisplay(497,15676
static void CloseDisplay(660,21019
static void SwitchDisplay(692,22026
static void TextMode(729,23229
static void GfxMode(737,23407

packetizer/mpeg4video.c,1917
vlc_module_begin 51,1973
struct decoder_sys_t62,2388
    packetizer_t packetizer;67,2450
    mtime_t i_interpolated_pts;72,2520
    mtime_t i_interpolated_dts;73,2552
    mtime_t i_last_ref_pts;74,2584
    mtime_t i_last_time_ref;75,2612
    mtime_t i_time_ref;76,2641
    mtime_t i_last_time;77,2665
    mtime_t i_last_timeincr;78,2690
    unsigned int i_flags;80,2720
    int         i_fps_num;82,2747
    int         i_fps_den;83,2774
    int         i_last_incr;84,2801
    int         i_last_incr_diff;85,2830
    bool  b_frame;87,2865
    block_t    *p_frame;p_frame90,2921
    block_t    **pp_last;pp_last91,2946
#define VIDEO_OBJECT_MASK 106,3487
#define VIDEO_OBJECT_LAYER_MASK 107,3541
#define VIDEO_OBJECT_START_CODE 109,3596
#define VIDEO_OBJECT_LAYER_START_CODE 110,3650
#define VISUAL_OBJECT_SEQUENCE_START_CODE 111,3704
#define VISUAL_OBJECT_SEQUENCE_END_CODE 112,3758
#define USER_DATA_START_CODE 113,3812
#define GROUP_OF_VOP_START_CODE 114,3866
#define VIDEO_SESSION_ERROR_CODE 115,3920
#define VISUAL_OBJECT_START_CODE 116,3974
#define VOP_START_CODE 117,4028
#define FACE_OBJECT_START_CODE 118,4082
#define FACE_OBJECT_PLANE_START_CODE 119,4136
#define MESH_OBJECT_START_CODE 120,4190
#define MESH_OBJECT_PLANE_START_CODE 121,4244
#define STILL_TEXTURE_OBJECT_START_CODE 122,4298
#define TEXTURE_SPATIAL_LAYER_START_CODE 123,4352
#define TEXTURE_SNR_LAYER_START_CODE 124,4406
static const uint8_t p_mp4v_startcode[p_mp4v_startcode126,4461
static int Open(131,4733
static void Close(188,6602
static block_t *Packetize(Packetize202,7055
static void PacketizeFlush(209,7233
static void PacketizeReset(219,7542
static block_t *PacketizeParse(PacketizeParse242,8087
static int PacketizeValidate(256,8444
static block_t *ParseMPEGBlock(ParseMPEGBlock280,9364
static int ParseVOL(354,11584
static int ParseVOP(445,13842
static int vlc_log2(547,17013

keystore/list_util.h,198
#define VLC_KEYSTORE_LIST_UTIL_H_22,1146
struct ks_list30,1346
    vlc_keystore_entry *p_entries;p_entries32,1363
    unsigned            i_count;33,1398
    unsigned            i_max;34,1431

services_discovery/upnp.cpp,4649
const char* MEDIA_SERVER_DEVICE_TYPE 43,1615
const char* CONTENT_DIRECTORY_SERVICE_TYPE 44,1699
const char* SATIP_SERVER_DEVICE_TYPE 45,1795
#define SATIP_CHANNEL_LIST 47,1871
#define SATIP_CHANNEL_LIST_URL 48,1924
static const char *const ppsz_satip_channel_lists[ppsz_satip_channel_lists49,1992
static const char *const ppsz_readible_satip_channel_lists[ppsz_readible_satip_channel_lists52,2141
struct services_discovery_sys_t59,2342
    UpnpInstanceWrapper* p_upnp;services_discovery_sys_t::p_upnp61,2376
    vlc_thread_t         thread;services_discovery_sys_t::thread62,2409
struct access_sys_t65,2446
    UpnpInstanceWrapper* p_upnp;access_sys_t::p_upnp67,2468
UpnpInstanceWrapper* UpnpInstanceWrapper::s_instance;70,2505
vlc_mutex_t UpnpInstanceWrapper::s_lock 71,2559
SD::MediaServerList *UpnpInstanceWrapper::p_server_list UpnpInstanceWrapper::p_server_list72,2619
namespace SD77,2718
namespace Access83,2814
    set_description(102,3279
IXML_Document* parseBrowseResult(145,4624
namespace SD195,6499
SearchThread(SD::SearchThread199,6529
static int Open(224,7318
static void Close(257,8224
MediaServerDesc::MediaServerDesc(267,8481
MediaServerDesc::~MediaServerDesc(278,8796
MediaServerList::MediaServerList(287,8924
MediaServerList::~MediaServerList(292,9011
bool MediaServerList::addServer(297,9080
MediaServerDesc* MediaServerList::getServer(347,10912
void MediaServerList::parseNewServer(362,11264
std::string MediaServerList::getIconURL(598,20100
void MediaServerList::removeServer(652,22122
int MediaServerList::Callback(674,22687
namespace Access759,25289
Upnp_i11e_cb::Upnp_i11e_cb(Access::Upnp_i11e_cb::Upnp_i11e_cb762,25309
Upnp_i11e_cb::~Upnp_i11e_cb(772,25576
void Upnp_i11e_cb::waitAndRelease(778,25676
int Upnp_i11e_cb::run(795,26081
MediaServer::MediaServer(816,26678
MediaServer::~MediaServer(833,27260
bool MediaServer::addContainer(838,27317
    class ItemDescriptionHolder::ItemDescriptionHolder865,28066
        struct Slave ::ItemDescriptionHolder::Slave868,28117
            slave_type type;::ItemDescriptionHolder::Slave::type870,28162
            Slave(::ItemDescriptionHolder::Slave::Slave872,28192
        std::set<Slave> slaves;::ItemDescriptionHolder::slaves878,28338
        const char* objectID,::ItemDescriptionHolder::objectID880,28371
            * title,::ItemDescriptionHolder::title881,28401
            * psz_artist,::ItemDescriptionHolder::psz_artist882,28422
            * psz_genre,::ItemDescriptionHolder::psz_genre883,28448
            * psz_album,::ItemDescriptionHolder::psz_album884,28473
            * psz_date,::ItemDescriptionHolder::psz_date885,28498
            * psz_orig_track_nb,::ItemDescriptionHolder::psz_orig_track_nb886,28522
            * psz_album_artist,::ItemDescriptionHolder::psz_album_artist887,28555
            * psz_albumArt;::ItemDescriptionHolder::psz_albumArt888,28587
        enum MEDIA_TYPE::ItemDescriptionHolder::MEDIA_TYPE891,28628
                VIDEO ::ItemDescriptionHolder::MEDIA_TYPE::VIDEO893,28666
                AUDIO,::ItemDescriptionHolder::MEDIA_TYPE::AUDIO894,28693
                IMAGE::ItemDescriptionHolder::MEDIA_TYPE::IMAGE895,28716
        MEDIA_TYPE media_type;::ItemDescriptionHolder::media_type898,28754
        ItemDescriptionHolder(::ItemDescriptionHolder::ItemDescriptionHolder900,28786
        bool init(::ItemDescriptionHolder::init904,28839
        void addSlave(::ItemDescriptionHolder::addSlave936,30648
        void addSubtitleSlave(::ItemDescriptionHolder::addSubtitleSlave942,30813
        void setArtworkURL(::ItemDescriptionHolder::setArtworkURL949,31051
        void apply(::ItemDescriptionHolder::apply954,31199
        input_item_t *createNewItem(::ItemDescriptionHolder::createNewItem979,32371
bool MediaServer::addItem(999,33248
int MediaServer::sendActionCb(1064,35650
IXML_Document* MediaServer::_browseAction(1083,36303
bool MediaServer::fetchContents(1184,39723
static int ReadDirectory(1236,41462
static int ControlDirectory(1245,41674
static int Open(1259,42005
static void Close(1280,42503
UpnpInstanceWrapper::UpnpInstanceWrapper(1291,42706
UpnpInstanceWrapper::~UpnpInstanceWrapper(1297,42797
UpnpInstanceWrapper *UpnpInstanceWrapper::get(UpnpInstanceWrapper::get1303,42902
void UpnpInstanceWrapper::release(1372,45257
UpnpClient_Handle UpnpInstanceWrapper::handle(1390,45673
int UpnpInstanceWrapper::Callback(1395,45753
SD::MediaServerList *UpnpInstanceWrapper::lockMediaServerList(UpnpInstanceWrapper::lockMediaServerList1410,46197
void UpnpInstanceWrapper::unlockMediaServerList(1416,46405

demux/mpeg/ts_sl.c,187
const es_mpeg4_descriptor_t * GetMPEG4DescByEsId(33,1208
static ts_pes_es_t * GetPMTESBySLEsId(54,1914
bool SetupISO14496LogicalStream(65,2214
void SLPackets_Section_Handler(152,4610

codec/omxil/OMX_Image.h,5947
#define OMX_Image_h29,1328
typedef enum OMX_IMAGE_CODINGTYPE 53,1834
    OMX_IMAGE_CodingUnused,54,1870
    OMX_IMAGE_CodingAutoDetect,55,1936
    OMX_IMAGE_CodingJPEG,56,2008
    OMX_IMAGE_CodingJPEG2K,57,2072
    OMX_IMAGE_CodingEXIF,58,2136
    OMX_IMAGE_CodingTIFF,59,2195
    OMX_IMAGE_CodingGIF,60,2254
    OMX_IMAGE_CodingPNG,61,2317
    OMX_IMAGE_CodingLZW,62,2375
    OMX_IMAGE_CodingBMP,63,2433
    OMX_IMAGE_CodingKhronosExtensions 64,2496
    OMX_IMAGE_CodingKhronosExtensions = 0x6F000000,x6F00000064,2496
    OMX_IMAGE_CodingVendorStartUnused 65,2617
    OMX_IMAGE_CodingVendorStartUnused = 0x7F000000,x7F00000065,2617
    OMX_IMAGE_CodingMax 66,2727
    OMX_IMAGE_CodingMax = 0x7FFFFFFFx7FFFFFFF66,2727
} OMX_IMAGE_CODINGTYPE;67,2764
typedef struct OMX_IMAGE_PORTDEFINITIONTYPE 111,5127
    OMX_STRING cMIMEType;112,5173
    OMX_NATIVE_DEVICETYPE pNativeRender;113,5199
    OMX_U32 nFrameWidth;114,5240
    OMX_U32 nFrameHeight;115,5266
    OMX_S32 nStride;116,5292
    OMX_U32 nSliceHeight;117,5318
    OMX_BOOL bFlagErrorConcealment;118,5344
    OMX_IMAGE_CODINGTYPE eCompressionFormat;119,5380
    OMX_COLOR_FORMATTYPE eColorFormat;120,5425
    OMX_NATIVE_WINDOWTYPE pNativeWindow;121,5464
} OMX_IMAGE_PORTDEFINITIONTYPE;122,5505
typedef struct OMX_IMAGE_PARAM_PORTFORMATTYPE 140,6253
    OMX_U32 nSize;141,6301
    OMX_VERSIONTYPE nVersion;142,6320
    OMX_U32 nPortIndex;143,6350
    OMX_U32 nIndex;144,6374
    OMX_IMAGE_CODINGTYPE eCompressionFormat;145,6394
    OMX_COLOR_FORMATTYPE eColorFormat;146,6439
} OMX_IMAGE_PARAM_PORTFORMATTYPE;147,6478
typedef enum OMX_IMAGE_FLASHCONTROLTYPE 156,6597
    OMX_IMAGE_FlashControlOn 157,6639
    OMX_IMAGE_FlashControlOff,158,6673
    OMX_IMAGE_FlashControlAuto,159,6704
    OMX_IMAGE_FlashControlRedEyeReduction,160,6736
    OMX_IMAGE_FlashControlFillin,161,6779
    OMX_IMAGE_FlashControlTorch,162,6813
    OMX_IMAGE_FlashControlKhronosExtensions 163,6846
    OMX_IMAGE_FlashControlKhronosExtensions = 0x6F000000,x6F000000163,6846
    OMX_IMAGE_FlashControlVendorStartUnused 164,6973
    OMX_IMAGE_FlashControlVendorStartUnused = 0x7F000000,x7F000000164,6973
    OMX_IMAGE_FlashControlMax 165,7089
    OMX_IMAGE_FlashControlMax = 0x7FFFFFFFx7FFFFFFF165,7089
} OMX_IMAGE_FLASHCONTROLTYPE;166,7132
typedef struct OMX_IMAGE_PARAM_FLASHCONTROLTYPE 178,7431
    OMX_U32 nSize;179,7481
    OMX_VERSIONTYPE nVersion;180,7500
    OMX_U32 nPortIndex;181,7530
    OMX_IMAGE_FLASHCONTROLTYPE eFlashControl;182,7554
} OMX_IMAGE_PARAM_FLASHCONTROLTYPE;183,7600
typedef enum OMX_IMAGE_FOCUSCONTROLTYPE 189,7670
    OMX_IMAGE_FocusControlOn 190,7712
    OMX_IMAGE_FocusControlOff,191,7746
    OMX_IMAGE_FocusControlAuto,192,7777
    OMX_IMAGE_FocusControlAutoLock,193,7809
    OMX_IMAGE_FocusControlKhronosExtensions 194,7845
    OMX_IMAGE_FocusControlKhronosExtensions = 0x6F000000,x6F000000194,7845
    OMX_IMAGE_FocusControlVendorStartUnused 195,7972
    OMX_IMAGE_FocusControlVendorStartUnused = 0x7F000000,x7F000000195,7972
    OMX_IMAGE_FocusControlMax 196,8088
    OMX_IMAGE_FocusControlMax = 0x7FFFFFFFx7FFFFFFF196,8088
} OMX_IMAGE_FOCUSCONTROLTYPE;197,8131
typedef struct OMX_IMAGE_CONFIG_FOCUSCONTROLTYPE 212,8627
    OMX_U32 nSize;213,8678
    OMX_VERSIONTYPE nVersion;214,8697
    OMX_U32 nPortIndex;215,8727
    OMX_IMAGE_FOCUSCONTROLTYPE eFocusControl;216,8751
    OMX_U32 nFocusSteps;217,8797
    OMX_U32 nFocusStepIndex;218,8822
} OMX_IMAGE_CONFIG_FOCUSCONTROLTYPE;219,8851
typedef struct OMX_IMAGE_PARAM_QFACTORTYPE 237,9647
    OMX_U32 nSize;238,9692
    OMX_VERSIONTYPE nVersion;239,9723
    OMX_U32 nPortIndex;240,9754
    OMX_U32 nQFactor;241,9785
} OMX_IMAGE_PARAM_QFACTORTYPE;242,9847
typedef enum OMX_IMAGE_QUANTIZATIONTABLETYPE 248,9917
    OMX_IMAGE_QuantizationTableLuma 249,9964
    OMX_IMAGE_QuantizationTableChroma,250,10005
    OMX_IMAGE_QuantizationTableChromaCb,251,10044
    OMX_IMAGE_QuantizationTableChromaCr,252,10085
    OMX_IMAGE_QuantizationTableKhronosExtensions 253,10126
    OMX_IMAGE_QuantizationTableKhronosExtensions = 0x6F000000,x6F000000253,10126
    OMX_IMAGE_QuantizationTableVendorStartUnused 254,10258
    OMX_IMAGE_QuantizationTableVendorStartUnused = 0x7F000000,x7F000000254,10258
    OMX_IMAGE_QuantizationTableMax 255,10379
    OMX_IMAGE_QuantizationTableMax = 0x7FFFFFFFx7FFFFFFF255,10379
} OMX_IMAGE_QUANTIZATIONTABLETYPE;256,10427
typedef struct OMX_IMAGE_PARAM_QUANTIZATIONTABLETYPE 275,11368
    OMX_U32 nSize;276,11423
    OMX_VERSIONTYPE nVersion;277,11442
    OMX_U32 nPortIndex;278,11472
    OMX_IMAGE_QUANTIZATIONTABLETYPE eQuantizationTable;279,11496
    OMX_U8 nQuantizationMatrix[nQuantizationMatrix280,11552
} OMX_IMAGE_PARAM_QUANTIZATIONTABLETYPE;281,11588
typedef enum OMX_IMAGE_HUFFMANTABLETYPE 288,11732
    OMX_IMAGE_HuffmanTableAC 289,11774
    OMX_IMAGE_HuffmanTableDC,290,11808
    OMX_IMAGE_HuffmanTableACLuma,291,11838
    OMX_IMAGE_HuffmanTableACChroma,292,11872
    OMX_IMAGE_HuffmanTableDCLuma,293,11908
    OMX_IMAGE_HuffmanTableDCChroma,294,11942
    OMX_IMAGE_HuffmanTableKhronosExtensions 295,11978
    OMX_IMAGE_HuffmanTableKhronosExtensions = 0x6F000000,x6F000000295,11978
    OMX_IMAGE_HuffmanTableVendorStartUnused 296,12105
    OMX_IMAGE_HuffmanTableVendorStartUnused = 0x7F000000,x7F000000296,12105
    OMX_IMAGE_HuffmanTableMax 297,12221
    OMX_IMAGE_HuffmanTableMax = 0x7FFFFFFFx7FFFFFFF297,12221
} OMX_IMAGE_HUFFMANTABLETYPE;298,12264
typedef struct OMX_IMAGE_PARAM_HUFFMANTTABLETYPE 313,12905
    OMX_U32 nSize;314,12956
    OMX_VERSIONTYPE nVersion;315,12975
    OMX_U32 nPortIndex;316,13005
    OMX_IMAGE_HUFFMANTABLETYPE eHuffmanTable;317,13029
    OMX_U8 nNumberOfHuffmanCodeOfLength[nNumberOfHuffmanCodeOfLength318,13075
    OMX_U8 nHuffmanTable[nHuffmanTable319,13120
}OMX_IMAGE_PARAM_HUFFMANTTABLETYPE;OMX_IMAGE_PARAM_HUFFMANTTABLETYPE320,13151

video_chroma/yuy2_i422.c,274
#define SRC_FOURCC 36,1511
#define DEST_FOURCC 37,1562
vlc_module_begin 54,2428
VIDEO_FILTER_WRAPPER(110,4159
#define C_YUYV_YUV422(139,5273
static void YVYU_I422(161,6145
#define C_YVYU_YUV422(183,6945
static void UYVY_I422(205,7817
#define C_UYVY_YUV422(227,8617

demux/mpeg/ts_sl.h,176
#define VLC_TS_SL_H20,1017
typedef struct es_mpeg4_descriptor_t es_mpeg4_descriptor_t;22,1038
typedef struct decoder_config_descriptor_t decoder_config_descriptor_t;23,1098

stream_out/chromecast/cast_channel.proto,329
syntax 5,166
option optimize_for 7,186
package castchannel;9,223
  enum ProtocolVersion 14,354
    CASTV2_1_0 15,379
  enum PayloadType 44,1541
    STRING 45,1562
    BINARY 46,1578
message AuthResponse 60,1918
  enum ErrorType 66,2042
    INTERNAL_ERROR 67,2061
    NO_TLS 68,2085
message DeviceAuthMessage 73,2186

video_filter/extract.c,1347
#define COMPONENT_TEXT 62,2759
#define COMPONENT_LONGTEXT 63,2813
#define FILTER_PREFIX 64,2911
static const int pi_component_values[pi_component_values66,2945
static const char *const ppsz_component_descriptions[ppsz_component_descriptions67,3020
vlc_module_begin 73,3290
enum { RED=92,3918
enum { RED=0xFF0000,xFF000092,3918
enum { RED=0xFF0000, GREEN=92,3918
enum { RED=0xFF0000, GREEN=0x00FF00,x00FF0092,3918
enum { RED=0xFF0000, GREEN=0x00FF00, BLUE=92,3918
enum { RED=0xFF0000, GREEN=0x00FF00, BLUE=0x0000FF x0000FF92,3918
struct filter_sys_t93,3972
    vlc_mutex_t lock;95,3994
    int *projection_matrix;projection_matrix96,4016
    uint32_t i_color;97,4044
static int Create(103,4239
static void Destroy(157,6018
static picture_t *Filter(Filter172,6526
#define U 255,9372
#define V 256,9386
static void mmult(258,9401
static void make_projection_matrix(272,9727
static void get_custom_from_yuv420(314,11309
static void get_custom_from_yuv422(363,13440
static void get_custom_from_packedyuv422(405,15214
static void get_red_from_yuv420(459,17279
static void get_green_from_yuv420(512,19263
static void get_blue_from_yuv420(568,21483
static void get_red_from_yuv422(621,23466
static void get_green_from_yuv422(666,25119
static void get_blue_from_yuv422(713,26970
static int ExtractCallback(758,28623

video_filter/invert.c,97
vlc_module_begin 49,1996
static void Destroy(88,3635
static picture_t *Filter(Filter100,4149

access/dvb/scan_list.c,693
static scan_list_entry_t * scan_list_entry_New(30,1233
static void scan_list_entry_Delete(43,1619
static bool scan_list_entry_validate(49,1744
static bool scan_list_entry_add(70,2273
static int scan_list_parse_fec(83,2578
static int scan_list_parse_guard(98,2905
static void scan_token_strip(110,3196
static bool scan_list_token_split(129,3551
#define STRING_EQUALS(156,4271
#define KEY_EQUALS(159,4405
#define VALUE_EQUALS(162,4516
#define READ_STRINGVAL(165,4635
#define WLEN(173,4833
static void scan_list_dvbv5_entry_fill(175,4884
void scan_list_entries_release(272,8295
scan_list_entry_t * scan_list_dvbv5_load(282,8511
scan_list_entry_t * scan_list_dvbv3_load(363,10666

demux/mkv/chapters.cpp,585
chapter_item_c::~chapter_item_c(32,1317
chapter_item_c *chapter_item_c::BrowseCodecPrivate(chapter_item_c::BrowseCodecPrivate40,1482
void chapter_item_c::Append(57,2100
chapter_item_c * chapter_item_c::FindChapter(77,2609
std::string chapter_item_c::GetCodecName(94,2976
int16 chapter_item_c::GetTitleNumber(110,3344
bool chapter_item_c::ParentOf(126,3673
bool chapter_item_c::EnterLeaveHelper_ 142,4028
bool chapter_item_c::Enter(162,4503
bool chapter_item_c::Leave(170,4666
bool chapter_item_c::EnterAndLeave(183,4912
std::string chapter_edition_c::GetMainName(227,6153

audio_output/volume.h,188
#define add_sw_gain(29,1211
static int aout_SoftVolumeSet(34,1422
static int aout_SoftMuteSet 56,2136
static void aout_SoftVolumeInit(68,2392
static void aout_SoftVolumeStart 83,2807

access/mms/buffer.c,575
int var_buffer_initwrite(42,1689
int var_buffer_reinitwrite(50,1934
void var_buffer_add8 67,2399
void var_buffer_add16(79,2725
void var_buffer_add32(85,2887
void var_buffer_add64(91,3059
void var_buffer_addmemory(97,3236
void var_buffer_addUTF16(110,3608
void var_buffer_free(137,4213
void var_buffer_initread(144,4335
uint8_t var_buffer_get8 151,4493
uint16_t var_buffer_get16(163,4727
uint32_t var_buffer_get32(174,4919
uint64_t var_buffer_get64(184,5113
int var_buffer_getmemory 194,5313
int var_buffer_readempty(211,5690
void var_buffer_getguid(216,5801

video_output/xcb/keys.c,535
struct key_handler_t41,1326
    vlc_object_t      *obj;obj43,1349
    xcb_key_symbols_t *syms;syms44,1377
key_handler_t *XCB_keyHandler_Create XCB_keyHandler_Create56,1747
void XCB_keyHandler_Destroy 68,2038
static int keysymcmp 74,2146
static uint_fast32_t ConvertKeySym 82,2302
        xcb_keysym_t x11;86,2388
        uint32_t vlc;87,2414
int XCB_keyHandler_Process 140,3930
key_handler_t *XCB_keyHandler_Create XCB_keyHandler_Create195,5710
void XCB_keyHandler_Destroy 203,5928
int XCB_keyHandler_Process 209,6012

access/dvb/scan_list.h,637
#define VLC_SCAN_LIST_H21,1120
typedef struct scan_list_entry_t scan_list_entry_t;23,1145
typedef struct scan_list_entry_t25,1198
    char *psz_channel;psz_channel27,1233
    unsigned i_freq;29,1257
    unsigned i_bw;30,1278
    unsigned i_rate;31,1297
    scan_modulation_t modulation;33,1319
    scan_coderate_t   coderate_lp;34,1353
    scan_coderate_t   coderate_hp;35,1388
    scan_coderate_t   inner_fec;36,1423
    scan_guard_t      guard_interval;37,1456
    scan_delivery_t   delivery;38,1494
    scan_polarization_t polarization;39,1526
    scan_list_entry_t *p_next;p_next41,1565
} scan_list_entry_t;43,1597

access/dtv/access.c,4948
#define ADAPTER_TEXT 36,1247
#define ADAPTER_LONGTEXT 37,1286
#define DEVICE_TEXT 41,1455
#define DEVICE_LONGTEXT 42,1492
#define BUDGET_TEXT 45,1662
#define BUDGET_LONGTEXT 46,1707
#define NAME_TEXT 50,1890
#define NAME_LONGTEXT 51,1927
#define CREATE_TEXT 53,2004
#define CREATE_LONGTEXT 54,2053
#define FREQ_TEXT 56,2131
#define FREQ_LONGTEXT 57,2170
#define MODULATION_TEXT 61,2334
#define MODULATION_A_TEXT 62,2391
#define MODULATION_B_TEXT 63,2442
#define MODULATION_C_TEXT 64,2493
#define MODULATION_LONGTEXT 65,2544
static const char *const modulation_vlc[modulation_vlc70,2826
static const char *const modulation_user[modulation_user75,3007
#define SRATE_TEXT 81,3218
#define SRATE_LONGTEXT 82,3263
#define INVERSION_TEXT 86,3403
#define INVERSION_LONGTEXT 87,3451
const int auto_off_on_vlc[auto_off_on_vlc90,3599
static const char *const auto_off_on_user[auto_off_on_user91,3643
#define CODE_RATE_TEXT 94,3736
#define CODE_RATE_HP_TEXT 95,3779
#define CODE_RATE_LP_TEXT 96,3835
#define CODE_RATE_A_TEXT 97,3890
#define CODE_RATE_B_TEXT 98,3939
#define CODE_RATE_C_TEXT 99,3988
#define CODE_RATE_LONGTEXT 100,4037
static const char *const code_rate_vlc[code_rate_vlc102,4138
static const char *const code_rate_user[code_rate_user106,4292
#define TRANSMISSION_TEXT 111,4468
const int transmission_vlc[transmission_vlc112,4518
static const char *const transmission_user[transmission_user115,4582
#define BANDWIDTH_TEXT 119,4694
const int bandwidth_vlc[bandwidth_vlc120,4739
static const char *const bandwidth_user[bandwidth_user123,4797
#define GUARD_TEXT 128,4955
const char *const guard_vlc[guard_vlc129,4995
static const char *const guard_user[guard_user132,5099
#define HIERARCHY_TEXT 136,5225
const int hierarchy_vlc[hierarchy_vlc137,5269
static const char *const hierarchy_user[hierarchy_user140,5322
#define PLP_ID_TEXT 144,5420
#define SEGMENT_COUNT_A_TEXT 146,5474
#define SEGMENT_COUNT_B_TEXT 147,5532
#define SEGMENT_COUNT_C_TEXT 148,5590
#define TIME_INTERLEAVING_A_TEXT 150,5649
#define TIME_INTERLEAVING_B_TEXT 151,5714
#define TIME_INTERLEAVING_C_TEXT 152,5779
#define STREAM_ID_TEXT 154,5845
#define PILOT_TEXT 156,5893
#define ROLLOFF_TEXT 158,5925
const int rolloff_vlc[rolloff_vlc159,5968
static const char *const rolloff_user[rolloff_user162,6019
#define TS_ID_TEXT 166,6140
#define POLARIZATION_TEXT 168,6186
#define POLARIZATION_LONGTEXT 169,6241
static const char *const polarization_vlc[polarization_vlc172,6424
static const char *const polarization_user[polarization_user173,6498
#define HIGH_VOLTAGE_TEXT 177,6693
#define HIGH_VOLTAGE_LONGTEXT 178,6742
#define LNB_LOW_TEXT 183,6963
#define LNB_HIGH_TEXT 184,7027
#define LNB_LONGTEXT 185,7093
#define LNB_SWITCH_TEXT 189,7321
#define LNB_SWITCH_LONGTEXT 190,7388
#define TONE_TEXT 194,7636
#define TONE_LONGTEXT 195,7682
#define SATNO_TEXT 199,7850
#define SATNO_LONGTEXT 200,7893
static const int satno_vlc[satno_vlc206,8188
static const char *const satno_user[satno_user207,8238
#define UNCOMMITTED_TEXT 211,8341
#define UNCOMMITTED_LONGTEXT 212,8402
#define NETID_TEXT 220,8824
#define AZIMUTH_TEXT 221,8868
#define AZIMUTH_LONGTEXT 222,8913
#define ELEVATION_TEXT 223,8982
#define ELEVATION_LONGTEXT 224,9031
#define LONGITUDE_TEXT 225,9104
#define LONGITUDE_LONGTEXT 226,9153
#define RANGE_TEXT 229,9253
#define RANGE_LONGTEXT 230,9299
#define MAJOR_CHANNEL_TEXT 234,9420
#define MINOR_CHANNEL_TEXT 235,9467
#define PHYSICAL_CHANNEL_TEXT 236,9519
vlc_module_begin 241,9645
struct access_sys_t427,17947
    dvb_device_t *dev;dev429,17969
    uint8_t signal_poll;430,17992
    tuner_setup_t pf_setup;431,18017
static int Open 443,18468
static void Close 493,19792
static block_t *Read Read502,19957
#define BUFSIZE 504,20019
static int Control 525,20431
static int Tune 605,22601
static uint64_t var_InheritFrequency 615,22902
static uint32_t var_InheritCodeRate 627,23265
static int modcmp 657,24188
static const char *var_InheritModulation var_InheritModulation662,24294
static unsigned var_InheritGuardInterval 697,25305
static int atsc_setup 724,25995
static int cqam_setup 731,26188
static int dvbc_setup 739,26397
static char var_InheritPolarization 749,26735
static void sec_setup 776,27454
static int dvbs_setup 786,27829
static int dvbs2_setup 797,28150
static int dvbt_setup 813,28756
static int dvbt2_setup 826,29349
static int isdbc_setup 839,29875
static int isdbs_setup 849,30216
static int isdbt_setup 860,30494
    const dtv_delivery_t delivery;888,31478
    tuner_setup_t const pf_setup;889,31513
    const char *psz_scheme;psz_scheme890,31547
} delsys_mappings[delsys_mappings891,31575
tuner_setup_t dtv_get_delivery_tuner_setup(905,32241
static dtv_delivery_t GetDeliveryByScheme(915,32491
static inline dtv_delivery_t GetSingleDelivery(925,32776
static dtv_delivery_t GuessSystem 934,32986

demux/adaptive/tools/Conversions.cpp,995
static time_t str_duration(38,1346
IsoTime::IsoTime(89,2737
IsoTime::operator time_t IsoTime::operator time_t94,2821
UTCTime::UTCTime(99,2877
    enum { UTCTIME_YEAR ::UTCTIME_YEAR101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON,::UTCTIME_MON101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY,::UTCTIME_DAY101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY, UTCTIME_HOUR,::UTCTIME_HOUR101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY, UTCTIME_HOUR, UTCTIME_MIN,::UTCTIME_MIN101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY, UTCTIME_HOUR, UTCTIME_MIN, UTCTIME_SEC,::UTCTIME_SEC101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY, UTCTIME_HOUR, UTCTIME_MIN, UTCTIME_SEC, UTCTIME_MSEC,::UTCTIME_MSEC101,2920
    enum { UTCTIME_YEAR = 0, UTCTIME_MON, UTCTIME_DAY, UTCTIME_HOUR, UTCTIME_MIN, UTCTIME_SEC, UTCTIME_MSEC, UTCTIME_TZ ::UTCTIME_TZ101,2920
time_t UTCTime::time(172,4798
mtime_t UTCTime::mtime(177,4859

access/mms/buffer.h,149
#define VLC_MMS_BUFFER_H_25,1192
    uint8_t *p_data;p_data29,1236
    int     i_data;30,1279
    int    i_size;33,1352
} var_buffer_t;34,1410

codec/mad.c,400
#define MAD_BUFFER_GUARD 51,2114
struct decoder_sys_t62,2575
    struct mad_stream mad_stream;64,2598
    struct mad_frame  mad_frame;65,2632
    struct mad_synth  mad_synth;66,2665
    int               i_reject_count;68,2699
    block_t          *p_last_buf;p_last_buf69,2737
vlc_module_begin 75,2955
static void DecodeFlush(219,7756
static int Open(231,8117
static void Close(282,9851

demux/adaptive/http/HTTPConnectionManager.cpp,701
AbstractConnectionManager::AbstractConnectionManager(37,1411
AbstractConnectionManager::~AbstractConnectionManager(44,1575
void AbstractConnectionManager::updateDownloadRate(49,1637
void AbstractConnectionManager::setDownloadRateObserver(55,1835
HTTPConnectionManager::HTTPConnectionManager 60,1948
HTTPConnectionManager::~HTTPConnectionManager 76,2476
void HTTPConnectionManager::closeAllConnections 84,2638
void HTTPConnectionManager::releaseAllConnections(92,2826
AbstractConnection * HTTPConnectionManager::reuseConnection(99,3037
AbstractConnection * HTTPConnectionManager::getConnection(111,3386
void HTTPConnectionManager::start(141,4040
void HTTPConnectionManager::cancel(148,4239

demux/mp4/fragments.c,517
mp4_fragment_t * MP4_Fragment_New(26,1137
void MP4_Fragment_Clean(43,1582
void MP4_Fragments_Remove(48,1678
void MP4_Fragments_Clean(64,2118
void MP4_Fragments_Insert(76,2464
bool MP4_Fragments_Init(110,3356
static stime_t GetTrackDurationInFragment(116,3487
stime_t GetTrackTotalDuration(127,3848
mp4_fragment_t * GetFragmentByAtomPos(139,4237
mp4_fragment_t * GetFragmentByPos(155,4703
mp4_fragment_t * GetFragmentByTime(174,5240
stime_t GetTrackFragmentTimeOffset(213,6644
void DumpFragments(230,7233

lua/libs/osd.c,709
#   define  _GNU_SOURCE28,1352
static int vlc_osd_icon_from_string(45,1710
        int i_icon;49,1802
        const char *psz_name;psz_name50,1822
static int vlclua_osd_icon(66,2231
static int vlc_osd_position_from_string(88,2889
        int i_position;92,2985
        const char *psz_name;psz_name93,3009
static int vlclua_osd_message(114,3968
static int vlc_osd_slider_type_from_string(136,4703
        int i_type;140,4802
        const char *psz_name;psz_name141,4822
static int vlclua_osd_slider(155,5162
static int vlclua_spu_channel_register(179,5917
static int vlclua_spu_channel_clear(199,6472
static const luaL_Reg vlclua_osd_reg[vlclua_osd_reg221,7183
void luaopen_osd(230,7466

access/v4l2/radio.c,204
struct demux_sys_t33,1221
    int fd;35,1242
    vlc_v4l2_ctrl_t *controls;controls36,1254
    mtime_t start;37,1285
static int RadioControl 40,1308
int RadioOpen 68,1999
void RadioClose 117,3277

codec/edummy.c,158
vlc_module_begin 38,1555
static block_t *EncodeVideo(EncodeVideo69,2688
static block_t *EncodeAudio(EncodeAudio78,3009
static void CloseEncoder(87,3333

video_chroma/omxdl.c,896
vlc_module_begin 34,1314
#define SRC_WIDTH 40,1480
#define SRC_HEIGHT 41,1530
#define DST_WIDTH 42,1581
#define DST_HEIGHT 43,1632
VIDEO_FILTER_WRAPPER 56,2146
VIDEO_FILTER_WRAPPER 69,2641
VIDEO_FILTER_WRAPPER 83,3220
VIDEO_FILTER_WRAPPER 96,3767
VIDEO_FILTER_WRAPPER 112,4289
VIDEO_FILTER_WRAPPER 125,4706
VIDEO_FILTER_WRAPPER 137,5104
VIDEO_FILTER_WRAPPER 151,5620
VIDEO_FILTER_WRAPPER 164,6104
static int FixRV16 190,6825
static int FixRV15 207,7220
static int FixRV12 224,7615
static int Open 248,8285
#define XRR_MAX 340,11442
#define YRR_MAX 342,11551
#define CNV 344,11658
static void I420_I420_Scale 347,11727
VIDEO_FILTER_WRAPPER 360,12340
VIDEO_FILTER_WRAPPER 375,12993
VIDEO_FILTER_WRAPPER 390,13592
VIDEO_FILTER_WRAPPER 406,14272
VIDEO_FILTER_WRAPPER 421,14925
VIDEO_FILTER_WRAPPER 436,15524
VIDEO_FILTER_WRAPPER 452,16204
VIDEO_FILTER_WRAPPER 467,16803

access/udp.c,341
#define BUFFER_TEXT 56,2165
#define BUFFER_LONGTEXT 57,2206
#define TIMEOUT_TEXT 58,2269
vlc_module_begin 60,2322
struct access_sys_t76,2812
    int fd;78,2834
    int timeout;79,2846
    size_t mtu;80,2863
static int Open(92,3343
static void Close(182,5868
static int Control(194,6219
static block_t *BlockUDP(BlockUDP224,7067

meta_engine/taglib.cpp,2651
# define TAGLIB_STATIC50,1852
#define VERSION_INT(54,1903
#define TAGLIB_VERSION 55,1957
#define TAGLIB_VERSION_1_11 59,2133
namespace VLCTagLib100,2941
    class ExtResolver VLCTagLib::ExtResolver103,2986
            ~ExtResolver(VLCTagLib::ExtResolver::~ExtResolver107,3111
            std::string ext;VLCTagLib::ExtResolver::ext111,3249
VLCTagLib::ExtResolver<T>::ExtResolver(ExtResolver116,3307
File *VLCTagLib::ExtResolver<T>::createFile(createFile123,3523
static bool b_extensions_registered 143,4219
static vlc_mutex_t taglib_lock 146,4294
class VlcIostream 161,4717
    VlcIostream(VlcIostream::VlcIostream164,4763
    ~VlcIostream(VlcIostream::~VlcIostream170,4872
    FileName name(VlcIostream::name175,4943
    ByteVector readBlock(VlcIostream::readBlock180,5021
    void writeBlock(VlcIostream::writeBlock191,5337
    void insert(VlcIostream::insert196,5429
    void removeBlock(VlcIostream::removeBlock200,5491
    bool readOnly(VlcIostream::readOnly204,5539
    bool isOpen(VlcIostream::isOpen209,5599
    void seek(VlcIostream::seek214,5657
    void clear(VlcIostream::clear232,6083
    long tell(VlcIostream::tell237,6129
    long length(VlcIostream::length242,6194
    void truncate(VlcIostream::truncate250,6364
    access_t* m_stream;VlcIostream::m_stream255,6410
    int64_t m_previousPos;VlcIostream::m_previousPos256,6434
static int ExtractCoupleNumberValues(260,6498
static void ReadMetaFromAPE(286,7224
#define SET(334,8965
#define SET_EXTRA(341,9221
#undef SET360,9850
#undef SET_EXTRA361,9861
static void ReadMetaFromASF(394,10715
#define SET(398,10840
#define SET_EXTRA(405,11282
#undef SET415,11846
#undef SET_EXTRA416,11857
static void ReadMetaFromId3v2(468,13563
#define SET(516,15536
#undef SET528,16094
    #define PI_COVER_SCORE_SIZE 572,17887
static void ReadMetaFromXiph(661,20890
#define SET(665,21047
#define SET_EXTRA(670,21368
#undef SET686,21942
#undef SET_EXTRA687,21953
static void ReadMetaFromMP4(768,24652
#define SET(771,24767
#define SET_EXTRA(777,25248
#undef SET787,25848
#undef SET_EXTRA788,25859
static int ReadMeta(816,26877
#define SET(887,28575
#define SETINT(890,28804
#undef SETINT906,29490
#undef SET907,29504
static void WriteMetaToAPE(987,32529
#define WRITE(990,32617
#undef WRITE1004,33258
static void WriteMetaToId3v2(1013,33386
#define WRITE(1016,33478
#undef WRITE1034,34509
#define WRITETXXX(1038,34608
#undef WRITETXXX1068,36974
static void WriteMetaToXiph(1147,38640
#define WRITE(1150,38737
#undef WRITE1169,39551
static int WriteMeta(1179,39701
#define SET(1215,40598
#undef SET1232,41300

access/dsm/sd.c,542
#define BROADCAST_TIMEOUT 42,1581
struct entry_item47,1697
    netbios_ns_entry *p_entry;p_entry49,1717
    input_item_t *p_item;p_item50,1748
struct services_discovery_sys_t53,1778
    netbios_ns      *p_ns;p_ns55,1812
    vlc_array_t     *p_entry_item_list;p_entry_item_list56,1839
static void entry_item_append(59,1883
static void entry_item_remove(75,2446
static void netbios_ns_discover_on_entry_added(96,3137
static void netbios_ns_discover_on_entry_removed(121,3871
int bdsm_SdOpen 129,4128
void bdsm_SdClose 162,5049

access/zip/zipaccess.c,579
struct access_sys_t41,1729
    unzFile            zipFile;44,1782
static char *unescapeXml(unescapeXml56,2293
int AccessOpen(95,3382
void AccessClose(204,6422
static int AccessControl(218,6853
static ssize_t AccessRead(268,8328
static int AccessSeek(281,8789
static void* ZCALLBACK ZipIO_Open(298,9345
static uLong ZCALLBACK ZipIO_Read(326,10147
static uLong ZCALLBACK ZipIO_Write(338,10674
static long ZCALLBACK ZipIO_Tell(350,11201
static long ZCALLBACK ZipIO_Seek(362,11678
static int ZCALLBACK ZipIO_Close(392,12668
static int ZCALLBACK ZipIO_Error(402,13037

demux/mp4/fragments.h,660
#define VLC_MP4_FRAGMENTS_H_21,1092
typedef struct mp4_fragment_t mp4_fragment_t;26,1167
struct mp4_fragment_t28,1214
    uint64_t i_chunk_range_min_offset;30,1238
    uint64_t i_chunk_range_max_offset;31,1277
        unsigned int i_track_ID;35,1334
        stime_t i_duration;36,1367
    } *p_durations;p_durations37,1411
    unsigned int i_durations;39,1432
    MP4_Box_t *p_moox;p_moox41,1463
    mp4_fragment_t *p_next;p_next42,1486
    mp4_fragment_t moov;47,1535
    mp4_fragment_t *p_last;p_last48,1604
} mp4_fragments_t;49,1632
static inline mp4_fragment_t * MP4_Fragment_Moov(51,1652
static inline void MP4_Fragment_Delete(59,1871

demux/dash/mpd/Representation.cpp,593
Representation::Representation 39,1451
Representation::~Representation 46,1637
StreamFormat Representation::getStreamFormat(51,1710
TrickModeType*      Representation::getTrickModeType 59,1920
void                Representation::setTrickMode 64,2026
int Representation::getQualityRanking(69,2159
void Representation::setQualityRanking(74,2243
const std::list<const Representation*>&     Representation::getDependencies(80,2386
void Representation::addDependency(85,2506
std::string Representation::contextualize(91,2641
mtime_t Representation::getScaledTimeBySegmentNumber(164,5141

access/v4l2/v4l2.c,3967
#define VIDEO_DEVICE_TEXT 44,1611
#define VIDEO_DEVICE_LONGTEXT 45,1666
#define VBI_DEVICE_TEXT 46,1730
#define VBI_DEVICE_LONGTEXT 47,1779
#define STANDARD_TEXT 50,1899
#define STANDARD_LONGTEXT 51,1938
#define CHROMA_TEXT 53,2025
#define CHROMA_LONGTEXT 54,2077
#define INPUT_TEXT 59,2383
#define INPUT_LONGTEXT 60,2416
#define AUDIO_INPUT_TEXT 62,2491
#define AUDIO_INPUT_LONGTEXT 63,2536
#define WIDTH_TEXT 65,2623
#define HEIGHT_TEXT 66,2656
#define SIZE_LONGTEXT 67,2691
#define FPS_TEXT 70,2827
#define FPS_LONGTEXT 71,2863
#define RADIO_DEVICE_TEXT 73,2936
#define RADIO_DEVICE_LONGTEXT 74,2983
#define FREQUENCY_TEXT 75,3045
#define FREQUENCY_LONGTEXT 76,3084
#define TUNER_AUDIO_MODE_TEXT 78,3173
#define TUNER_AUDIO_MODE_LONGTEXT 79,3220
#define CTRL_RESET_TEXT 82,3314
#define CTRL_RESET_LONGTEXT 83,3361
#define BRIGHTNESS_TEXT 84,3425
#define BRIGHTNESS_LONGTEXT 85,3468
#define BRIGHTNESS_AUTO_TEXT 86,3539
#define BRIGHTNESS_AUTO_LONGTEXT 87,3597
#define CONTRAST_TEXT 89,3689
#define CONTRAST_LONGTEXT 90,3728
#define SATURATION_TEXT 91,3793
#define SATURATION_LONGTEXT 92,3836
#define HUE_TEXT 93,3907
#define HUE_LONGTEXT 94,3936
#define HUE_AUTO_TEXT 95,3987
#define HUE_AUTO_LONGTEXT 96,4031
#define WHITE_BALANCE_TEMP_TEXT 98,4109
#define WHITE_BALANCE_TEMP_LONGTEXT 99,4179
#define AUTOWHITEBALANCE_TEXT 102,4356
#define AUTOWHITEBALANCE_LONGTEXT 103,4418
#define REDBALANCE_TEXT 105,4514
#define REDBALANCE_LONGTEXT 106,4558
#define BLUEBALANCE_TEXT 108,4620
#define BLUEBALANCE_LONGTEXT 109,4666
#define GAMMA_TEXT 111,4730
#define GAMMA_LONGTEXT 112,4763
#define AUTOGAIN_TEXT 114,4814
#define AUTOGAIN_LONGTEXT 115,4859
#define GAIN_TEXT 117,4933
#define GAIN_LONGTEXT 118,4964
#define SHARPNESS_TEXT 120,5014
#define SHARPNESS_LONGTEXT 121,5055
#define CHROMA_GAIN_TEXT 122,5115
#define CHROMA_GAIN_LONGTEXT 123,5160
#define CHROMA_GAIN_AUTO_TEXT 124,5218
#define CHROMA_GAIN_AUTO_LONGTEXT 125,5278
#define POWER_FREQ_TEXT 127,5365
#define POWER_FREQ_LONGTEXT 128,5418
static const int power_freq_vlc[power_freq_vlc130,5502
static const char *const power_freq_user[power_freq_user136,5711
#define BKLT_COMPENSATE_TEXT 139,5838
#define BKLT_COMPENSATE_LONGTEXT 140,5898
#define BAND_STOP_FILTER_TEXT 141,5952
#define BAND_STOP_FILTER_LONGTEXT 142,6007
#define HFLIP_TEXT 144,6126
#define HFLIP_LONGTEXT 145,6169
#define VFLIP_TEXT 147,6237
#define VFLIP_LONGTEXT 148,6278
#define ROTATE_TEXT 150,6344
#define ROTATE_LONGTEXT 151,6389
#define COLOR_KILLER_TEXT 152,6458
#define COLOR_KILLER_LONGTEXT 153,6505
#define COLOR_EFFECT_TEXT 156,6649
#define COLOR_EFFECT_LONGTEXT 157,6696
static const int colorfx_vlc[colorfx_vlc158,6757
static const char *const colorfx_user[colorfx_user163,7027
#define AUDIO_VOLUME_TEXT 169,7263
#define AUDIO_VOLUME_LONGTEXT 170,7310
#define AUDIO_BALANCE_TEXT 172,7381
#define AUDIO_BALANCE_LONGTEXT 173,7430
#define AUDIO_BASS_TEXT 175,7503
#define AUDIO_BASS_LONGTEXT 176,7546
#define AUDIO_TREBLE_TEXT 178,7624
#define AUDIO_TREBLE_LONGTEXT 179,7671
#define AUDIO_MUTE_TEXT 181,7753
#define AUDIO_MUTE_LONGTEXT 182,7790
#define AUDIO_LOUDNESS_TEXT 184,7848
#define AUDIO_LOUDNESS_LONGTEXT 185,7898
#define S_CTRLS_TEXT 188,7978
#define S_CTRLS_LONGTEXT 189,8026
#define ASPECT_TEXT 196,8371
#define ASPECT_LONGTEXT 197,8422
static const int tristate_vlc[tristate_vlc199,8511
static const char *const tristate_user[tristate_user200,8559
static const v4l2_std_id standards_v4l2[standards_v4l2203,8651
static const char *const standards_vlc[standards_vlc221,9586
static const char *const standards_user[standards_user242,10472
static const int i_tuner_audio_modes_list[i_tuner_audio_modes_list262,11388
static const char *const psz_tuner_audio_modes_list_text[psz_tuner_audio_modes_list_text266,11571
vlc_module_begin 274,11772
int OpenDevice 465,20120
v4l2_std_id var_InheritStandard 515,21598

stream_out/chromecast/chromecast.h,3841
#define VLC_CHROMECAST_H30,1406
#define PACKET_HEADER_LEN 43,1628
static const std::string DEFAULT_CHOMECAST_RECEIVER 46,1691
static const std::string NAMESPACE_MEDIA 48,1828
#define CHROMECAST_CONTROL_PORT 50,1919
#define HTTP_PORT 51,1956
enum connection_status54,2004
    CHROMECAST_DISCONNECTED,connection_status::CHROMECAST_DISCONNECTED56,2029
    CHROMECAST_TLS_CONNECTED,connection_status::CHROMECAST_TLS_CONNECTED57,2058
    CHROMECAST_AUTHENTICATED,connection_status::CHROMECAST_AUTHENTICATED58,2088
    CHROMECAST_APP_STARTED,connection_status::CHROMECAST_APP_STARTED59,2118
    CHROMECAST_CONNECTION_DEAD,connection_status::CHROMECAST_CONNECTION_DEAD60,2146
enum command_status 63,2182
    NO_CMD_PENDING,command_status::NO_CMD_PENDING64,2204
    CMD_LOAD_SENT,command_status::CMD_LOAD_SENT65,2224
    CMD_PLAYBACK_SENT,command_status::CMD_PLAYBACK_SENT66,2243
    CMD_SEEK_SENT,command_status::CMD_SEEK_SENT67,2266
enum receiver_state 70,2289
    RECEIVER_IDLE,receiver_state::RECEIVER_IDLE71,2311
    RECEIVER_PLAYING,receiver_state::RECEIVER_PLAYING72,2330
    RECEIVER_BUFFERING,receiver_state::RECEIVER_BUFFERING73,2352
    RECEIVER_PAUSED,receiver_state::RECEIVER_PAUSED74,2376
struct intf_sys_t81,2612
    bool isFinishedPlaying(intf_sys_t::isFinishedPlaying86,2774
    vlc_object_t  * const p_module;intf_sys_t::p_module97,3137
    const int      i_port;intf_sys_t::i_port98,3173
    std::string    serverIP;intf_sys_t::serverIP99,3200
    const int      i_target_port;intf_sys_t::i_target_port100,3229
    std::string    targetIP;intf_sys_t::targetIP101,3263
    std::string    mime;intf_sys_t::mime102,3292
    std::string appTransportId;intf_sys_t::appTransportId104,3318
    std::string mediaSessionId;intf_sys_t::mediaSessionId105,3350
    receiver_state receiverState;intf_sys_t::receiverState106,3382
    int i_sock_fd;intf_sys_t::i_sock_fd108,3417
    vlc_tls_creds_t *p_creds;intf_sys_t::p_creds109,3436
    vlc_tls_t *p_tls;intf_sys_t::p_tls110,3466
    vlc_mutex_t  lock;intf_sys_t::lock112,3489
    vlc_cond_t   loadCommandCond;intf_sys_t::loadCommandCond113,3512
    vlc_thread_t chromecastThread;intf_sys_t::chromecastThread114,3546
    void setConnectionStatus(intf_sys_t::setConnectionStatus121,3685
    std::atomic_bool requested_stop;intf_sys_t::requested_stop158,4716
    std::atomic_bool requested_seek;intf_sys_t::requested_seek159,4753
    void setTitle(intf_sys_t::setTitle163,4829
    void setArtwork(intf_sys_t::setArtwork171,4978
    void setPlayerStatus(intf_sys_t::setPlayerStatus188,5578
    enum connection_status conn_status;intf_sys_t::conn_status196,5828
    enum command_status    cmd_status;intf_sys_t::cmd_status197,5868
    unsigned i_receiver_requestId;intf_sys_t::i_receiver_requestId199,5908
    unsigned i_requestId;intf_sys_t::i_requestId200,5943
    bool           has_input;intf_sys_t::has_input202,5970
    std::string artwork;intf_sys_t::artwork205,6029
    std::string title;intf_sys_t::title206,6054
    vlc_interrupt_t *p_ctl_thread_interrupt;intf_sys_t::p_ctl_thread_interrupt209,6127
    mtime_t getPlaybackTimestamp(intf_sys_t::getPlaybackTimestamp211,6173
    double getPlaybackPosition(intf_sys_t::getPlaybackPosition231,6864
    mtime_t           m_time_playback_started;intf_sys_t::m_time_playback_started239,7175
    mtime_t           i_ts_local_start;intf_sys_t::i_ts_local_start241,7295
    mtime_t           i_length;intf_sys_t::i_length242,7335
    mtime_t           m_chromecast_start_time;intf_sys_t::m_chromecast_start_time245,7449
    mtime_t           m_seek_request_time;intf_sys_t::m_seek_request_time247,7551
    vlc_cond_t   seekCommandCond;intf_sys_t::seekCommandCond249,7595
    chromecast_common      common;intf_sys_t::common256,7888

demux/adaptive/PlaylistManager.h,2283
#define PLAYLISTMANAGER_H_23,1048
    class PlaylistManager46,1433
            PlaylistManager(49,1481
            virtual ~PlaylistManager 52,1667
            bool    start(54,1712
            void    stop(55,1741
            AbstractConnectionManager           *conManager;PlaylistManager::conManager94,3131
            AbstractAdaptationLogic::LogicType  logicType;PlaylistManager::logicType95,3192
            AbstractAdaptationLogic             *logic;PlaylistManager::logic96,3251
            AbstractPlaylist                    *playlist;PlaylistManager::playlist97,3307
            AbstractStreamFactory               *streamFactory;PlaylistManager::streamFactory98,3366
            demux_t                             *p_demux;PlaylistManager::p_demux99,3430
            std::vector<AbstractStream *>        streams;PlaylistManager::streams100,3488
            BasePeriod                          *currentPeriod;PlaylistManager::currentPeriod101,3546
                mtime_t     i_nzpcr;PlaylistManager::i_nzpcr106,3690
                mtime_t     i_firstpcr;PlaylistManager::i_firstpcr107,3727
                vlc_mutex_t lock;PlaylistManager::lock108,3767
                vlc_cond_t  cond;PlaylistManager::cond109,3801
            } demux;PlaylistManager::demux110,3835
            time_t                               nextPlaylistupdate;PlaylistManager::nextPlaylistupdate113,3893
            int                                  failedupdates;PlaylistManager::failedupdates114,3962
                bool        b_live;PlaylistManager::b_live119,4087
                mtime_t     i_length;PlaylistManager::i_length120,4123
                mtime_t     i_time;PlaylistManager::i_time121,4161
                double      f_position;PlaylistManager::f_position122,4197
                vlc_mutex_t lock;PlaylistManager::lock123,4237
            } cached;PlaylistManager::cached124,4271
            vlc_mutex_t  lock;PlaylistManager::lock130,4429
            vlc_thread_t thread;PlaylistManager::thread131,4460
            bool         b_thread;PlaylistManager::b_thread132,4493
            vlc_cond_t   waitcond;PlaylistManager::waitcond133,4528
            bool         b_buffering;PlaylistManager::b_buffering134,4563

codec/arib/substext.h,1128
typedef struct arib_text_region_s23,1125
    char                      *psz_text;psz_text25,1161
    char                      *psz_fontname;psz_fontname27,1203
    int                       i_font_color;28,1248
    int                       i_planewidth;29,1292
    int                       i_planeheight;30,1336
    int                       i_fontwidth;31,1381
    int                       i_fontheight;32,1424
    int                       i_verint;33,1468
    int                       i_horint;34,1508
    int                       i_charleft;35,1548
    int                       i_charbottom;36,1590
    int                       i_charleft_adj;37,1634
    int                       i_charbottom_adj;38,1680
    struct arib_text_region_s *p_next;p_next40,1729
} arib_text_region_t;41,1768
struct subpicture_updater_sys_t43,1791
    arib_text_region_t *p_region;p_region45,1825
static int SubpictureTextValidate(48,1863
static void SubpictureTextUpdate(63,2397
static void SubpictureTextDestroy(120,4506
static inline subpicture_t *decoder_NewSubpictureText(decoder_NewSubpictureText136,4948

demux/adaptive/logic/RateBasedAdaptationLogic.cpp,546
RateBasedAdaptationLogic::RateBasedAdaptationLogic 39,1489
RateBasedAdaptationLogic::~RateBasedAdaptationLogic(53,1848
BaseRepresentation *RateBasedAdaptationLogic::getNextRepresentation(RateBasedAdaptationLogic::getNextRepresentation58,1937
void RateBasedAdaptationLogic::updateDownloadRate(83,2652
void RateBasedAdaptationLogic::trackerEvent(112,3565
FixedRateAdaptationLogic::FixedRateAdaptationLogic(128,4142
BaseRepresentation *FixedRateAdaptationLogic::getNextRepresentation(FixedRateAdaptationLogic::getNextRepresentation134,4264

access/v4l2/v4l2.h,242
#define CFG_PREFIX 31,1425
typedef struct vlc_v4l2_ctrl vlc_v4l2_ctrl_t;33,1453
struct buffer_t35,1500
    void *  start;37,1518
    size_t  length;38,1537
#define SetupFormat(50,1930
typedef struct vlc_v4l2_vbi vlc_v4l2_vbi_t;63,2373

access/rtsp/real.c,766
#define XOR_TABLE_LEN 39,1454
static const unsigned char xor_table[xor_table40,1479
#define BE_32(47,1785
#define LE_32(48,1813
#define BE_16(49,1841
#define LE_16(50,1868
#define BE_32C(51,1895
#define LE_32C(52,1975
#define MAX(53,2055
static void hash(55,2089
static void call_hash 212,9158
static void calc_response 253,9967
static void calc_response_string 278,10430
static void real_calc_response_and_checksum 305,11138
#define MLTI_BUF_MAX_SIZE 355,12192
static int select_mlti_data(361,12363
static rmff_header_t *real_parse_sdp(real_parse_sdp418,13703
int real_get_rdt_chunk_header(535,17048
int real_get_rdt_chunk(597,18666
#define MAX_DESC_BUF 608,19039
rmff_header_t  *real_setup_and_get_header(real_setup_and_get_header609,19079

notify/notify.c,556
#define VLC_MODULE_LICENSE 31,1387
# define NOTIFY_CHECK_VERSION(44,1699
#define APPLICATION_NAME 53,2006
#define TIMEOUT_TEXT 55,2051
#define TIMEOUT_LONGTEXT 56,2091
vlc_module_begin 58,2168
#define MAX_LENGTH 78,2926
struct intf_sys_t80,2950
    NotifyNotification *notification;notification82,2970
    vlc_mutex_t     lock;83,3008
    bool            b_has_actions;84,3034
static int Open(90,3269
static void Close(134,4469
static int ItemChange(156,5171
static void Next(280,9087
static void Prev(290,9406
static int Notify(299,9654

demux/adaptive/plumbing/FakeESOutID.hpp,411
#define FAKEESOUTID_HPP21,993
namespace adaptive26,1063
    class FakeESOutIDadaptive::FakeESOutID30,1106
            FakeESOut *fakeesout;adaptive::FakeESOutID::fakeesout47,1687
            es_out_id_t *p_real_es_id;adaptive::FakeESOutID::p_real_es_id48,1721
            es_format_t fmt;adaptive::FakeESOutID::fmt49,1760
            bool pending_delete;adaptive::FakeESOutID::pending_delete50,1789

demux/mpeg/ts_hotfixes.c,235
void ProbePES(50,1567
static void BuildPATCallback(234,6822
static void BuildPMTCallback(240,7010
void MissingPATPMTFixup(252,7349
    struct esstreams_t316,9051
        pes_stream_t pes;318,9080
        ts_stream_t ts;319,9106

demux/adaptive/playlist/ICanonicalUrl.hpp,569
#define CANONICALURL_HPP21,999
namespace adaptive25,1045
    namespace playlistadaptive::playlist27,1066
        class ICanonicalUrladaptive::playlist::ICanonicalUrl29,1095
                ICanonicalUrl(adaptive::playlist::ICanonicalUrl::ICanonicalUrl32,1153
                void setParent(adaptive::playlist::ICanonicalUrl::setParent34,1299
                Url getParentUrlSegment(adaptive::playlist::ICanonicalUrl::getParentUrlSegment37,1415
                const ICanonicalUrl *parentUrlMember;adaptive::playlist::ICanonicalUrl::parentUrlMember43,1639

access/jack.c,1594
#define PACE_TEXT 59,2169
#define PACE_LONGTEXT 60,2200
#define AUTO_CONNECT_TEXT 62,2293
#define AUTO_CONNECT_LONGTEXT 63,2343
vlc_module_begin 66,2453
struct demux_sys_t86,3139
    vlc_fourcc_t                i_acodec_raw;89,3187
    unsigned int                i_channels;90,3233
    int                         i_sample_rate;91,3277
    int                         i_audio_max_frame_size;92,3324
    int                         i_frequency;93,3380
    block_t                     *p_block_audio;p_block_audio94,3425
    es_out_id_t                 *p_es_audio;p_es_audio95,3473
    date_t                      pts;96,3518
    jack_client_t               *p_jack_client;p_jack_client99,3582
    jack_port_t                 **pp_jack_port_input;pp_jack_port_input100,3630
    jack_default_audio_sample_t **pp_jack_buffer;pp_jack_buffer101,3684
    jack_ringbuffer_t           *p_jack_ringbuffer;p_jack_ringbuffer102,3734
    jack_nframes_t              jack_buffer_size;103,3786
    jack_nframes_t              jack_sample_rate;104,3836
    size_t                      jack_sample_size;105,3886
    char                        *psz_ports;psz_ports106,3936
    char                        **pp_jack_port_table;pp_jack_port_table107,3980
    char                        i_match_ports;108,4034
static int Open(123,4551
static void Close(305,11075
static int Control(324,11787
static int Demux(368,12993
int Process(391,13587
static block_t *GrabJack(GrabJack429,14958
#undef msleep439,15286
static void Port_finder(485,16471
static void Parse(531,18125

misc/addons/fsstorage.c,897
#define ADDONS_DIR 49,1795
#define ADDONS_SCRIPTS_DIR 50,1826
#define ADDONS_CATALOG 51,1879
    addon_type_t t;55,1957
    const char * const psz_dir;56,1977
} const addons_dirs[addons_dirs57,2009
vlc_module_begin 79,3068
static int ListSkin_filter(130,4355
static int ListScript_filter(139,4567
static int ParseSkins2Info(148,4781
static int ListSkins(204,6340
static bool FileBelongsToManagedAddon(271,8348
static int ListScripts(287,8965
static int List(319,9886
static int recursive_mkdir(342,10364
static int InstallFile(377,11332
static int InstallAllFiles(431,12817
static int Install(492,14564
#define WRITE_WITH_ENTITIES(526,15606
static int WriteCatalog(534,15820
static int LoadCatalog(667,20247
static int Remove(859,26494
static int OpenStorage(918,28296
static void CloseStorage(929,28548
static int OpenLister(934,28626
static void CloseLister(943,28823

access/rtsp/real.h,96
#define HAVE_REAL_H26,1256
#   define lprintf(42,1508
    static inline void lprintf(44,1568

control/hotkeys.c,712
#define VLC_MODULE_LICENSE 33,1428
struct intf_sys_t48,1926
    vout_thread_t      *p_last_vout;p_last_vout50,1946
    int slider_chan;51,1983
        int64_t i_time_subtitle;56,2104
        int64_t i_time_audio;57,2137
    } subtitle_delaybookmarks;58,2167
#define DisplayMessage(76,3006
#define DisplayIcon(81,3159
vlc_module_begin 88,3451
static void Close(122,4593
static int PutAction(133,4859
static int ActionEvent(1134,42278
static void PlayBookmark(1146,42585
static void SetBookmark(1174,43394
static void DisplayPosition(1200,44133
static void DisplayVolume(1234,45060
static void DisplayRate(1247,45500
static float AdjustRateFine(1252,45634
static void ClearChannels(1271,46172

demux/adaptive/playlist/SegmentInfoCommon.h,496
#define SEGMENTINFOCOMMON_H26,1285
        class SegmentInfoCommon 42,1561
                SegmentInfoCommon(47,1772
                virtual ~SegmentInfoCommon(48,1839
                int                     getStartIndex(49,1885
                Property<stime_t>      duration;SegmentInfoCommon::duration53,2176
                int                     startIndex;SegmentInfoCommon::startIndex58,2440
                std::list<std::string>  baseURLs;SegmentInfoCommon::baseURLs59,2492

arm_neon/chroma_yuv.c,703
vlc_module_begin 33,1314
#define DEFINE_PACK(39,1487
#define DEFINE_PLANES(41,1586
#define DEFINE_PLANES_SWAP(44,1739
#define DEFINE_UV_PLANES(48,1898
#define DEFINE_UV_PLANES_SWAP(51,2035
#define DEFINE_UV_PACK(54,2177
VIDEO_FILTER_WRAPPER 65,2562
VIDEO_FILTER_WRAPPER 74,2846
VIDEO_FILTER_WRAPPER 83,3125
VIDEO_FILTER_WRAPPER 92,3409
#define SEMIPLANAR_FILTERS(109,3987
#define SEMIPLANAR_FILTERS_SWAP(122,4900
SEMIPLANAR_FILTERS 135,5813
VIDEO_FILTER_WRAPPER 149,6303
VIDEO_FILTER_WRAPPER 158,6587
VIDEO_FILTER_WRAPPER 167,6866
VIDEO_FILTER_WRAPPER 176,7150
VIDEO_FILTER_WRAPPER 187,7467
VIDEO_FILTER_WRAPPER 196,7751
VIDEO_FILTER_WRAPPER 205,8030
VIDEO_FILTER_WRAPPER 214,8314

access/dtv/en50221.c,8589
#undef ENABLE_HTTPD45,1599
typedef struct en50221_session_t54,1761
    unsigned i_slot;56,1796
    int i_resource_id;57,1817
    void (* pf_handle)58,1840
    void (* pf_close)59,1896
    void (* pf_manage)60,1935
    void *p_sys;p_sys61,1975
} en50221_session_t;62,1992
#define EN50221_MMI_NONE 64,2014
#define EN50221_MMI_ENQ 65,2041
#define EN50221_MMI_ANSW 66,2067
#define EN50221_MMI_MENU 67,2094
#define EN50221_MMI_MENU_ANSW 68,2121
#define EN50221_MMI_LIST 69,2153
typedef struct en50221_mmi_object_t71,2181
    int i_object_type;73,2219
            bool b_blind;79,2284
            char *psz_text;psz_text80,2310
        } enq;81,2338
            bool b_ok;85,2379
            char *psz_answ;psz_answ86,2402
        } answ;87,2430
            char *psz_title,psz_title91,2472
            char *psz_title, *psz_subtitle,psz_subtitle91,2472
            char *psz_title, *psz_subtitle, *psz_bottom;psz_bottom91,2472
            char **ppsz_choices;ppsz_choices92,2529
            int i_choices;93,2562
        } menu;94,2589
            int i_choice;98,2664
        } menu_answ;99,2690
    } u;100,2711
} mmi_t;101,2720
#undef DEBUG_TPDU104,2731
#define CAM_PROG_MAX 105,2749
#define MAX_CI_SLOTS 114,3182
#define MAX_SESSIONS 115,3206
#define MAX_PROGRAMS 116,3230
struct cam118,3255
    vlc_object_t *obj;obj120,3268
    int fd;121,3291
    int i_ca_type;122,3303
    mtime_t i_timeout,123,3322
    mtime_t i_timeout, i_next_event;123,3322
    unsigned i_nb_slots;125,3360
    bool pb_active_slot[pb_active_slot126,3385
    bool pb_tc_has_data[pb_tc_has_data127,3424
    bool pb_slot_mmi_expected[pb_slot_mmi_expected128,3463
    bool pb_slot_mmi_undisplayed[pb_slot_mmi_undisplayed129,3508
    en50221_session_t p_sessions[p_sessions130,3556
    en50221_capmt_info_t *pp_selected_programs[pp_selected_programs132,3605
    int i_selected_programs;133,3667
#define SIZE_INDICATOR 139,3880
static uint8_t *GetLength(GetLength141,3909
static uint8_t *SetLength(SetLength157,4247
#define MAX_TPDU_SIZE 200,5079
#define MAX_TPDU_DATA 201,5107
#define DATA_INDICATOR 203,5151
#define T_SB 205,5180
#define T_RCV 206,5208
#define T_CREATE_TC 207,5236
#define T_CTC_REPLY 208,5264
#define T_DELETE_TC 209,5292
#define T_DTC_REPLY 210,5320
#define T_REQUEST_TC 211,5348
#define T_NEW_TC 212,5376
#define T_TC_ERROR 213,5404
#define T_DATA_LAST 214,5432
#define T_DATA_MORE 215,5460
static void Dump(217,5489
#define MAX_DUMP 220,5574
static int TPDUSend(233,6067
#define CAM_READ_TIMEOUT 264,6922
static int TPDURecv(266,6960
#define ST_SESSION_NUMBER 342,8812
#define ST_OPEN_SESSION_REQUEST 343,8853
#define ST_OPEN_SESSION_RESPONSE 344,8894
#define ST_CREATE_SESSION 345,8935
#define ST_CREATE_SESSION_RESPONSE 346,8976
#define ST_CLOSE_SESSION_REQUEST 347,9017
#define ST_CLOSE_SESSION_RESPONSE 348,9058
#define SS_OK 350,9100
#define SS_NOT_ALLOCATED 351,9131
#define RI_RESOURCE_MANAGER 353,9163
#define RI_APPLICATION_INFORMATION 354,9213
#define RI_CONDITIONAL_ACCESS_SUPPORT 355,9263
#define RI_HOST_CONTROL 356,9313
#define RI_DATE_TIME 357,9363
#define RI_MMI 358,9413
static int ResourceIdToInt(360,9464
static int SPDUSend(369,9794
static void SessionOpen(432,11619
static void SessionCreate(516,14377
static void SessionCreateResponse(562,15891
static void SessionSendClose(604,17361
static void SessionClose(632,18267
static void SPDUHandle(666,19425
#define AOT_NONE 730,21299
#define AOT_PROFILE_ENQ 731,21344
#define AOT_PROFILE 732,21389
#define AOT_PROFILE_CHANGE 733,21434
#define AOT_APPLICATION_INFO_ENQ 734,21479
#define AOT_APPLICATION_INFO 735,21524
#define AOT_ENTER_MENU 736,21569
#define AOT_CA_INFO_ENQ 737,21614
#define AOT_CA_INFO 738,21659
#define AOT_CA_PMT 739,21704
#define AOT_CA_PMT_REPLY 740,21749
#define AOT_TUNE 741,21794
#define AOT_REPLACE 742,21839
#define AOT_CLEAR_REPLACE 743,21884
#define AOT_ASK_RELEASE 744,21929
#define AOT_DATE_TIME_ENQ 745,21974
#define AOT_DATE_TIME 746,22019
#define AOT_CLOSE_MMI 747,22064
#define AOT_DISPLAY_CONTROL 748,22109
#define AOT_DISPLAY_REPLY 749,22154
#define AOT_TEXT_LAST 750,22199
#define AOT_TEXT_MORE 751,22244
#define AOT_KEYPAD_CONTROL 752,22289
#define AOT_KEYPRESS 753,22334
#define AOT_ENQ 754,22379
#define AOT_ANSW 755,22424
#define AOT_MENU_LAST 756,22469
#define AOT_MENU_MORE 757,22514
#define AOT_MENU_ANSW 758,22559
#define AOT_LIST_LAST 759,22604
#define AOT_LIST_MORE 760,22649
#define AOT_SUBTITLE_SEGMENT_LAST 761,22694
#define AOT_SUBTITLE_SEGMENT_MORE 762,22739
#define AOT_DISPLAY_MESSAGE 763,22784
#define AOT_SCENE_END_MARK 764,22829
#define AOT_SCENE_DONE 765,22874
#define AOT_SCENE_CONTROL 766,22919
#define AOT_SUBTITLE_DOWNLOAD_LAST 767,22964
#define AOT_SUBTITLE_DOWNLOAD_MORE 768,23009
#define AOT_FLUSH_DOWNLOAD 769,23054
#define AOT_DOWNLOAD_REPLY 770,23099
#define AOT_COMMS_CMD 771,23144
#define AOT_CONNECTION_DESCRIPTOR 772,23189
#define AOT_COMMS_REPLY 773,23234
#define AOT_COMMS_SEND_LAST 774,23279
#define AOT_COMMS_SEND_MORE 775,23324
#define AOT_COMMS_RCV_LAST 776,23369
#define AOT_COMMS_RCV_MORE 777,23414
static int APDUGetTag(782,23633
static uint8_t *APDUGetLength(APDUGetLength798,24042
static int APDUSend(806,24326
static void ResourceManagerHandle(856,25748
static void ResourceManagerOpen(888,26844
static const char *HTTPExtractValue(HTTPExtractValue905,27427
static void ApplicationInformationEnterMenu(966,28941
static void ApplicationInformationHandle(979,29472
static void ApplicationInformationOpen(1017,30610
#define MAX_CASYSTEM_IDS 1030,30987
    uint16_t pi_system_ids[pi_system_ids1034,31033
} system_ids_t;1035,31083
static bool CheckSystemID(1037,31100
static bool CAPMTNeedsDescrambling(1055,31608
static size_t CopyDescriptors(1072,32070
static size_t GetCADSize(1093,32770
static uint8_t *CAPMTHeader(CAPMTHeader1099,32960
static uint8_t *CAPMTES(CAPMTES1134,33852
static uint8_t *CAPMTBuild(CAPMTBuild1171,34787
static void CAPMTFirst(1228,36816
static void CAPMTAdd(1250,37592
static void CAPMTUpdate(1289,38784
static void CAPMTDelete(1311,39563
static void ConditionalAccessHandle(1334,40385
static void ConditionalAccessClose(1379,41748
static void ConditionalAccessOpen(1389,42158
    int i_interval;1406,42670
    mtime_t i_last;1407,42690
} date_time_t;1408,42710
static void DateTimeSend(1413,42901
#define DEC2BCD(1432,43481
static void DateTimeHandle(1449,44064
static void DateTimeManage(1485,45063
static void DateTimeClose(1500,45564
static void DateTimeOpen(1510,45935
#define DCC_SET_MMI_MODE 1528,46453
#define DCC_DISPLAY_CHARACTER_TABLE_LIST 1529,46508
#define DCC_INPUT_CHARACTER_TABLE_LIST 1530,46563
#define DCC_OVERLAY_GRAPHICS_CHARACTERISTICS 1531,46618
#define DCC_FULL_SCREEN_GRAPHICS_CHARACTERISTICS 1532,46673
#define MM_HIGH_LEVEL 1536,46746
#define MM_LOW_LEVEL_OVERLAY_GRAPHICS 1537,46794
#define MM_LOW_LEVEL_FULL_SCREEN_GRAPHICS 1538,46842
#define DRI_MMI_MODE_ACK 1542,46916
#define DRI_LIST_DISPLAY_CHARACTER_TABLES 1543,46975
#define DRI_LIST_INPUT_CHARACTER_TABLES 1544,47034
#define DRI_LIST_GRAPHIC_OVERLAY_CHARACTERISTICS 1545,47093
#define DRI_LIST_FULL_SCREEN_GRAPHIC_CHARACTERISTICS 1546,47152
#define DRI_UNKNOWN_DISPLAY_CONTROL_CMD 1547,47211
#define DRI_UNKNOWN_MMI_MODE 1548,47270
#define DRI_UNKNOWN_CHARACTER_TABLE 1549,47329
#define EF_BLIND 1553,47410
#define AI_CANCEL 1557,47452
#define AI_ANSWER 1558,47476
static void MMIFree(1560,47501
static void MMISendObject(1596,48465
static void MMISendClose(1634,49629
static void MMIDisplayReply(1647,50050
static char *MMIGetText(MMIGetText1662,50545
static void MMIHandleEnq(1686,51158
static void MMIHandleMenu(1714,52228
#define GET_FIELD(1734,52855
#undef GET_FIELD1745,53422
static void MMIHandle(1763,54023
static void MMIClose(1816,55441
static void MMIOpen(1832,56051
#define MAX_TC_RETRIES 1853,56736
static int InitSlot(1855,56763
cam_t *en50221_Init(en50221_Init1902,58018
void en50221_Poll(2028,62074
int en50221_SetCAPMT(2178,66901
static int en50221_OpenMMI(2248,68966
static int en50221_CloseMMI(2288,70278
static mmi_t *en50221_GetMMIObject(en50221_GetMMIObject2316,71137
static void en50221_SendMMIObject(2341,71909
char *en50221_Status(en50221_Status2357,72385
#define CHECK_CAPS(2480,76218
#undef CHECK_CAPS2489,76715
#define CHECK_DESC(2493,76882
#undef CHECK_DESC2500,77167
#define CHECK_TYPE(2519,77677
#undef CHECK_TYPE2526,78012
void en50221_End(2608,81597

demux/adaptive/http/Sockets.hpp,487
#define SOCKETS_HPP21,988
namespace adaptive27,1073
    namespace httpadaptive::http29,1094
        class Socketadaptive::http::Socket31,1119
                int netfd;adaptive::http::Socket::netfd47,1816
                int type;adaptive::http::Socket::type48,1843
        class TLSSocket adaptive::http::TLSSocket51,1881
                vlc_tls_creds_t *creds;adaptive::http::TLSSocket::creds65,2536
                vlc_tls_t *tls;adaptive::http::TLSSocket::tls66,2576

arm_neon/nv21_rgb.S,128
coefficients:coefficients73,1845
nv21_rgb_neon:nv21_rgb_neon81,1982
loop_row:loop_row111,2644
loop_col:loop_col119,2804

demux/mpeg/ts_hotfixes.h,68
#define VLC_TS_HOTFIXES_H20,1026
#define MIN_PAT_INTERVAL 22,1053

demux/dash/mp4/IndexReader.hpp,225
#define INDEXREADER_HPP21,996
namespace adaptive25,1065
    namespace playlistadaptive::playlist27,1086
namespace dash33,1158
    namespace mp4dash::mp435,1175
        class IndexReader dash::mp4::IndexReader40,1283

visualization/visual/visual.c,1569
#define ELIST_TEXT 47,1780
#define ELIST_LONGTEXT 48,1820
#define WIDTH_TEXT 53,2004
#define WIDTH_LONGTEXT 54,2043
#define HEIGHT_TEXT 57,2133
#define HEIGHT_LONGTEXT 58,2174
#define FFT_WINDOW_TEXT 61,2266
#define FFT_WINDOW_LONGTEXT 62,2309
#define KAISER_PARAMETER_TEXT 65,2419
#define KAISER_PARAMETER_LONGTEXT 66,2481
#define NBBANDS_TEXT 70,2673
#define SPNBBANDS_LONGTEXT 71,2730
#define SEPAR_TEXT 74,2831
#define AMP_TEXT 76,2896
#define AMP_LONGTEXT 77,2935
#define PEAKS_TEXT 80,3035
#define ORIG_TEXT 82,3090
#define ORIG_LONGTEXT 83,3149
#define BANDS_TEXT 86,3249
#define BASE_TEXT 88,3308
#define RADIUS_TEXT 90,3362
#define RADIUS_LONGTEXT 91,3408
#define SSECT_TEXT 94,3511
#define SSECT_LONGTEXT 95,3556
#define PEAK_HEIGHT_TEXT 98,3651
#define PEAK_HEIGHT_LONGTEXT 99,3696
#define PEAK_WIDTH_TEXT 102,3782
#define PEAK_WIDTH_LONGTEXT 103,3831
#define COLOR1_TEXT 106,3933
#define COLOR1_LONGTEXT 107,3975
#define VOUT_WIDTH 111,4098
#define VOUT_HEIGHT 112,4122
vlc_module_begin 117,4238
struct filter_sys_t180,6952
    block_fifo_t    *fifo;fifo182,6974
    vout_thread_t   *p_vout;p_vout183,7001
    visual_effect_t **effect;effect184,7030
    int             i_effect;185,7060
    vlc_thread_t    thread;186,7090
static int Open(192,7310
static block_t *DoRealWork(DoRealWork337,11292
#define p_effect 356,11899
#undef p_effect362,12098
static void *Thread(Thread371,12259
static block_t *DoWork(DoWork387,12609
static void Close(398,13022
#define p_effect 411,13414
#undef p_effect414,13523

video_filter/dynamicoverlay/dynamicoverlay.c,287
#define INPUT_TEXT 60,2316
#define INPUT_LONGTEXT 61,2352
#define OUTPUT_TEXT 63,2419
#define OUTPUT_LONGTEXT 64,2457
vlc_module_begin 66,2532
static int Create(92,3547
static void Destroy(138,5192
static subpicture_t *Filter(Filter167,6322
static int AdjustCallback(386,13210

meta_engine/ID3Tag.h,136
#define ID3TAG_H21,1079
static uint32_t ID3TAG_ReadSize(23,1097
static bool ID3TAG_IsTag(33,1445
static size_t ID3TAG_Parse(41,1711

access/dtv/en50221.h,156
typedef struct cam cam_t;26,1267
typedef struct en50221_capmt_info_s en50221_capmt_info_t;27,1293
#define STRINGIFY(35,1560
#define UGLY_KLUDGE(36,1602

visualization/visual/visual.h,621
typedef struct visual_effect_t visual_effect_t;24,1186
typedef int (*visual_run_t)visual_run_t25,1234
typedef void (*visual_free_t)visual_free_t27,1356
struct visual_effect_t29,1396
    visual_run_t pf_run;31,1421
    visual_free_t pf_free;32,1446
    void *     p_data;33,1473
    int        i_width;34,1543
    int        i_height;35,1567
    int        i_nb_chans;36,1592
    int        i_idx_left;39,1645
    int        i_idx_right;40,1672
extern const struct visual_cb_t43,1704
    char name[name45,1738
    visual_run_t run_cb;46,1757
    visual_free_t free_cb;47,1782
} effectv[effectv48,1809

video_filter/dynamicoverlay/dynamicoverlay.h,2731
#define DYNAMIC_OVERLAY_H 25,1211
typedef struct buffer_t35,1520
    size_t i_size;37,1546
    size_t i_length;38,1626
    char *p_memory;p_memory40,1707
    char *p_begin;p_begin41,1787
} buffer_t;42,1867
typedef struct commandparams_t56,2426
    int32_t i_id;58,2459
    int32_t i_shmid;59,2501
    vlc_fourcc_t fourcc;61,2558
    int32_t i_x;63,2597
    int32_t i_y;64,2650
    int32_t i_width;65,2703
    int32_t i_height;66,2751
    int32_t i_alpha;68,2801
    text_style_t fontstyle;70,2856
    bool b_visible;72,2903
} commandparams_t;73,2957
typedef int (*parser_func_t)parser_func_t75,2977
typedef int (*execute_func_t)execute_func_t76,3069
typedef int (*unparse_func_t)unparse_func_t77,3183
typedef struct commanddesc_t79,3271
    char *psz_command;psz_command81,3302
    bool b_atomic;82,3325
    parser_func_t pf_parser;83,3344
    execute_func_t pf_execute;84,3373
    unparse_func_t pf_unparse;85,3404
} commanddesc_t;86,3435
typedef struct commanddesc_static_t88,3453
    const char *psz_command;psz_command90,3491
    bool b_atomic;91,3520
    parser_func_t pf_parser;92,3539
    execute_func_t pf_execute;93,3568
    unparse_func_t pf_unparse;94,3599
} commanddesc_static_t;95,3630
typedef struct command_t98,3656
    struct commanddesc_t *p_command;p_command100,3683
    int i_status;101,3720
    commandparams_t params;102,3738
    commandparams_t results;103,3766
    struct command_t *p_next;p_next104,3795
} command_t;105,3825
typedef struct queue_t114,4116
    command_t *p_head;p_head116,4141
    command_t *p_tail;p_tail117,4221
} queue_t;118,4301
typedef struct overlay_t130,4738
    int i_x,132,4765
    int i_x, i_y;132,4765
    int i_alpha;133,4783
    bool b_active;134,4800
    video_format_t format;136,4820
    text_style_t *p_fontstyle;p_fontstyle137,4847
        picture_t *p_pic;p_pic139,4890
        char *p_text;p_text140,4916
    } data;141,4938
} overlay_t;142,4950
typedef struct list_t151,5224
    overlay_t **pp_head,pp_head153,5248
    overlay_t **pp_head, **pp_tail;pp_tail153,5248
} list_t;154,5284
struct filter_sys_t167,5770
    buffer_t input,169,5792
    buffer_t input, output;169,5792
    int i_inputfd,171,5821
    int i_inputfd, i_outputfd;171,5821
    char *psz_inputfile,psz_inputfile172,5852
    char *psz_inputfile, *psz_outputfile;psz_outputfile172,5852
    commanddesc_t **pp_commands;pp_commands174,5895
    size_t i_commands;175,5952
    bool b_updated,177,5976
    bool b_updated, b_atomic;177,5976
    queue_t atomic,178,6006
    queue_t atomic, pending,178,6006
    queue_t atomic, pending, processed;178,6006
    list_t overlays;179,6046
    vlc_mutex_t lock;181,6068

demux/asf/libasf.c,3098
# define ASF_DEBUG 34,1347
static inline bool AsfObjectHelperHave(47,1785
#define ASF_HAVE(53,2023
static inline void AsfObjectHelperSkip(57,2140
#define ASF_SKIP(64,2406
#define ASF_FUNCTION_READ_X(68,2549
ASF_FUNCTION_READ_X(77,2879
#define ASF_READ1(81,3078
#define ASF_READ2(82,3157
#define ASF_READ4(83,3236
#define ASF_READ8(84,3315
#define ASF_READS(105,3932
static int ASF_ReadObjectCommon(115,4416
static int ASF_NextObject(138,5128
static void ASF_FreeObject_Null(179,6298
static int  ASF_ReadObject_Header(184,6383
static int ASF_ReadObject_Data(226,7537
static int ASF_ReadObject_Index(250,8248
static void ASF_FreeObject_Index(296,9932
static int ASF_ReadObject_file_properties(303,10081
static void ASF_FreeObject_metadata(341,11710
static int ASF_ReadObject_metadata(353,12022
static int ASF_ReadObject_header_extension(459,15141
static void ASF_FreeObject_header_extension(521,16922
static int ASF_ReadObject_stream_properties(528,17110
static void ASF_FreeObject_stream_properties(602,19738
static int ASF_ReadObject_codec_list(611,19974
static void ASF_FreeObject_codec_list(690,22722
static inline char *get_wstring(get_wstring705,23158
static int ASF_ReadObject_content_description(715,23503
static void ASF_FreeObject_content_description(755,24874
static int ASF_ReadObject_language_list(767,25221
static void ASF_FreeObject_language_list(805,26283
static int ASF_ReadObject_stream_bitrate_properties(816,26587
static void ASF_FreeObject_stream_bitrate_properties(854,27857
static int ASF_ReadObject_extended_stream_properties(859,27960
static void ASF_FreeObject_extended_stream_properties(986,33227
static int ASF_ReadObject_advanced_mutual_exclusion(1003,33778
static void ASF_FreeObject_advanced_mutual_exclusion(1053,35522
static int ASF_ReadObject_stream_prioritization(1061,35730
static void ASF_FreeObject_stream_prioritization(1105,37165
static int ASF_ReadObject_bitrate_mutual_exclusion(1113,37409
static void ASF_FreeObject_bitrate_mutual_exclusion(1164,39116
static int ASF_ReadObject_extended_content_description(1172,39358
static void ASF_FreeObject_extended_content_description(1273,42505
static int ASF_ReadObject_marker(1287,42931
static void ASF_FreeObject_marker(1336,44565
static int ASF_ReadObject_Raw(1347,44838
static int ASF_ReadObject_XXX(1355,44979
static void ASF_FreeObject_XXX(1374,45434
    const guid_t  *p_id;p_id1385,45592
    int     i_type;1386,45617
    int     (*ASF_ReadObject_function)ASF_ReadObject_function1387,45637
    void    (*ASF_FreeObject_function)ASF_FreeObject_function1388,45712
} ASF_Object_Function 1390,45776
static int ASF_ReadObject(1444,48642
static void ASF_FreeObject(1517,50604
    const guid_t *p_id;p_id1565,51878
    const char *psz_name;psz_name1566,51902
} ASF_ObjectDumpDebugInfo[ASF_ObjectDumpDebugInfo1567,51928
static void ASF_ObjectDumpDebug(1603,53747
asf_object_root_t *ASF_ReadObjectRoot(ASF_ReadObjectRoot1654,55221
void ASF_FreeObjectRoot(1778,59461
int ASF_CountObject(1793,59767
void *ASF_FindObject(ASF_FindObject1814,60190

video_filter/hqdn3d.c,755
#define FILTER_PREFIX 54,2209
#define LUMA_SPAT_TEXT 56,2248
#define CHROMA_SPAT_TEXT 57,2316
#define LUMA_TEMP_TEXT 58,2386
#define CHROMA_TEMP_TEXT 59,2455
vlc_module_begin(61,2527
struct filter_sys_t89,3614
    const vlc_chroma_description_t *chroma;chroma91,3636
    int w[w92,3680
    int w[3], h[h92,3680
    struct vf_priv_s cfg;94,3701
    bool   b_recalc_coefs;95,3727
    vlc_mutex_t coefs_mutex;96,3754
    float  luma_spat,97,3783
    float  luma_spat, luma_temp,97,3783
    float  luma_spat, luma_temp, chroma_spat,97,3783
    float  luma_spat, luma_temp, chroma_spat, chroma_temp;97,3783
static int Open(103,4013
static void Close(171,6454
static picture_t *Filter(Filter194,7261
static int DenoiseCallback(253,9118

demux/mpeg/pes.h,173
#define VLC_MPEG_PES_H21,1084
static inline mtime_t ExtractPESTimestamp(23,1108
static inline mtime_t ExtractMPEG1PESTimestamp(32,1396
static int ParsePESHeader(44,1794

video_filter/fps.c,361
#define CFG_PREFIX 39,1572
#define FPS_TEXT 41,1599
vlc_module_begin 43,1636
struct filter_sys_t62,2218
    date_t          next_output_pts;64,2240
    picture_t       *p_previous_pic;p_previous_pic65,2307
    int             i_output_frame_interval;66,2344
static picture_t *Filter(Filter69,2393
static int Open(132,4973
static void Close(175,6580

codec/avcodec/fourcc.c,227
    vlc_fourcc_t i_fourcc;41,1656
    unsigned i_codec;42,1683
    int i_cat;43,1705
} codecs_table[codecs_table44,1720
static const size_t codecs_count 473,21534
int GetFfmpegCodec(476,21653
int GetVlcFourcc(494,22284

demux/smooth/playlist/SmoothSegment.hpp,176
#define SMOOTHSEGMENT_HPP21,1069
namespace smooth25,1147
    namespace playlistsmooth::playlist27,1166
        class SmoothSegment smooth::playlist::SmoothSegment31,1240

demux/adaptive/playlist/SegmentTimeline.h,678
#define SEGMENTTIMELINE_H25,1224
        class SegmentTimeline 35,1373
                SegmentTimeline(40,1484
                SegmentTimeline(41,1534
                virtual ~SegmentTimeline(42,1577
                void addElement(43,1621
                uint64_t getElementNumberByScaledPlaybackTime(44,1706
                class ElementSegmentTimeline::Element60,2498
                        stime_t  t;SegmentTimeline::Element::t66,2766
                        stime_t  d;SegmentTimeline::Element::d67,2802
                        uint64_t r;SegmentTimeline::Element::r68,2838
                        uint64_t number;SegmentTimeline::Element::number69,2874

demux/asf/libasf.h,8331
#define VLC_ASF_LIBASF_H_23,1126
#define ASF_MAX_STREAMNUMBER 25,1153
#define ASF_OBJECT_COMMON_SIZE 26,1186
#define ASF_OBJECT_COMMON 34,1439
} asf_object_common_t;48,1808
    uint32_t i_packet_number;52,1849
    uint16_t i_packet_count;53,1879
} asf_index_entry_t;55,1909
    uint32_t i_sub_object_count;65,2248
    uint8_t  i_reserved1;66,2281
    uint8_t  i_reserved2;67,2347
} asf_object_header_t;69,2427
    guid_t      i_file_id;74,2490
    uint64_t    i_total_data_packets;75,2517
    uint16_t    i_reserved;76,2555
} asf_object_data_t;78,2584
    guid_t      i_file_id;84,2646
    uint64_t    i_index_entry_time_interval;85,2673
    uint32_t    i_max_packet_count;86,2718
    uint32_t    i_index_entry_count;87,2754
    asf_index_entry_t *index_entry;index_entry89,2792
} asf_object_index_t;91,2829
#define ASF_FILE_PROPERTIES_BROADCAST 96,3033
#define ASF_FILE_PROPERTIES_SEEKABLE 97,3078
    guid_t  i_file_id;103,3164
    uint64_t     i_file_size;104,3187
    uint64_t     i_creation_date;105,3217
    uint64_t     i_data_packets_count;106,3251
    uint64_t     i_play_duration;107,3290
    uint64_t     i_send_duration;108,3324
    uint64_t     i_preroll;109,3358
    uint32_t     i_flags;110,3386
    uint32_t     i_min_data_packet_size;111,3412
    uint32_t     i_max_data_packet_size;112,3453
    uint32_t     i_max_bitrate;113,3494
} asf_object_file_properties_t;115,3527
#define ASF_STREAM_PROPERTIES_ENCRYPTED 117,3560
    guid_t  i_stream_type;122,3647
    guid_t  i_error_correction_type;123,3674
    uint64_t     i_time_offset;124,3711
    uint32_t     i_type_specific_data_length;125,3743
    uint32_t     i_error_correction_data_length;126,3789
    uint16_t     i_flags;127,3838
        uint8_t i_stream_number;129,3898
    uint32_t    i_reserved;130,3931
    uint8_t     *p_type_specific_data;p_type_specific_data131,3959
    uint8_t     *p_error_correction_data;p_error_correction_data132,3998
} asf_object_stream_properties_t;133,4040
    guid_t      i_reserved1;139,4115
    uint16_t    i_reserved2;140,4144
    uint32_t    i_header_extension_size;141,4173
    uint8_t     *p_header_extension_data;p_header_extension_data142,4214
} asf_object_header_extension_t;144,4257
    ASF_METADATA_TYPE_STRING,147,4298
    ASF_METADATA_TYPE_BYTE,148,4328
    ASF_METADATA_TYPE_BOOL,149,4356
    ASF_METADATA_TYPE_DWORD,150,4384
    ASF_METADATA_TYPE_QWORD,151,4413
    ASF_METADATA_TYPE_WORD,152,4442
    uint16_t    i_stream;157,4491
    uint16_t    i_type;158,4517
    char        *psz_name;psz_name159,4541
    uint64_t i_val;161,4569
    uint16_t i_data;162,4589
    uint8_t *p_data;p_data163,4610
} asf_metadata_record_t;165,4632
    uint32_t i_record_entries_count;171,4698
    asf_metadata_record_t *record;record172,4735
} asf_object_metadata_t;174,4771
    char *psz_title;psz_title180,4837
    char *psz_artist;psz_artist181,4858
    char *psz_copyright;psz_copyright182,4880
    char *psz_description;psz_description183,4905
    char *psz_rating;psz_rating184,4932
} asf_object_content_description_t;186,4955
#define ASF_CODEC_TYPE_VIDEO 188,4992
#define ASF_CODEC_TYPE_AUDIO 189,5031
#define ASF_CODEC_TYPE_UNKNOWN 190,5070
    uint16_t    i_type;194,5127
    char        *psz_name;psz_name195,5151
    char        *psz_description;psz_description196,5178
    uint16_t    i_information_length;198,5213
    uint8_t     *p_information;p_information199,5251
} asf_codec_entry_t;200,5283
    guid_t      i_reserved;205,5344
    uint32_t    i_codec_entries_count;206,5372
    asf_codec_entry_t *codec;codec207,5411
} asf_object_codec_list_t;209,5442
    uint64_t     i_offset;213,5487
    uint64_t     i_presentation_time;214,5514
    uint16_t     i_entry_length;215,5552
    uint32_t     i_send_time;216,5585
    uint32_t     i_flags;217,5615
    uint32_t     i_marker_description_length;218,5641
    char         *p_marker_description;p_marker_description219,5687
} asf_marker_t;221,5728
    guid_t      i_reserved1;226,5784
    uint32_t    i_count;227,5813
    uint16_t    i_reserved2;228,5838
    char        *name;name229,5867
    asf_marker_t *marker;marker230,5890
} asf_object_marker_t;232,5917
    uint16_t  i_language;237,5980
    char **ppsz_language;ppsz_language238,6006
} asf_object_language_list_t;240,6033
    uint16_t i_bitrate;246,6104
        uint8_t  i_stream_number;249,6145
        uint32_t i_avg_bitrate;250,6179
    } bitrate[bitrate251,6211
} asf_object_stream_bitrate_properties_t;252,6252
    guid_t   i_extension_id;257,6313
    uint16_t i_data_size;258,6342
    uint32_t i_info_length;259,6368
    char     *pi_info;pi_info260,6396
} asf_payload_extension_system_t;261,6419
#define ASF_EXTENSION_VIDEOFRAME_NEWFRAME 262,6453
#define ASF_EXTENSION_VIDEOFRAME_IFRAME 263,6501
#define ASF_EXTENSION_VIDEOFRAME_TYPE_MASK 264,6549
    uint64_t i_start_time;270,6638
    uint64_t i_end_time;271,6665
    uint32_t i_data_bitrate;272,6690
    uint32_t i_buffer_size;273,6719
    uint32_t i_initial_buffer_fullness;274,6747
    uint32_t i_alternate_data_bitrate;275,6787
    uint32_t i_alternate_buffer_size;276,6826
    uint32_t i_alternate_initial_buffer_fullness;277,6864
    uint32_t i_maximum_object_size;278,6914
    uint32_t i_flags;280,6951
    uint16_t i_stream_number;281,6973
    uint16_t i_language_index;282,7003
    uint64_t i_average_time_per_frame;283,7034
    uint16_t i_stream_name_count;285,7074
    uint16_t i_payload_extension_system_count;287,7109
    asf_payload_extension_system_t *p_ext;p_ext288,7156
    uint16_t *pi_stream_name_language;pi_stream_name_language290,7200
    char    **ppsz_stream_name;ppsz_stream_name291,7239
    asf_object_stream_properties_t *p_sp;p_sp293,7272
} asf_object_extended_stream_properties_t;294,7314
#define ASF_MAX_EXCLUSION_TYPE 296,7358
    LANGUAGE 299,7406
    LANGUAGE = ASF_MAX_EXCLUSION_TYPE,299,7406
    BITRATE 300,7445
    UNKNOWN 301,7462
} asf_exclusion_type_t;302,7478
    asf_exclusion_type_t exclusion_type;308,7543
    uint16_t i_stream_number_count;309,7584
    uint16_t *pi_stream_number;pi_stream_number310,7620
} asf_object_advanced_mutual_exclusion_t;312,7653
    uint16_t i_priority_count;318,7736
    uint16_t *pi_priority_flag;pi_priority_flag319,7767
    uint16_t *pi_priority_stream_number;pi_priority_stream_number320,7799
} asf_object_stream_prioritization_t;321,7840
    asf_exclusion_type_t exclusion_type;327,7919
    uint16_t i_stream_number_count;328,7960
    uint16_t *pi_stream_numbers;pi_stream_numbers329,7996
} asf_object_bitrate_mutual_exclusion_t;330,8029
    uint16_t i_count;336,8111
    char **ppsz_name;ppsz_name337,8133
    char **ppsz_value;ppsz_value338,8155
} asf_object_extended_content_description_t;339,8178
    asf_object_header_t *p_hdr;p_hdr348,8444
    asf_object_data_t   *p_data;p_data349,8476
    asf_object_index_t  *p_index;p_index351,8563
    asf_object_file_properties_t *p_fp;p_fp354,8633
    asf_object_metadata_t *p_metadata;p_metadata357,8719
} asf_object_root_t;359,8759
typedef union asf_object_u364,8977
    asf_object_common_t common;366,9006
    asf_object_header_t header;367,9038
    asf_object_data_t   data;368,9070
    asf_object_index_t  index;369,9100
    asf_object_root_t   root;370,9131
    asf_object_file_properties_t    file_properties;371,9161
    asf_object_stream_properties_t  stream_properties;372,9214
    asf_object_header_extension_t   header_extension;373,9269
    asf_object_metadata_t           metadata;374,9323
    asf_object_codec_list_t         codec_list;375,9369
    asf_object_marker_t             marker;376,9417
    asf_object_language_list_t      language_list;377,9461
    asf_object_stream_bitrate_properties_t stream_bitrate;378,9512
    asf_object_extended_stream_properties_t ext_stream;379,9571
    asf_object_content_description_t content_description;380,9627
    asf_object_advanced_mutual_exclusion_t advanced_mutual_exclusion;381,9685
    asf_object_stream_prioritization_t stream_prioritization;382,9755
    asf_object_bitrate_mutual_exclusion_t bitrate_mutual_exclusion;383,9817
    asf_object_extended_content_description_t extended_content_description;384,9885
} asf_object_t;386,9962

stream_out/chromecast/chromecast_ctrl.cpp,2279
#define PACKET_MAX_LEN 43,1584
#define APP_ID 46,1652
#define PING_WAIT_TIME 49,1795
#define PING_WAIT_RETRIES 50,1823
#define PONG_WAIT_TIME 52,1918
#define PONG_WAIT_RETRIES 53,1945
static const mtime_t SEEK_FORWARD_OFFSET 55,1974
#define CONTROL_CFG_PREFIX 57,2027
static const std::string NAMESPACE_DEVICEAUTH 59,2069
static const std::string NAMESPACE_CONNECTION 60,2167
static const std::string NAMESPACE_HEARTBEAT 61,2265
static const std::string NAMESPACE_RECEIVER 62,2362
void intf_sys_t::buildMessage(73,2788
intf_sys_t::intf_sys_t(96,3737
intf_sys_t::~intf_sys_t(146,5543
void intf_sys_t::setHasInput(183,6457
int intf_sys_t::connectChromecast(222,7691
void intf_sys_t::disconnectChromecast(255,8408
int intf_sys_t::recvPacket(278,9113
void intf_sys_t::processMessage(395,12906
void intf_sys_t::msgAuth(700,24884
void intf_sys_t::msgPing(710,25166
void intf_sys_t::msgPong(717,25285
void intf_sys_t::msgConnect(723,25403
void intf_sys_t::msgReceiverClose(730,25577
void intf_sys_t::msgReceiverGetStatus(743,25950
void intf_sys_t::msgReceiverLaunchApp(752,26172
void intf_sys_t::msgPlayerGetStatus(762,26435
std::string intf_sys_t::GetMedia(772,26637
void intf_sys_t::msgPlayerLoad(800,27366
void intf_sys_t::msgPlayerPlay(812,27641
void intf_sys_t::msgPlayerStop(825,27928
void intf_sys_t::msgPlayerPause(838,28215
void intf_sys_t::msgPlayerSetVolume(851,28504
void intf_sys_t::msgPlayerSeek(868,28995
int intf_sys_t::sendMessage(887,29480
void intf_sys_t::pushMediaPlayerMessage(911,30241
void* intf_sys_t::ChromecastThread(919,30606
bool intf_sys_t::handleMessages(958,31728
void intf_sys_t::notifySendRequest(1023,33690
void intf_sys_t::requestPlayerStop(1028,33783
void intf_sys_t::requestPlayerSeek(1035,33901
void intf_sys_t::setPauseState(1044,34107
void intf_sys_t::waitAppStarted(1065,34639
void intf_sys_t::waitSeekDone(1075,34925
mtime_t intf_sys_t::get_time(1097,35541
double intf_sys_t::get_position(1104,35734
void intf_sys_t::set_length(1111,35947
void intf_sys_t::wait_app_started(1117,36097
void intf_sys_t::request_seek(1123,36236
void intf_sys_t::wait_seek_done(1129,36390
void intf_sys_t::set_pause_state(1135,36525
void intf_sys_t::set_title(1141,36683
void intf_sys_t::set_artwork(1147,36843

video_filter/hqdn3d.h,427
#define PARAM1_DEFAULT 27,912
#define PARAM2_DEFAULT 28,939
#define PARAM3_DEFAULT 29,966
struct vf_priv_s 33,1075
        int Coefs[Coefs34,1094
        unsigned int *Line;Line35,1124
        unsigned short *Frame[Frame36,1152
static /*inline*/ unsigned int LowPassMul(42,1270
static void deNoiseTemporal(49,1530
static void deNoiseSpacial(70,2219
static void deNoise(109,3766
static void PrecalcCoefs(184,6701

access/rtsp/real_asmrp.c,1623
#define ASMRP_SYM_NONE 39,1312
#define ASMRP_SYM_EOF 40,1345
#define ASMRP_SYM_NUM 42,1379
#define ASMRP_SYM_ID 43,1412
#define ASMRP_SYM_STRING 44,1445
#define ASMRP_SYM_HASH 46,1479
#define ASMRP_SYM_SEMICOLON 47,1513
#define ASMRP_SYM_COMMA 48,1547
#define ASMRP_SYM_EQUALS 49,1581
#define ASMRP_SYM_AND 50,1615
#define ASMRP_SYM_OR 51,1649
#define ASMRP_SYM_LESS 52,1683
#define ASMRP_SYM_LEQ 53,1717
#define ASMRP_SYM_GEQ 54,1751
#define ASMRP_SYM_GREATER 55,1785
#define ASMRP_SYM_DOLLAR 56,1819
#define ASMRP_SYM_LPAREN 57,1853
#define ASMRP_SYM_RPAREN 58,1887
#define ASMRP_MAX_ID 60,1922
#define ASMRP_MAX_SYMTAB 62,1957
  char *id;id65,2009
  int   v;66,2021
} asmrp_sym_t;67,2032
  int         sym;73,2087
  int         num;74,2106
  char        str[str76,2127
  char       *buf;buf80,2183
  int         pos;81,2202
  char        ch;82,2221
  asmrp_sym_t sym_tab[sym_tab84,2240
  int         sym_tab_num;85,2281
} asmrp_t;87,2309
static asmrp_t *asmrp_new asmrp_new89,2321
static void asmrp_dispose 102,2505
static void asmrp_getch 113,2656
static void asmrp_init 121,2765
static void asmrp_number 129,2884
static void asmrp_string 145,3098
static void asmrp_identifier 166,3350
static void asmrp_print_sym 186,3614
static void asmrp_get_sym 259,4818
static int asmrp_find_id 354,6447
static int asmrp_set_id 366,6626
static int asmrp_operand 390,6997
static int asmrp_comp_expression 447,7874
static int asmrp_condition 492,8629
static void asmrp_assignment 524,9099
static int asmrp_rule 555,9748
static int asmrp_eval 598,10383
int asmrp_match 623,10843

video_output/xcb/x11.c,677
vlc_module_begin 47,1417
#define MAX_PICTURES 62,1948
struct vout_display_sys_t64,1974
    xcb_connection_t *conn;conn66,2002
    vout_window_t *embed;embed67,2030
    xcb_cursor_t cursor;69,2074
    xcb_window_t window;70,2118
    xcb_gcontext_t gc;71,2167
    xcb_shm_seg_t seg_base;72,2218
    bool visible;73,2285
    uint8_t depth;74,2325
    picture_pool_t *pool;pool76,2373
static const xcb_depth_t *FindDepth FindDepth86,2699
static int Open 105,3113
static void Close 324,9950
static picture_pool_t *Pool Pool345,10516
static void Display 409,12326
static int Control 458,14299
static void Manage 529,16732
static void ResetPictures 536,16867

packetizer/avparser.c,372
vlc_module_begin 45,1760
struct decoder_sys_t53,2005
    AVCodecParserContext * p_parser_ctx;55,2028
    AVCodecContext * p_codec_ctx;56,2069
    int i_offset;57,2103
static void FlushPacketizer(66,2470
int OpenPacketizer(84,3183
void ClosePacketizer(141,4776
static block_t *Packetize Packetize156,5301
static block_t *PacketizeClosed PacketizeClosed208,6788

demux/image.c,1593
#define ID_TEXT 44,1750
#define ID_LONGTEXT 45,1778
#define GROUP_TEXT 48,1848
#define GROUP_LONGTEXT 49,1879
#define DECODE_TEXT 52,1954
#define DECODE_LONGTEXT 53,1987
#define CHROMA_TEXT 56,2053
#define CHROMA_LONGTEXT 57,2093
#define DURATION_TEXT 61,2232
#define DURATION_LONGTEXT 62,2280
#define FPS_TEXT 66,2430
#define FPS_LONGTEXT 67,2464
#define RT_TEXT 70,2545
#define RT_LONGTEXT 71,2577
vlc_module_begin(75,2709
struct demux_sys_t101,3761
    block_t     *data;data103,3782
    es_out_id_t *es;es104,3805
    mtime_t     duration;105,3826
    bool        is_realtime;106,3852
    mtime_t     pts_origin;107,3881
    mtime_t     pts_next;108,3909
    date_t        pts;109,3935
static block_t *Load(Load112,3962
static block_t *Decode(Decode140,4621
static int Demux(186,5789
static int Control(231,7025
static bool IsBmp(291,8949
static bool IsPcx(316,9720
static bool IsLbm(336,10568
static bool IsPnmBlank(347,10888
static bool IsPnm(351,10986
static uint8_t FindJpegMarker(380,11728
static bool IsJfif(392,12069
static bool IsSpiff(410,12537
static bool IsExif(423,12895
static bool FindSVGmarker(441,13363
static bool IsSVG(454,13670
static bool IsTarga(491,14570
    vlc_fourcc_t  codec;537,16223
    int           marker_size;538,16248
    const uint8_t marker[marker539,16279
    bool          (*detect)detect540,16309
} image_format_t;541,16351
#define VLC_CODEC_XCF 543,16370
#define VLC_CODEC_LBM 544,16423
static const image_format_t formats[formats545,16476
static int Open(619,18392
static void Close(709,21275

packetizer/avparser.h,33
#define AVPARSER_MODULE 46,1798

codec/avcodec/avcodec.c,499
#define HAVE_MMX 38,1586
struct decoder_sys_t48,1898
    AVCODEC_COMMON_MEMBERS51,1975
static const int  nloopf_list[nloopf_list60,2270
static const char *const nloopf_list_text[nloopf_list_text61,2323
static const char *const enc_hq_list[enc_hq_list65,2461
static const char *const enc_hq_list_text[enc_hq_list_text66,2530
#define MODULE_DESCRIPTION 79,2952
vlc_module_begin 83,3187
static void CloseDecoder(335,13657
int ffmpeg_OpenCodec(361,14320
void ffmpeg_CloseCodec(394,15219

packetizer/hevc_nal.c,10334
typedef uint8_t  nal_u1_t;32,1156
typedef uint8_t  nal_u2_t;33,1183
typedef uint8_t  nal_u3_t;34,1210
typedef uint8_t  nal_u4_t;35,1237
typedef uint8_t  nal_u5_t;36,1264
typedef uint8_t  nal_u6_t;37,1291
typedef uint8_t  nal_u7_t;38,1318
typedef uint8_t  nal_u8_t;39,1345
typedef int32_t  nal_se_t;40,1372
typedef uint32_t nal_ue_t;41,1399
    nal_u2_t profile_space;45,1444
    nal_u1_t tier_flag;46,1472
    nal_u5_t profile_idc;47,1496
    uint32_t profile_compatibility_flag;48,1522
    nal_u1_t progressive_source_flag;49,1583
    nal_u1_t interlaced_source_flag;50,1621
    nal_u1_t non_packed_constraint_flag;51,1658
    nal_u1_t frame_only_constraint_flag;52,1699
        nal_u1_t max_12bit_constraint_flag;55,1757
        nal_u1_t max_10bit_constraint_flag;56,1801
        nal_u1_t max_8bit_constraint_flag;57,1845
        nal_u1_t max_422chroma_constraint_flag;58,1888
        nal_u1_t max_420chroma_constraint_flag;59,1936
        nal_u1_t max_monochrome_constraint_flag;60,1984
        nal_u1_t intra_constraint_flag;61,2033
        nal_u1_t one_picture_only_constraint_flag;62,2073
        nal_u1_t lower_bit_rate_constraint_flag;63,2124
    } idc4to7;64,2173
        nal_u1_t inbld_flag;67,2205
    } idc1to5;68,2234
} hevc_inner_profile_tier_level_t;69,2249
#define HEVC_MAX_SUBLAYERS 71,2285
    hevc_inner_profile_tier_level_t general;74,2331
    nal_u8_t general_level_idc;75,2376
    uint8_t  sublayer_profile_present_flag;76,2408
    uint8_t  sublayer_level_present_flag;77,2472
    hevc_inner_profile_tier_level_t sub_layer[sub_layer78,2536
    nal_u8_t sub_layer_level_idc[sub_layer_level_idc79,2603
} hevc_profile_tier_level_t;80,2657
#define HEVC_MAX_SHORT_TERM_REF_PIC_SET 82,2687
#define HEVC_MAX_LONG_TERM_REF_PIC_SET 83,2730
    unsigned num_delta_pocs;87,2790
} hevc_short_term_ref_pic_set_t;88,2819
    nal_u1_t aspect_ratio_info_present_flag;92,2870
        nal_u8_t aspect_ratio_idc;95,2932
        uint16_t sar_width;96,2967
        uint16_t sar_height;97,2995
    } ar;98,3024
    nal_u1_t overscan_info_present_flag;99,3034
    nal_u1_t overscan_appropriate_flag;100,3075
    nal_u1_t video_signal_type_present_flag;102,3116
        nal_u3_t video_format;105,3178
        nal_u1_t video_full_range_flag;106,3209
        nal_u1_t colour_description_present_flag;107,3249
            nal_u8_t colour_primaries;110,3324
            nal_u8_t transfer_characteristics;111,3363
            nal_u8_t matrix_coeffs;112,3410
        } colour;113,3446
    } vs;114,3464
    nal_u1_t chroma_loc_info_present_flag;116,3475
        nal_ue_t sample_loc_type_top_field;119,3535
        nal_ue_t sample_loc_type_bottom_field;120,3579
    } chroma;121,3626
    nal_u1_t neutral_chroma_indication_flag;123,3641
    nal_u1_t field_seq_flag;124,3686
    nal_u1_t frame_field_info_present_flag;125,3715
    nal_u1_t default_display_window_flag;127,3760
        nal_ue_t win_left_offset;130,3819
        nal_ue_t win_right_offset;131,3853
        nal_ue_t win_top_offset;132,3888
        nal_ue_t win_bottom_offset;133,3921
    } def_disp;134,3957
    nal_u1_t vui_timing_info_present_flag;136,3974
        uint32_t vui_num_units_in_tick;139,4034
        uint32_t vui_time_scale;140,4074
    } timing;142,4132
} hevc_vui_parameters_t;145,4168
struct hevc_video_parameter_set_t147,4194
    nal_u4_t vps_video_parameter_set_id;149,4230
    nal_u1_t vps_base_layer_internal_flag;150,4271
    nal_u1_t vps_base_layer_available_flag;151,4314
    nal_u6_t vps_max_layers_minus1;152,4358
    nal_u3_t vps_max_sub_layers_minus1;153,4394
    nal_u1_t vps_temporal_id_nesting_flag;154,4434
    hevc_profile_tier_level_t profile_tier_level;156,4478
    nal_u1_t vps_sub_layer_ordering_info_present_flag;158,4529
        nal_ue_t dec_pic_buffering_minus1;161,4601
        nal_ue_t num_reorder_pics;162,4644
        nal_ue_t max_latency_increase_plus1;163,4679
    } vps_max[vps_max164,4724
    nal_u6_t vps_max_layer_id;166,4764
    nal_ue_t vps_num_layer_set_minus1;167,4795
    nal_u1_t vps_timing_info_present_flag;170,4885
    uint32_t vps_num_units_in_tick;171,4928
    uint32_t vps_time_scale;172,4964
struct hevc_sequence_parameter_set_t177,5019
    nal_u4_t sps_video_parameter_set_id;179,5058
    nal_u3_t sps_max_sub_layers_minus1;180,5099
    nal_u1_t sps_temporal_id_nesting_flag;181,5139
    hevc_profile_tier_level_t profile_tier_level;183,5183
    nal_ue_t sps_seq_parameter_set_id;185,5234
    nal_ue_t chroma_format_idc;186,5273
    nal_u1_t separate_colour_plane_flag;187,5305
    nal_ue_t pic_width_in_luma_samples;189,5347
    nal_ue_t pic_height_in_luma_samples;190,5387
    nal_u1_t conformance_window_flag;192,5429
    nal_ue_t left_offset;195,5484
    nal_ue_t right_offset;196,5510
    nal_ue_t top_offset;197,5537
    nal_ue_t bottom_offset;198,5562
    } conf_win;199,5590
    nal_ue_t bit_depth_luma_minus8;201,5607
    nal_ue_t bit_depth_chroma_minus8;202,5643
    nal_ue_t log2_max_pic_order_cnt_lsb_minus4;203,5681
    nal_u1_t sps_sub_layer_ordering_info_present_flag;205,5730
    nal_ue_t dec_pic_buffering_minus1;208,5802
    nal_ue_t num_reorder_pics;209,5841
    nal_ue_t latency_increase_plus1;210,5872
    } sps_max[sps_max211,5909
    nal_ue_t log2_min_luma_coding_block_size_minus3;213,5949
    nal_ue_t log2_diff_max_min_luma_coding_block_size;214,6002
    nal_ue_t log2_min_luma_transform_block_size_minus2;215,6057
    nal_ue_t log2_diff_max_min_luma_transform_block_size;216,6113
    nal_ue_t max_transform_hierarchy_depth_inter;219,6193
    nal_ue_t max_transform_hierarchy_depth_intra;220,6243
    nal_u1_t scaling_list_enabled;221,6293
    nal_u1_t sps_scaling_list_data_present_flag;222,6328
    nal_u1_t amp_enabled_flag;225,6423
    nal_u1_t sample_adaptive_offset_enabled_flag;226,6454
    nal_u1_t pcm_enabled_flag;228,6505
    nal_u4_t pcm_sample_bit_depth_luma_minus1;229,6536
    nal_u4_t pcm_sample_bit_depth_chroma_minus1;230,6583
    nal_ue_t log2_min_pcm_luma_coding_block_size_minus3;231,6632
    nal_ue_t log2_diff_max_min_pcm_luma_coding_block_size;232,6689
    nal_u1_t pcm_loop_filter_disabled_flag;233,6748
    nal_ue_t num_short_term_ref_pic_sets;235,6793
    nal_u1_t long_term_ref_pics_present_flag;238,6858
    nal_ue_t num_long_term_ref_pics_sps;239,6904
    nal_u1_t sps_temporal_mvp_enabled_flag;242,6953
    nal_u1_t strong_intra_smoothing_enabled_flag;243,6997
    nal_u1_t vui_parameters_present_flag;245,7048
    hevc_vui_parameters_t vui;246,7090
struct hevc_picture_parameter_set_t250,7146
    nal_ue_t pps_pic_parameter_set_id;252,7184
    nal_ue_t pps_seq_parameter_set_id;253,7223
    nal_u1_t dependent_slice_segments_enabled_flag;254,7262
    nal_u1_t output_flag_present_flag;255,7314
    nal_u3_t num_extra_slice_header_bits;256,7353
    nal_u1_t sign_data_hiding_enabled_flag;257,7395
    nal_u1_t cabac_init_present_flag;258,7439
    nal_ue_t num_ref_idx_l0_default_active_minus1;259,7477
    nal_ue_t num_ref_idx_l1_default_active_minus1;260,7528
    nal_se_t init_qp_minus26;261,7579
    nal_u1_t constrained_intra_pred_flag;262,7609
    nal_u1_t transform_skip_enabled_flag;263,7651
    nal_u1_t cu_qp_delta_enabled_flag;265,7694
    nal_ue_t diff_cu_qp_delta_depth;266,7733
    nal_se_t pps_cb_qp_offset;268,7771
    nal_se_t pps_cr_qp_offset;269,7802
    nal_u1_t pic_slice_level_chroma_qp_offsets_present_flag;270,7833
    nal_u1_t weighted_pred_flag;271,7894
    nal_u1_t weighted_bipred_flag;272,7927
    nal_u1_t transquant_bypass_enable_flag;273,7962
    nal_u1_t tiles_enabled_flag;275,8007
    nal_u1_t entropy_coding_sync_enabled_flag;276,8040
    nal_ue_t num_tile_columns_minus1;277,8087
    nal_ue_t num_tile_rows_minus1;278,8125
    nal_u1_t uniform_spacing_flag;279,8160
    nal_u1_t loop_filter_across_tiles_enabled_flag;282,8311
    nal_u1_t pps_loop_filter_across_slices_enabled_flag;284,8364
    nal_u1_t deblocking_filter_control_present_flag;286,8422
    nal_u1_t deblocking_filter_override_enabled_flag;287,8475
    nal_u1_t pps_deblocking_filter_disabled_flag;288,8529
    nal_se_t pps_beta_offset_div2;289,8579
    nal_se_t pps_tc_offset_div2;290,8614
    nal_u1_t scaling_list_data_present_flag;292,8648
    nal_u1_t lists_modification_present_flag;295,8739
    nal_ue_t log2_parallel_merge_level_minus2;296,8785
    nal_u1_t slice_header_extension_present_flag;297,8832
    nal_u1_t pps_extension_present_flag;299,8883
    nal_u1_t pps_range_extension_flag;300,8924
    nal_u1_t pps_multilayer_extension_flag;301,8963
    nal_u1_t pps_3d_extension_flag;302,9007
    nal_u5_t pps_extension_5bits;303,9043
struct hevc_slice_segment_header_t308,9103
    nal_u1_t first_slice_segment_in_pic_flag;310,9140
    nal_u1_t no_output_of_prior_pics_flag;311,9186
    nal_ue_t slice_pic_parameter_set_id;312,9229
    nal_u1_t dependent_slice_segment_flag;313,9270
    nal_ue_t slice_type;315,9362
    nal_u1_t pic_output_flag;316,9387
static size_t get_hvcC_to_AnnexB_NAL_size(322,9505
uint8_t * hevc_hvcC_to_AnnexB_NAL(362,10473
static bool hevc_parse_scaling_list_rbsp(403,11577
static bool hevc_parse_vui_parameters_rbsp(433,12338
bool hevc_get_xps_id(511,15158
static bool hevc_parse_inner_profile_tier_level_rbsp(527,15635
static bool hevc_parse_profile_tier_level_rbsp(571,17398
static bool hevc_parse_video_parameter_set_rbsp(619,18942
void hevc_rbsp_release_vps(670,20888
#define IMPL_hevc_generic_decode(675,20976
IMPL_hevc_generic_decode(702,21990
static bool hevc_parse_sequence_parameter_set_rbsp(760,24192
void hevc_rbsp_release_sps(888,29336
IMPL_hevc_generic_decode(893,29427
void hevc_rbsp_release_pps(988,33465
IMPL_hevc_generic_decode(993,33555
uint8_t hevc_get_pps_sps_id(1001,33839
bool hevc_get_sps_profile_tier_level(1006,33961
bool hevc_get_picture_size(1018,34365
static inline uint8_t vlc_ceil_log2(1031,34865
static bool hevc_get_picture_CtbsYsize(1039,35015
bool hevc_get_frame_rate(1051,35583
bool hevc_get_colorimetry(1071,36415
static bool hevc_parse_slice_segment_header_rbsp(1089,37174
void hevc_rbsp_release_slice_header(1157,39449
hevc_slice_segment_header_t * hevc_decode_slice_header(1162,39545
bool hevc_get_slice_type(1195,40768
bool hevc_get_profile_level(1205,41011

video_output/xcb/pictures.c,201
# define shmdt(36,1247
bool XCB_shm_Check 49,1469
static void XCB_picture_Destroy 74,2090
int XCB_picture_Alloc 85,2375
picture_t *XCB_picture_NewFromResource XCB_picture_NewFromResource153,4459

demux/adaptive/playlist/Inheritables.hpp,688
#define INHERITABLES_H21,1105
namespace adaptive29,1247
    namespace playlistadaptive::playlist31,1268
        class Timelineableadaptive::playlist::Timelineable35,1329
                Property<SegmentTimeline *> segmentTimeline;adaptive::playlist::Timelineable::segmentTimeline40,1451
        class TimescaleAbleadaptive::playlist::TimescaleAble43,1524
                TimescaleAble *parentTimescaleAble;adaptive::playlist::TimescaleAble::parentTimescaleAble55,1972
                Timescale timescale;adaptive::playlist::TimescaleAble::timescale58,2046
        class Uniqueadaptive::playlist::Unique61,2095
                ID id;adaptive::playlist::Unique::id68,2258

video_output/xcb/events.c,523
int vlc_xcb_error_Check(39,1255
static xcb_connection_t *Connect Connect60,1696
static void RegisterEvents 83,2506
static const xcb_screen_t *FindScreen FindScreen103,3231
vout_window_t *vlc_xcb_parent_Create(vlc_xcb_parent_Create122,3829
xcb_cursor_t vlc_xcb_cursor_Create(165,5089
static void HandleButtonPress 182,5737
static void HandleButtonRelease 188,5921
static void HandleMotionNotify 194,6112
static void HandleVisibilityNotify 218,6958
static int ProcessEvent 228,7269
int vlc_xcb_Manage(261,8190

services_discovery/pulse.c,605
vlc_module_begin 41,1404
struct services_discovery_sys_t53,1772
    void                 *root;root55,1806
    pa_context           *context;context56,1838
    pa_threaded_mainloop *mainloop;mainloop57,1873
static int Open 64,2112
struct device111,3441
    uint32_t index;113,3457
    input_item_t *item;item114,3477
    services_discovery_t *sd;sd115,3501
static void DestroySource 118,3535
static int cmpsrc 130,3764
static int AddSource 141,3978
static void SourceCallback(189,5249
static void RemoveSource 203,5536
static void ContextCallback(216,5839
static void Close 239,6578

lua/meta.c,332
#   define  _GNU_SOURCE29,1416
static const luaL_Reg p_reg[p_reg42,1705
static lua_State * init(44,1758
static int run(82,2796
static bool validate_scope(146,4905
static int fetch_art(154,5137
static int read_meta(202,6571
static int fetch_meta(225,7429
int ReadMeta(242,7958
int FetchMeta(253,8328
int FindArt(265,8817

services_discovery/xcb_apps.c,794
typedef xcb_atom_t Atom;28,1133
vlc_module_begin 47,1545
struct services_discovery_sys_t60,1883
    xcb_connection_t *conn;conn62,1917
    vlc_thread_t      thread;63,1945
    xcb_atom_t        net_client_list;64,1975
    xcb_atom_t        net_wm_name;65,2014
    xcb_window_t      root_window;66,2049
    void             *apps;apps67,2084
static int vlc_sd_probe_Open 75,2270
static int Open 92,2791
static void Close 181,5208
static void *Run Run193,5517
struct app227,6468
    xcb_window_t          xid;229,6481
    input_item_t         *item;item230,6543
    services_discovery_t *owner;owner231,6575
static struct app *AddApp AddApp234,6612
static void DelApp 277,7837
static int cmpapp 286,8009
static void UpdateApps 298,8234
static void AddDesktop(345,9547

audio_filter/chorus_flanger.c,858
struct filter_sys_t48,1920
    int i_cumulative;51,1979
    int i_channels,52,2001
    int i_channels, i_sampleRate;52,2001
    float f_delayTime,53,2035
    float f_delayTime, f_feedbackGain;53,2035
    float f_wetLevel,54,2110
    float f_wetLevel, f_dryLevel;54,2110
    float f_sweepDepth,55,2144
    float f_sweepDepth, f_sweepRate;55,2144
    float f_offset;57,2182
    int i_step;58,2202
    float f_temp;59,2218
    float f_sinMultiplier;60,2236
    int i_bufferLength;63,2340
    float * p_delayLineStart,64,2364
    float * p_delayLineStart, * p_delayLineEnd;64,2364
    float * p_write;65,2412
vlc_module_begin 73,2619
static int Open(112,4072
static inline void sanitize(206,7526
static block_t *DoWork(DoWork219,7811
static void Close(304,11216
static int paramCallback(329,12259
static int reallocate_buffer(387,14537

codec/avcodec/avcodec.h,2845
#define DR_TEXT 56,2319
#define ERROR_TEXT 59,2417
#define ERROR_LONGTEXT 60,2459
#define BUGS_TEXT 66,2733
#define BUGS_LONGTEXT 67,2773
#define HURRYUP_TEXT 79,3108
#define HURRYUP_LONGTEXT 80,3144
#define FAST_TEXT 85,3352
#define FAST_LONGTEXT 86,3395
#define SKIP_FRAME_TEXT 89,3505
#define SKIP_FRAME_LONGTEXT 90,3558
#define SKIP_IDCT_TEXT 94,3730
#define SKIP_IDCT_LONGTEXT 95,3781
#define DEBUG_TEXT 99,3966
#define DEBUG_LONGTEXT 100,4004
#define CODEC_TEXT 102,4058
#define CODEC_LONGTEXT 103,4096
#define SKIPLOOPF_TEXT 105,4159
#define SKIPLOOPF_LONGTEXT 106,4230
#define HW_TEXT 110,4434
#define HW_LONGTEXT 111,4474
#define VDA_PIX_FMT_TEXT 113,4547
#define VDA_PIX_FMT_LONGTEXT 114,4602
#define THREADS_TEXT 116,4681
#define THREADS_LONGTEXT 117,4718
#define ENC_CFG_PREFIX 122,4830
#define ENC_KEYINT_TEXT 124,4870
#define ENC_KEYINT_LONGTEXT 125,4922
#define ENC_BFRAMES_TEXT 128,5021
#define ENC_BFRAMES_LONGTEXT 129,5072
#define ENC_VT_TEXT 132,5185
#define ENC_VT_LONGTEXT 133,5237
#define ENC_INTERLACE_TEXT 135,5305
#define ENC_INTERLACE_LONGTEXT 136,5360
#define ENC_INTERLACE_ME_TEXT 139,5458
#define ENC_INTERLACE_ME_LONGTEXT 140,5525
#define ENC_PRE_ME_TEXT 143,5647
#define ENC_PRE_ME_LONGTEXT 144,5701
#define ENC_RC_BUF_TEXT 147,5788
#define ENC_RC_BUF_LONGTEXT 148,5845
#define ENC_RC_BUF_AGGR_TEXT 152,6024
#define ENC_RC_BUF_AGGR_LONGTEXT 153,6096
#define ENC_IQUANT_FACTOR_TEXT 156,6180
#define ENC_IQUANT_FACTOR_LONGTEXT 157,6241
#define ENC_NOISE_RED_TEXT 161,6407
#define ENC_NOISE_RED_LONGTEXT 162,6458
#define ENC_MPEG4_MATRIX_TEXT 166,6636
#define ENC_MPEG4_MATRIX_LONGTEXT 167,6700
#define ENC_HQ_TEXT 172,6935
#define ENC_HQ_LONGTEXT 173,6977
#define ENC_HURRYUP_TEXT 177,7119
#define ENC_HURRYUP_LONGTEXT 178,7161
#define ENC_QMIN_TEXT 184,7482
#define ENC_QMIN_LONGTEXT 185,7542
#define ENC_QMAX_TEXT 188,7615
#define ENC_QMAX_LONGTEXT 189,7675
#define ENC_TRELLIS_TEXT 192,7748
#define ENC_TRELLIS_LONGTEXT 193,7802
#define ENC_QSCALE_TEXT 196,7917
#define ENC_QSCALE_LONGTEXT 197,7971
#define ENC_STRICT_TEXT 200,8096
#define ENC_STRICT_LONGTEXT 201,8155
#define ENC_LUMI_MASKING_TEXT 204,8276
#define ENC_LUMI_MASKING_LONGTEXT 205,8332
#define ENC_DARK_MASKING_TEXT 208,8446
#define ENC_DARK_MASKING_LONGTEXT 209,8501
#define ENC_P_MASKING_TEXT 212,8613
#define ENC_P_MASKING_LONGTEXT 213,8663
#define ENC_BORDER_MASKING_TEXT 216,8794
#define ENC_BORDER_MASKING_LONGTEXT 217,8849
#define ENC_LUMA_ELIM_TEXT 220,8980
#define ENC_LUMA_ELIM_LONGTEXT 221,9037
#define ENC_CHROMA_ELIM_TEXT 225,9206
#define ENC_CHROMA_ELIM_LONGTEXT 226,9267
#define ENC_PROFILE_TEXT 230,9439
#define ENC_PROFILE_LONGTEXT 231,9505
#define AVCODEC_COMMON_MEMBERS 236,9811
#   define AV_VERSION_INT(242,9963
#   define HAVE_AVCODEC_MT246,10060

keystore/memory.c,203
vlc_module_begin(40,1381
struct vlc_keystore_sys50,1681
    struct ks_list  list;52,1707
    vlc_mutex_t     lock;53,1733
Store(57,1774
Find(89,2659
Remove(126,3736
Close(145,4232
Open(156,4479

packetizer/hevc_nal.h,3205
# define HEVC_NAL_H21,1012
#define HEVC_VPS_MAX 26,1080
#define HEVC_SPS_MAX 27,1104
#define HEVC_PPS_MAX 28,1128
enum hevc_general_profile_idc_e30,1153
    HEVC_PROFILE_NONE 32,1187
    HEVC_PROFILE_MAIN 33,1228
    HEVC_PROFILE_MAIN_10 34,1269
    HEVC_PROFILE_MAIN_STILL_PICTURE 35,1310
    HEVC_PROFILE_REXT 36,1351
#define HEVC_EXT_PROFILE_MONOCHROME 41,1508
#define HEVC_EXT_PROFILE_MONOCHROME_12 42,1566
#define HEVC_EXT_PROFILE_MONOCHROME_16 43,1624
#define HEVC_EXT_PROFILE_MAIN_12 44,1682
#define HEVC_EXT_PROFILE_MAIN_422_10 45,1740
#define HEVC_EXT_PROFILE_MAIN_422_12 46,1798
#define HEVC_EXT_PROFILE_MAIN_444 47,1856
#define HEVC_EXT_PROFILE_MAIN_444_10 48,1914
#define HEVC_EXT_PROFILE_MAIN_444_12 49,1972
#define HEVC_EXT_PROFILE_MAIN_INTRA 50,2030
#define HEVC_EXT_PROFILE_MAIN_10_INTRA 51,2136
#define HEVC_EXT_PROFILE_MAIN_12_INTRA 52,2194
#define HEVC_EXT_PROFILE_MAIN_422_10_INTRA 53,2252
#define HEVC_EXT_PROFILE_MAIN_422_12_INTRA 54,2310
#define HEVC_EXT_PROFILE_MAIN_444_INTRA 55,2368
#define HEVC_EXT_PROFILE_MAIN_444_10_INTRA 56,2426
#define HEVC_EXT_PROFILE_MAIN_444_12_INTRA 57,2484
#define HEVC_EXT_PROFILE_MAIN_444_16_INTRA 58,2542
#define HEVC_EXT_PROFILE_MAIN_444_STILL_PICTURE 59,2600
#define HEVC_EXT_PROFILE_MAIN_444_16_STILL_PICTURE 60,2658
enum hevc_nal_unit_type_e63,2783
    HEVC_NAL_TRAIL_N 65,2811
    HEVC_NAL_TRAIL_R 66,2855
    HEVC_NAL_TSA_N 67,2909
    HEVC_NAL_TSA_R 68,2969
    HEVC_NAL_STSA_N 69,3039
    HEVC_NAL_STSA_R 70,3108
    HEVC_NAL_RADL_N 71,3187
    HEVC_NAL_RADL_R 72,3270
    HEVC_NAL_RASL_N 73,3363
    HEVC_NAL_RASL_R 74,3444
    HEVC_NAL_RSV_VCL_N10=76,3563
    HEVC_NAL_RSV_VCL_N12=77,3593
    HEVC_NAL_RSV_VCL_N14=78,3623
    HEVC_NAL_BLA_W_LP 80,3674
    HEVC_NAL_BLA_W_RADL 81,3750
    HEVC_NAL_BLA_N_LP 82,3826
    HEVC_NAL_IDR_W_RADL 83,3881
    HEVC_NAL_IDR_N_LP 84,3968
    HEVC_NAL_CRA 85,4034
    HEVC_NAL_IRAP_VCL22 87,4118
    HEVC_NAL_IRAP_VCL23 88,4180
    HEVC_NAL_VPS 90,4231
    HEVC_NAL_SPS 91,4261
    HEVC_NAL_PPS 92,4291
    HEVC_NAL_AUD 93,4321
    HEVC_NAL_EOS 94,4379
    HEVC_NAL_EOB 95,4431
    HEVC_NAL_FD 96,4484
    HEVC_NAL_PREF_SEI 97,4531
    HEVC_NAL_SUFF_SEI 98,4578
    HEVC_NAL_RSV_NVCL41 100,4653
    HEVC_NAL_RSV_NVCL44 101,4706
    HEVC_NAL_RSV_NVCL45 102,4736
    HEVC_NAL_RSV_NVCL47 103,4766
    HEVC_NAL_UNSPEC48 104,4796
    HEVC_NAL_UNSPEC55 105,4853
    HEVC_NAL_UNSPEC56 106,4883
    HEVC_NAL_UNSPEC63 107,4913
    HEVC_NAL_UNKNOWN108,4943
enum hevc_slice_type_e111,4968
    HEVC_SLICE_TYPE_B 113,4993
    HEVC_SLICE_TYPE_P,114,5020
    HEVC_SLICE_TYPE_I115,5043
#define HEVC_MIN_HVCC_SIZE 118,5069
static inline bool hevc_ishvcC(121,5158
static inline uint8_t hevc_getNALLengthSize(135,5670
static inline uint8_t hevc_getNALType(140,5780
static inline uint8_t hevc_getNALLayer(145,5884
typedef struct hevc_video_parameter_set_t hevc_video_parameter_set_t;151,6026
typedef struct hevc_sequence_parameter_set_t hevc_sequence_parameter_set_t;152,6096
typedef struct hevc_picture_parameter_set_t hevc_picture_parameter_set_t;153,6172
typedef struct hevc_slice_segment_header_t hevc_slice_segment_header_t;154,6246

video_output/xcb/pictures.h,108
# define ORDER 24,1036
# define ORDER 26,1083
static inline xcb_shm_seg_t XCB_picture_GetSegment(40,1602

lua/libs/volume.c,280
#   define  _GNU_SOURCE29,1382
static int vlclua_volume_set(48,1798
static int vlclua_volume_get(58,2118
static int vlclua_volume_up(66,2358
static int vlclua_volume_down(76,2639
static const luaL_Reg vlclua_volume_reg[vlclua_volume_reg89,3086
void luaopen_volume(97,3291

video_output/xcb/events.h,86
# define XCB_CURSOR_NONE 24,1042
typedef struct key_handler_t key_handler_t;30,1139

demux/dash/DASHStream.hpp,161
#define DASHSTREAM_HPP21,994
namespace dash25,1054
    class DASHStream dash::DASHStream29,1102
    class DASHStreamFactory dash::DASHStreamFactory39,1385

keystore/file.c,514
vlc_module_begin(53,1646
struct vlc_keystore_sys75,2427
    char *          psz_file;77,2453
    bool            b_crypted;79,2500
    struct crypt    crypt;80,2531
static const char *const ppsz_keys[ppsz_keys84,2569
str2key(96,2800
values_write(107,2989
truncate0(137,3732
file_save(148,3989
file_read(193,5113
posix_lock_fd(272,7057
file_open(292,7395
file_close(323,7976
Store(329,8037
Find(390,9683
Remove(454,11566
Close(486,12361
Open(496,12554
CloseCrypt(543,13537
OpenCrypt(555,13807

access/zip/unzip/crypt.h,261
#define CRC32(30,1104
static int decrypt_byte(35,1314
static int update_keys(49,1881
static void init_keys(66,2409
#define zdecode(77,2704
#define zencode(80,2818
#define RAND_HEAD_LEN 85,2984
#    define ZCR_SEED2 88,3098
static int crypthead(91,3179

access/satip.c,1874
#define RTSP_DEFAULT_PORT 47,1574
#define RTSP_RECEIVE_BUFFER 48,1604
#define RTP_HEADER_SIZE 49,1637
#define VLEN 50,1664
#define KEEPALIVE_INTERVAL 51,1681
#define KEEPALIVE_MARGIN 52,1711
#define BUFFER_TEXT 57,1820
#define BUFFER_LONGTEXT 58,1861
#define MULTICAST_TEXT 60,1924
#define MULTICAST_LONGTEXT 61,1978
#define SATIP_HOST_TEXT 63,2055
vlc_module_begin(65,2091
enum rtsp_state 79,2637
    RTSP_IDLE,80,2655
    RTSP_DESCRIBE,81,2670
    RTSP_SETUP,82,2689
    RTSP_PLAY,83,2705
    RTSP_RUNNING84,2720
enum rtsp_result 87,2741
    RTSP_RESULT_OK 88,2760
#define UDP_ADDRESS_LEN 91,2790
typedef struct access_sys_t 92,2817
    char *content_base;content_base93,2847
    char *control;control94,2871
    char session_id[session_id95,2890
    uint16_t stream_id;96,2915
    int keepalive_interval;97,2939
    char udp_address[udp_address99,2968
    uint16_t udp_port;100,3007
    int tcp_sock;102,3031
    int udp_sock;103,3049
    int rtcp_sock;104,3067
    enum rtsp_state state;106,3087
    int cseq;107,3114
    size_t fifo_size;109,3129
    block_fifo_t *fifo;fifo110,3151
    vlc_thread_t thread;111,3175
    uint16_t last_seq_nr;112,3200
    bool woken;114,3227
} access_sys_t;115,3243
static void parse_session(117,3260
static int parse_port(137,3829
static int parse_transport(148,3998
static char *net_readln_timeout(net_readln_timeout189,5265
#define skip_whitespace(261,7100
static enum rtsp_result rtsp_handle(262,7148
static void satip_cleanup_blocks(326,9038
static int check_rtp_seq(336,9250
static void satip_teardown(357,10046
#define RECV_TIMEOUT 420,12179
static void *satip_thread(satip_thread421,12216
static block_t* satip_block(535,15591
static int satip_control(555,16038
static int satip_bind_ports(583,16817
static int satip_open(618,17755
static void satip_close(800,23336

access/http/file.c,606
struct vlc_http_file42,1418
    struct vlc_http_resource resource;44,1441
    uintmax_t offset;45,1480
static int vlc_http_file_req(48,1506
static int vlc_http_file_resp(78,2468
static const struct vlc_http_resource_cbs vlc_http_file_callbacks 107,3296
struct vlc_http_resource *vlc_http_file_create(vlc_http_file_create113,3417
static uintmax_t vlc_http_msg_get_file_size(132,3969
static bool vlc_http_msg_can_seek(169,5068
uintmax_t vlc_http_file_get_size(178,5347
bool vlc_http_file_can_seek(196,5909
int vlc_http_file_seek(204,6136
block_t *vlc_http_file_read(vlc_http_file_read232,6988

access/rtsp/real_rmff.c,724
#define BE_16(31,1009
#define BE_32(32,1076
static int rmff_dump_fileheader(41,1308
static int rmff_dump_prop(65,2269
static int rmff_dump_mdpr(111,4035
static int rmff_dump_cont(164,6099
static int rmff_dump_dataheader(212,7749
int rmff_dump_header(239,8540
void rmff_dump_pheader(281,9476
rmff_fileheader_t *rmff_new_fileheader(rmff_new_fileheader297,9935
rmff_prop_t *rmff_new_prop rmff_new_prop312,10293
rmff_mdpr_t *rmff_new_mdpr(rmff_new_mdpr347,11125
rmff_cont_t *rmff_new_cont(rmff_new_cont399,12585
rmff_data_t *rmff_new_dataheader(rmff_new_dataheader437,13502
void rmff_print_header(451,13840
void rmff_fix_header(514,16199
int rmff_get_header_size(617,19406
void rmff_free_header(623,19535

video_splitter/panoramix.c,4253
#define OVERLAP42,1678
#define ROW_MAX 54,1890
#define COL_MAX 55,1911
#define COLS_TEXT 60,2113
#define COLS_LONGTEXT 61,2155
#define ROWS_TEXT 64,2267
#define ROWS_LONGTEXT 65,2306
#define ACTIVE_TEXT 68,2416
#define ACTIVE_LONGTEXT 69,2457
#define CFG_PREFIX 72,2553
#define PANORAMIX_HELP 74,2586
vlc_module_begin(80,2768
#define LENGTH_TEXT 94,3284
#define LENGTH_LONGTEXT 95,3348
#define HEIGHT_TEXT 98,3530
#define HEIGHT_LONGTEXT 99,3594
#define ATTENUATION_TEXT 102,3795
#define ATTENUATION_LONGTEXT 103,3838
#define BEGIN_TEXT 106,4089
#define BEGIN_LONGTEXT 107,4140
#define MIDDLE_TEXT 110,4340
#define MIDDLE_LONGTEXT 111,4393
#define END_TEXT 114,4599
#define END_LONGTEXT 115,4646
#define MIDDLE_POS_TEXT 118,4837
#define MIDDLE_POS_LONGTEXT 119,4890
#define RGAMMA_TEXT 121,5130
#define RGAMMA_LONGTEXT 122,5179
#define GGAMMA_TEXT 125,5382
#define GGAMMA_LONGTEXT 126,5433
#define BGAMMA_TEXT 129,5640
#define BGAMMA_LONGTEXT 130,5690
#define RGAMMA_BC_TEXT 133,5895
#define RGAMMA_BC_LONGTEXT 134,5944
#define GGAMMA_BC_TEXT 135,6037
#define GGAMMA_BC_LONGTEXT 136,6088
#define BGAMMA_BC_TEXT 137,6183
#define BGAMMA_BC_LONGTEXT 138,6233
#define RGAMMA_WC_TEXT 140,6328
#define RGAMMA_WC_LONGTEXT 141,6377
#define GGAMMA_WC_TEXT 142,6470
#define GGAMMA_WC_LONGTEXT 143,6521
#define BGAMMA_WC_TEXT 144,6616
#define BGAMMA_WC_LONGTEXT 145,6666
#define RGAMMA_BL_TEXT 147,6761
#define RGAMMA_BL_LONGTEXT 148,6810
#define GGAMMA_BL_TEXT 149,6903
#define GGAMMA_BL_LONGTEXT 150,6954
#define BGAMMA_BL_TEXT 151,7049
#define BGAMMA_BL_LONGTEXT 152,7099
#define RGAMMA_WL_TEXT 154,7194
#define RGAMMA_WL_LONGTEXT 155,7243
#define GGAMMA_WL_TEXT 156,7336
#define GGAMMA_WL_LONGTEXT 157,7387
#define BGAMMA_WL_TEXT 158,7482
#define BGAMMA_WL_LONGTEXT 159,7532
#define ACCURACY 199,10017
static inline int clip_accuracy(202,10046
static inline float clip_unit(206,10147
    float f_black_crush;214,10266
    float f_black_level;215,10291
    float f_white_crush;217,10317
    float f_white_level;218,10342
    float f_gamma;220,10368
} panoramix_gamma_t;221,10387
        int i_left;227,10443
        int i_right;228,10463
        int i_top;229,10484
        int i_bottom;230,10503
    } black;231,10525
        int i_left;234,10555
        int i_right;235,10575
        int i_top;236,10596
        int i_bottom;237,10615
    } attenuate;238,10637
} panoramix_filter_t;239,10654
    bool b_active;243,10694
    int  i_output;244,10713
    int i_x;247,10768
    int i_y;248,10781
    int i_width;249,10794
    int i_height;250,10811
    int i_align;251,10829
    int  i_src_x;254,10882
    int  i_src_y;255,10900
    int  i_src_width;256,10918
    int  i_src_height;257,10940
    panoramix_filter_t filter;260,11023
} panoramix_output_t;262,11055
    vlc_fourcc_t i_chroma;266,11095
    const int pi_div_w[pi_div_w268,11123
    const int pi_div_h[pi_div_h269,11164
    const int pi_black[pi_black271,11206
    bool b_planar;273,11248
} panoramix_chroma_t;275,11268
struct video_splitter_sys_t277,11291
    const panoramix_chroma_t *p_chroma;p_chroma279,11321
    bool   b_attenuate;282,11372
    unsigned int bz_length,283,11396
    unsigned int bz_length, bz_height;283,11396
    unsigned int bz_begin,284,11435
    unsigned int bz_begin, bz_middle,284,11435
    unsigned int bz_begin, bz_middle, bz_end;284,11435
    unsigned int bz_middle_pos;285,11481
    unsigned int a_0,286,11513
    unsigned int a_0, a_1,286,11513
    unsigned int a_0, a_1, a_2;286,11513
    int lambdav[lambdav288,11546
    int lambdah[lambdah289,11622
    unsigned int i_overlap_w2;291,11672
    unsigned int i_overlap_h2;292,11729
    uint8_t      p_lut[p_lut293,11787
    int i_col;296,11858
    int i_row;297,11873
    panoramix_output_t pp_output[pp_output298,11888
static const panoramix_chroma_t p_chroma_array[p_chroma_array329,13093
static unsigned CountMonitors(348,14058
static int Open(417,16331
static void Close(707,27567
static int Filter(719,27844
static int Mouse(791,30580
static double GammaFactor(824,31814
static int Configuration(843,32407
static void FilterPlanar(965,36511
static void RenderPackedRGB(1047,39465

access/http/h2conn_test.c,926
#undef NDEBUG25,1117
static struct vlc_http_conn *conn;conn41,1389
static int external_fd;42,1424
static void conn_send(44,1449
    DATA,55,1667
    DATA, HEADERS,55,1667
    DATA, HEADERS, PRIORITY,55,1667
    DATA, HEADERS, PRIORITY, RST_STREAM,55,1667
    DATA, HEADERS, PRIORITY, RST_STREAM, SETTINGS,55,1667
    DATA, HEADERS, PRIORITY, RST_STREAM, SETTINGS, PUSH_PROMISE,55,1667
    DATA, HEADERS, PRIORITY, RST_STREAM, SETTINGS, PUSH_PROMISE, PING,55,1667
    DATA, HEADERS, PRIORITY, RST_STREAM, SETTINGS, PUSH_PROMISE, PING, GOAWAY,55,1667
    WINDOW_UPDATE,56,1746
    WINDOW_UPDATE, CONTINUATION,56,1746
static void conn_expect(59,1783
static void conn_create(87,2412
static void conn_destroy(112,2995
static struct vlc_http_stream *stream_open(stream_open119,3128
static void stream_reply(130,3451
static void stream_continuation(140,3722
static void stream_data(149,3922
int main(156,4123

access/http/h2conn.c,2385
#define CO(42,1418
#define SO(43,1453
struct vlc_h2_conn46,1507
    struct vlc_http_conn conn;48,1528
    struct vlc_h2_output *out;out49,1559
    struct vlc_h2_stream *streams;streams51,1611
    uint32_t next_id;52,1675
    bool released;53,1733
    vlc_mutex_t lock;55,1790
    vlc_thread_t thread;56,1839
struct vlc_h2_stream64,2043
    struct vlc_http_stream stream;66,2066
    struct vlc_h2_conn *conn;conn67,2120
    struct vlc_h2_stream *older;older68,2187
    struct vlc_h2_stream *newer;newer69,2263
    uint32_t id;70,2335
    bool interrupted;72,2387
    bool recv_end;73,2409
    int recv_err;74,2455
    struct vlc_http_msg *recv_hdr;recv_hdr75,2503
    size_t recv_cwnd;77,2581
    struct vlc_h2_frame *recv_head;recv_head78,2651
    struct vlc_h2_frame **recv_tailp;recv_tailp79,2728
    vlc_cond_t recv_wait;80,2796
static void *vlc_h2_stream_lookup(vlc_h2_stream_lookup86,2882
static int vlc_h2_stream_error(97,3162
static int vlc_h2_stream_fatal(110,3683
static void vlc_h2_stream_headers(118,3907
static int vlc_h2_stream_data(145,4867
static void vlc_h2_stream_end(172,5516
static int vlc_h2_stream_reset(183,5759
static void vlc_h2_stream_wake_up(196,6091
static void vlc_h2_stream_lock(207,6350
static int vlc_h2_stream_unlock(216,6680
static struct vlc_http_msg *vlc_h2_stream_wait(vlc_h2_stream_wait224,6894
static block_t *vlc_h2_stream_read(vlc_h2_stream_read255,7764
static void vlc_h2_stream_close(323,9615
static const struct vlc_http_stream_cbs vlc_h2_stream_callbacks 365,10685
static struct vlc_http_stream *vlc_h2_stream_open(vlc_h2_stream_open384,11229
static void vlc_h2_setting(438,12650
static int vlc_h2_settings_done(447,12931
static int vlc_h2_ping(455,13135
static void vlc_h2_error(463,13356
static int vlc_h2_reset(478,13903
static void vlc_h2_window_status(500,14641
static const struct vlc_h2_parser_cbs vlc_h2_parser_callbacks 513,15094
static ssize_t vlc_https_recv(536,15644
static struct vlc_h2_frame *vlc_h2_frame_recv(vlc_h2_frame_recv586,16758
static void cleanup_parser(617,17480
static void *vlc_h2_recv_thread(vlc_h2_recv_thread623,17585
static void vlc_h2_conn_destroy(664,18643
static void vlc_h2_conn_release(681,19019
static const struct vlc_http_conn_cbs vlc_h2_conn_callbacks 697,19373
struct vlc_http_conn *vlc_h2_conn_create(vlc_h2_conn_create703,19490

access/shm.c,982
#define FPS_TEXT 42,1351
#define FPS_LONGTEXT 43,1385
#define DEPTH_TEXT 46,1486
#define DEPTH_LONGTEXT 47,1530
#define WIDTH_TEXT 50,1621
#define WIDTH_LONGTEXT 51,1665
#define HEIGHT_TEXT 54,1757
#define HEIGHT_LONGTEXT 55,1803
#define ID_TEXT 58,1897
#define ID_LONGTEXT 59,1943
#define FILE_TEXT 63,2086
#define FILE_LONGTEXT 64,2128
static const int depths[depths70,2287
static const char *const depth_texts[depth_texts74,2347
vlc_module_begin 82,2533
struct demux_sys_t122,4016
        int fd;127,4108
             const void  *addr;addr130,4149
             size_t       length;131,4181
        } mem;132,4215
    es_out_id_t *es;es134,4237
    vlc_timer_t  timer;135,4258
    void (*detach)detach136,4282
static int Open 139,4322
static void Close 262,7461
static void no_detach 272,7654
static int Control 280,7744
static void DemuxFile 326,8798
static void CloseFile 342,9181
static void DemuxIPC 348,9274
static void CloseIPC 365,9727

demux/adaptive/mp4/AtomsReader.hpp,320
#define ATOMSREADER_HPP21,996
namespace adaptive29,1121
    namespace mp4adaptive::mp431,1142
        class AtomsReaderadaptive::mp4::AtomsReader33,1166
                vlc_object_t *object;adaptive::mp4::AtomsReader::object42,1397
                MP4_Box_t *rootbox;adaptive::mp4::AtomsReader::rootbox43,1435

access/http/file.h,165
#define vlc_http_file_get_status 82,2481
#define vlc_http_file_get_redirect 83,2538
#define vlc_http_file_get_type 84,2599
#define vlc_http_file_destroy 85,2652

audio_filter/spatializer/denormals.c,28
float undenormalise(16,368

access/rtsp/real_rmff.h,3016
#define HAVE_RMFF_H27,966
#define RMFF_HEADER_SIZE 31,1012
#define RMFF_FILEHEADER_SIZE 33,1043
#define RMFF_PROPHEADER_SIZE 34,1075
#define RMFF_MDPRHEADER_SIZE 35,1107
#define RMFF_CONTHEADER_SIZE 36,1139
#define RMFF_DATAHEADER_SIZE 37,1171
#define FOURCC_TAG(39,1204
#define RMF_TAG 46,1443
#define PROP_TAG 47,1492
#define MDPR_TAG 48,1541
#define CONT_TAG 49,1590
#define DATA_TAG 50,1639
#define INDX_TAG 51,1688
#define PNA_TAG 52,1737
#define MLTI_TAG 54,1787
#define PN_SAVE_ENABLED 57,1854
#define PN_PERFECT_PLAY_ENABLED 58,1891
#define PN_LIVE_BROADCAST 59,1928
  uint32_t object_id;67,2018
  uint32_t size;68,2040
  uint16_t object_version;69,2057
  uint32_t file_version;71,2085
  uint32_t num_headers;72,2110
} rmff_fileheader_t;73,2134
  uint32_t object_id;77,2174
  uint32_t size;78,2196
  uint16_t object_version;79,2213
  uint32_t max_bit_rate;81,2241
  uint32_t avg_bit_rate;82,2266
  uint32_t max_packet_size;83,2291
  uint32_t avg_packet_size;84,2319
  uint32_t num_packets;85,2347
  uint32_t duration;86,2371
  uint32_t preroll;87,2392
  uint32_t index_offset;88,2412
  uint32_t data_offset;89,2437
  uint16_t num_streams;90,2461
  uint16_t flags;91,2485
} rmff_prop_t;92,2503
  uint32_t  object_id;96,2537
  uint32_t  size;97,2560
  uint16_t  object_version;98,2578
  uint16_t  stream_number;100,2607
  uint32_t  max_bit_rate;101,2634
  uint32_t  avg_bit_rate;102,2660
  uint32_t  max_packet_size;103,2686
  uint32_t  avg_packet_size;104,2715
  uint32_t  start_time;105,2744
  uint32_t  preroll;106,2768
  uint32_t  duration;107,2789
  uint8_t   stream_name_size;108,2811
  char      *stream_name;stream_name109,2841
  uint8_t   mime_type_size;110,2867
  char      *mime_type;mime_type111,2895
  uint32_t  type_specific_len;112,2919
  char      *type_specific_data;type_specific_data113,2950
  int       mlti_data_size;115,2984
  char      *mlti_data;mlti_data116,3012
} rmff_mdpr_t;118,3037
  uint32_t  object_id;122,3071
  uint32_t  size;123,3094
  uint16_t  object_version;124,3112
  uint16_t  title_len;126,3141
  char      *title;title127,3164
  uint16_t  author_len;128,3184
  char      *author;author129,3208
  uint16_t  copyright_len;130,3229
  char      *copyright;copyright131,3256
  uint16_t  comment_len;132,3280
  char      *comment;comment133,3305
} rmff_cont_t;135,3328
  uint32_t object_id;139,3362
  uint32_t size;140,3384
  uint16_t object_version;141,3401
  uint32_t num_packets;143,3429
  uint32_t next_data_header;144,3453
} rmff_data_t;145,3500
  rmff_fileheader_t *fileheader;fileheader149,3534
  rmff_prop_t *prop;prop150,3567
  rmff_mdpr_t **streams;streams151,3588
  rmff_cont_t *cont;cont152,3613
  rmff_data_t *data;data153,3634
} rmff_header_t;154,3655
  uint16_t object_version;158,3691
  uint16_t length;160,3719
  uint16_t stream_number;161,3738
  uint32_t timestamp;162,3764
  uint8_t reserved;163,3786
  uint8_t flags;164,3806
} rmff_pheader_t;166,3824

stream_out/vod.c,1326
typedef struct media_es_t media_es_t;52,1873
struct media_es_t54,1912
    int es_id;56,1932
    rtp_format_t rtp_fmt;57,1947
    rtsp_stream_id_t *rtsp_id;rtsp_id58,1973
struct vod_media_t61,2008
    vod_t *p_vod;p_vod64,2050
    rtsp_stream_t *rtsp;rtsp67,2091
    int        i_es;70,2135
    media_es_t **es;es71,2156
    const char *psz_mux;psz_mux72,2177
    mtime_t i_length;75,2219
struct vod_sys_t78,2245
    char *psz_rtsp_path;psz_rtsp_path80,2264
    vlc_thread_t thread;83,2300
    block_fifo_t *p_fifo_cmd;p_fifo_cmd84,2325
    RTSP_CMD_TYPE_STOP,90,2439
    RTSP_CMD_TYPE_ADD,91,2463
    RTSP_CMD_TYPE_DEL,92,2486
} rtsp_cmd_type_t;93,2509
    int i_type;98,2552
    vod_media_t *p_media;p_media99,2568
    char *psz_arg;psz_arg100,2594
} rtsp_cmd_t;101,2613
int OpenVoD(114,3172
void CloseVoD(178,4832
static vod_media_t *MediaNew(MediaNew206,5699
static void MediaSetup(273,7610
static void MediaAskDel 296,8235
static void MediaDel(302,8403
static void CommandPush(327,8959
static void* CommandThread(346,9436
char *SDPGenerateVoD(SDPGenerateVoD391,10581
int vod_check_range(461,12751
void vod_play(476,13236
void vod_pause(487,13599
void vod_stop(493,13783
const char *vod_get_mux(vod_get_mux499,13925
int vod_init_id(507,14125
void vod_detach_id(543,15163

keystore/kwallet.c,1355
vlc_module_begin(47,1562
#define DBUS_INSTANCE_PREFIX 74,2473
#define KWALLET_APP_ID 75,2513
enum serviceId84,2728
    KWALLET5 86,2745
    KWALLET,87,2763
    SERVICE_MAX88,2776
static const char *ppsz_sAddr[ppsz_sAddr91,2796
static const char *ppsz_sPath[ppsz_sPath96,2895
typedef struct vlc_keystore_sys101,2996
    DBusConnection* connection;103,3030
    int i_sid;104,3062
    int i_handle;105,3094
    char* psz_app_id;106,3112
    char* psz_wallet;107,3134
}  vlc_keystore_sys;108,3156
values2key(113,3285
key2values(218,6580
vlc_dbus_new_method(294,9014
#define MAX_WATCHES 312,9559
struct vlc_dbus_watch_data313,9581
    struct pollfd pollfd;315,9610
    DBusWatch *p_watch;p_watch316,9636
vlc_dbus_watch_get_poll_events(320,9677
vlc_dbus_watch_get_data(333,10014
vlc_dbus_watch_add_function(345,10321
vlc_dbus_watch_toggled_function(363,10777
vlc_dbus_pending_call_notify(375,11149
vlc_dbus_send_message(382,11356
kwallet_network_wallet(476,14595
kwallet_is_enabled(531,15924
vlc_dbus_init(590,17512
kwallet_has_folder(676,20122
kwallet_create_folder(737,21797
kwallet_open(802,23572
kwallet_has_entry(876,25638
kwallet_write_password(936,27386
kwallet_remove_entry(996,29227
kwallet_read_password_list(1067,31360
Store(1201,36090
Find(1231,36800
Remove(1253,37285
Close(1299,38408
Open(1311,38748

demux/adaptive/SegmentTracker.hpp,3340
#define SEGMENTTRACKER_HPP21,1002
namespace adaptive28,1100
    namespace httpadaptive::http32,1136
    namespace logicadaptive::logic37,1209
    namespace playlistadaptive::playlist42,1281
    class SegmentTrackerEventadaptive::SegmentTrackerEvent53,1496
                DISCONTINUITY,adaptive::SegmentTrackerEvent::DISCONTINUITY64,1928
                SWITCHING,adaptive::SegmentTrackerEvent::SWITCHING65,1959
                FORMATCHANGE,adaptive::SegmentTrackerEvent::FORMATCHANGE66,1986
                BUFFERING_STATE,adaptive::SegmentTrackerEvent::BUFFERING_STATE67,2016
                BUFFERING_LEVEL_CHANGE,adaptive::SegmentTrackerEvent::BUFFERING_LEVEL_CHANGE68,2049
                SEGMENT_CHANGE,adaptive::SegmentTrackerEvent::SEGMENT_CHANGE69,2089
            } type;adaptive::SegmentTrackerEvent::type70,2121
                    SegmentChunk *sc;adaptive::SegmentTrackerEvent::sc75,2212
               } discontinuity;adaptive::SegmentTrackerEvent::discontinuity76,2250
                    BaseRepresentation *prev;adaptive::SegmentTrackerEvent::prev79,2321
                    BaseRepresentation *next;adaptive::SegmentTrackerEvent::next80,2367
               } switching;adaptive::SegmentTrackerEvent::switching81,2413
                    const StreamFormat *f;adaptive::SegmentTrackerEvent::f84,2480
               } format;adaptive::SegmentTrackerEvent::format85,2523
                   const ID *id;adaptive::SegmentTrackerEvent::id88,2587
                   bool enabled;adaptive::SegmentTrackerEvent::enabled89,2620
               } buffering;adaptive::SegmentTrackerEvent::buffering90,2653
                   const ID *id;adaptive::SegmentTrackerEvent::id93,2720
                   mtime_t current;adaptive::SegmentTrackerEvent::current94,2753
                   mtime_t target;adaptive::SegmentTrackerEvent::target95,2789
               } buffering_level;adaptive::SegmentTrackerEvent::buffering_level96,2824
                    const ID *id;adaptive::SegmentTrackerEvent::id99,2897
                   mtime_t duration;adaptive::SegmentTrackerEvent::duration100,2931
               } segment;adaptive::SegmentTrackerEvent::segment101,2968
            } u;adaptive::SegmentTrackerEvent::u102,2994
    class SegmentTrackerListenerInterfaceadaptive::SegmentTrackerListenerInterface105,3019
    class SegmentTrackeradaptive::SegmentTracker111,3163
            bool first;adaptive::SegmentTracker::first133,4121
            bool initializing;adaptive::SegmentTracker::initializing134,4145
            bool index_sent;adaptive::SegmentTracker::index_sent135,4176
            bool init_sent;adaptive::SegmentTracker::init_sent136,4205
            uint64_t next;adaptive::SegmentTracker::next137,4233
            uint64_t curNumber;adaptive::SegmentTracker::curNumber138,4260
            StreamFormat format;adaptive::SegmentTracker::format139,4292
            AbstractAdaptationLogic *logic;adaptive::SegmentTracker::logic140,4325
            BaseAdaptationSet *adaptationSet;adaptive::SegmentTracker::adaptationSet141,4369
            BaseRepresentation *curRepresentation;adaptive::SegmentTracker::curRepresentation142,4415
            std::list<SegmentTrackerListenerInterface *> listeners;adaptive::SegmentTracker::listeners143,4466

audio_output/auhal.c,3259
# define verify_noerr(48,1897
#define STREAM_FORMAT_MSG(51,1951
#define AOUT_VAR_SPDIF_FLAG 58,2310
#define AUDIO_BUFFER_SIZE_IN_SECONDS 60,2348
#define AOUT_VOLUME_DEFAULT 63,2439
#define AOUT_VOLUME_MAX 64,2483
#define VOLUME_TEXT 66,2528
#define VOLUME_LONGTEXT 67,2567
#define DEVICE_TEXT 69,2604
#define DEVICE_LONGTEXT 70,2648
struct aout_sys_t78,3113
    AudioObjectID               i_selected_dev;80,3133
    AudioObjectID               i_new_selected_dev;81,3223
    bool                        b_selected_dev_is_digital;82,3332
    bool                        b_selected_dev_is_default;83,3391
    AudioDeviceIOProcID         i_procID;85,3515
    bool                        b_digital;86,3600
    uint8_t                     chans_to_reorder;88,3691
    uint8_t                     chan_table[chan_table89,3779
    TPCircularBuffer            circular_buffer;91,3839
    AudioComponent              au_component;94,3962
    AudioUnit                   au_unit;95,4046
    pid_t                       i_hog_pid;98,4166
    AudioStreamID               i_stream_id;99,4259
    int                         i_stream_index;100,4359
    AudioStreamBasicDescription sfmt_revert;101,4464
    bool                        b_revert;102,4556
    bool                        b_changed_mixing;103,4658
    int                         i_rate;105,4761
    int                         i_bytes_per_sample;106,4837
    CFArrayRef                  device_list;108,4890
    vlc_mutex_t                 device_list_lock;109,4935
    vlc_mutex_t                 selected_device_lock;111,5026
    float                       f_volume;116,5509
    bool                        b_mute;117,5551
    bool                        b_paused;118,5591
    vlc_mutex_t                 lock;120,5634
    vlc_cond_t                  cond;121,5672
    bool                        b_ignore_streams_changed_callback;123,5711
    UInt32                      i_device_latency;125,5779
vlc_module_begin 167,8340
static void Close(252,12008
static int Start(311,14530
static int StartAnalog(488,22109
static int StartSPDIF(886,40297
static void Stop(1108,50849
static void ReportDevice(1197,54773
static void RebuildDeviceList(1205,54959
static int SwitchAudioDevice(1349,60565
static int VolumeSet(1372,61204
static int MuteSet(1399,62026
static void Play(1427,62724
static void Pause(1452,63594
static void Flush(1462,63834
static int TimeGet(1484,64468
static OSStatus RenderCallbackAnalog(1505,65251
static OSStatus RenderCallbackSPDIF(1550,66890
static OSStatus DevicesListener(1601,68732
static OSStatus DeviceAliveListener(1630,69824
static OSStatus DefaultDeviceChangedListener(1649,70362
static OSStatus StreamsChangedListener(1697,72188
static OSStatus StreamListener(1767,74773
    struct { vlc_mutex_t lock;1770,74953
    struct { vlc_mutex_t lock; vlc_cond_t cond;1770,74953
static int ManageAudioStreamsCallback(1790,75476
static int AudioDeviceHasOutput(1849,78119
static int AudioDeviceSupportsDigital(1866,78630
static int AudioStreamSupportsDigital(1906,80102
static int AudioStreamChangeFormat(1956,82119
    struct { vlc_mutex_t lock;1963,82467
    struct { vlc_mutex_t lock; vlc_cond_t cond;1963,82467

codec/shine.c,441
struct encoder_sys_t43,1588
    shine_t s;45,1611
    unsigned int samples_per_frame;46,1626
    block_fifo_t *p_fifo;p_fifo47,1662
    unsigned int i_buffer;49,1689
    uint8_t *p_buffer;p_buffer50,1716
    bool busy;71,2347
    vlc_mutex_t lock;72,2362
} entrant 73,2384
static int OpenEncoder(75,2427
static block_t *GetPCM(GetPCM157,4725
static block_t *EncodeFrame(EncodeFrame221,6678
static void CloseEncoder(278,8429

codec/wmafixed/fft.c,201
#define IBSS_ATTR24,875
#define ICONST_ATTR25,893
#define ICODE_ATTR26,913
FFTComplex  exptab0[512] IBSS_ATTR;28,933
#define BF(31,990
int fft_calc_unscaled(45,1219
int fft_init_global(132,3213

audio_filter/spatializer/denormals.h,26
#define _denormals_9,214

video_filter/erase.c,594
#define MASK_TEXT 55,2254
#define MASK_LONGTEXT 56,2289
#define POSX_TEXT 58,2390
#define POSX_LONGTEXT 59,2427
#define POSY_TEXT 60,2481
#define POSY_LONGTEXT 61,2518
#define ERASE_HELP 63,2573
#define CFG_PREFIX 65,2649
vlc_module_begin 67,2678
struct filter_sys_t91,3497
    int i_x;93,3519
    int i_y;94,3532
    picture_t *p_mask;p_mask95,3545
    vlc_mutex_t lock;96,3568
static void LoadMask(99,3594
static int Create(131,4721
static void Destroy(192,6531
static picture_t *Filter(Filter210,7189
static void FilterErase(238,7974
static int EraseCallback(409,15176

services_discovery/bonjour.m,792
VLC_SD_PROBE_HELPER(37,1426
@interface VLCNetServiceDiscoveryController 57,2026
struct services_discovery_sys_t83,2711
    CFTypeRef _Nullable discoveryController;85,2745
- (void)startDiscovery90,2844
- (void)stopDiscovery132,4790
- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didFindService:(NSNetService *)aNetService moreComing:netServiceBrowser:didFindService:moreComing:151,5386
- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didRemoveService:(NSNetService *)aNetService moreComing:netServiceBrowser:didRemoveService:moreComing:159,5769
- (void)netServiceDidResolveAddress:179,6613
- (void)netService:(NSNetService *)aNetService didNotResolve:netService:didNotResolve:211,7951
static int Open(219,8177
static void Close(239,8740

misc/audioscrobbler.c,1961
#define VLC_MODULE_LICENSE 44,1670
#define QUEUE_MAX 61,2162
typedef struct audioscrobbler_song_t64,2230
    char        *psz_a;psz_a66,2269
    char        *psz_t;psz_t67,2330
    char        *psz_b;psz_b68,2391
    char        *psz_n;psz_n69,2452
    int         i_l;70,2513
    char        *psz_m;psz_m71,2574
    time_t      date;72,2635
    mtime_t     i_start;73,2696
} audioscrobbler_song_t;74,2757
struct intf_sys_t76,2783
    audioscrobbler_song_t   p_queue[p_queue78,2803
    int                     i_songs;79,2882
    input_thread_t         *p_input;p_input81,2962
    vlc_mutex_t             lock;82,3041
    vlc_cond_t              wait;83,3120
    vlc_thread_t            thread;84,3199
    vlc_url_t               p_submit_url;87,3316
    vlc_url_t               p_nowp_url;90,3433
    char                    psz_auth_token[psz_auth_token92,3513
    audioscrobbler_song_t   p_current_song;95,3635
    mtime_t                 time_pause;97,3715
    mtime_t                 time_total_pauses;98,3794
    bool                    b_submit_nowp;100,3874
    bool                    b_meta_read;102,3954
#define USERNAME_TEXT 114,4423
#define USERNAME_LONGTEXT 115,4466
#define PASSWORD_TEXT 116,4537
#define PASSWORD_LONGTEXT 117,4580
#define URL_TEXT 118,4651
#define URL_LONGTEXT 119,4699
#define VLC_AUDIOSCROBBLER_EFATAL 122,4853
#define CLIENT_NAME 125,4924
#define CLIENT_VERSION 126,4956
vlc_module_begin 128,4989
static void ReadMetaData(158,6200
#define ALLOC_ITEM_META(168,6437
#undef ALLOC_ITEM_META204,7509
static void AddToQueue 217,7882
#define QUEUE_COPY(269,9559
#define QUEUE_COPY_NULL(272,9647
#undef QUEUE_COPY_NULL283,9916
#undef QUEUE_COPY284,9939
static int PlayingChange(299,10368
static int ItemChange(344,11669
static int Open(394,13265
static void Close(423,14080
static int Handshake(452,15024
static void HandleInterval(651,20879
static void *Run(Run671,21491

codec/omxil/OMX_Component.h,9984
#define OMX_Component_h31,1416
typedef enum OMX_PORTDOMAINTYPE 50,1812
    OMX_PortDomainAudio,51,1847
    OMX_PortDomainVideo,52,1873
    OMX_PortDomainImage,53,1899
    OMX_PortDomainOther,54,1925
    OMX_PortDomainKhronosExtensions 55,1950
    OMX_PortDomainKhronosExtensions = 0x6F000000,x6F00000055,1950
    OMX_PortDomainVendorStartUnused 56,2069
    OMX_PortDomainVendorStartUnused = 0x7F000000,x7F00000056,2069
    OMX_PortDomainMax 57,2177
    OMX_PortDomainMax = 0x7ffffffx7ffffff57,2177
} OMX_PORTDOMAINTYPE;58,2211
typedef struct OMX_PARAM_PORTDEFINITIONTYPE 61,2255
    OMX_U32 nSize;62,2301
    OMX_VERSIONTYPE nVersion;63,2375
    OMX_U32 nPortIndex;64,2456
    OMX_DIRTYPE eDir;65,2536
    OMX_U32 nBufferCountActual;66,2620
    OMX_U32 nBufferCountMin;67,2715
    OMX_U32 nBufferSize;68,2807
    OMX_BOOL bEnabled;69,2906
    OMX_BOOL bPopulated;73,3276
    OMX_PORTDOMAINTYPE eDomain;77,3662
        OMX_AUDIO_PORTDEFINITIONTYPE audio;79,3780
        OMX_VIDEO_PORTDEFINITIONTYPE video;80,3824
        OMX_IMAGE_PORTDEFINITIONTYPE image;81,3868
        OMX_OTHER_PORTDEFINITIONTYPE other;82,3912
    } format;83,3956
    OMX_BOOL bBuffersContiguous;84,3970
    OMX_U32 nBufferAlignment;85,4003
} OMX_PARAM_PORTDEFINITIONTYPE;86,4033
typedef struct OMX_PARAM_U32TYPE 89,4087
    OMX_U32 nSize;90,4123
    OMX_VERSIONTYPE nVersion;91,4203
    OMX_U32 nPortIndex;92,4288
    OMX_U32 nU32;93,4371
} OMX_PARAM_U32TYPE;94,4427
typedef enum OMX_SUSPENSIONPOLICYTYPE 97,4469
    OMX_SuspensionDisabled,98,4509
    OMX_SuspensionEnabled,99,4574
    OMX_SuspensionPolicyKhronosExtensions 100,4632
    OMX_SuspensionPolicyKhronosExtensions = 0x6F000000,x6F000000100,4632
    OMX_SuspensionPolicyStartUnused 101,4757
    OMX_SuspensionPolicyStartUnused = 0x7F000000,x7F000000101,4757
    OMX_SuspensionPolicyMax 102,4865
    OMX_SuspensionPolicyMax = 0x7fffffffx7fffffff102,4865
} OMX_SUSPENSIONPOLICYTYPE;103,4906
typedef struct OMX_PARAM_SUSPENSIONPOLICYTYPE 106,4955
    OMX_U32 nSize;107,5003
    OMX_VERSIONTYPE nVersion;108,5040
    OMX_SUSPENSIONPOLICYTYPE ePolicy;109,5078
} OMX_PARAM_SUSPENSIONPOLICYTYPE;110,5116
typedef enum OMX_SUSPENSIONTYPE 113,5171
    OMX_NotSuspended,114,5205
    OMX_Suspended,115,5262
    OMX_SuspensionKhronosExtensions 116,5315
    OMX_SuspensionKhronosExtensions = 0x6F000000,x6F000000116,5315
    OMX_SuspensionVendorStartUnused 117,5434
    OMX_SuspensionVendorStartUnused = 0x7F000000,x7F000000117,5434
    OMX_SuspendMax 118,5542
    OMX_SuspendMax = 0x7FFFFFFFx7FFFFFFF118,5542
} OMX_SUSPENSIONTYPE;119,5574
typedef struct OMX_PARAM_SUSPENSIONTYPE 122,5617
    OMX_U32 nSize;123,5659
    OMX_VERSIONTYPE nVersion;124,5696
    OMX_SUSPENSIONTYPE eType;125,5733
} OMX_PARAM_SUSPENSIONTYPE 126,5776
typedef struct OMX_CONFIG_BOOLEANTYPE 128,5806
    OMX_U32 nSize;129,5846
    OMX_VERSIONTYPE nVersion;130,5865
    OMX_BOOL bEnabled;131,5895
} OMX_CONFIG_BOOLEANTYPE;132,5922
typedef struct OMX_PARAM_CONTENTURITYPE136,6019
    OMX_U32 nSize;138,6061
    OMX_VERSIONTYPE nVersion;140,6212
    OMX_U8 contentURI[contentURI141,6298
} OMX_PARAM_CONTENTURITYPE;142,6359
typedef struct OMX_PARAM_CONTENTPIPETYPE146,6451
    OMX_U32 nSize;148,6494
    OMX_VERSIONTYPE nVersion;149,6565
    OMX_HANDLETYPE hPipe;150,6643
} OMX_PARAM_CONTENTPIPETYPE;151,6698
typedef struct OMX_RESOURCECONCEALMENTTYPE 154,6748
    OMX_U32 nSize;155,6793
    OMX_VERSIONTYPE nVersion;156,6863
    OMX_BOOL bResourceConcealmentForbidden;157,6940
} OMX_RESOURCECONCEALMENTTYPE;161,7316
typedef enum OMX_METADATACHARSETTYPE 165,7374
    OMX_MetadataCharsetUnknown 166,7413
    OMX_MetadataCharsetASCII,167,7449
    OMX_MetadataCharsetBinary,168,7479
    OMX_MetadataCharsetCodePage1252,169,7510
    OMX_MetadataCharsetUTF8,170,7547
    OMX_MetadataCharsetJavaConformantUTF8,171,7576
    OMX_MetadataCharsetUTF7,172,7619
    OMX_MetadataCharsetImapUTF7,173,7648
    OMX_MetadataCharsetUTF16LE,174,7681
    OMX_MetadataCharsetUTF16BE,175,7714
    OMX_MetadataCharsetGB12345,176,7746
    OMX_MetadataCharsetHZGB2312,177,7778
    OMX_MetadataCharsetGB2312,178,7811
    OMX_MetadataCharsetGB18030,179,7842
    OMX_MetadataCharsetGBK,180,7874
    OMX_MetadataCharsetBig5,181,7902
    OMX_MetadataCharsetISO88591,182,7931
    OMX_MetadataCharsetISO88592,183,7964
    OMX_MetadataCharsetISO88593,184,7997
    OMX_MetadataCharsetISO88594,185,8030
    OMX_MetadataCharsetISO88595,186,8063
    OMX_MetadataCharsetISO88596,187,8096
    OMX_MetadataCharsetISO88597,188,8129
    OMX_MetadataCharsetISO88598,189,8162
    OMX_MetadataCharsetISO88599,190,8195
    OMX_MetadataCharsetISO885910,191,8228
    OMX_MetadataCharsetISO885913,192,8262
    OMX_MetadataCharsetISO885914,193,8296
    OMX_MetadataCharsetISO885915,194,8330
    OMX_MetadataCharsetShiftJIS,195,8364
    OMX_MetadataCharsetISO2022JP,196,8397
    OMX_MetadataCharsetISO2022JP1,197,8431
    OMX_MetadataCharsetISOEUCJP,198,8466
    OMX_MetadataCharsetSMS7Bit,199,8499
    OMX_MetadataCharsetKhronosExtensions 200,8531
    OMX_MetadataCharsetKhronosExtensions = 0x6F000000,x6F000000200,8531
    OMX_MetadataCharsetVendorStartUnused 201,8655
    OMX_MetadataCharsetVendorStartUnused = 0x7F000000,x7F000000201,8655
    OMX_MetadataCharsetTypeMax=202,8768
    OMX_MetadataCharsetTypeMax= 0x7FFFFFFFx7FFFFFFF202,8768
} OMX_METADATACHARSETTYPE;203,8811
typedef enum OMX_METADATASCOPETYPE206,8864
    OMX_MetadataScopeAllLevels,208,8901
    OMX_MetadataScopeTopLevel,209,8933
    OMX_MetadataScopePortLevel,210,8964
    OMX_MetadataScopeNodeLevel,211,8996
    OMX_MetadataScopeKhronosExtensions 212,9028
    OMX_MetadataScopeKhronosExtensions = 0x6F000000,x6F000000212,9028
    OMX_MetadataScopeVendorStartUnused 213,9150
    OMX_MetadataScopeVendorStartUnused = 0x7F000000,x7F000000213,9150
    OMX_MetadataScopeTypeMax 214,9261
    OMX_MetadataScopeTypeMax = 0x7fffffffx7fffffff214,9261
} OMX_METADATASCOPETYPE;215,9303
typedef enum OMX_METADATASEARCHMODETYPE218,9354
    OMX_MetadataSearchValueSizeByIndex,220,9396
    OMX_MetadataSearchItemByIndex,221,9436
    OMX_MetadataSearchNextItemByKey,222,9471
    OMX_MetadataSearchKhronosExtensions 223,9508
    OMX_MetadataSearchKhronosExtensions = 0x6F000000,x6F000000223,9508
    OMX_MetadataSearchVendorStartUnused 224,9631
    OMX_MetadataSearchVendorStartUnused = 0x7F000000,x7F000000224,9631
    OMX_MetadataSearchTypeMax 225,9743
    OMX_MetadataSearchTypeMax = 0x7fffffffx7fffffff225,9743
} OMX_METADATASEARCHMODETYPE;226,9786
typedef struct OMX_CONFIG_METADATAITEMCOUNTTYPE228,9841
    OMX_U32 nSize;230,9891
    OMX_VERSIONTYPE nVersion;231,9910
    OMX_METADATASCOPETYPE eScopeMode;232,9940
    OMX_U32 nScopeSpecifier;233,9978
    OMX_U32 nMetadataItemCount;234,10007
} OMX_CONFIG_METADATAITEMCOUNTTYPE;235,10039
typedef struct OMX_CONFIG_METADATAITEMTYPE238,10101
    OMX_U32 nSize;240,10146
    OMX_VERSIONTYPE nVersion;241,10165
    OMX_METADATASCOPETYPE eScopeMode;242,10195
    OMX_U32 nScopeSpecifier;243,10233
    OMX_U32 nMetadataItemIndex;244,10262
    OMX_METADATASEARCHMODETYPE eSearchMode;245,10296
    OMX_METADATACHARSETTYPE eKeyCharset;246,10340
    OMX_U8 nKeySizeUsed;247,10381
    OMX_U8 nKey[nKey248,10406
    OMX_METADATACHARSETTYPE eValueCharset;249,10428
    OMX_STRING sLanguageCountry;250,10471
    OMX_U32 nValueMaxSize;251,10504
    OMX_U32 nValueSizeUsed;252,10531
    OMX_U8 nValue[nValue253,10559
} OMX_CONFIG_METADATAITEMTYPE;254,10581
typedef struct OMX_CONFIG_CONTAINERNODECOUNTTYPE257,10637
    OMX_U32 nSize;259,10688
    OMX_VERSIONTYPE nVersion;260,10707
    OMX_BOOL bAllKeys;261,10737
    OMX_U32 nParentNodeID;262,10760
    OMX_U32 nNumNodes;263,10787
} OMX_CONFIG_CONTAINERNODECOUNTTYPE;264,10810
typedef struct OMX_CONFIG_CONTAINERNODEIDTYPE267,10873
    OMX_U32 nSize;269,10921
    OMX_VERSIONTYPE nVersion;270,10940
    OMX_BOOL bAllKeys;271,10970
    OMX_U32 nParentNodeID;272,10993
    OMX_U32 nNodeIndex;273,11020
    OMX_U32 nNodeID;274,11045
    OMX_STRING cNodeName;275,11067
    OMX_BOOL bIsLeafType;276,11093
} OMX_CONFIG_CONTAINERNODEIDTYPE;277,11119
typedef struct OMX_PARAM_METADATAFILTERTYPE 280,11179
    OMX_U32 nSize;282,11227
    OMX_VERSIONTYPE nVersion;283,11247
    OMX_BOOL bAllKeys;284,11278
    OMX_METADATACHARSETTYPE eKeyCharset;286,11425
    OMX_U32 nKeySizeUsed;287,11466
    OMX_U8   nKey 288,11493
    OMX_U32 nLanguageCountrySizeUsed;289,11519
    OMX_U8 nLanguageCountry[nLanguageCountry290,11557
    OMX_BOOL bEnabled;291,11591
} OMX_PARAM_METADATAFILTERTYPE;294,11783
typedef struct OMX_COMPONENTTYPE307,12413
    OMX_U32 nSize;313,12706
    OMX_VERSIONTYPE nVersion;320,13065
    OMX_PTR pComponentPrivate;326,13347
    OMX_PTR pApplicationPrivate;332,13652
    OMX_ERRORTYPE (*GetComponentVersion)GetComponentVersion337,13833
    OMX_ERRORTYPE (*SendCommand)SendCommand347,14259
    OMX_ERRORTYPE (*GetParameter)GetParameter356,14591
    OMX_ERRORTYPE (*SetParameter)SetParameter365,14919
    OMX_ERRORTYPE (*GetConfig)GetConfig374,15232
    OMX_ERRORTYPE (*SetConfig)SetConfig383,15541
    OMX_ERRORTYPE (*GetExtensionIndex)GetExtensionIndex392,15864
    OMX_ERRORTYPE (*GetState)GetState401,16173
    OMX_ERRORTYPE (*ComponentTunnelRequest)ComponentTunnelRequest467,19406
    OMX_ERRORTYPE (*UseBuffer)UseBuffer478,19810
    OMX_ERRORTYPE (*AllocateBuffer)AllocateBuffer490,20260
    OMX_ERRORTYPE (*FreeBuffer)FreeBuffer501,20668
    OMX_ERRORTYPE (*EmptyThisBuffer)EmptyThisBuffer510,21001
    OMX_ERRORTYPE (*FillThisBuffer)FillThisBuffer518,21297
    OMX_ERRORTYPE (*SetCallbacks)SetCallbacks540,22492
    OMX_ERRORTYPE (*ComponentDeInit)ComponentDeInit556,23279
    OMX_ERRORTYPE (*UseEGLImage)UseEGLImage560,23390
    OMX_ERRORTYPE (*ComponentRoleEnum)ComponentRoleEnum567,23644
} OMX_COMPONENTTYPE;572,23778

codec/wmafixed/fft.h,416
#define WMA_FFT_H 21,831
typedef int32_t FFTSample;25,875
typedef struct FFTComplex27,903
    int32_t re,29,931
    int32_t re, im;29,931
FFTComplex;31,953
typedef struct FFTContext33,966
    int nbits;35,994
    int inverse;36,1009
    uint16_t *revtab;revtab37,1026
    FFTComplex *exptab;exptab38,1048
    FFTComplex *exptab1;exptab139,1072
    int (*fft_calc)fft_calc40,1125
FFTContext;42,1185

mux/dummy.c,252
vlc_module_begin 44,1792
struct sout_mux_sys_t61,2434
    bool b_header;65,2573
static int Open(71,2764
static void Close(96,3439
static int Control(105,3642
static int AddStream(128,4198
static void DelStream(135,4355
static int Mux(141,4491

arm_neon/chroma_neon.h,340
struct yuv_planes27,1316
    void *y,y29,1336
    void *y, *u,u29,1336
    void *y, *u, *v;v29,1336
    size_t pitch;30,1357
struct uv_planes35,1430
    void *u,u37,1449
    void *u, *v;v37,1449
    size_t pitch;38,1466
struct yuv_pack42,1551
    void *yuv;yuv44,1569
    size_t pitch;45,1584
void i420_yuyv_neon 49,1637

packetizer/vc1.c,2287
vlc_module_begin 51,1929
struct decoder_sys_t62,2339
    packetizer_t packetizer;67,2401
    bool b_sequence_header;70,2465
        block_t *p_sh;p_sh73,2510
        bool b_advanced_profile;74,2533
        bool b_interlaced;75,2566
        bool b_frame_interpolation;76,2593
        bool b_range_reduction;77,2629
        bool b_has_bframe;78,2661
    } sh;79,2688
    bool b_entry_point;80,2698
        block_t *p_ep;p_ep83,2739
    } ep;84,2762
    bool  b_frame;87,2783
    mtime_t    i_frame_dts;90,2839
    mtime_t    i_frame_pts;91,2867
    block_t    *p_frame;p_frame92,2895
    block_t    **pp_last;pp_last93,2920
    mtime_t i_interpolated_dts;96,2948
    bool    b_check_startcode;97,2980
    uint32_t i_cc_flags;100,3022
    mtime_t i_cc_pts;101,3047
    mtime_t i_cc_dts;102,3069
    cc_data_t cc;103,3091
    cc_data_t cc_next;105,3110
    IDU_TYPE_SEQUENCE_HEADER 110,3152
    IDU_TYPE_SEQUENCE_HEADER = 0x0f,x0f110,3152
    IDU_TYPE_ENTRY_POINT 111,3189
    IDU_TYPE_ENTRY_POINT = 0x0e,x0e111,3189
    IDU_TYPE_FRAME 112,3222
    IDU_TYPE_FRAME = 0x0D,x0D112,3222
    IDU_TYPE_FIELD 113,3249
    IDU_TYPE_FIELD = 0x0C,x0C113,3249
    IDU_TYPE_SLICE 114,3276
    IDU_TYPE_SLICE = 0x0B,x0B114,3276
    IDU_TYPE_END_OF_SEQUENCE 115,3303
    IDU_TYPE_END_OF_SEQUENCE = 0x0A,x0A115,3303
    IDU_TYPE_SEQUENCE_LEVEL_USER_DATA 117,3341
    IDU_TYPE_SEQUENCE_LEVEL_USER_DATA = 0x1F,x1F117,3341
    IDU_TYPE_ENTRY_POINT_USER_DATA 118,3387
    IDU_TYPE_ENTRY_POINT_USER_DATA = 0x1E,x1E118,3387
    IDU_TYPE_FRAME_USER_DATA 119,3430
    IDU_TYPE_FRAME_USER_DATA = 0x1D,x1D119,3430
    IDU_TYPE_FIELD_USER_DATA 120,3467
    IDU_TYPE_FIELD_USER_DATA = 0x1C,x1C120,3467
    IDU_TYPE_SLICE_USER_DATA 121,3504
    IDU_TYPE_SLICE_USER_DATA = 0x1B,x1B121,3504
} idu_type_t;122,3541
static const uint8_t p_vc1_startcode[p_vc1_startcode134,4006
static int Open(141,4445
static void Close(209,6491
static block_t *Packetize(Packetize227,7015
static void Flush(264,8333
static void PacketizeReset(271,8462
static block_t *PacketizeParse(PacketizeParse289,8949
static int PacketizeValidate(296,9126
static void BuildExtraData(311,9525
static block_t *ParseIDU(ParseIDU331,10240
static block_t *GetCc(GetCc735,25743

demux/mkv/matroska_segment_parse.cpp,3178
#define GetFOURCC(45,1649
static vlc_fourcc_t __GetFOURCC(46,1700
static inline void fill_extra_data_alac(51,1800
static inline void fill_extra_data(66,2455
static inline char * ToUTF8(78,3031
void matroska_segment_c::ParseSeekHead(86,3305
void matroska_segment_c::ParseTrackEntry(203,7948
    struct MetaDataCapture 259,9561
      matroska_segment_c * obj;MetaDataCapture::obj260,9590
      mkv_track_t        * tk;MetaDataCapture::tk261,9622
      demux_t            * p_demuxer;MetaDataCapture::p_demuxer262,9653
      bool&                bSupported;MetaDataCapture::bSupported263,9691
      int                  level;MetaDataCapture::level264,9730
        unsigned int i_crop_right;MetaDataCapture::i_crop_right266,9779
        unsigned int i_crop_left;MetaDataCapture::i_crop_left267,9814
        unsigned int i_crop_top;MetaDataCapture::i_crop_top268,9848
        unsigned int i_crop_bottom;MetaDataCapture::i_crop_bottom269,9881
        unsigned int i_display_unit;MetaDataCapture::i_display_unit270,9917
        unsigned int i_display_width;MetaDataCapture::i_display_width271,9954
        unsigned int i_display_height;MetaDataCapture::i_display_height272,9992
      } track_video_info;MetaDataCapture::track_video_info273,10031
void matroska_segment_c::ParseTracks(684,26087
    struct Capture 705,26584
      matroska_segment_c * obj;Capture::obj706,26605
      demux_t            * p_demuxer;Capture::p_demuxer707,26637
void matroska_segment_c::ParseInfo(735,27449
    struct InfoHandlerPayload 758,27981
        demux_t            * p_demuxer;InfoHandlerPayload::p_demuxer759,28013
        matroska_segment_c * obj;InfoHandlerPayload::obj760,28053
        EbmlElement       *&  el;InfoHandlerPayload::el761,28087
        EbmlMaster        *&   m;InfoHandlerPayload::m762,28121
        int& i_upper_level;InfoHandlerPayload::i_upper_level763,28155
void matroska_segment_c::ParseChapterAtom(914,33784
    struct ChapterPayload 918,33957
        matroska_segment_c * const       obj;ChapterPayload::obj919,33985
        demux_t            * const p_demuxer;ChapterPayload::p_demuxer920,34031
        chapter_item_c     &        chapters;ChapterPayload::chapters921,34077
        int& i_level;ChapterPayload::i_level923,34124
        int level;ChapterPayload::level924,34146
void matroska_segment_c::ParseAttachments(1064,39302
void matroska_segment_c::ParseChapters(1126,41580
            struct EditionPayload 1149,42249
                matroska_segment_c * const obj;EditionPayload::obj1150,42285
                demux_t            * const p_demuxer;EditionPayload::p_demuxer1151,42333
                chapter_edition_c  * const p_edition;EditionPayload::p_edition1152,42387
void matroska_segment_c::ParseCluster(1210,44748
int32_t matroska_segment_c::TrackInit(1246,45725
    struct HandlerPayload 1255,45961
        matroska_segment_c * obj;HandlerPayload::obj1256,45989
        mkv_track_t        * p_tk;HandlerPayload::p_tk1257,46023
        es_format_t        * p_fmt;HandlerPayload::p_fmt1258,46058
        demux_t            * p_demuxer;HandlerPayload::p_demuxer1259,46094

access/v4l2/video.c,537
static int SetupStandard 41,1554
static int SetupAudio 72,2524
int SetupTuner 124,4192
static int ResetCrop 219,7579
int SetupInput 247,8364
static int64_t fcmp 303,9985
static const struct v4l2_fract infinity 310,10191
static const struct v4l2_fract zero 311,10243
static int FindMaxRate 321,10556
#undef SetupFormat410,13810
int SetupFormat 418,14056
mtime_t GetBufferPTS 563,19495
block_t *GrabVideo GrabVideo585,20195
int StartUserPtr 629,21377
struct buffer_t *StartMmap StartMmap656,22164
void StopMmap 729,24236

video_filter/colorthres.c,674
#define COLOR_TEXT 54,2214
#define COLOR_LONGTEXT 55,2245
#define COLOR_HELP 59,2564
static const int pi_color_values[pi_color_values60,2619
static const char *const ppsz_color_descriptions[ppsz_color_descriptions63,2735
#define CFG_PREFIX 66,2871
vlc_module_begin 68,2905
struct filter_sys_t99,4224
    atomic_int i_simthres;101,4246
    atomic_int i_satthres;102,4273
    atomic_int i_color;103,4300
static int Create(111,4686
static void Destroy(164,6672
static void GetReference(175,7077
static bool IsSimilar(188,7604
static picture_t *Filter(Filter208,8529
static picture_t *FilterPacked(FilterPacked264,10232
static int FilterCallback 327,12106

video_output/kva.c,2282
#define KVA_FIXT23_TEXT 49,1813
#define KVA_FIXT23_LONGTEXT 51,1879
#define KVA_VIDEO_MODE_TEXT 54,2052
#define KVA_VIDEO_MODE_LONGTEXT 56,2105
static const char *const ppsz_kva_video_mode[ppsz_kva_video_mode59,2198
static const char *const ppsz_kva_video_mode_text[ppsz_kva_video_mode_text61,2293
vlc_module_begin 64,2424
struct vout_display_sys_t84,3434
    TID                tid;86,3462
    HEV                ack_event;87,3490
    int                i_result;88,3524
    HAB                hab;89,3557
    HMQ                hmq;90,3585
    HWND               frame;91,3613
    HWND               client;92,3643
    KVASETUP           kvas;93,3674
    KVACAPS            kvac;94,3703
    LONG               i_screen_width;95,3732
    LONG               i_screen_height;96,3771
    bool               b_fixt23;97,3811
    PFNWP              p_old_frame;98,3844
    RECTL              client_rect;99,3880
    vout_window_t     *parent_window;parent_window100,3916
    HWND               parent;101,3954
    RECTL              parent_rect;102,3985
    picture_pool_t    *pool;pool103,4021
    unsigned           button_pressed;104,4050
    bool               is_mouse_hidden;105,4089
    bool               is_on_top;106,4129
struct picture_sys_t109,4167
    int i_chroma_shift;111,4190
#define WC_VLC_KVA 133,5079
#define COLOR_KEY 135,5112
#define WM_VLC_MANAGE 137,5140
#define WM_VLC_FULLSCREEN_CHANGE 138,5192
#define WM_VLC_SIZE_CHANGE 139,5244
static const char *psz_video_mode[psz_video_mode141,5297
static void PMThread(144,5423
static int Open 321,10171
static void Close 352,11078
static picture_pool_t *Pool(Pool372,11477
static void Display(385,11985
static void Manage(400,12572
static int Control(413,13102
static int OpenDisplay(515,16207
static void CloseDisplay(698,22434
static int KVALock(703,22508
static void KVAUnlock(731,23272
static void MorphToPM(738,23372
    USHORT i_pmkey;754,23757
    int    i_vlckey;755,23777
} pmkeys_to_vlckeys[pmkeys_to_vlckeys756,23798
static int ConvertKey(816,25159
static MRESULT EXPENTRY MyFrameWndProc(827,25408
static void MousePressed(932,28657
static void MouseReleased(945,29009
#define WM_MOUSELEAVE 954,29268
static MRESULT EXPENTRY WndProc(956,29299

codec/kate.c,4565
# define PROFILE_START(46,1701
# define PROFILE_STOP(47,1769
# define PROFILE_START(49,1882
# define PROFILE_STOP(50,1921
#define CHECK_TIGER_RET(53,1967
struct decoder_sys_t66,2766
    bool b_packetizer;70,2836
    bool b_has_headers;76,2906
    bool           b_ready;81,2969
    kate_info      ki;82,2997
    kate_comment   kc;83,3020
    kate_state     k;84,3043
    mtime_t i_pts;89,3106
    mtime_t i_max_stop;90,3125
    vlc_mutex_t lock;93,3214
    int         i_refcount;94,3236
    tiger_renderer    *p_tr;p_tr100,3322
    bool               b_dirty;101,3351
    uint32_t           i_tiger_default_font_color;103,3384
    uint32_t           i_tiger_default_background_color;104,3435
    tiger_font_effect  e_tiger_default_font_effect;105,3492
    double             f_tiger_default_font_effect_strength;106,3544
    char              *psz_tiger_default_font_desc;psz_tiger_default_font_desc107,3605
    double             f_tiger_quality;108,3657
    bool   b_formatted;114,3735
    bool   b_use_tiger;115,3759
struct subpicture_updater_sys_t118,3787
    decoder_sys_t *p_dec_sys;p_dec_sys120,3821
    mtime_t        i_start;121,3851
static vlc_mutex_t kate_decoder_list_mutex 146,5133
static size_t kate_decoder_list_size 147,5196
static decoder_t **kate_decoder_list kate_decoder_list148,5238
#define DEFAULT_NAME 188,7267
#define MAX_LINE 189,7298
#define FORMAT_TEXT 195,7503
#define FORMAT_LONGTEXT 196,7549
static const tiger_font_effect pi_font_effects[pi_font_effects202,7788
static const char * const ppsz_font_effect_names[ppsz_font_effect_names203,7900
static const int pi_color_values[pi_color_values206,8027
static const char *const ppsz_color_descriptions[ppsz_color_descriptions210,8266
#define TIGER_TEXT 215,8536
#define TIGER_LONGTEXT 216,8585
#define TIGER_QUALITY_DEFAULT 219,8745
#define TIGER_QUALITY_TEXT 220,8779
#define TIGER_QUALITY_LONGTEXT 221,8830
#define TIGER_DEFAULT_FONT_EFFECT_DEFAULT 224,8961
#define TIGER_DEFAULT_FONT_EFFECT_TEXT 225,9005
#define TIGER_DEFAULT_FONT_EFFECT_LONGTEXT 226,9070
#define TIGER_DEFAULT_FONT_EFFECT_STRENGTH_DEFAULT 229,9206
#define TIGER_DEFAULT_FONT_EFFECT_STRENGTH_TEXT 230,9261
#define TIGER_DEFAULT_FONT_EFFECT_STRENGTH_LONGTEXT 231,9344
#define TIGER_DEFAULT_FONT_DESC_DEFAULT 234,9475
#define TIGER_DEFAULT_FONT_DESC_TEXT 235,9518
#define TIGER_DEFAULT_FONT_DESC_LONGTEXT 236,9586
#define TIGER_DEFAULT_FONT_COLOR_DEFAULT 240,9835
#define TIGER_DEFAULT_FONT_COLOR_TEXT 241,9887
#define TIGER_DEFAULT_FONT_COLOR_LONGTEXT 242,9950
#define TIGER_DEFAULT_FONT_ALPHA_DEFAULT 245,10099
#define TIGER_DEFAULT_FONT_ALPHA_TEXT 246,10145
#define TIGER_DEFAULT_FONT_ALPHA_LONGTEXT 247,10208
#define TIGER_DEFAULT_BACKGROUND_COLOR_DEFAULT 250,10370
#define TIGER_DEFAULT_BACKGROUND_COLOR_TEXT 251,10428
#define TIGER_DEFAULT_BACKGROUND_COLOR_LONGTEXT 252,10503
#define TIGER_DEFAULT_BACKGROUND_ALPHA_DEFAULT 255,10652
#define TIGER_DEFAULT_BACKGROUND_ALPHA_TEXT 256,10701
#define TIGER_DEFAULT_BACKGROUND_ALPHA_LONGTEXT 257,10776
#define HELP_TEXT 262,10964
vlc_module_begin 271,11378
static int OpenPacketizer(442,17923
static void Flush(461,18392
static subpicture_t *DecodeBlock(DecodeBlock479,19067
static int ProcessHeaders(529,20504
static subpicture_t *ProcessPacket(ProcessPacket614,23222
static inline void rgb_to_yuv(655,24214
static void GetVideoSize(673,25034
static void CreateKateBitmap(692,25735
static void CreateKatePalette(704,26038
static void SetupText(719,26514
static void TigerDestroySubpicture(754,27657
static void PostprocessTigerImage(768,28235
static int TigerValidateSubpicture(810,29570
static void TigerUpdateSubpicture(853,31056
static uint32_t GetTigerColor(927,33137
static char *GetTigerString(GetTigerString951,33750
static int GetTigerInteger(962,34017
static double GetTigerFloat(969,34206
static void UpdateTigerQuality(976,34397
static void UpdateTigerFontDesc(983,34627
static void UpdateTigerFontColor(990,34887
static void UpdateTigerBackgroundColor(1001,35425
static void UpdateTigerFontEffect(1012,36004
static int OnConfigurationChanged(1021,36428
#define TEST_TIGER_VAR(1038,36893
#undef TEST_TIGER_VAR1097,38813
static int TigerConfigurationCallback(1104,38902
static subpicture_t *DecodePacket(DecodePacket1134,39839
static subpicture_t *SetupSimpleKateSPU(SetupSimpleKateSPU1227,42512
static void ParseKateComments(1353,46571
static void CloseDecoder(1383,47491
static void DecSysHold(1404,48105
static void DecSysRelease(1411,48256

video_filter/postproc.c,586
#   define PP_CPU_CAPS_ALTIVEC 52,2062
#define Q_TEXT 68,2666
#define Q_LONGTEXT 69,2711
#define NAME_TEXT 75,3033
#define NAME_LONGTEXT 76,3094
#define FILTER_PREFIX 78,3127
vlc_module_begin 83,3342
struct filter_sys_t108,4263
    pp_context *pp_context;pp_context111,4320
    pp_mode *pp_mode;pp_mode114,4402
    vlc_mutex_t lock;117,4471
static int OpenPostproc(124,4702
static void ClosePostproc(266,9587
static picture_t *PostprocPict(PostprocPict285,10281
static void PPChangeMode(330,11845
static int PPQCallback(356,12597
static int PPNameCallback(368,13037

video_chroma/i420_rgb_c.h,444
#define RED_MARGIN 35,1833
#define GREEN_MARGIN 36,1861
#define BLUE_MARGIN 37,1889
#define RED_OFFSET 38,1917
#define GREEN_OFFSET 39,1997
#define BLUE_OFFSET 40,2077
#define RGB_TABLE_SIZE 41,2157
#define GRAY_MARGIN 43,2238
#define GRAY_TABLE_SIZE 44,2266
#define PALETTE_TABLE_SIZE 46,2347
#define SHIFT 49,2472
#define U_GREEN_COEF 50,2489
#define U_BLUE_COEF 51,2550
#define V_RED_COEF 52,2610
#define V_GREEN_COEF 53,2670

stream_out/autodel.c,475
#define SOUT_CFG_PREFIX 43,1781
vlc_module_begin 45,1822
struct sout_stream_id_sys_t61,2483
    sout_stream_id_sys_t *id;id63,2513
    es_format_t fmt;64,2543
    mtime_t i_last;65,2564
    bool b_error;66,2584
struct sout_stream_sys_t69,2606
    sout_stream_id_sys_t **pp_es;pp_es71,2633
    int i_es_num;72,2667
static int Open(78,2857
static void Close(106,3569
static sout_stream_id_sys_t * Add(114,3764
static void Del(132,4286
static int Send(144,4624

packetizer/dts_header.c,305
static void SyncInfo16be(37,1374
static void BufLeToBe(51,1929
static int Buf14To16(62,2132
bool vlc_dts_header_IsSync(108,3107
static unsigned int dca_get_samplerate(140,4278
static unsigned int dca_get_bitrate(153,4627
static uint32_t dca_get_channels(173,5292
int vlc_dts_header_Parse(249,7452

demux/adaptive/logic/IDownloadRateObserver.h,133
#define IDOWNLOADRATEOBSERVER_H_26,1192
    class IDownloadRateObserver34,1287
            virtual ~IDownloadRateObserver(38,1419

codec/bpg.c,192
struct decoder_sys_t32,1266
    struct BPGDecoderContext *p_bpg;p_bpg34,1289
vlc_module_begin(45,1499
static picture_t *DecodeBlock(DecodeBlock91,2471
static void CloseDecoder(169,4491

access/smb_common.h,281
#define SMB_USER_TEXT 21,1088
#define SMB_USER_LONGTEXT 22,1125
#define SMB_PASS_TEXT 24,1251
#define SMB_PASS_LONGTEXT 25,1288
#define SMB_DOMAIN_TEXT 27,1423
#define SMB_DOMAIN_LONGTEXT 28,1464
#define SMB_LOGIN_DIALOG_TITLE 31,1567
#define SMB_LOGIN_DIALOG_TEXT 32,1634

misc/xml/libxml.c,575
vlc_module_begin 48,1735
static void Close(98,3243
static void CatalogLoad(112,3659
static void CatalogAdd(119,3842
static void ReaderErrorHandler(130,4295
struct xml_reader_sys_t140,4700
    xmlTextReaderPtr xml;142,4726
    char *node;node143,4752
static int ReaderOpen(146,4772
static void ReaderClose(185,5848
static int ReaderUseDTD 200,6234
static int ReaderNextNode(211,6583
static char *ReaderValue(ReaderValue264,7824
static const char *ReaderNextAttr(ReaderNextAttr273,8041
static int StreamRead(287,8461
static int ReaderIsEmptyElement(293,8630

access/screen/wayland.c,1532
struct demux_sys_t44,1416
    struct wl_display *display;display46,1437
    struct wl_output *output;output47,1469
    struct wl_shm *shm;shm48,1499
    struct screenshooter *screenshooter;screenshooter49,1523
    es_out_id_t *es;es50,1564
    long pagemask;52,1586
    float rate;53,1605
    int32_t x;54,1621
    int32_t y;55,1671
    int32_t w;56,1719
    int32_t h;57,1757
    int32_t width;58,1796
    int32_t height;59,1835
    bool done;61,1877
    mtime_t start;62,1892
    vlc_thread_t thread;64,1912
static bool DisplayError(67,1941
#define DisplayError(87,2476
static void output_geometry_cb(89,2536
static void output_mode_cb(102,3092
const struct wl_output_listener output_cbs 149,4543
static void screenshooter_done_cb(157,4658
const struct screenshooter_listener screenshooter_cbs 166,4848
static block_t *Shoot(Shoot171,4937
static void cleanup_wl_display_read(226,6304
static void *Thread(Thread233,6434
static int Control(277,7602
static void registry_global_cb(323,8702
static void registry_global_remove_cb(343,9469
static const struct wl_registry_listener registry_cbs 352,9708
static int Open(358,9825
static void Close(437,12079
#define FPS_TEXT 452,12428
#define FPS_LONGTEXT 453,12462
#define LEFT_TEXT 456,12563
#define LEFT_LONGTEXT 457,12606
#define TOP_TEXT 460,12684
#define TOP_LONGTEXT 461,12722
#define WIDTH_TEXT 464,12799
#define WIDTH_LONGTEXT 465,12845
#define HEIGHT_TEXT 468,12937
#define HEIGHT_LONGTEXT 469,12985
vlc_module_begin 472,13080

demux/mpc.c,827
#define VLC_MODULE_LICENSE 31,1367
vlc_module_begin 60,2075
struct demux_sys_t76,2587
    es_out_id_t   *p_es;p_es79,2618
    mpc_decoder    decoder;83,2680
    mpc_demux     *decoder;decoder85,2714
    mpc_reader     reader;87,2749
    mpc_streaminfo info;88,2776
    int64_t        i_position;91,2812
static int Open(111,3727
#   define CONVERT_PEAK(198,6204
#   define CONVERT_GAIN(199,6289
#   define CONVERT_PEAK(201,6371
#   define CONVERT_GAIN(202,6430
#undef CONVERT_GAIN220,7330
#undef CONVERT_PEAK221,7350
static void Close(237,7733
static int Demux(254,8298
static int Control(311,9813
static mpc_int32_t ReaderRead(396,12540
static mpc_bool_t ReaderSeek(408,12901
static mpc_int32_t ReaderTell(420,13240
static mpc_int32_t ReaderGetSize(432,13524
static mpc_bool_t ReaderCanSeek(444,13812

packetizer/dts_header.h,313
#define VLC_DTS_HEADER_SIZE 25,1209
    bool            b_dts_hd;29,1258
    unsigned int    i_rate;30,1288
    unsigned int    i_bitrate;31,1316
    unsigned int    i_frame_size;32,1347
    unsigned int    i_frame_length;33,1381
    uint32_t        i_original_channels;34,1417
} vlc_dts_header_t;35,1458

codec/gstreamer/gstvlcpictureplaneallocator.c,974
#define gst_vlc_picture_plane_allocator_parent_class 33,1422
#define GST_VLC_PICTURE_PLANE_ALLOCATOR_NAME 49,2228
static void gst_vlc_picture_plane_allocator_class_init(51,2292
static void gst_vlc_picture_plane_allocator_init(66,2800
static void gst_vlc_picture_plane_allocator_finalize(80,3362
static GstMemory* gst_vlc_picture_plane_allocator_dummy_alloc(89,3626
static void gst_vlc_picture_plane_allocator_free(98,3877
static gpointer gst_vlc_picture_plane_map(106,4126
static gboolean gst_vlc_picture_plane_unmap(119,4481
static GstMemory* gst_vlc_picture_plane_copy(126,4609
void gst_vlc_picture_plane_allocator_release(135,4824
bool gst_vlc_picture_plane_allocator_hold(159,5466
bool gst_vlc_picture_plane_allocator_alloc(186,6192
bool gst_vlc_set_vout_fmt(217,7126
static bool gst_vlc_video_info_from_vout(252,8451
bool gst_vlc_picture_plane_allocator_query_format(321,10579
GstVlcPicturePlaneAllocator* gst_vlc_picture_plane_allocator_new(345,11377

demux/dash/mpd/Representation.h,392
#define DASHREPRESENTATION_H_26,1182
        class Representation 43,1559
                int                                 qualityRanking;Representation::qualityRanking69,2865
                std::list<const Representation*>    dependencies;Representation::dependencies70,2933
                TrickModeType                       *trickModeType;Representation::trickModeType71,2999

codec/xwd.c,67
vlc_module_begin(35,1308
static picture_t *Decode Decode59,1918

access/http/tunnel_test.c,265
#undef NDEBUG25,1106
# define SOCK_CLOEXEC 36,1290
# define accept4(37,1314
static void proxy_client_process(46,1478
static unsigned connection_count 87,2576
static void *proxy_thread(proxy_thread89,2615
static int server_socket(108,3005
int main(134,3590

demux/playlist/sgimb.c,755
#define MAX_LINE 112,5160
struct demux_sys_t114,5183
    char        *psz_uri;psz_uri116,5204
    char        *psz_server;psz_server117,5278
    char        *psz_location;psz_location118,5335
    char        *psz_name;psz_name119,5387
    char        *psz_user;psz_user120,5441
    char        *psz_password;psz_password121,5495
    char        *psz_mcast_ip;psz_mcast_ip122,5550
    int         i_mcast_port;123,5609
    int         i_packet_size;124,5665
    mtime_t     i_duration;125,5718
    int         i_port;126,5769
    int         i_sid;127,5820
    bool  b_concert;128,5866
    bool  b_rtsp_kasenna;129,5918
int Import_SGIMB(137,6218
void Close_SGIMB(182,7858
static int ParseLine 197,8242
static int Demux 319,12765

demux/xa.c,805
vlc_module_begin 42,1720
struct demux_sys_t56,2211
    es_out_id_t     *p_es;p_es58,2232
    int64_t         i_data_offset;60,2260
    unsigned int    i_data_size;61,2295
    unsigned int    i_block_frames;62,2328
    unsigned int    i_frame_size;63,2364
    unsigned int    i_bitrate;64,2398
    date_t          pts;66,2430
typedef struct xa_header_t69,2459
    char     xa_id[xa_id71,2488
    uint32_t iSize;72,2511
    uint16_t wFormatTag;74,2532
    uint16_t nChannels;75,2557
    uint32_t nSamplesPerSec;76,2581
    uint32_t nAvgBytesPerSec;77,2610
    uint16_t nBlockAlign;78,2640
    uint16_t wBitsPerSample;79,2666
} xa_header_t;80,2695
#define FRAME_LENGTH 82,2711
static int Open(87,2966
static int Demux(158,5610
static void Close 194,6679
static int Control(204,6973

access/rtp/rtp.c,1698
#define RTCP_PORT_TEXT 44,1456
#define RTCP_PORT_LONGTEXT 45,1503
#define SRTP_KEY_TEXT 49,1655
#define SRTP_KEY_LONGTEXT 50,1706
#define SRTP_SALT_TEXT 55,1911
#define SRTP_SALT_LONGTEXT 56,1964
#define RTP_MAX_SRC_TEXT 60,2121
#define RTP_MAX_SRC_LONGTEXT 61,2172
#define RTP_TIMEOUT_TEXT 64,2276
#define RTP_TIMEOUT_LONGTEXT 65,2332
#define RTP_MAX_DROPOUT_TEXT 68,2435
#define RTP_MAX_DROPOUT_LONGTEXT 69,2506
#define RTP_MAX_MISORDER_TEXT 73,2693
#define RTP_MAX_MISORDER_LONGTEXT 74,2769
#define RTP_DYNAMIC_PT_TEXT 78,2955
#define RTP_DYNAMIC_PT_LONGTEXT 80,3073
static const char *const dynamic_pt_list[dynamic_pt_list85,3289
static const char *const dynamic_pt_list_text[dynamic_pt_list_text86,3348
vlc_module_begin 94,3527
# define IPPROTO_DCCP 143,5322
# define IPPROTO_UDPLITE 147,5390
#  define SOCK_DCCP 224,7208
static void Close 320,9809
static int extract_port 351,10563
static int Control 375,10985
void *codec_init codec_init427,12109
void codec_destroy 434,12281
void codec_decode 441,12433
static void *stream_init stream_init453,12768
static void stream_destroy 464,13101
static void stream_decode 476,13346
static void *demux_init demux_init485,13538
static void *pcmu_init pcmu_init497,13718
static void *gsm_init gsm_init511,14014
static void *pcma_init pcma_init525,14331
static void *l16s_init l16s_init539,14664
static void *l16m_init l16m_init550,14942
static void *qcelp_init qcelp_init564,15241
static void *mpa_init mpa_init578,15568
static void mpa_decode 589,15845
static void *mpv_init mpv_init607,16178
static void mpv_decode 616,16364
static void *ts_init ts_init640,16843
void rtp_autodetect 653,17173

audio_filter/channel_mixer/simple.c,671
vlc_module_begin 42,1751
static void DoWork_6_1_to_2_0(67,2608
static void DoWork_5_x_to_2_0(86,3155
static void DoWork_4_0_to_2_0(100,3657
static void DoWork_3_x_to_2_0(112,4091
static void DoWork_7_x_to_1_0(126,4561
static void DoWork_5_x_to_1_0(139,5055
static void DoWork_4_0_to_1_0(153,5545
static void DoWork_3_x_to_1_0(164,5932
static void DoWork_2_x_to_1_0(177,6366
static void DoWork_7_x_to_4_0(189,6732
static void DoWork_5_x_to_4_0(205,7324
static void DoWork_7_x_to_5_x(222,7870
static void DoWork_6_1_to_5_x(242,8621
#define GET_WORK(263,9252
#define GET_WORK(265,9318
static int OpenFilter(271,9549
static block_t *Filter(Filter359,12527

video_filter/marq.c,1608
static const int pi_color_values[pi_color_values54,2223
static const char *const ppsz_color_descriptions[ppsz_color_descriptions59,2527
struct filter_sys_t69,3083
    vlc_mutex_t lock;71,3105
    int i_xoff,73,3128
    int i_xoff, i_yoff;73,3128
    int i_pos;74,3210
    int i_timeout;75,3294
    char *format;format77,3314
    char *filepath;filepath78,3360
    char *message;message79,3406
    text_style_t *p_style;p_style81,3453
    mtime_t last_time;83,3500
    mtime_t i_refresh;84,3523
#define MSG_TEXT 87,3550
#define MSG_LONGTEXT 88,3578
#define FILE_TEXT 93,3767
#define FILE_LONGTEXT 94,3801
#define POSX_TEXT 95,3865
#define POSX_LONGTEXT 96,3898
#define POSY_TEXT 97,3964
#define POSY_LONGTEXT 98,3997
#define TIMEOUT_TEXT 99,4055
#define TIMEOUT_LONGTEXT 100,4090
#define REFRESH_TEXT 103,4283
#define REFRESH_LONGTEXT 104,4331
#define OPACITY_TEXT 107,4551
#define OPACITY_LONGTEXT 108,4586
#define SIZE_TEXT 110,4720
#define SIZE_LONGTEXT 111,4762
#define COLOR_TEXT 114,4861
#define COLOR_LONGTEXT 115,4892
#define POS_TEXT 120,5202
#define POS_LONGTEXT 121,5242
static const int pi_pos_values[pi_pos_values126,5450
static const char *const ppsz_pos_descriptions[ppsz_pos_descriptions127,5517
#define CFG_PREFIX 131,5719
#define MARQUEE_HELP 133,5747
vlc_module_begin 138,5984
static int CreateFilter(185,7911
#define CREATE_VAR(207,8479
static void DestroyFilter(238,9986
#define DEL_VAR(244,10166
static subpicture_t *Filter(Filter270,11063
static char *MarqueeReadFile(MarqueeReadFile348,13140
static int MarqueeCallback(376,13925

codec/gstreamer/gstvlcpictureplaneallocator.h,895
#define VLC_GST_PICTURE_PLANE_ALLOCATOR_H_28,1376
typedef struct _GstVlcPicturePlane GstVlcPicturePlane;37,1555
typedef struct _GstVlcPicturePlaneAllocator GstVlcPicturePlaneAllocator;38,1610
                                    GstVlcPicturePlaneAllocatorClass;40,1734
#define GST_TYPE_VLC_PICTURE_PLANE_ALLOCATOR 43,1831
#define GST_IS_VLC_PICTURE_PLANE_ALLOCATOR(45,1932
#define GST_VLC_PICTURE_PLANE_ALLOCATOR(47,2063
#define GST_VLC_PICTURE_PLANE_ALLOCATOR_CAST(50,2229
struct _GstVlcPicturePlane53,2324
    GstMemory parent;55,2353
    decoder_t *p_dec;p_dec57,2376
    picture_t *p_pic;p_pic58,2398
    plane_t *p_plane;p_plane59,2420
struct _GstVlcPicturePlaneAllocator62,2446
    GstAllocator parent;64,2484
    picture_t pic_info;65,2509
    decoder_t *p_dec;p_dec67,2535
struct _GstVlcPicturePlaneAllocatorClass70,2561
    GstAllocatorClass parent_class;72,2604

lua/libs.h,31
#define VLC_LUA_LIBS_H25,1173

video_filter/gradfun.c,961
#define CFG_PREFIX 45,1809
#define RADIUS_MIN 47,1840
#define RADIUS_MAX 48,1863
#define RADIUS_TEXT 49,1887
#define RADIUS_LONGTEXT 50,1920
#define STRENGTH_MIN 52,1968
#define STRENGTH_MAX 53,1997
#define STRENGTH_TEXT 54,2024
#define STRENGTH_LONGTEXT 55,2061
vlc_module_begin(57,2139
#define FFMAX(75,2903
#   define HAVE_MMX2 77,2959
#   define HAVE_MMX2 79,2988
#   define HAVE_SSE2 82,3042
#   define HAVE_SSE2 84,3071
#   define HAVE_SSSE3 87,3126
#   define HAVE_SSSE3 89,3156
#   define HAVE_6REGS 93,3230
#   define HAVE_6REGS 95,3260
#define av_clip_uint8 97,3291
struct filter_sys_t 103,3487
    vlc_mutex_t      lock;104,3509
    float            strength;105,3536
    int              radius;106,3567
    const vlc_chroma_description_t *chroma;chroma107,3596
    struct vf_priv_s cfg;108,3640
static int Open(111,3670
static void Close(162,5169
static picture_t *Filter(Filter174,5515
static int Callback(222,7202

audio_filter/converter/format.c,1317
vlc_module_begin(48,1909
typedef block_t *(*cvt_t)cvt_t60,2330
static int Open(63,2446
static block_t *U8toS16(U8toS1687,3158
static block_t *U8toFl32(U8toFl32104,3610
static block_t *U8toS32(U8toS32121,4070
static block_t *U8toFl64(U8toFl64138,4527
static block_t *S16toU8(S16toU8157,5009
static block_t *S16toFl32(S16toFl32169,5292
        union { float f;186,5914
        union { float f; int32_t i;186,5914
static block_t *S16toS32(S16toS32197,6107
static block_t *S16toFl64(S16toFl64214,6549
static block_t *Fl32toU8(Fl32toU8233,7025
static block_t *Fl32toS16(Fl32toS16253,7482
        union { float f;267,7938
        union { float f; int32_t i;267,7938
static block_t *Fl32toS32(Fl32toS32281,8235
static block_t *Fl32toFl64(Fl32toFl64300,8703
static block_t *S32toU8(S32toU8319,9164
static block_t *S32toS16(S32toS16331,9446
static block_t *S32toFl32(S32toFl32343,9721
static block_t *S32toFl64(S32toFl64353,9984
static block_t *Fl64toU8(Fl64toU8372,10467
static block_t *Fl64toS16(Fl64toS16392,10923
static block_t *Fl64toFl32(Fl64toFl32411,11399
static block_t *Fl64toS32(Fl64toS32422,11645
    vlc_fourcc_t src;445,12147
    vlc_fourcc_t dst;446,12169
    cvt_t convert;447,12191
} cvt_directs[cvt_directs448,12210
static cvt_t FindConversion(477,13298

demux/hls/HLSManager.hpp,98
#define HLSMANAGER_HPP21,993
namespace hls27,1143
    class HLSManager hls::HLSManager31,1190

access/rtp/rtp.h,843
typedef struct rtp_pt_t rtp_pt_t;23,1010
typedef struct rtp_session_t rtp_session_t;24,1044
struct rtp_pt_t29,1153
    void   *(*init)init31,1171
    void    (*destroy)destroy32,1204
    void    (*decode)decode33,1248
    uint32_t  frequency;34,1302
    uint8_t   number;35,1353
static inline uint8_t rtp_ptype 39,1446
struct demux_sys_t64,2338
    rtp_session_t *session;session66,2359
    struct vlc_demux_chained_t *chained_demux;chained_demux67,2387
    struct srtp_session_t *srtp;srtp69,2451
    int           fd;71,2491
    int           rtcp_fd;72,2513
    vlc_thread_t  thread;73,2540
    mtime_t       timeout;75,2567
    uint16_t      max_dropout;76,2594
    uint16_t      max_misorder;77,2664
    uint8_t       max_src;78,2736
    bool          thread_ready;79,2800
    bool          autodetect;80,2832

demux/adaptive/plumbing/FakeESOutID.cpp,468
FakeESOutID::FakeESOutID(30,1100
FakeESOutID::~FakeESOutID(39,1331
void FakeESOutID::setRealESID(44,1393
void FakeESOutID::notifyData(49,1485
void FakeESOutID::create(54,1542
void FakeESOutID::release(59,1622
es_out_id_t * FakeESOutID::realESID(64,1687
const es_format_t *FakeESOutID::getFmt(FakeESOutID::getFmt69,1755
bool FakeESOutID::isCompatible(74,1824
void FakeESOutID::setScheduledForDeletion(96,2447
bool FakeESOutID::scheduledForDeletion(101,2523

video_output/xcb/glx.c,499
vlc_module_begin 47,1428
struct vout_display_sys_t58,1751
    xcb_connection_t *conn;conn60,1779
    vlc_gl_t *gl;gl61,1830
    xcb_cursor_t cursor;63,1849
    bool visible;64,1893
    vout_display_opengl_t *vgl;vgl66,1934
    picture_pool_t *pool;pool67,1966
static int Open 79,2348
static void Close 146,3918
static picture_pool_t *Pool Pool171,4584
static void PictureRender 184,4914
static void PictureDisplay 193,5180
static int Control 206,5530
static void Manage 258,7161

demux/dash/mpd/ProgramInformation.cpp,536
const std::string &ProgramInformation::getSource(ProgramInformation::getSource32,1268
void ProgramInformation::setSource(37,1355
const std::string &ProgramInformation::getCopyright(ProgramInformation::getCopyright42,1449
void ProgramInformation::setCopyright(47,1542
void ProgramInformation::setMoreInformationUrl(52,1648
const std::string & ProgramInformation::getMoreInformationUrl(57,1760
const std::string &ProgramInformation::getTitle(ProgramInformation::getTitle62,1866
void        ProgramInformation::setTitle 67,1951

audio_output/audiounit_ios.m,847
#define STREAM_FORMAT_MSG(46,1628
#define AUDIO_BUFFER_SIZE_IN_SECONDS 53,1987
struct aout_sys_t61,2490
    TPCircularBuffer            circular_buffer;63,2510
    AudioComponent              au_component;66,2633
    AudioUnit                   au_unit;67,2717
    int                         i_rate;69,2797
    int                         i_bytes_per_sample;70,2873
    bool                        b_paused;72,2926
    vlc_mutex_t                 lock;74,2969
    vlc_cond_t                  cond;75,3007
vlc_module_begin 95,4004
static void Close(126,4692
static int Start(137,4903
static int StartAnalog(170,5789
static void Stop(289,10649
static void Play 318,11607
static void Pause 334,12123
static int MuteSet(365,13167
static void Flush(377,13452
static int TimeGet(399,14086
static OSStatus RenderCallback(420,14835

control/globalhotkeys/win32.c,735
#define VLC_MODULE_LICENSE 29,1178
vlc_module_begin(46,1868
struct intf_sys_t56,2189
    vlc_thread_t thread;58,2209
    HWND hotkeyWindow;59,2234
    vlc_mutex_t lock;60,2257
    vlc_cond_t wait;61,2279
static int Open(67,2493
static void Close(112,3783
static void *Thread(Thread132,4438
#define HANDLE(191,6772
#define HANDLE2(192,6833
#define KEY_SPACE 194,6903
#define VK_VOLUME_DOWN 197,6949
#define VK_VOLUME_UP 198,6986
#define VK_MEDIA_NEXT_TRACK 202,7059
#define VK_MEDIA_PREV_TRACK 203,7096
#define VK_MEDIA_STOP 204,7133
#define VK_MEDIA_PLAY_PAUSE 205,7170
#define VK_PAGEUP 209,7233
#define VK_PAGEDOWN 210,7270
#undef HANDLE254,8470
#undef HANDLE2255,8484
LRESULT CALLBACK WMHOTKEYPROC(292,9585

video_filter/gradfun.h,649
struct vf_priv_s 31,1190
    int thresh;32,1209
    int radius;33,1225
    uint16_t *buf;buf34,1241
    void (*filter_line)filter_line35,1260
    void (*blur_line)blur_line37,1399
static const uint16_t __attribute__((aligned(16))) pw_7f[pw_7f41,1531
static const uint16_t __attribute__((aligned(16))) pw_ff[pw_ff42,1628
static const uint16_t __attribute__((aligned(16))) dither[dither43,1725
static void filter_line_c(54,2117
static void blur_line_c(68,2556
static void filter_line_mmx2(82,2935
static void filter_line_ssse3(132,4664
#define BLURV(180,6482
static void blur_line_sse2(214,7508
static void filter_plane(225,7791

demux/mp4/libmp4.c,7166
static double conv_fx(44,1593
static void MP4_ConvertDate2Str(52,1757
static int MP4_Seek(79,2720
static void MP4_BoxAddChild(109,3642
MP4_Box_t * MP4_BoxExtract(119,3926
#undef vlc_stream_Seek137,4345
#define vlc_stream_Seek(138,4368
static int MP4_PeekBoxHeader(148,4845
static MP4_Box_t *MP4_ReadBoxRestricted(MP4_ReadBoxRestricted208,6604
static int MP4_ReadBoxContainerChildrenIndexed(288,9208
int MP4_ReadBoxContainerChildren(367,11621
static void MP4_BoxOffsetUp(374,11910
static int MP4_ReadBoxContainerRawInBox(385,12214
static int MP4_ReadBoxContainer(407,12949
static int MP4_ReadBoxSkip(423,13471
static int MP4_ReadBox_ilst(463,14627
static void MP4_FreeBox_ftyp(498,15694
static int MP4_ReadBox_ftyp(503,15805
static int MP4_ReadBox_mvhd(533,16639
static int MP4_ReadBox_mfhd(603,19040
static int MP4_ReadBox_tfxd(618,19452
static void MP4_FreeBox_tfrf(649,20372
static int MP4_ReadBox_tfrf(654,20482
static int MP4_ReadBox_uuid(702,22208
static void MP4_FreeBox_sidx(723,23084
static int MP4_ReadBox_sidx(728,23183
static int MP4_ReadBox_tfhd(786,25226
static void MP4_FreeBox_trun(848,28077
static int MP4_ReadBox_trun(853,28178
static int MP4_ReadBox_tfdt(903,30303
static int MP4_ReadBox_tkhd(921,30834
static int MP4_ReadBox_load(1019,34700
static int MP4_ReadBox_mdhd(1031,35109
static void MP4_FreeBox_hdlr(1078,36866
static int MP4_ReadBox_hdlr(1083,36966
static int MP4_ReadBox_vmhd(1134,38400
static int MP4_ReadBox_smhd(1156,39107
static int MP4_ReadBox_hmhd(1176,39568
static void MP4_FreeBox_url(1200,40414
static int MP4_ReadBox_url(1205,40516
static void MP4_FreeBox_urn(1220,40917
static int MP4_ReadBox_urn(1226,41064
static int MP4_ReadBox_LtdContainer(1243,41578
static void MP4_FreeBox_stts(1281,42722
static int MP4_ReadBox_stts(1287,42882
static void MP4_FreeBox_ctts(1323,44008
static int MP4_ReadBox_ctts(1329,44169
static int MP4_ReadLengthDescriptor(1365,45306
static void MP4_FreeBox_esds(1381,45612
static int MP4_ReadBox_esds(1391,45967
#define es_descriptor 1393,46037
#undef es_descriptor1501,49687
static void MP4_FreeBox_avcC(1504,49711
static int MP4_ReadBox_avcC(1527,50357
static void MP4_FreeBox_vpcC(1628,53528
static int MP4_ReadBox_vpcC(1633,53633
static void MP4_FreeBox_WMA2(1670,54850
static int MP4_ReadBox_WMA2(1675,54949
static void MP4_FreeBox_strf(1709,55881
static int MP4_ReadBox_strf(1714,55980
static int MP4_ReadBox_ASF(1750,57097
static void MP4_FreeBox_sbgp(1765,57429
static int MP4_ReadBox_sbgp(1772,57638
static void MP4_FreeBox_sgpd(1828,59392
static int MP4_ReadBox_sgpd(1834,59531
static void MP4_FreeBox_stsdext_chan(1930,62162
static int MP4_ReadBox_stsdext_chan(1936,62321
static int MP4_ReadBox_dec3(1983,64166
static int MP4_ReadBox_dac3(2024,65830
static int MP4_ReadBox_dvc1(2049,66685
static int MP4_ReadBox_fiel(2069,67310
static int MP4_ReadBox_enda(2093,68202
static void MP4_FreeBox_sample_soun(2109,68597
static int MP4_ReadBox_sample_soun(2114,68719
static void MP4_FreeBox_sample_vide(2286,75435
int MP4_ReadBox_sample_vide(2291,75563
static int MP4_ReadBox_sample_mp4s(2372,78454
static void MP4_FreeBox_sample_hint(2387,78873
static int MP4_ReadBox_sample_hint8(2392,78985
static int MP4_ReadBox_sample_text(2416,79679
static int MP4_ReadBox_sample_clcp(2469,81666
static int MP4_ReadBox_sample_tx3g(2487,82170
static void MP4_FreeBox_sample_text(2528,83810
static void MP4_FreeBox_stsz(2534,83936
static int MP4_ReadBox_stsz(2539,84040
static void MP4_FreeBox_stsc(2572,85103
static int MP4_ReadBox_stsc(2579,85329
static void MP4_FreeBox_sdp(2615,86639
static int MP4_ReadBox_sdp(2620,86737
static void MP4_FreeBox_rtp(2629,86948
static int MP4_ReadBox_rtp(2634,87067
static int MP4_ReadBox_tims(2645,87407
static int MP4_ReadBox_tsro(2654,87615
static int MP4_ReadBox_tssy(2663,87820
static void MP4_FreeBox_stco_co64(2672,88042
static int MP4_ReadBox_stco_co64(2677,88153
static void MP4_FreeBox_stss(2718,89253
static int MP4_ReadBox_stss(2723,89360
static void MP4_FreeBox_stsh(2755,90359
static int MP4_ReadBox_stsh(2761,90533
static void MP4_FreeBox_stdp(2797,91704
static int MP4_ReadBox_stdp(2802,91806
static void MP4_FreeBox_padb(2827,92440
static int MP4_ReadBox_padb(2835,92680
static void MP4_FreeBox_elst(2880,94113
static int MP4_ReadBox_elst(2888,94390
static void MP4_FreeBox_cprt(2946,96451
static int MP4_ReadBox_cprt(2951,96553
static int MP4_ReadBox_dcom(2974,97188
static void MP4_FreeBox_cmvd(2987,97574
static int MP4_ReadBox_cmvd(2992,97672
static int MP4_ReadBox_cmov(3016,98340
static void MP4_FreeBox_rdrf(3133,101786
static int MP4_ReadBox_rdrf(3138,101885
static int MP4_ReadBox_rmdr(3177,102843
static int MP4_ReadBox_rmqu(3193,103229
static int MP4_ReadBox_rmvc(3207,103576
static int MP4_ReadBox_frma(3228,104295
static int MP4_ReadBox_skcr(3242,104635
static int MP4_ReadBox_drms(3260,105163
static void MP4_FreeBox_String(3270,105512
static int MP4_ReadBox_String(3275,105616
static void MP4_FreeBox_Binary(3296,106349
static int MP4_ReadBox_Binary(3302,106489
static void MP4_FreeBox_data(3318,106975
static int MP4_ReadBox_data(3323,107069
static int MP4_ReadBox_Metadata(3359,108231
static void MP4_FreeBox_chpl(3371,108622
static int MP4_ReadBox_chpl(3378,108829
static void MP4_FreeBox_HMMT(3454,110878
static int MP4_ReadBox_HMMT(3459,110986
#define MAX_CHAPTER_COUNT 3461,111056
static void MP4_FreeBox_tref_generic(3502,112134
static int MP4_ReadBox_tref_generic(3507,112252
static void MP4_FreeBox_keys(3530,113142
static int MP4_ReadBox_keys(3537,113365
static int MP4_ReadBox_colr(3584,114898
static int MP4_ReadBox_meta(3606,115752
static int MP4_ReadBox_iods(3657,117359
static int MP4_ReadBox_btrt(3691,118704
static int MP4_ReadBox_pasp(3705,119079
static int MP4_ReadBox_mehd(3722,119557
static int MP4_ReadBox_trex(3741,120124
static void MP4_FreeBox_sdtp(3761,120803
static int MP4_ReadBox_sdtp(3766,120909
static int MP4_ReadBox_tsel(3796,121872
static int MP4_ReadBox_mfro(3808,122276
static void MP4_FreeBox_tfra(3824,122669
static int MP4_ReadBox_tfra(3833,122973
#define READ_VARIABLE_LENGTH(3835,123043
#define FIX_VARIABLE_LENGTH(3852,123473
#undef READ_VARIABLE_LENGTH3951,127245
#undef FIX_VARIABLE_LENGTH3952,127273
static int MP4_ReadBox_pnot(3955,127303
static int MP4_ReadBox_default(3971,127783
    uint32_t i_type;4027,129620
    int  (*MP4_ReadBox_function MP4_ReadBox_function4028,129641
    uint32_t i_parent;4029,129716
} MP4_Box_Function 4030,129802
static int MP4_Box_Read_Specific(4396,148682
static void MP4_Box_Clean_Specific(4421,149312
static MP4_Box_t *MP4_ReadBox(MP4_ReadBox4431,149680
MP4_Box_t * MP4_BoxNew(4474,150963
void MP4_BoxFree(4488,151403
MP4_Box_t *MP4_BoxGetNextChunk(MP4_BoxGetNextChunk4512,151834
MP4_Box_t *MP4_BoxGetRoot(MP4_BoxGetRoot4554,153210
static void MP4_BoxDumpStructure_Internal(4642,155920
void MP4_BoxDumpStructure(4681,157104
static bool get_token(4694,157595
static void MP4_BoxGet_Internal(4742,158560
MP4_Box_t *MP4_BoxGet(MP4_BoxGet4877,161974
unsigned MP4_BoxCount(4898,162682

demux/hls/HLSStreams.hpp,386
#define HLSSTREAM_HPP21,993
namespace hls25,1052
    class HLSStream hls::HLSStream29,1099
            bool b_id3_timestamps_offset_set;hls::HLSStream::b_id3_timestamps_offset_set44,1700
            vlc_meta_t *p_meta;hls::HLSStream::p_meta45,1746
            bool b_meta_updated;hls::HLSStream::b_meta_updated46,1778
    class HLSStreamFactory hls::HLSStreamFactory49,1819

demux/adaptive/http/Sockets.cpp,569
Socket::Socket(31,1119
Socket::Socket(37,1177
Socket::~Socket(43,1244
bool Socket::connect(48,1285
int Socket::getType(58,1497
bool Socket::connected(63,1547
void Socket::disconnect(68,1609
ssize_t Socket::read(77,1718
std::string Socket::readline(82,1849
bool Socket::send(92,2054
TLSSocket::TLSSocket(103,2283
TLSSocket::~TLSSocket(109,2361
bool TLSSocket::connect(114,2408
bool TLSSocket::connected(137,2889
ssize_t TLSSocket::read(142,2967
std::string TLSSocket::readline(147,3091
bool TLSSocket::send(158,3287
void TLSSocket::disconnect(169,3504

demux/dash/mp4/IndexReader.cpp,72
IndexReader::IndexReader(32,1195
bool IndexReader::parseIndex(37,1267

control/gestures.c,1213
#define VLC_MODULE_LICENSE 32,1385
struct intf_sys_t44,1812
    vlc_mutex_t         lock;46,1832
    input_thread_t     *p_input;p_input47,1862
    vout_thread_t      *p_vout;p_vout48,1895
    bool                b_button_pressed;49,1927
    int                 i_last_x,50,1969
    int                 i_last_x, i_last_y;50,1969
    unsigned int        i_pattern;51,2013
    unsigned int        i_num_gestures;52,2048
    int                 i_threshold;53,2088
    int                 i_button_mask;54,2125
#define UP 60,2348
#define DOWN 61,2361
#define LEFT 62,2376
#define RIGHT 63,2391
#define NONE 64,2407
#define GESTURE(65,2422
#define THRESHOLD_TEXT 73,2756
#define THRESHOLD_LONGTEXT 74,2813
#define BUTTON_TEXT 77,2919
#define BUTTON_LONGTEXT 78,2962
#define BUTTON_DEFAULT 81,3036
static const char *const button_list[button_list83,3067
static const char *const button_list_text[button_list_text84,3139
vlc_module_begin 87,3264
static inline unsigned gesture(151,5748
static void Close 159,6068
static void ProcessGesture(183,6807
static int MovedEvent(371,12923
static int ButtonEvent(434,14782
static int InputEvent(465,15576
static int PlaylistEvent(501,16880

demux/mp4/libmp4.h,43084
#define VLC_MP4_LIBMP4_H_23,1165
typedef int64_t stime_t;29,1269
#define BLOCK16x16 31,1295
#define MAJOR_3gp4 33,1323
#define MAJOR_3gp5 34,1375
#define MAJOR_3gp6 35,1427
#define MAJOR_3gp7 36,1479
#define MAJOR_isml 37,1531
#define MAJOR_isom 38,1583
#define MAJOR_qt__ 39,1635
#define MAJOR_dash 40,1687
#define MAJOR_mp41 41,1739
#define MAJOR_avc1 42,1791
#define ATOM_root 44,1844
#define ATOM_uuid 45,1895
#define ATOM_ftyp 47,1947
#define ATOM_moov 48,1998
#define ATOM_foov 49,2049
#define ATOM_cmov 50,2100
#define ATOM_dcom 51,2151
#define ATOM_cmvd 52,2202
#define ATOM_styp 54,2254
#define ATOM_moof 55,2305
#define ATOM_mdat 56,2356
#define ATOM_skip 57,2407
#define ATOM_free 58,2458
#define ATOM_udta 59,2509
#define ATOM_wide 60,2560
#define ATOM_binm 61,2611
#define ATOM_pnot 64,2731
#define ATOM_pict 65,2782
#define ATOM_PICT 66,2833
#define ATOM_data 68,2885
#define ATOM_trak 70,2937
#define ATOM_mvhd 71,2988
#define ATOM_tkhd 72,3039
#define ATOM_tref 73,3090
#define ATOM_load 74,3141
#define ATOM_mdia 75,3192
#define ATOM_mdhd 76,3243
#define ATOM_hdlr 77,3294
#define ATOM_minf 78,3345
#define ATOM_vmhd 79,3396
#define ATOM_smhd 80,3447
#define ATOM_hmhd 81,3498
#define ATOM_dinf 82,3549
#define ATOM_url 83,3600
#define ATOM_urn 84,3651
#define ATOM_dref 85,3702
#define ATOM_stbl 86,3753
#define ATOM_stts 87,3804
#define ATOM_ctts 88,3855
#define ATOM_stsd 89,3906
#define ATOM_stsz 90,3957
#define ATOM_stz2 91,4008
#define ATOM_stsc 92,4059
#define ATOM_stco 93,4110
#define ATOM_co64 94,4161
#define ATOM_sbgp 95,4212
#define ATOM_sgpd 96,4263
#define ATOM_stss 97,4314
#define ATOM_stsh 98,4365
#define ATOM_stdp 99,4416
#define ATOM_padb 100,4467
#define ATOM_edts 101,4518
#define ATOM_elst 102,4569
#define ATOM_mvex 103,4620
#define ATOM_sdtp 104,4671
#define ATOM_trex 105,4722
#define ATOM_mehd 106,4773
#define ATOM_mfhd 107,4824
#define ATOM_traf 108,4875
#define ATOM_sidx 109,4926
#define ATOM_tfhd 110,4977
#define ATOM_tfdt 111,5028
#define ATOM_trun 112,5079
#define ATOM_cprt 113,5130
#define ATOM_iods 114,5181
#define ATOM_pasp 115,5232
#define ATOM_mfra 116,5283
#define ATOM_mfro 117,5334
#define ATOM_tfra 118,5385
#define ATOM_keys 119,5436
#define ATOM_nmhd 121,5488
#define ATOM_mp2v 122,5539
#define ATOM_mp4v 123,5590
#define ATOM_mp4a 124,5641
#define ATOM_mp4s 125,5692
#define ATOM_vide 126,5743
#define ATOM_soun 127,5794
#define ATOM_hint 128,5845
#define ATOM_hdv2 129,5896
#define ATOM_rrtp 130,5947
#define ATOM_dpnd 132,5999
#define ATOM_cdsc 133,6050
#define ATOM_ipir 134,6101
#define ATOM_mpod 135,6152
#define ATOM_hnti 136,6203
#define ATOM_rtp 137,6254
#define ATOM_btrt 138,6305
#define ATOM_sdp 139,6356
#define ATOM_tims 141,6408
#define ATOM_tsro 142,6459
#define ATOM_tssy 143,6510
#define ATOM_esds 145,6562
#define ATOM_lpcm 147,6614
#define ATOM__mp3 148,6665
#define ATOM_ms02 149,6716
#define ATOM_ms11 150,6768
#define ATOM_ms55 151,6820
#define ATOM_twos 152,6872
#define ATOM_sowt 153,6923
#define ATOM_QDMC 154,6974
#define ATOM_QDM2 155,7025
#define ATOM_XiFL 156,7076
#define ATOM_XiVs 157,7127
#define ATOM_ima4 158,7178
#define ATOM_IMA4 159,7229
#define ATOM_dvi 160,7280
#define ATOM_MAC3 161,7331
#define ATOM_MAC6 162,7382
#define ATOM_alaw 163,7433
#define ATOM_ulaw 164,7484
#define ATOM_Qclp 165,7535
#define ATOM_samr 166,7586
#define ATOM_sawb 167,7637
#define ATOM_OggS 168,7688
#define ATOM_agsm 169,7739
#define ATOM_alac 170,7790
#define ATOM_ac3 171,7841
#define ATOM_eac3 172,7892
#define ATOM_dac3 173,7943
#define ATOM_dec3 174,7994
#define ATOM_vc1 175,8045
#define ATOM_dvc1 176,8096
#define ATOM_WMA2 177,8147
#define ATOM_wma 178,8198
#define ATOM_enda 179,8249
#define ATOM_gnre 180,8300
#define ATOM_trkn 181,8351
#define ATOM_chan 182,8402
#define ATOM_in24 183,8453
#define ATOM_in32 184,8504
#define ATOM_fl32 185,8555
#define ATOM_fl64 186,8606
#define ATOM_Opus 187,8657
#define ATOM_fCtS 190,8722
#define ATOM_vCtH 191,8773
#define ATOM_vCtC 192,8824
#define ATOM_vCtd 193,8875
#define ATOM_zlib 195,8927
#define ATOM_SVQ1 196,8978
#define ATOM_SVQ3 197,9029
#define ATOM_ZyGo 198,9080
#define ATOM_3IV1 199,9131
#define ATOM_3iv1 200,9182
#define ATOM_3IV2 201,9233
#define ATOM_3iv2 202,9284
#define ATOM_3IVD 203,9335
#define ATOM_3ivd 204,9386
#define ATOM_3VID 205,9437
#define ATOM_3vid 206,9488
#define ATOM_FFV1 207,9539
#define ATOM_h263 208,9590
#define ATOM_s263 209,9641
#define ATOM_DIVX 210,9692
#define ATOM_XVID 211,9743
#define ATOM_cvid 212,9794
#define ATOM_mjpa 213,9845
#define ATOM_mjpb 214,9896
#define ATOM_mjqt 215,9947
#define ATOM_mjht 216,9998
#define ATOM_VP31 217,10049
#define ATOM_vp31 218,10100
#define ATOM_h264 219,10151
#define ATOM_qdrw 220,10202
#define ATOM_vp08 221,10253
#define ATOM_vp09 222,10304
#define ATOM_vp10 223,10355
#define ATOM_WMV3 224,10406
#define ATOM_avc1 226,10458
#define ATOM_avc3 227,10509
#define ATOM_avcC 228,10560
#define ATOM_vpcC 229,10611
#define ATOM_m4ds 230,10662
#define ATOM_fiel 232,10714
#define ATOM_glbl 233,10765
#define ATOM_hvcC 234,10816
#define ATOM_dvc 236,10868
#define ATOM_dvp 237,10919
#define ATOM_dv5n 238,10970
#define ATOM_dv5p 239,11021
#define ATOM_raw 240,11072
#define ATOM_dOps 241,11123
#define ATOM_wfex 242,11174
#define ATOM_jpeg 244,11226
#define ATOM_yv12 246,11278
#define ATOM_yuv2 247,11329
#define ATOM_rmra 249,11381
#define ATOM_rmda 250,11432
#define ATOM_rdrf 251,11483
#define ATOM_rmdr 252,11534
#define ATOM_rmvc 253,11585
#define ATOM_rmcd 254,11636
#define ATOM_rmqu 255,11687
#define ATOM_alis 256,11738
#define ATOM_gmhd 258,11790
#define ATOM_wave 259,11841
#define ATOM_strf 260,11892
#define ATOM_drms 262,11944
#define ATOM_sinf 263,11995
#define ATOM_schi 264,12046
#define ATOM_user 265,12097
#define ATOM_key 266,12148
#define ATOM_iviv 267,12199
#define ATOM_name 268,12250
#define ATOM_priv 269,12301
#define ATOM_drmi 270,12352
#define ATOM_frma 271,12403
#define ATOM_skcr 272,12454
#define ATOM_ASF 273,12505
#define ATOM_text 275,12557
#define ATOM_tx3g 276,12608
#define ATOM_subp 277,12659
#define ATOM_sbtl 278,12710
#define ATOM_clcp 279,12761
#define ATOM_c608 280,12812
#define ATOM_c708 281,12863
#define ATOM_0xa9nam 283,12915
#define ATOM_0xa9aut 284,12970
#define ATOM_0xa9cpy 285,13025
#define ATOM_0xa9inf 286,13080
#define ATOM_0xa9isr 287,13135
#define ATOM_0xa9lab 288,13190
#define ATOM_0xa9lal 289,13245
#define ATOM_0xa9ART 290,13300
#define ATOM_0xa9des 291,13355
#define ATOM_0xa9dir 292,13410
#define ATOM_0xa9cmt 293,13465
#define ATOM_0xa9req 294,13520
#define ATOM_0xa9day 295,13575
#define ATOM_0xa9fmt 296,13630
#define ATOM_0xa9prd 297,13685
#define ATOM_0xa9prf 298,13740
#define ATOM_0xa9src 299,13795
#define ATOM_0xa9alb 300,13850
#define ATOM_0xa9dis 301,13905
#define ATOM_0xa9enc 302,13960
#define ATOM_0xa9trk 303,14015
#define ATOM_0xa9url 304,14070
#define ATOM_0xa9dsa 305,14125
#define ATOM_0xa9hst 306,14180
#define ATOM_0xa9ope 307,14235
#define ATOM_0xa9wrt 308,14290
#define ATOM_0xa9com 309,14345
#define ATOM_0xa9gen 310,14400
#define ATOM_0xa9too 311,14455
#define ATOM_0xa9wrn 312,14510
#define ATOM_0xa9swr 313,14565
#define ATOM_0xa9mak 314,14620
#define ATOM_0xa9mal 315,14675
#define ATOM_0xa9mod 316,14730
#define ATOM_0xa9PRD 317,14785
#define ATOM_0xa9grp 318,14840
#define ATOM_0xa9lyr 319,14895
#define ATOM_0xa9gen 320,14950
#define ATOM_0xa9st3 321,15005
#define ATOM_0xa9ard 322,15060
#define ATOM_0xa9arg 323,15115
#define ATOM_0xa9cak 324,15170
#define ATOM_0xa9con 325,15225
#define ATOM_0xa9des 326,15280
#define ATOM_0xa9lnt 327,15335
#define ATOM_0xa9phg 328,15390
#define ATOM_0xa9pub 329,15445
#define ATOM_0xa9sne 330,15500
#define ATOM_0xa9snm 331,15555
#define ATOM_0xa9sol 332,15610
#define ATOM_0xa9thx 333,15665
#define ATOM_0xa9xpd 334,15720
#define ATOM_0xa9xyz 335,15775
#define ATOM_aART 336,15830
#define ATOM_chpl 337,15881
#define ATOM_HMMT 338,15932
#define ATOM_disk 339,15983
#define ATOM_WLOC 340,16034
#define ATOM_meta 342,16086
#define ATOM_atID 343,16137
#define ATOM_ilst 344,16188
#define ATOM_cnID 345,16239
#define ATOM_covr 346,16290
#define ATOM_flvr 347,16341
#define ATOM_rtng 348,16392
#define ATOM_tsel 349,16443
#define ATOM_xid_ 350,16494
#define ATOM_gshh 351,16545
#define ATOM_gspm 352,16596
#define ATOM_gspu 353,16647
#define ATOM_gssd 354,16698
#define ATOM_gsst 355,16749
#define ATOM_gstd 356,16800
#define ATOM_colr 357,16851
#define ATOM_0x40PRM 359,16903
#define ATOM_0x40PRQ 360,16957
#define ATOM_chap 361,17011
#define ATOM_MCPS 362,17062
#define ATOM_SDLN 363,17113
#define ATOM_vndr 364,17164
#define HANDLER_mdta 366,17216
#define HANDLER_mdir 367,17268
#define SAMPLEGROUP_rap 369,17321
# define MP4_VERBOSE 373,17454
#define MP4_MFRO_BOXSIZE 379,17537
typedef struct UUID_s382,17606
    uint8_t b[b384,17630
} UUID_t;385,17649
typedef struct MP4_Box_data_tfxd_s389,17700
    uint8_t  i_version;391,17737
    uint32_t i_flags;392,17761
    uint64_t i_fragment_duration;394,17784
    uint64_t i_fragment_abs_time;395,17818
} MP4_Box_data_tfxd_t;397,17853
typedef struct TfrfBoxDataFields_s399,17877
    uint64_t i_fragment_duration;401,17914
    uint64_t i_fragment_abs_time;402,17948
} TfrfBoxDataFields_t;404,17983
typedef struct MP4_Box_data_tfrf_s406,18007
    uint8_t  i_version;408,18044
    uint8_t  i_fragment_count;409,18068
    uint32_t i_flags;410,18099
    TfrfBoxDataFields_t *p_tfrf_data_fields;p_tfrf_data_fields412,18122
} MP4_Box_data_tfrf_t;414,18168
typedef struct MP4_Box_data_ftyp_s416,18192
    uint32_t i_major_brand;418,18229
    uint32_t i_minor_version;419,18257
    uint32_t i_compatible_brands_count;421,18288
    uint32_t *i_compatible_brands;i_compatible_brands422,18328
} MP4_Box_data_ftyp_t;424,18364
typedef struct MP4_Box_data_mvhd_s426,18388
    uint8_t  i_version;428,18425
    uint32_t i_flags;429,18449
    uint64_t i_creation_time;431,18472
    uint64_t i_modification_time;432,18502
    uint32_t i_timescale;433,18536
    uint64_t i_duration;434,18562
    int32_t  i_rate;436,18588
    int16_t  i_volume;437,18609
    int16_t  i_reserved1;438,18632
    uint32_t i_reserved2[i_reserved2439,18658
    int32_t  i_matrix[i_matrix440,18687
    uint32_t i_predefined[i_predefined441,18713
    uint32_t i_next_track_id;442,18743
} MP4_Box_data_mvhd_t;444,18774
#define MP4_TRACK_ENABLED 446,18798
#define MP4_TRACK_IN_MOVIE 447,18836
#define MP4_TRACK_IN_PREVIEW 448,18874
typedef struct MP4_Box_data_tkhd_s449,18912
    uint8_t  i_version;451,18949
    uint32_t i_flags;452,18973
    uint64_t i_creation_time;454,18996
    uint64_t i_modification_time;455,19026
    uint32_t i_track_ID;456,19060
    uint32_t i_reserved;457,19085
    uint64_t i_duration;458,19110
    uint32_t i_reserved2[i_reserved2460,19136
    int16_t  i_layer;461,19165
    int16_t  i_predefined;462,19187
    int16_t  i_volume;464,19215
    uint16_t i_reserved3;465,19238
    int32_t  i_matrix[i_matrix466,19264
    int32_t  i_width;467,19290
    int32_t  i_height;468,19312
    float    f_rotation;469,19335
} MP4_Box_data_tkhd_t;471,19361
    uint32_t i_start_time;475,19402
    int32_t  i_duration;476,19429
    uint32_t i_flags;477,19454
    uint32_t i_hints;478,19476
} MP4_Box_data_load_t;479,19498
typedef struct MP4_Box_data_mdhd_s481,19522
    uint8_t  i_version;483,19559
    uint32_t i_flags;484,19583
    uint64_t i_creation_time;486,19606
    uint64_t i_modification_time;487,19636
    uint32_t i_timescale;488,19670
    uint64_t i_duration;489,19696
    char     rgs_language[rgs_language491,19722
    bool     b_mac_encoding;492,19788
    uint16_t i_quality;494,19850
} MP4_Box_data_mdhd_t;496,19875
typedef struct MP4_Box_data_hdlr_s498,19899
    uint8_t  i_version;500,19936
    uint32_t i_flags;501,19960
    uint32_t i_predefined;503,19983
    uint32_t i_handler_type;504,20010
    unsigned char *psz_name;psz_name508,20170
} MP4_Box_data_hdlr_t;510,20215
typedef struct MP4_Box_data_vmhd_s512,20239
    uint8_t  i_version;514,20276
    uint32_t i_flags;515,20300
    int16_t  i_graphics_mode;517,20323
    int16_t  i_opcolor[i_opcolor518,20353
} MP4_Box_data_vmhd_t;520,20381
typedef struct MP4_Box_data_smhd_s522,20405
    uint8_t  i_version;524,20442
    uint32_t i_flags;525,20466
    int16_t  i_balance;527,20489
    int16_t  i_reserved;528,20513
} MP4_Box_data_smhd_t;530,20539
typedef struct MP4_Box_data_hmhd_s532,20563
    uint8_t  i_version;534,20600
    uint32_t i_flags;535,20624
    uint16_t i_max_PDU_size;537,20647
    uint16_t i_avg_PDU_size;538,20676
    uint32_t i_max_bitrate;539,20705
    uint32_t i_avg_bitrate;540,20733
    uint32_t i_reserved;541,20761
} MP4_Box_data_hmhd_t;543,20787
typedef struct MP4_Box_data_url_s545,20811
    uint8_t  i_version;547,20847
    uint32_t i_flags;548,20871
    char *psz_location;psz_location550,20894
} MP4_Box_data_url_t;552,20919
typedef struct MP4_Box_data_urn_s554,20942
    uint8_t  i_version;556,20978
    uint32_t i_flags;557,21002
    char *psz_name;psz_name559,21025
    char *psz_location;psz_location560,21045
} MP4_Box_data_urn_t;562,21070
typedef struct MP4_Box_data_lcont_s564,21093
    uint8_t  i_version;566,21131
    uint32_t i_flags;567,21155
    uint32_t i_entry_count;569,21178
} MP4_Box_data_lcont_t;571,21263
typedef struct MP4_Box_data_stts_s573,21288
    uint8_t  i_version;575,21325
    uint32_t i_flags;576,21349
    uint32_t i_entry_count;578,21372
    uint32_t *pi_sample_count;pi_sample_count579,21400
    int32_t  *pi_sample_delta;pi_sample_delta580,21453
} MP4_Box_data_stts_t;582,21485
typedef struct MP4_Box_data_ctts_s584,21509
    uint8_t  i_version;586,21546
    uint32_t i_flags;587,21570
    uint32_t i_entry_count;589,21593
    uint32_t *pi_sample_count;pi_sample_count591,21622
    int32_t *pi_sample_offset;pi_sample_offset592,21675
} MP4_Box_data_ctts_t;594,21707
typedef struct MP4_Box_data_colr_s597,21868
    uint32_t i_type;599,21905
            uint16_t i_primary_idx;604,21967
            uint16_t i_transfer_function_idx;605,22003
            uint16_t i_matrix_idx;606,22049
            uint8_t i_full_range;607,22084
        } nclc;608,22118
} MP4_Box_data_colr_t;610,22141
typedef struct MP4_Box_data_sample_soun_s612,22165
    uint8_t  i_reserved1[i_reserved1614,22209
    uint16_t i_data_reference_index;615,22238
    uint16_t i_qt_version;618,22307
    uint16_t i_qt_revision_level;619,22334
    uint32_t i_qt_vendor;620,22368
    uint16_t i_channelcount;622,22395
    uint16_t i_samplesize;623,22424
    uint16_t i_compressionid;624,22451
    uint16_t i_reserved3;625,22481
    uint16_t i_sampleratehi;626,22507
    uint16_t i_sampleratelo;627,22561
    uint32_t i_sample_per_packet;630,22637
    uint32_t i_bytes_per_packet;631,22671
    uint32_t i_bytes_per_frame;632,22704
    uint32_t i_bytes_per_sample;633,22736
    uint32_t i_constbitsperchannel;636,22783
    uint32_t i_formatflags;637,22861
    uint32_t i_constbytesperaudiopacket;638,22889
    uint32_t i_constLPCMframesperaudiopacket;639,22930
    int     i_qt_description;642,22996
    uint8_t *p_qt_description;p_qt_description643,23026
} MP4_Box_data_sample_soun_t;645,23058
typedef struct MP4_Box_data_sample_vide_s647,23089
    uint8_t  i_reserved1[i_reserved1649,23133
    uint16_t i_data_reference_index;650,23162
    uint16_t i_qt_version;652,23200
    uint16_t i_qt_revision_level;653,23227
    uint32_t i_qt_vendor;654,23261
    uint32_t i_qt_temporal_quality;656,23288
    uint32_t i_qt_spatial_quality;657,23324
    int16_t  i_width;659,23360
    int16_t  i_height;660,23382
    uint32_t i_horizresolution;662,23406
    uint32_t i_vertresolution;663,23438
    uint32_t i_qt_data_size;665,23470
    uint16_t i_qt_frame_count;666,23499
    char     sz_compressorname[sz_compressorname668,23531
    int16_t  i_depth;669,23567
    int16_t  i_qt_color_table;671,23590
    int     i_qt_image_description;674,23658
    uint8_t *p_qt_image_description;p_qt_image_description675,23694
} MP4_Box_data_sample_vide_t;677,23732
#define MP4_TEXT_DISPLAY_FLAG_DONT_DISPLAY 679,23763
#define MP4_TEXT_DISPLAY_FLAG_AUTO_SCALE 680,23819
#define MP4_TEXT_DISPLAY_FLAG_CLIP_TO_TEXT_BOX 681,23875
#define MP4_TEXT_DISPLAY_FLAG_USE_MOVIE_BG_COLOR 682,23931
#define MP4_TEXT_DISPLAY_FLAG_SHRINK_TEXT_BOX_TO_FIT 683,23987
#define MP4_TEXT_DISPLAY_FLAG_SCROLL_IN 684,24047
#define MP4_TEXT_DISPLAY_FLAG_SCROLL_OUT 685,24103
#define MP4_TEXT_DISPLAY_FLAG_HORIZONTAL_SCROLL 686,24159
#define MP4_TEXT_DISPLAY_FLAG_REVERSE_SCROLL 687,24215
#define MP4_TEXT_DISPLAY_FLAG_CONTINUOUS_SCROLL 688,24271
#define MP4_TEXT_DISPLAY_FLAG_FLOW_HORIZONTAL 689,24327
#define MP4_TEXT_DISPLAY_FLAG_CONTINUOUS_KARAOKE 690,24384
#define MP4_TEXT_DISPLAY_FLAG_DROP_SHADOW 691,24441
#define MP4_TEXT_DISPLAY_FLAG_ANTI_ALIAS 692,24498
#define MP4_TEXT_DISPLAY_FLAG_KEYED_TEXT 693,24555
#define MP4_TEXT_DISPLAY_FLAG_INVERSE_HILITE 694,24612
#define MP4_TEXT_DISPLAY_FLAG_COLOR_HILITE 695,24669
#define MP4_TEXT_DISPLAY_FLAG_WRITE_VERTICALLY 696,24726
    uint32_t i_reserved1;700,24801
    uint16_t i_reserved2;701,24827
    uint16_t i_data_reference_index;703,24854
    uint32_t i_display_flags;705,24892
    int8_t i_justification_horizontal;707,24964
    int8_t i_justification_vertical;708,25038
    uint16_t i_background_color[i_background_color710,25113
    uint16_t i_text_box_top;712,25150
    uint16_t i_text_box_left;713,25179
    uint16_t i_text_box_bottom;714,25209
    uint16_t i_text_box_right;715,25241
    uint32_t i_reserved3;717,25273
    uint16_t i_font_id;719,25300
    uint8_t  i_font_face;720,25324
    uint8_t  i_font_size;721,25350
    uint32_t i_font_color;722,25376
} MP4_Box_data_sample_text_t;725,25435
    uint8_t  i_reserved1[i_reserved1729,25483
    uint16_t i_data_reference_index;730,25512
} MP4_Box_data_sample_clcp_t;732,25550
typedef struct MP4_Box_data_sample_hint_s734,25581
    uint8_t  i_reserved1[i_reserved1736,25625
    uint16_t i_data_reference_index;737,25654
    uint8_t *p_data;p_data739,25692
} MP4_Box_data_sample_hint_t;741,25714
typedef struct MP4_Box_data_rrtp_sample_s743,25745
    uint16_t i_hinttrackversion;745,25789
    uint16_t i_highestcompatibleversion;746,25822
    uint32_t i_maxpacketsize;747,25863
    uint8_t *p_additionaldata;p_additionaldata749,25894
} MP4_Box_data_rrtp_sample_t;751,25926
typedef struct MP4_Box_data_timescale_entry_s753,25957
    uint32_t i_timescale;755,26005
} MP4_Box_data_timescale_entry_t;757,26032
typedef struct MP4_Box_data_time_offset_s759,26067
    uint32_t i_offset;761,26111
} MP4_Box_data_time_offset_t;763,26135
typedef struct MP4_Box_data_timestampsynchrony_s765,26166
    uint8_t i_reserved_timestamp_sync;767,26217
} MP4_Box_data_timestampsynchrony_t;769,26257
typedef struct MP4_Box_data_moviehintinformation_rtp_s771,26295
    uint32_t i_description_format;773,26352
    unsigned char *psz_text;psz_text774,26387
} MP4_Box_data_moviehintinformation_rtp_t;776,26417
typedef struct MP4_Box_data_sdp_s778,26461
    char *psz_text;psz_text780,26497
} MP4_Box_data_sdp_t;782,26518
typedef struct MP4_Box_data_tims_s784,26541
    uint32_t i_timescale;786,26578
} MP4_Box_data_tims_t;788,26605
typedef struct MP4_Box_data_tsro_s790,26629
    int32_t i_offset;792,26666
} MP4_Box_data_tsro_t;794,26689
typedef struct MP4_Box_data_tssy_s796,26713
    uint8_t i_reserved_timestamp_sync;798,26750
} MP4_Box_data_tssy_t;800,26790
typedef struct MP4_Box_data_stsd_s802,26814
    uint8_t  i_version;804,26851
    uint32_t i_flags;805,26875
    uint32_t i_entry_count;807,26898
} MP4_Box_data_stsd_t;811,26987
typedef struct MP4_Box_data_stsz_s814,27012
    uint8_t  i_version;816,27049
    uint32_t i_flags;817,27073
    uint32_t i_sample_size;819,27096
    uint32_t i_sample_count;820,27124
    uint32_t *i_entry_size;i_entry_size822,27154
} MP4_Box_data_stsz_t;824,27225
typedef struct MP4_Box_data_stz2_s826,27249
    uint8_t  i_version;828,27286
    uint32_t i_flags;829,27310
    uint32_t i_sample_size;831,27333
    uint8_t  i_field_size;832,27375
    uint32_t i_sample_count;833,27402
    uint32_t *i_entry_size;i_entry_size835,27432
} MP4_Box_data_stz2_t;837,27512
typedef struct MP4_Box_data_stsc_s839,27536
    uint8_t  i_version;841,27573
    uint32_t i_flags;842,27597
    uint32_t i_entry_count;844,27620
    uint32_t *i_first_chunk;i_first_chunk846,27649
    uint32_t *i_samples_per_chunk;i_samples_per_chunk847,27702
    uint32_t *i_sample_description_index;i_sample_description_index848,27737
} MP4_Box_data_stsc_t;850,27780
typedef struct MP4_Box_data_co64_s853,27805
    uint8_t  i_version;855,27842
    uint32_t i_flags;856,27866
    uint32_t i_entry_count;858,27889
    uint64_t *i_chunk_offset;i_chunk_offset860,27918
} MP4_Box_data_co64_t;862,27949
typedef struct MP4_Box_data_stss_s865,27974
    uint8_t  i_version;867,28011
    uint32_t i_flags;868,28035
    uint32_t i_entry_count;870,28058
    uint32_t *i_sample_number;i_sample_number872,28087
} MP4_Box_data_stss_t;874,28119
typedef struct MP4_Box_data_stsh_s876,28143
    uint8_t  i_version;878,28180
    uint32_t i_flags;879,28204
    uint32_t i_entry_count;881,28227
    uint32_t *i_shadowed_sample_number;i_shadowed_sample_number883,28256
    uint32_t *i_sync_sample_number;i_sync_sample_number884,28296
} MP4_Box_data_stsh_t;886,28333
typedef struct MP4_Box_data_stdp_s888,28357
    uint8_t  i_version;890,28394
    uint32_t i_flags;891,28418
    uint16_t *i_priority;i_priority893,28441
} MP4_Box_data_stdp_t;895,28468
typedef struct MP4_Box_data_padb_s897,28492
    uint8_t  i_version;899,28529
    uint32_t i_flags;900,28553
    uint32_t i_sample_count;902,28576
    uint16_t *i_reserved1;i_reserved1904,28606
    uint16_t *i_pad2;i_pad2905,28647
    uint16_t *i_reserved2;i_reserved2906,28688
    uint16_t *i_pad1;i_pad1907,28729
} MP4_Box_data_padb_t;910,28772
typedef struct MP4_Box_data_elst_s913,28797
    uint8_t  i_version;915,28834
    uint32_t i_flags;916,28858
    uint32_t i_entry_count;918,28881
    uint64_t *i_segment_duration;i_segment_duration920,28910
    int64_t  *i_media_time;i_media_time921,28944
    uint16_t *i_media_rate_integer;i_media_rate_integer922,28972
    uint16_t *i_media_rate_fraction;i_media_rate_fraction923,29008
} MP4_Box_data_elst_t;926,29047
typedef struct MP4_Box_data_cprt_s928,29071
    uint8_t  i_version;930,29108
    uint32_t i_flags;931,29132
    char     rgs_language[rgs_language933,29155
    char *psz_notice;psz_notice935,29204
} MP4_Box_data_cprt_t;936,29226
typedef struct MP4_descriptor_decoder_config_s940,29281
    uint8_t i_objectProfileIndication;942,29330
    uint8_t i_streamType;943,29369
    int     b_upStream;944,29395
    int     i_buffer_sizeDB;945,29419
    int     i_max_bitrate;946,29448
    int     i_avg_bitrate;947,29475
    int     i_decoder_specific_info_len;949,29503
    uint8_t *p_decoder_specific_info;p_decoder_specific_info950,29544
} MP4_descriptor_decoder_config_t;953,29610
typedef struct MP4_descriptor_SL_config_s955,29646
    int i_dummy;958,29691
} MP4_descriptor_SL_config_t;960,29747
typedef struct MP4_descriptor_ES_s963,29779
    uint16_t i_ES_ID;965,29816
    int      b_stream_dependence;966,29838
    int      b_url;967,29872
    int      b_OCRstream;968,29892
    int      i_stream_priority;969,29918
    int      i_depend_on_ES_ID;971,29951
    unsigned char *psz_URL;psz_URL973,30017
    uint16_t i_OCR_ES_ID;975,30046
    MP4_descriptor_decoder_config_t *p_decConfigDescr;p_decConfigDescr976,30099
    MP4_descriptor_SL_config_t *p_slConfigDescr;p_slConfigDescr978,30155
} MP4_descriptor_ES_t;982,30237
typedef struct MP4_Box_data_esds_s985,30281
    uint8_t  i_version;987,30318
    uint32_t i_flags;988,30342
    MP4_descriptor_ES_t es_descriptor;990,30365
} MP4_Box_data_esds_t;992,30405
typedef struct MP4_Box_data_dcom_s995,30430
    uint32_t i_algorithm;997,30467
} MP4_Box_data_dcom_t;999,30507
typedef struct MP4_Box_data_cmvd_s1001,30531
    uint32_t i_uncompressed_size;1003,30568
    uint32_t i_compressed_size;1004,30602
    int     b_compressed;1006,30635
    uint8_t *p_data;p_data1007,30714
} MP4_Box_data_cmvd_t;1009,30736
typedef struct MP4_Box_data_cmov_s1011,30760
    struct MP4_Box_s *p_moov;p_moov1013,30797
} MP4_Box_data_cmov_t;1015,30852
    uint32_t i_type;1019,30893
} MP4_Box_data_frma_t;1020,30914
    uint32_t i_init;1024,30955
    uint32_t i_encr;1025,30976
    uint32_t i_decr;1026,30997
} MP4_Box_data_skcr_t;1027,31018
    uint8_t  i_version;1031,31059
    uint32_t i_flags;1032,31083
    uint32_t i_ref_type;1034,31106
    char     *psz_ref;psz_ref1035,31131
} MP4_Box_data_rdrf_t;1037,31155
    uint8_t  i_version;1041,31196
    uint32_t i_flags;1042,31220
    uint32_t i_rate;1044,31243
} MP4_Box_data_rmdr_t;1046,31265
    uint8_t  i_version;1050,31306
    uint32_t i_flags;1051,31330
    uint32_t i_gestaltType;1053,31353
    uint32_t i_val1;1054,31381
    uint32_t i_val2;1055,31402
    uint16_t i_checkType;1056,31423
} MP4_Box_data_rmvc_t;1059,31544
    uint8_t  i_version;1063,31585
    uint32_t i_flags;1064,31609
} MP4_Box_data_rmcd_t;1067,31633
    uint32_t i_quality;1071,31674
} MP4_Box_data_rmqu_t;1073,31699
typedef struct MP4_Box_data_mfhd_s1075,31723
    uint8_t  i_version;1077,31760
    uint32_t i_flags;1078,31784
    uint32_t i_sequence_number;1080,31807
} MP4_Box_data_mfhd_t;1082,31840
typedef struct MP4_Box_sidx_item_s1084,31864
    bool     b_reference_type;1086,31901
    uint32_t i_referenced_size;1087,31932
    uint32_t i_subsegment_duration;1088,31964
    bool     b_starts_with_SAP;1089,32000
    uint8_t  i_SAP_type;1090,32032
    uint32_t i_SAP_delta_time;1091,32057
} MP4_Box_sidx_item_t;1093,32089
typedef struct MP4_Box_data_sidx_s1095,32113
    uint8_t  i_version;1097,32150
    uint32_t i_flags;1098,32174
    uint32_t i_reference_ID;1100,32197
    uint32_t i_timescale;1101,32226
    uint64_t i_earliest_presentation_time;1102,32252
    uint64_t i_first_offset;1103,32295
    uint16_t i_reference_count;1104,32324
    MP4_Box_sidx_item_t *p_items;p_items1106,32357
} MP4_Box_data_sidx_t;1108,32392
#define MP4_TFHD_BASE_DATA_OFFSET 1110,32416
#define MP4_TFHD_SAMPLE_DESC_INDEX 1111,32463
#define MP4_TFHD_DFLT_SAMPLE_DURATION 1112,32510
#define MP4_TFHD_DFLT_SAMPLE_SIZE 1113,32557
#define MP4_TFHD_DFLT_SAMPLE_FLAGS 1114,32604
#define MP4_TFHD_DURATION_IS_EMPTY 1115,32651
#define MP4_TFHD_DEFAULT_BASE_IS_MOOF 1116,32699
typedef struct MP4_Box_data_tfhd_s1117,32747
    uint8_t  i_version;1119,32784
    bool     b_empty;1120,32808
    uint32_t i_flags;1121,32830
    uint32_t i_track_ID;1122,32852
    uint64_t i_base_data_offset;1125,32904
    uint32_t i_sample_description_index;1126,32937
    uint32_t i_default_sample_duration;1127,32978
    uint32_t i_default_sample_size;1128,33018
    uint32_t i_default_sample_flags;1129,33054
} MP4_Box_data_tfhd_t;1131,33092
#define MP4_TRUN_DATA_OFFSET 1133,33116
#define MP4_TRUN_FIRST_FLAGS 1134,33160
#define MP4_TRUN_SAMPLE_DURATION 1135,33204
#define MP4_TRUN_SAMPLE_SIZE 1136,33248
#define MP4_TRUN_SAMPLE_FLAGS 1137,33292
#define MP4_TRUN_SAMPLE_TIME_OFFSET 1138,33337
typedef struct MP4_descriptor_trun_sample_t1139,33382
    uint32_t i_duration;1141,33428
    uint32_t i_size;1142,33453
    uint32_t i_flags;1143,33474
    uint32_t i_composition_time_offset;1144,33496
} MP4_descriptor_trun_sample_t;1145,33575
typedef struct MP4_Box_data_trun_s1147,33608
    uint8_t  i_version;1149,33645
    uint32_t i_flags;1150,33669
    uint32_t i_sample_count;1151,33691
    int32_t i_data_offset;1154,33747
    uint32_t i_first_sample_flags;1155,33774
    MP4_descriptor_trun_sample_t *p_samples;p_samples1157,33810
} MP4_Box_data_trun_t;1159,33856
typedef struct MP4_Box_data_tfdt_s1161,33880
    uint8_t  i_version;1163,33917
    uint32_t i_flags;1164,33941
    int64_t  i_base_media_decode_time;1165,33963
} MP4_Box_data_tfdt_t;1167,34003
    uint32_t i_date;1171,34044
    uint32_t i_type;1172,34065
    uint16_t i_index;1173,34086
} MP4_Box_data_pnot_t;1174,34108
    char *psz_text;psz_text1178,34149
} MP4_Box_data_string_t;1180,34170
    uint8_t *p_blob;p_blob1184,34213
    uint32_t i_blob;1185,34234
} MP4_Box_data_binary_t;1186,34255
    uint32_t i_entry_count;1190,34298
    uint32_t *i_track_ID;i_track_ID1191,34326
} MP4_Box_data_tref_generic_t;1193,34353
    uint8_t  i_version;1197,34402
    uint32_t i_flags;1198,34426
    uint8_t i_chapter;1200,34449
        char    *psz_name;psz_name1203,34489
        int64_t  i_start;1204,34516
    } chapter[chapter1205,34542
} MP4_Box_data_chpl_t;1206,34562
    uint32_t i_chapter_count;1210,34603
    uint32_t *pi_chapter_start;pi_chapter_start1211,34633
} MP4_Box_data_HMMT_t;1213,34666
    uint8_t i_version;1217,34707
    uint8_t i_profile;1218,34730
    uint8_t i_profile_compatibility;1219,34753
    uint8_t i_level;1220,34790
    uint8_t i_reserved1;1222,34812
    uint8_t i_length_size;1223,34854
    uint8_t i_reserved2;1225,34882
    uint8_t  i_sps;1226,34923
    uint16_t *i_sps_length;i_sps_length1227,34943
    uint8_t  **sps;sps1228,34971
    uint8_t  i_pps;1230,34992
    uint16_t *i_pps_length;i_pps_length1231,35012
    uint8_t  **pps;pps1232,35040
    int     i_avcC;1235,35103
    uint8_t *p_avcC;p_avcC1236,35123
} MP4_Box_data_avcC_t;1238,35145
    uint8_t i_profile;1242,35186
    uint8_t i_level;1243,35209
    uint8_t i_bit_depth;1244,35230
    uint8_t i_color_space;1245,35255
    uint8_t i_chroma_subsampling;1246,35282
    uint8_t i_xfer_function;1247,35316
    uint8_t i_fullrange;1248,35345
    uint16_t i_codec_init_datasize;1249,35370
    uint8_t *p_codec_init_data;p_codec_init_data1250,35406
} MP4_Box_data_vpcC_t;1251,35438
    WAVEFORMATEX Format;1255,35479
    uint32_t i_extra;1256,35504
    char    *p_extra;p_extra1257,35526
} MP4_Box_data_WMA2_t;1258,35548
    VLC_BITMAPINFOHEADER bmiHeader;1262,35589
    uint32_t i_extra;1263,35625
    char    *p_extra;p_extra1264,35647
} MP4_Box_data_strf_t;1265,35669
    uint8_t i_stream_number;1269,35710
} MP4_Box_data_ASF_t;1270,35739
    uint8_t i_version;1274,35779
    uint32_t i_grouping_type;1275,35802
    uint32_t i_default_sample_description_index;1276,35832
    uint32_t i_entry_count;1277,35881
            uint8_t i_num_leading_samples_known;1282,35950
            uint8_t i_num_leading_samples;1283,35999
        } rap;1284,36042
    } *p_entries;p_entries1285,36057
} MP4_Box_data_sgpd_t;1286,36075
    uint8_t i_version;1290,36116
    uint32_t i_grouping_type;1291,36139
    uint32_t i_grouping_type_parameter;1292,36169
    uint32_t i_entry_count;1293,36209
        uint32_t *pi_sample_count;pi_sample_count1296,36254
        uint32_t *pi_group_description_index;pi_group_description_index1297,36289
    } entries;1298,36335
} MP4_Box_data_sbgp_t;1299,36350
#define MP4_CHAN_USE_CHANNELS_DESC 1302,36428
#define MP4_CHAN_USE_CHANNELS_BITMAP 1303,36475
#define MP4_CHAN_BITMAP_LEFT 1305,36529
#define MP4_CHAN_BITMAP_RIGHT 1306,36581
#define MP4_CHAN_BITMAP_CENTER 1307,36633
#define MP4_CHAN_BITMAP_LFESCREEN 1308,36685
#define MP4_CHAN_BITMAP_BACKLEFT 1309,36737
#define MP4_CHAN_BITMAP_BACKRIGHT 1310,36789
#define MP4_CHAN_BITMAP_LEFTCENTER 1311,36841
#define MP4_CHAN_BITMAP_RIGHTCENTER 1312,36893
#define MP4_CHAN_BITMAP_BACKCENTER 1313,36945
#define MP4_CHAN_BITMAP_SIDELEFT 1314,36997
#define MP4_CHAN_BITMAP_SIDERIGHT 1315,37049
#define MP4_CHAN_BITMAP_TOPCENTER 1316,37102
#define MP4_CHAN_BITMAP_TOPFRONTLEFT 1317,37155
#define MP4_CHAN_BITMAP_TOPFRONTENTER 1318,37208
#define MP4_CHAN_BITMAP_TOPFRONTRIGHT 1319,37261
#define MP4_CHAN_BITMAP_TOPBACKLEFT 1320,37314
#define MP4_CHAN_BITMAP_TOPBACKCENTER 1321,37367
#define MP4_CHAN_BITMAP_TOPBACKRIGHT 1322,37420
#define MP4_CHAN_BITMAP_MAPPING_COUNT 1324,37474
    uint32_t i_bitmap;1327,37537
    uint32_t i_vlc;1328,37560
} chan_bitmap_mapping[chan_bitmap_mapping1329,37580
    uint8_t i_version;1352,38681
    uint32_t i_channels_flags;1353,38704
        uint32_t i_channels_layout_tag;1356,38766
        uint32_t i_channels_bitmap;1357,38806
        uint32_t i_channels_description_count;1358,38842
            uint32_t i_channel_label;1361,38914
            uint32_t i_channel_flags;1362,38952
            float    f_coordinates[f_coordinates1363,38990
        } *p_descriptions;p_descriptions1364,39029
    } layout;1365,39056
} MP4_Box_data_chan_t;1366,39070
    uint16_t i_data_rate;1370,39111
    uint8_t i_num_ind_sub;1371,39137
        uint8_t i_fscod;1374,39181
        uint8_t i_bsid;1375,39206
        uint8_t i_bsmod;1376,39230
        uint8_t i_acmod;1377,39255
        uint8_t i_lfeon;1378,39280
        uint8_t i_num_dep_sub;1379,39305
        uint16_t i_chan_loc;1380,39336
    } stream[stream1381,39365
} MP4_Box_data_dec3_t;1383,39383
    uint8_t i_fscod;1387,39424
    uint8_t i_bsid;1388,39445
    uint8_t i_bsmod;1389,39465
    uint8_t i_acmod;1390,39486
    uint8_t i_lfeon;1391,39507
    uint8_t i_bitrate_code;1392,39528
} MP4_Box_data_dac3_t;1394,39557
    uint8_t i_profile_level;1398,39598
    uint32_t i_vc1;1400,39628
    uint8_t *p_vc1;p_vc11401,39648
} MP4_Box_data_dvc1_t;1403,39669
    uint32_t i_flags;1407,39710
} MP4_Box_data_fiel_t;1408,39732
    uint16_t i_little_endian;1412,39773
} MP4_Box_data_enda_t;1414,39804
    uint32_t i_entry_count;1418,39845
        uint32_t i_namespace;1421,39890
        char    *psz_value;psz_value1422,39920
    } *p_entries;p_entries1423,39948
} MP4_Box_data_keys_t;1424,39966
    uint8_t  i_version;1428,40007
    uint32_t i_flags;1429,40031
    uint16_t i_object_descriptor;1431,40054
    uint8_t i_OD_profile_level;1432,40088
    uint8_t i_scene_profile_level;1433,40120
    uint8_t i_audio_profile_level;1434,40155
    uint8_t i_visual_profile_level;1435,40190
    uint8_t i_graphics_profile_level;1436,40226
} MP4_Box_data_iods_t;1438,40265
    uint32_t i_buffer_size;1442,40306
    uint32_t i_max_bitrate;1443,40334
    uint32_t i_avg_bitrate;1444,40362
} MP4_Box_data_btrt_t;1445,40390
    uint32_t i_horizontal_spacing;1449,40431
    uint32_t i_vertical_spacing;1450,40466
} MP4_Box_data_pasp_t;1451,40499
    uint8_t  i_version;1455,40540
    uint32_t i_flags;1456,40564
    uint64_t i_fragment_duration;1458,40587
} MP4_Box_data_mehd_t;1459,40621
    uint8_t  i_version;1463,40662
    uint32_t i_flags;1464,40686
    uint32_t i_track_ID;1466,40709
    uint32_t i_default_sample_description_index;1467,40734
    uint32_t i_default_sample_duration;1468,40783
    uint32_t i_default_sample_size;1469,40823
    uint32_t i_default_sample_flags;1470,40859
} MP4_Box_data_trex_t;1471,40896
    uint8_t  i_version;1475,40937
    uint32_t i_flags;1476,40961
    uint8_t *p_sample_table;p_sample_table1478,40984
} MP4_Box_data_sdtp_t;1479,41013
    uint32_t i_switch_group;1483,41054
} MP4_Box_data_tsel_t;1484,41083
    uint8_t  i_version;1488,41124
    uint32_t i_flags;1489,41148
    uint32_t i_size;1491,41171
} MP4_Box_data_mfro_t;1492,41192
    uint8_t  i_version;1496,41233
    uint32_t i_flags;1497,41257
    uint32_t i_track_ID;1499,41280
    uint32_t i_number_of_entries;1500,41305
    uint8_t i_length_size_of_traf_num;1502,41340
    uint8_t i_length_size_of_trun_num;1503,41379
    uint8_t i_length_size_of_sample_num;1504,41418
    uint32_t *p_time;p_time1506,41460
    uint32_t *p_moof_offset;p_moof_offset1507,41482
    uint8_t *p_traf_number;p_traf_number1508,41511
    uint8_t *p_trun_number;p_trun_number1509,41539
    uint8_t *p_sample_number;p_sample_number1510,41567
} MP4_Box_data_tfra_t;1511,41597
        DATA_WKT_RESERVED 1517,41653
        DATA_WKT_UTF8 1518,41684
        DATA_WKT_UTF16 1519,41711
        DATA_WKT_SJIS 1520,41739
        DATA_WKT_UTF8_SORT 1521,41766
        DATA_WKT_UTF16_SORT 1522,41798
        DATA_WKT_JPEG 1523,41831
        DATA_WKT_PNG 1524,41859
        DATA_WKT_BE_SIGNED 1525,41886
        DATA_WKT_BE_UNSIGNED 1526,41919
        DATA_WKT_BE_FLOAT32 1527,41954
        DATA_WKT_BE_FLOAT64 1528,41988
        DATA_WKT_BMP 1529,42022
        DATA_WKT_QUICKTIME_METADATA_ATOM 1530,42049
        uint16_t i_country;1534,42136
        uint16_t i_language;1535,42164
    } locale;1536,42193
    uint8_t *p_blob;p_blob1537,42207
    uint32_t i_blob;1538,42228
} MP4_Box_data_data_t;1539,42249
typedef union MP4_Box_data_s1551,42380
    MP4_Box_data_ftyp_t *p_ftyp;p_ftyp1553,42411
    MP4_Box_data_mvhd_t *p_mvhd;p_mvhd1554,42444
    MP4_Box_data_mfhd_t *p_mfhd;p_mfhd1555,42477
    MP4_Box_data_sidx_t *p_sidx;p_sidx1556,42510
    MP4_Box_data_tfhd_t *p_tfhd;p_tfhd1557,42543
    MP4_Box_data_trun_t *p_trun;p_trun1558,42576
    MP4_Box_data_tfdt_t *p_tfdt;p_tfdt1559,42609
    MP4_Box_data_tkhd_t *p_tkhd;p_tkhd1560,42642
    MP4_Box_data_mdhd_t *p_mdhd;p_mdhd1561,42675
    MP4_Box_data_hdlr_t *p_hdlr;p_hdlr1562,42708
    MP4_Box_data_vmhd_t *p_vmhd;p_vmhd1563,42741
    MP4_Box_data_smhd_t *p_smhd;p_smhd1564,42774
    MP4_Box_data_hmhd_t *p_hmhd;p_hmhd1565,42807
    MP4_Box_data_url_t  *p_url;p_url1566,42840
    MP4_Box_data_urn_t  *p_urn;p_urn1567,42872
    MP4_Box_data_lcont_t *p_lcont;p_lcont1568,42904
    MP4_Box_data_stts_t *p_stts;p_stts1569,42939
    MP4_Box_data_ctts_t *p_ctts;p_ctts1570,42972
    MP4_Box_data_colr_t *p_colr;p_colr1571,43005
    MP4_Box_data_sbgp_t *p_sbgp;p_sbgp1573,43039
    MP4_Box_data_sgpd_t *p_sgpd;p_sgpd1574,43072
    MP4_Box_data_sample_vide_t *p_sample_vide;p_sample_vide1576,43106
    MP4_Box_data_sample_soun_t *p_sample_soun;p_sample_soun1577,43153
    MP4_Box_data_sample_text_t *p_sample_text;p_sample_text1578,43200
    MP4_Box_data_sample_clcp_t *p_sample_clcp;p_sample_clcp1579,43247
    MP4_Box_data_sample_hint_t *p_sample_hint;p_sample_hint1580,43294
    MP4_Box_data_esds_t *p_esds;p_esds1582,43342
    MP4_Box_data_avcC_t *p_avcC;p_avcC1583,43375
    MP4_Box_data_dac3_t *p_dac3;p_dac31584,43408
    MP4_Box_data_dec3_t *p_dec3;p_dec31585,43441
    MP4_Box_data_dvc1_t *p_dvc1;p_dvc11586,43474
    MP4_Box_data_fiel_t *p_fiel;p_fiel1587,43507
    MP4_Box_data_chan_t *p_chan;p_chan1588,43540
    MP4_Box_data_enda_t *p_enda;p_enda1589,43573
    MP4_Box_data_keys_t *p_keys;p_keys1590,43606
    MP4_Box_data_iods_t *p_iods;p_iods1591,43639
    MP4_Box_data_btrt_t *p_btrt;p_btrt1592,43672
    MP4_Box_data_pasp_t *p_pasp;p_pasp1593,43705
    MP4_Box_data_trex_t *p_trex;p_trex1594,43738
    MP4_Box_data_mehd_t *p_mehd;p_mehd1595,43771
    MP4_Box_data_sdtp_t *p_sdtp;p_sdtp1596,43804
    MP4_Box_data_tsel_t *p_tsel;p_tsel1597,43837
    MP4_Box_data_load_t *p_load;p_load1598,43870
    MP4_Box_data_vpcC_t *p_vpcC;p_vpcC1599,43903
    MP4_Box_data_tfra_t *p_tfra;p_tfra1601,43937
    MP4_Box_data_mfro_t *p_mfro;p_mfro1602,43970
    MP4_Box_data_sdp_t *p_sdp;p_sdp1604,44004
    MP4_Box_data_tims_t *p_tims;p_tims1606,44036
    MP4_Box_data_tsro_t *p_tsro;p_tsro1607,44069
    MP4_Box_data_tssy_t *p_tssy;p_tssy1608,44102
    MP4_Box_data_stsz_t *p_stsz;p_stsz1610,44136
    MP4_Box_data_stz2_t *p_stz2;p_stz21611,44169
    MP4_Box_data_stsc_t *p_stsc;p_stsc1612,44202
    MP4_Box_data_co64_t *p_co64;p_co641613,44235
    MP4_Box_data_stss_t *p_stss;p_stss1614,44268
    MP4_Box_data_stsh_t *p_stsh;p_stsh1615,44301
    MP4_Box_data_stdp_t *p_stdp;p_stdp1616,44334
    MP4_Box_data_padb_t *p_padb;p_padb1617,44367
    MP4_Box_data_elst_t *p_elst;p_elst1618,44400
    MP4_Box_data_cprt_t *p_cprt;p_cprt1619,44433
    MP4_Box_data_dcom_t *p_dcom;p_dcom1621,44467
    MP4_Box_data_cmvd_t *p_cmvd;p_cmvd1622,44500
    MP4_Box_data_cmov_t *p_cmov;p_cmov1623,44533
    MP4_Box_data_moviehintinformation_rtp_t *p_moviehintinformation_rtp;p_moviehintinformation_rtp1625,44567
    MP4_Box_data_frma_t *p_frma;p_frma1627,44641
    MP4_Box_data_skcr_t *p_skcr;p_skcr1628,44674
    MP4_Box_data_rdrf_t *p_rdrf;p_rdrf1630,44708
    MP4_Box_data_rmdr_t *p_rmdr;p_rmdr1631,44741
    MP4_Box_data_rmqu_t *p_rmqu;p_rmqu1632,44774
    MP4_Box_data_rmvc_t *p_rmvc;p_rmvc1633,44807
    MP4_Box_data_pnot_t *p_pnot;p_pnot1635,44841
    MP4_Box_data_chpl_t *p_chpl;p_chpl1636,44874
    MP4_Box_data_HMMT_t *p_hmmt;p_hmmt1637,44907
    MP4_Box_data_tref_generic_t *p_tref_generic;p_tref_generic1638,44940
    MP4_Box_data_tfrf_t *p_tfrf;p_tfrf1640,44990
    MP4_Box_data_tfxd_t *p_tfxd;p_tfxd1641,45023
    MP4_Box_data_WMA2_t *p_WMA2;p_WMA21642,45056
    MP4_Box_data_strf_t *p_strf;p_strf1643,45131
    MP4_Box_data_ASF_t  *p_asf;p_asf1644,45206
    MP4_Box_data_string_t *p_string;p_string1647,45308
    MP4_Box_data_binary_t *p_binary;p_binary1648,45345
    MP4_Box_data_data_t *p_data;p_data1649,45382
    void                *p_payload;p_payload1651,45416
} MP4_Box_data_t;1652,45475
#define BOXDATA(1654,45494
typedef struct MP4_Box_s MP4_Box_t;1656,45533
struct MP4_Box_s1658,45600
    uint64_t     i_pos;1660,45619
    uint32_t     i_type;1662,45673
    uint32_t     i_shortsize;1663,45698
    uint32_t     i_handler;1664,45728
    uint32_t     i_index;1665,45762
        BOX_FLAG_NONE 1669,45833
        BOX_FLAG_INCOMPLETE,1670,45860
    UUID_t       i_uuid;1673,45916
    uint64_t     i_size;1675,45973
    MP4_Box_t *p_father;p_father1677,46026
    MP4_Box_t *p_first;p_first1678,46083
    MP4_Box_t *p_last;p_last1679,46145
    MP4_Box_t *p_next;p_next1680,46168
    void (*pf_free)pf_free1682,46244
    MP4_Box_data_t   data;1684,46330
static inline size_t mp4_box_headersize(1688,46472
#define MP4_GETX_PRIVATE(1695,46647
#define MP4_GET1BYTE(1701,46829
#define MP4_GET2BYTES(1702,46894
#define MP4_GET3BYTES(1703,46966
#define MP4_GET4BYTES(1704,47040
#define MP4_GET8BYTES(1705,47113
#define MP4_GETFOURCC(1706,47186
#define MP4_GET2BYTESLE(1709,47313
#define MP4_GET4BYTESLE(1710,47387
#define MP4_GET8BYTESLE(1711,47462
#define MP4_GETVERSIONFLAGS(1713,47538
#define MP4_GETSTRINGZ(1717,47657
#define MP4_READBOX_ENTER_PARTIAL(1735,48166
#define MP4_READBOX_ENTER(1761,49085
#define MP4_READBOX_EXIT(1764,49223
#define MP4_BOX_TYPE_ASCII(1779,49628
static inline uint32_t Get24bBE(1781,49703
static inline void GetUUID(1786,49811
static inline int CmpUUID(1791,49918
static const UUID_t TfrfBoxUUID 1796,50020
static const UUID_t TfxdBoxUUID 1800,50193

stream_filter/hds/hds.c,5045
typedef struct chunk_s35,1495
    int64_t     duration;37,1520
    uint64_t    timestamp;38,1593
    uint32_t    frag_num;39,1620
    uint32_t    seg_num;40,1646
    uint32_t    frun_entry;41,1671
    uint32_t    data_len;43,1748
    uint32_t    mdat_pos;45,1775
    uint32_t    mdat_len;46,1830
    void        *next;next48,1857
    uint8_t     *mdat_data;mdat_data50,1881
    uint8_t     *data;data51,1909
    bool        failed;52,1932
    bool        eof;53,1956
} chunk_t;54,1977
typedef struct segment_run_s56,1989
    uint32_t first_segment;58,2020
    uint32_t fragments_per_segment;59,2048
} segment_run_t;60,2084
typedef struct fragment_run_s62,2102
    uint32_t fragment_number_start;64,2134
    uint32_t fragment_duration;65,2170
    uint64_t fragment_timestamp;66,2202
    uint8_t  discont;67,2235
} fragment_run_t;68,2257
typedef struct hds_stream_s70,2276
    chunk_t        *chunks_head;chunks_head73,2338
    chunk_t        *chunks_livereadpos;chunks_livereadpos74,2371
    chunk_t        *chunks_downloadpos;chunks_downloadpos75,2411
    char*          quality_segment_modifier;77,2452
    uint64_t       download_leadtime;80,2538
    uint32_t       afrt_timescale;83,2606
    uint32_t       timescale;86,2688
    uint64_t       live_current_time;87,2718
    uint32_t       bitrate;90,2787
    vlc_mutex_t    abst_lock;92,2816
    vlc_mutex_t    dl_lock;94,2847
    vlc_cond_t     dl_cond;95,2875
    char*          abst_url;98,2934
    char*          url;101,3018
    uint8_t*       metadata;102,3042
    size_t         metadata_len;103,3071
    char*          movie_id;106,3150
#define MAX_HDS_SERVERS 108,3180
    char*          server_entries[server_entries109,3207
    uint8_t        server_entry_count;110,3259
#define MAX_HDS_SEGMENT_RUNS 112,3299
    segment_run_t  segment_runs[segment_runs113,3332
    uint8_t        segment_run_count;114,3387
#define MAX_HDS_FRAGMENT_RUNS 116,3426
    fragment_run_t fragment_runs[fragment_runs117,3462
    uint32_t       fragment_run_count;118,3519
} hds_stream_t;119,3558
#define MAX_REQUEST_SIZE 122,3632
#define BITRATE_AS_BYTES_PER_SECOND 124,3673
struct stream_sys_t126,3717
    char         *base_url;base_url128,3739
    vlc_thread_t live_thread;129,3803
    vlc_thread_t dl_thread;130,3833
    uint64_t     chunk_count;134,3991
    vlc_array_t  *hds_streams;hds_streams136,4022
    uint8_t      *flv_header;flv_header141,4206
    size_t       flv_header_len;142,4236
    size_t       flv_header_bytes_sent;143,4269
    uint64_t     duration_seconds;144,4309
    bool         live;146,4345
    bool         closed;147,4368
typedef struct _bootstrap_info 150,4397
    uint8_t* data;151,4430
    char*    id;152,4449
    char*    url;153,4466
    char*    profile;154,4484
    int      data_len;155,4506
} bootstrap_info;156,4529
typedef struct _media_info 158,4548
    char*    stream_id;159,4577
    char*    media_url;160,4601
    char*    bootstrap_id;161,4625
    uint8_t* metadata;162,4652
    size_t   metadata_len;163,4675
    uint32_t bitrate;164,4702
} media_info;165,4724
#define MAX_BOOTSTRAP_INFO 167,4739
#define MAX_MEDIA_ELEMENTS 168,4769
#define MAX_XML_DEPTH 169,4799
typedef struct _manifest 171,4826
    char* element_stack[element_stack172,4853
    bootstrap_info bootstraps[bootstraps173,4893
    media_info medias[medias174,4944
    xml_reader_t *vlc_reader;vlc_reader175,4987
} manifest_t;176,5017
static unsigned char flv_header_bytes[flv_header_bytes178,5032
static unsigned char amf_object_end[amf_object_end194,5358
#define FLV_FILE_HEADER_LEN 196,5418
#define FLV_TAG_HEADER_LEN 197,5471
#define SCRIPT_TAG 198,5501
vlc_module_begin(206,5780
static bool isHDS(224,6324
static uint64_t get_stream_size(252,6924
static uint8_t* parse_asrt(271,7368
static uint8_t* parse_afrt(377,9995
static inline chunk_t* chunk_new(496,13272
static void chunk_free(502,13379
static void parse_BootstrapData(508,13474
static bool is_whitespace(678,17986
static void whitespace_substr(689,18222
static uint32_t find_chunk_mdat(706,18638
static uint8_t* download_chunk(759,20078
static void* download_thread(853,22436
static chunk_t* generate_new_chunk(919,24357
static void maintain_live_chunks(1047,28751
static void* live_thread(1099,30218
static int init_Manifest(1181,32450
static void cleanup_Manifest(1196,32771
static void cleanup_threading(1221,33430
static void write_int_24(1228,33619
static void write_int_32(1235,33789
static size_t write_flv_header_and_metadata(1243,34004
static void initialize_header_and_metadata(1291,35163
static int parse_Manifest(1298,35424
#define TIMESCALE 1324,36024
static void hds_free(1586,46110
static void SysCleanup(1613,46699
static int Open(1624,46989
static void Close(1688,48467
static int send_flv_header(1712,49004
static unsigned read_chunk_data(1733,49612
static inline bool header_unfinished(1827,52424
static ssize_t Read(1832,52554
static int Control(1850,53067

lua/libs/stream.c,429
#   define  _GNU_SOURCE29,1400
static const luaL_Reg vlclua_stream_reg[vlclua_stream_reg51,1971
static int vlclua_stream_new_inner(58,2167
static int vlclua_stream_new(83,2794
static int vlclua_memory_stream_new(100,3363
static int vlclua_stream_read(109,3845
static int vlclua_stream_readline(126,4307
static int vlclua_stream_add_filter(140,4638
static int vlclua_stream_delete(190,6062
void luaopen_stream(200,6403

stream_out/rtcp.c,329
# define SOL_IP 41,1500
struct rtcp_sender_t58,2259
    size_t   length;60,2282
    uint8_t  payload[payload61,2329
    int      handle;62,2375
    uint32_t packets;64,2424
    uint32_t bytes;65,2469
    unsigned counter;66,2512
rtcp_sender_t *OpenRTCP OpenRTCP70,2585
void CloseRTCP 178,5497
void SendRTCP 203,6225

access/mtp.c,243
vlc_module_begin(56,2065
struct access_sys_t76,2716
    int fd;78,2738
static int Open(84,2936
static void Close(162,5474
static ssize_t Read(177,6043
static int Seek(209,6933
static int Control(221,7314
static int open_file(274,8790

logger/syslog.c,856
#define VLC_MODULE_LICENSE 26,1141
static const int priorities[priorities33,1281
static void Log(40,1447
#define DEFINE_SYSLOG_FACILITY 62,2065
#define DEF(74,2406
static const char *const fac_names[fac_names75,2425
#undef  DEF76,2492
#define DEF(77,2504
static const int         fac_ids[fac_ids78,2523
#undef  DEF79,2588
#undef  DEFINE_SYSLOG_FACILITY80,2600
static int var_InheritFacility(82,2632
static const char default_ident[default_ident102,3143
static vlc_log_cb Open(104,3189
static void Close(129,3821
#define SYSLOG_TEXT 138,3954
#define SYSLOG_LONGTEXT 139,4000
#define SYSLOG_DEBUG_TEXT 141,4079
#define SYSLOG_DEBUG_LONGTEXT 142,4126
#define SYSLOG_IDENT_TEXT 144,4201
#define SYSLOG_IDENT_LONGTEXT 145,4242
#define SYSLOG_FACILITY_TEXT 147,4311
#define SYSLOG_FACILITY_LONGTEXT 148,4355
vlc_module_begin(150,4420

access/rtp/input.c,196
#define DEFAULT_MRU 44,1302
static void rtp_process 49,1402
static int rtp_timeout 85,2320
void *rtp_dgram_thread rtp_dgram_thread103,2686
void *rtp_stream_thread rtp_stream_thread191,4923

logger/journal.c,131
static const int priorities[priorities33,1262
static void Log(40,1428
static vlc_log_cb Open(67,2343
vlc_module_begin(76,2499

video_output/win32/glwin32.c,407
#define GLEW_STATIC33,1322
#define HW_GPU_AFFINITY_TEXT 45,1660
vlc_module_begin(47,1709
static void DestroyGPUAffinityDC(118,4312
static int Open(153,5379
static void Close(243,7908
static picture_pool_t *Pool(Pool265,8378
static void Prepare(274,8595
static void Display(281,8790
static void Manage 294,9091
static void Swap(305,9371
static void *OurGetProcAddress(OurGetProcAddress312,9475

meta_engine/folder.c,113
static const char* cover_files[cover_files41,1551
static const int i_covers 51,1836
vlc_module_begin 62,2311

demux/smooth/playlist/SmoothSegment.cpp,83
SmoothSegment::SmoothSegment(33,1328
void SmoothSegment::onChunkDownload(39,1428

hw/vdpau/sharpen.c,537
struct filter_sys_t33,1256
    atomic_uint_fast32_t sigma;35,1278
static float vlc_to_vdp_sigma(38,1314
static int SharpenCallback(48,1486
    union { uint32_t u;52,1659
    union { uint32_t u; float f;52,1659
static picture_t *Sharpen(Sharpen60,1847
    union { uint32_t u;64,1993
    union { uint32_t u; float f;64,1993
static const char *const options[options79,2269
static int Open(81,2326
    union { uint32_t u;125,3706
    union { uint32_t u; float f;125,3706
static void Close(132,3887
vlc_module_begin(141,4092

codec/qsv.c,3628
#define SOUT_CFG_PREFIX 38,1526
#define QSV_SYNCPOINT_WAIT 41,1657
#define QSV_BUSYWAIT_TIME 43,1747
#define QSV_BITRATE_DEFAULT 45,1844
#define QSV_ALIGN(48,1945
#define SW_IMPL_TEXT 56,2268
#define SW_IMPL_LONGTEXT 57,2316
#define PROFILE_TEXT 61,2513
#define PROFILE_LONGTEXT 62,2554
#define LEVEL_TEXT 67,2772
#define LEVEL_LONGTEXT 68,2809
#define GOP_SIZE_TEXT 73,3058
#define GOP_SIZE_LONGTEXT 74,3108
#define GOP_REF_DIST_TEXT 79,3321
#define GOP_REF_DIST_LONGTEXT 80,3389
#define TARGET_USAGE_TEXT 85,3593
#define TARGET_USAGE_LONGTEXT 86,3638
#define IDR_INTERVAL_TEXT 90,3838
#define IDR_INTERVAL_LONGTEXT 91,3883
#define RATE_CONTROL_TEXT 100,4427
#define RATE_CONTROL_LONGTEXT 101,4479
#define QP_TEXT 105,4656
#define QP_LONGTEXT 106,4701
#define QPI_TEXT 110,4924
#define QPI_LONGTEXT 111,4983
#define QPP_TEXT 114,5135
#define QPP_LONGTEXT 115,5194
#define QPB_TEXT 118,5346
#define QPB_LONGTEXT 119,5405
#define MAX_BITRATE_TEXT 122,5557
#define MAX_BITRATE_LONGTEXT 123,5604
#define ACCURACY_TEXT 127,5833
#define ACCURACY_LONGTEXT 128,5885
#define CONVERGENCE_TEXT 134,6243
#define CONVERGENCE_LONGTEXT 135,6313
#define NUM_SLICE_TEXT 139,6514
#define NUM_SLICE_LONGTEXT 140,6570
#define NUM_REF_FRAME_TEXT 145,6819
#define NUM_REF_FRAME_LONGTEXT 146,6879
#define ASYNC_DEPTH_TEXT 148,6944
#define ASYNC_DEPTH_LONGTEXT 149,7005
static const int const profile_h264_list[profile_h264_list154,7248
static const char *const profile_h264_text[profile_h264_text157,7408
static const int const profile_mpeg2_list[profile_mpeg2_list160,7514
static const char *const profile_mpeg2_text[profile_mpeg2_text163,7651
static const int const level_h264_list[level_h264_list166,7744
static const char *const level_h264_text[level_h264_text168,7864
static const int const level_mpeg2_list[level_mpeg2_list172,8041
static const char *const level_mpeg2_text[level_mpeg2_text175,8193
static const int const target_usage_list[target_usage_list178,8293
static const char *const target_usage_text[target_usage_text181,8439
static const int const rc_method_list[rc_method_list184,8537
static const char *const rc_method_text[rc_method_text187,8677
vlc_module_begin 190,8758
typedef struct qsv_frame_pool_t258,12065
    mfxFrameInfo          fmt;260,12099
    mfxFrameSurface1      *frames;frames261,12171
    size_t                size;262,12253
} qsv_frame_pool_t;263,12331
typedef struct async_task_t265,12352
    mfxBitstream     bs;267,12382
    mfxSyncPoint     syncp;268,12456
    block_t          *block;block269,12524
} async_task_t;270,12617
struct encoder_sys_t272,12634
    mfxSession       session;274,12657
    mfxVideoParam    params;275,12727
    mfxIMPL          impl;276,12793
    qsv_frame_pool_t frames;277,12869
    uint64_t         dts_warn_counter;278,12942
    uint64_t         busy_warn_counter;279,13033
    uint64_t         async_depth;280,13133
    uint64_t         first_task;281,13218
    async_task_t     *tasks;tasks282,13303
    mtime_t          offset_pts;283,13374
    mtime_t          last_dts;284,13477
static inline mtime_t qsv_timestamp_to_mtime(290,13635
static inline uint64_t qsv_mtime_to_timestamp(295,13748
static int qsv_frame_pool_Init(303,13949
static void qsv_frame_pool_Destroy(328,14738
static mfxFrameSurface1 *qsv_frame_pool_Get(qsv_frame_pool_Get344,15171
static uint64_t qsv_params_get_value(376,16209
static int Open(398,16797
static void Close(588,25341
static void qsv_set_block_flags(607,25803
static void qsv_set_block_ts(622,26333
static block_t *Encode(Encode648,27596

access/rar/access.c,469
struct access_sys_t 39,1398
    stream_t               *s;s40,1420
    rar_file_t             *file;file41,1451
    const rar_file_chunk_t *chunk;chunk42,1485
    uint64_t                position;43,1520
static int Seek(46,1562
static ssize_t Read(74,2431
static int Control(101,3156
int RarAccessOpen(140,4227
        int filescount;161,4714
        rar_file_t **files;files162,4738
        unsigned int i_nbvols;163,4766
void RarAccessClose(238,7101

control/dbus/dbus_introspect.h,116
#define VLC_DBUS_DBUS_INTROSPECT_H_30,1447
static const char* psz_introspection_xml 35,1591
DBUS_METHOD(147,6302

demux/stl.c,575
vlc_module_begin(42,1720
    mtime_t start;55,2183
    mtime_t stop;56,2202
    int     index;57,2220
    int     count;58,2239
} stl_entry_t;59,2258
struct demux_sys_t 61,2274
    int         count;62,2295
    stl_entry_t *index;index63,2318
    es_out_id_t *es;es65,2343
    int         current;67,2365
    int64_t     next_date;68,2390
static int ParseInteger(71,2421
static int64_t ParseTimeCode(80,2613
static int64_t ParseTextTimeCode(87,2865
static int Control(95,3066
static int Demux(134,4249
static int Open(156,4845
static void Close(236,7307

demux/cdg.c,332
vlc_module_begin 42,1709
struct demux_sys_t57,2238
    es_format_t     fmt;59,2259
    es_out_id_t     *p_es;p_es60,2284
    date_t          pts;62,2312
#define CDG_FRAME_SIZE 65,2341
#define CDG_FRAME_RATE 66,2369
static int Open(71,2604
static int Demux(118,4274
static void Close 156,5314
static int Control(167,5637

codec/g711.c,638
vlc_module_begin 45,1646
struct decoder_sys_t60,2052
    const int16_t *table;table62,2075
    date_t end_date;63,2101
static const uint16_t pi_channels_maps[pi_channels_maps66,2126
static const int16_t ulawtos16[ulawtos1674,2344
static const int16_t alawtos16[alawtos16110,4563
static int DecoderOpen(146,6782
static void Flush(217,9086
static block_t *DecodeBlock(DecodeBlock224,9208
static void DecoderClose(297,11087
static const int8_t alaw_encode[alaw_encode305,11231
static const int8_t ulaw_encode[ulaw_encode480,24272
static int EncoderOpen(1167,76207
static block_t *EncoderEncode(EncoderEncode1187,76897

codec/subsdec.c,1747
static const char *const ppsz_encodings[ppsz_encodings49,1922
static const char *const ppsz_encoding_names[ppsz_encoding_names95,2715
static const int  pi_justification[pi_justification165,4904
static const char *const ppsz_justification_text[ppsz_justification_text166,4956
#define ENCODING_TEXT 169,5054
#define ENCODING_LONGTEXT 170,5105
#define ALIGN_TEXT 171,5177
#define ALIGN_LONGTEXT 172,5225
#define AUTODETECT_UTF8_TEXT 173,5289
#define AUTODETECT_UTF8_LONGTEXT 174,5353
vlc_module_begin 180,5577
#define NO_BREAKING_SPACE 201,6483
struct decoder_sys_t203,6520
    int                 i_align;205,6543
    vlc_iconv_t         iconv_handle;207,6624
    bool                b_autodetect_utf8;208,6704
static int OpenDecoder(222,7331
static subpicture_t *DecodeBlock(DecodeBlock323,10783
static void CloseDecoder(349,11425
static subpicture_t *ParseText(ParseText363,11917
static bool AppendCharacter(470,15373
static bool AppendWideCharacter(480,15652
static bool AppendString(490,15939
static char* ConsumeAttribute(500,16234
static char* GetTag(573,18548
static bool IsClosed(601,19470
typedef struct tag_stack tag_stack_t;623,20188
struct tag_stack624,20226
    char* psz_tagname;626,20245
    tag_stack_t *p_next;p_next627,20268
static void AppendTag(630,20297
static bool HasTag(640,20566
typedef struct style_stack style_stack_t;667,21262
struct  style_stack668,21304
    text_style_t* p_style;670,21326
    style_stack_t* p_next;671,21353
static text_style_t* DuplicateAndPushStyle(674,21384
static void PopStyle(692,21939
static text_segment_t* NewTextSegmentPushStyle(702,22180
static text_segment_t* NewTextSegmentPopStyle(713,22539
static text_segment_t* ParseSubtitles(727,23151

video_filter/deinterlace/deinterlace.c,562
#define MODE_TEXT 53,1967
#define SOUT_MODE_TEXT 55,2009
#define SOUT_MODE_LONGTEXT 56,2065
#define FILTER_CFG_PREFIX 58,2140
#define PHOSPHOR_CHROMA_TEXT 65,2366
#define PHOSPHOR_CHROMA_LONGTEXT 66,2438
#define PHOSPHOR_DIMMER_TEXT 88,3856
#define PHOSPHOR_DIMMER_LONGTEXT 89,3926
vlc_module_begin 95,4287
static void SetFilterMethod(146,6181
static void GetOutputFormat(237,8823
#define DEINTERLACE_DST_SIZE 275,9939
picture_t *Deinterlace(Deinterlace278,10018
void Flush(564,21138
int Mouse(589,21953
int Open(605,22393
void Close(777,27850

audio_filter/resampler/ugly.c,101
vlc_module_begin 48,1982
static int CreateResampler(72,2772
static block_t *DoWork(DoWork91,3548

access/oss.c,930
#define STEREO_TEXT 64,2194
#define STEREO_LONGTEXT 65,2229
#define SAMPLERATE_TEXT 67,2303
#define SAMPLERATE_LONGTEXT 68,2346
#define OSS_DEFAULT 71,2469
#define CFG_PREFIX 73,2501
vlc_module_begin 75,2528
struct buffer_t105,3494
    void *  start;107,3512
    size_t  length;108,3531
struct demux_sys_t111,3555
    const char *psz_device;psz_device113,3576
    int  i_fd;115,3632
    unsigned int i_sample_rate;118,3664
    bool b_stereo;119,3696
    size_t i_max_frame_size;120,3715
    block_t *p_block;p_block121,3744
    es_out_id_t *p_es;p_es122,3766
    int64_t i_next_demux_date;124,3790
static int FindMainDevice(127,3877
static int DemuxOpen(148,4632
static void DemuxClose(190,5914
static int DemuxControl(205,6371
static int Demux(247,7624
static block_t* GrabAudio(290,8902
static int OpenAudioDevOss(334,10153
static int OpenAudioDev(385,11381
static bool ProbeAudioDevOss(417,12482

audio_output/vlcpulse.c,432
#undef vlc_pa_error37,1272
void vlc_pa_error 38,1292
static void context_state_cb 43,1441
static bool context_wait 58,1798
static void context_event_cb(71,2147
pa_context *vlc_pa_connect vlc_pa_connect85,2548
void vlc_pa_disconnect 220,7091
void vlc_pa_rttime_free 241,7760
#undef vlc_pa_get_latency248,7933
mtime_t vlc_pa_get_latency(253,8058
    union { uint64_t u;286,9286
    union { uint64_t u; int64_t s;286,9286

lua/libs/objects.c,474
#   define  _GNU_SOURCE28,1357
static int vlclua_object_release(46,1768
static int vlclua_object_find(54,1974
static int vlclua_get_libvlc(60,2061
static int vlclua_get_playlist(68,2264
static int vlclua_get_input(80,2542
#undef vlclua_push_vlc_object92,2845
int vlclua_push_vlc_object(93,2875
static int vlclua_get_vout(111,3447
static int vlclua_get_aout(127,3846
static const luaL_Reg vlclua_object_reg[vlclua_object_reg145,4397
void luaopen_object(155,4679

video_filter/deinterlace/deinterlace.h,1574
#define VLC_DEINTERLACE_H 29,1366
static const char *const mode_list[mode_list51,1886
static const char *const mode_list_text[mode_list_text56,2084
typedef enum { DEINTERLACE_DISCARD,68,2524
typedef enum { DEINTERLACE_DISCARD, DEINTERLACE_MEAN,68,2524
typedef enum { DEINTERLACE_DISCARD, DEINTERLACE_MEAN,    DEINTERLACE_BLEND,68,2524
               DEINTERLACE_BOB,69,2600
               DEINTERLACE_BOB,     DEINTERLACE_LINEAR,69,2600
               DEINTERLACE_BOB,     DEINTERLACE_LINEAR,  DEINTERLACE_X,69,2600
               DEINTERLACE_YADIF,70,2672
               DEINTERLACE_YADIF,   DEINTERLACE_YADIF2X,70,2672
               DEINTERLACE_YADIF,   DEINTERLACE_YADIF2X, DEINTERLACE_PHOSPHOR,70,2672
               DEINTERLACE_IVTC 71,2751
               DEINTERLACE_IVTC } deinterlace_mode;71,2751
#define METADATA_SIZE 73,2804
    mtime_t pi_date[pi_date80,3000
    int     pi_nb_fields[pi_nb_fields81,3036
    bool    pb_top_field_first[pb_top_field_first82,3077
} metadata_history_t;83,3124
#define HISTORY_SIZE 85,3147
#define CUSTOM_PTS 86,3172
struct filter_sys_t90,3244
    const vlc_chroma_description_t *chroma;chroma92,3266
    uint8_t  i_mode;94,3311
    bool b_double_rate;97,3407
    bool b_half_height;98,3476
    bool b_use_frame_history;99,3546
    void (*pf_merge)pf_merge102,3679
    void (*pf_end_merge)pf_end_merge105,3841
    metadata_history_t meta;112,4007
    int i_frame_offset;116,4147
    picture_t *pp_history[pp_history119,4250
    phosphor_sys_t phosphor;122,4335
    ivtc_sys_t ivtc;123,4398

demux/adaptive/playlist/Inheritables.cpp,454
Timelineable::Timelineable(31,1224
Timelineable::~Timelineable(36,1289
TimescaleAble::TimescaleAble(41,1358
TimescaleAble::~TimescaleAble(46,1449
void TimescaleAble::setParentTimescaleAble(50,1486
Timescale TimescaleAble::inheritTimescale(55,1591
void TimescaleAble::setTimescale(65,1827
void TimescaleAble::setTimescale(70,1905
const Timescale & TimescaleAble::getTimescale(75,1985
const ID & Unique::getID(80,2066
void Unique::setID(85,2119

access/vnc.c,1362
#define RFB_USER 46,1957
#define RFB_PASSWORD 47,1989
#define RFB_CA_TEXT 48,2025
#define RFB_CA_LONGTEXT 49,2079
#define RFB_CRL_TEXT 50,2165
#define RFB_CRL_LONGTEXT 51,2226
#define RFB_CERT_TEXT 52,2294
#define RFB_CERT_LONGTEXT 53,2347
#define RFB_KEY_TEXT 54,2417
#define RFB_KEY_LONGTEXT 55,2469
#define RFB_CHROMA 57,2547
#define RFB_CHROMA_LONGTEXT 58,2591
#define RFB_FPS 59,2661
#define RFB_FPS_LONGTEXT 60,2694
#define RFB_COMPRESS 61,2791
#define RFB_COMPRESS_LONGTEXT 62,2836
#define RFB_QUALITY 63,2924
#define RFB_QUALITY_LONGTEXT 64,2964
#define CFG_PREFIX 66,3027
const char *const rgb_chromas[rgb_chromas68,3054
const char *const rgb_chromas_v[rgb_chromas_v69,3151
vlc_module_begin(77,3479
struct demux_sys_t112,4954
    vlc_thread_t thread;114,4975
    int i_cancel_state;115,5000
    rfbClient* p_client;117,5025
    int i_framebuffersize;118,5050
    block_t *p_block;p_block119,5077
    float f_fps;121,5100
    int i_frame_interval;122,5117
    mtime_t i_starttime;123,5143
    es_out_id_t *es;es125,5169
static rfbBool mallocFrameBufferHandler(134,5417
static char *getPasswordHandler(getPasswordHandler228,8261
static rfbCredential* getCredentialHandler(235,8495
static int Control(275,10120
static void *DemuxThread(DemuxThread333,11845
static int Open(383,13724
static void Close(493,17359

audio_output/vlcpulse.h,95
# define VLCPULSE_H 24,1047
#define vlc_pa_error(35,1429
#define vlc_pa_get_latency(38,1574

misc/playlist/m3u.c,83
static void DoChildren(50,1977
int Export_M3U(122,4465
int Export_M3U8(132,4709

lua/libs/objects.h,74
#define VLC_LUA_OBJECTS_H26,1251
#define vlclua_push_vlc_object(29,1343

demux/dash/DASHStream.cpp,177
DASHStream::DASHStream(28,1071
block_t * DASHStream::checkBlock(33,1142
AbstractDemuxer * DASHStream::createDemux(38,1224
AbstractStream * DASHStreamFactory::create(74,2170

arm_neon/nv12_rgb.S,128
coefficients:coefficients73,1845
nv12_rgb_neon:nv12_rgb_neon81,1982
loop_row:loop_row111,2644
loop_col:loop_col119,2804

lua/services_discovery.c,627
static const char * const ppsz_sd_options[ppsz_sd_options43,1805
struct services_discovery_sys_t48,2059
    lua_State *L;L50,2093
    char *psz_filename;psz_filename51,2111
    vlc_thread_t thread;53,2136
    vlc_mutex_t lock;54,2161
    vlc_cond_t cond;55,2183
    char **ppsz_query;ppsz_query57,2205
    int i_query;58,2228
static const luaL_Reg p_reg[p_reg60,2248
int Open_LuaSD(65,2497
void Close_LuaSD(160,5266
static void* Run(182,5980
static int Control(242,8000
static int DoSearch(272,8927
static const char *const ppsz_capabilities[ppsz_capabilities303,9792
static int FillDescriptor(311,10097

demux/demuxdump.c,291
#define ACCESS_TEXT 32,1289
#define FILE_TEXT 33,1327
#define FILE_LONGTEXT 34,1365
#define APPEND_TEXT 36,1458
#define APPEND_LONGTEXT 37,1508
vlc_module_begin 43,1678
#define DUMP_BLOCKSIZE 59,2259
static void Close(112,3655
static int Demux(123,3883
static int Control(148,4443

demux/adaptive/mp4/AtomsReader.cpp,140
AtomsReader::AtomsReader(29,1097
AtomsReader::~AtomsReader(35,1192
void AtomsReader::clean(40,1238
bool AtomsReader::parseBlock(46,1315

codec/x265.c,409
#define VLC_MODULE_LICENSE 30,1304
vlc_module_begin 45,1743
struct encoder_sys_t53,1970
    x265_encoder    *h;h55,1993
    x265_param      param;56,2017
    mtime_t         i_initial_delay;58,2045
    mtime_t         dts;60,2083
    mtime_t         initial_date;61,2108
    mtime_t         start;63,2157
static block_t *Encode(Encode67,2195
static int  Open 139,4121
static void Close(239,6977

demux/xiph.h,275
#define XIPH_MAX_HEADER_COUNT 25,1174
static inline bool xiph_IsOldFormat(28,1243
static inline unsigned int xiph_CountHeaders(36,1428
static inline int xiph_SplitHeaders(60,2043
static inline int xiph_PackHeaders(113,3763
static inline int xiph_AppendHeaders(161,5192

demux/adaptive/SegmentTracker.cpp,1062
SegmentTrackerEvent::SegmentTrackerEvent(37,1385
SegmentTrackerEvent::SegmentTrackerEvent(43,1502
SegmentTrackerEvent::SegmentTrackerEvent(50,1680
SegmentTrackerEvent::SegmentTrackerEvent(56,1798
SegmentTrackerEvent::SegmentTrackerEvent(63,1961
SegmentTrackerEvent::SegmentTrackerEvent(71,2195
SegmentTracker::SegmentTracker(78,2359
SegmentTracker::~SegmentTracker(91,2705
void SegmentTracker::setAdaptationLogic(96,2757
StreamFormat SegmentTracker::getCurrentFormat(102,2884
bool SegmentTracker::segmentsListReady(117,3309
void SegmentTracker::reset(127,3601
SegmentChunk * SegmentTracker::getNextChunk(137,3835
bool SegmentTracker::setPositionByTime(281,7775
void SegmentTracker::setPositionByNumber(298,8210
mtime_t SegmentTracker::getPlaybackTime(309,8440
mtime_t SegmentTracker::getMinAheadTime(325,8787
void SegmentTracker::notifyBufferingState(335,9041
void SegmentTracker::notifyBufferingLevel(340,9174
void SegmentTracker::registerListener(345,9334
void SegmentTracker::updateSelected(350,9455
void SegmentTracker::notify(359,9710

access/rdp.c,1753
#define boolean 35,1421
# define SoftwareGdi 50,1897
# define Fullscreen 51,1925
# define ServerHostname 52,1956
# define Username 53,1989
# define Password 54,2016
# define ServerPort 55,2043
# define EncryptionMethods 56,2068
# define ContextSize 57,2106
#define USER_TEXT 65,2211
#define USER_LONGTEXT 66,2244
#define PASS_TEXT 68,2366
#define PASS_LONGTEXT 69,2399
#define RDP_ENCRYPT 72,2531
#define RDP_FPS 73,2577
#define RDP_FPS_LONGTEXT 74,2610
#define CFG_PREFIX 76,2668
vlc_module_begin(84,2950
#define RDP_MAX_FD 104,3609
struct demux_sys_t106,3632
    vlc_thread_t thread;108,3653
    freerdp *p_instance;p_instance109,3678
    block_t *p_block;p_block110,3703
    int i_framebuffersize;111,3725
    float f_fps;113,3753
    int i_frame_interval;114,3770
    mtime_t i_starttime;115,3796
    es_out_id_t *es;es117,3822
    char *psz_hostname;psz_hostname120,3873
    int i_port;121,3897
    int i_cancel_state;123,3937
struct vlcrdp_context_t128,3980
    rdpContext rdp_context;130,4006
    demux_t *p_demux;p_demux131,4063
    rdpSettings* p_settings;132,4085
typedef struct vlcrdp_context_t vlcrdp_context_t;134,4117
static void desktopResizeHandler(142,4372
static void beginPaintHandler(189,5751
static void endPaintHandler(200,6189
static bool preConnectHandler(215,6626
static bool postConnectHandler(235,7460
static bool authenticateHandler(267,8650
static int Control(280,9276
static void *DemuxThread(DemuxThread337,10997
            void* pp_rfds[pp_rfds360,11659
            void* pp_wfds[pp_wfds361,11720
            int i_nbr;362,11759
            int i_nbw;363,11782
            struct pollfd ufds[ufds364,11805
static int Open(423,14010
static void Close(500,16281

video_filter/deinterlace/algo_ivtc.c,3109
typedef enum { IVTC_MODE_DETECTING 61,2002
               IVTC_MODE_TELECINED_NTSC_HARD 62,2052
               IVTC_MODE_TELECINED_NTSC_SOFT 63,2102
               IVTC_MODE_TELECINED_NTSC_SOFT = 2 } ivtc_mode;63,2102
typedef enum { FIELD_PAIR_TPBP 70,2372
typedef enum { FIELD_PAIR_TPBP = 0, FIELD_PAIR_TPBC 70,2372
               FIELD_PAIR_TCBP 71,2429
               FIELD_PAIR_TCBP = 2, FIELD_PAIR_TCBC 71,2429
               FIELD_PAIR_TCBN 72,2486
               FIELD_PAIR_TCBN = 4, FIELD_PAIR_TNBC 72,2486
               FIELD_PAIR_TNBN 73,2543
               FIELD_PAIR_TNBN = 6 } ivtc_field_pair;73,2543
#define NUM_CADENCE_POS 76,2640
typedef enum { CADENCE_POS_INVALID 90,3060
               CADENCE_POS_PROGRESSIVE 91,3105
               CADENCE_POS_TFF_ABC 92,3150
               CADENCE_POS_TFF_BCD 93,3195
               CADENCE_POS_TFF_CDE 94,3240
               CADENCE_POS_TFF_EAB 95,3285
               CADENCE_POS_BFF_ABC 96,3330
               CADENCE_POS_BFF_BCD 97,3375
               CADENCE_POS_BFF_CDE 98,3420
               CADENCE_POS_BFF_EAB 99,3465
               CADENCE_POS_BFF_EAB     =  8 } ivtc_cadence_pos;99,3465
#define CADENCE_POS_TFF_FIRST 101,3599
#define CADENCE_POS_TFF_END 102,3631
#define CADENCE_POS_BFF_FIRST 103,3663
#define CADENCE_POS_BFF_END 104,3695
const int pi_detected_pos_to_bitmask[pi_detected_pos_to_bitmask123,4383
#define VEKTOR_CADENCE_POS_ALL 133,5160
#define VEKTOR_CADENCE_POS_TFF 134,5198
#define VEKTOR_CADENCE_POS_BFF 135,5236
#define VEKTOR_CADENCE_POS_TFF_HIGH 136,5274
#define VEKTOR_CADENCE_POS_TFF_LOW 137,5317
#define VEKTOR_CADENCE_POS_BFF_HIGH 138,5360
#define VEKTOR_CADENCE_POS_BFF_LOW 139,5403
typedef enum { TFD_INVALID 142,5478
typedef enum { TFD_INVALID = -1, TFD_TFF 142,5478
typedef enum { TFD_INVALID = -1, TFD_TFF = 0, TFD_BFF 142,5478
typedef enum { TFD_INVALID = -1, TFD_TFF = 0, TFD_BFF = 1 } ivtc_tfd;142,5478
static const ivtc_field_pair pi_best_field_pairs[pi_best_field_pairs152,5792
static const ivtc_field_pair pi_worst_field_pairs[pi_worst_field_pairs179,6963
static const int pi_detected_pos_to_cadence_pos[pi_detected_pos_to_cadence_pos210,8108
static const int pi_detected_pos_to_tfd[pi_detected_pos_to_tfd231,8630
typedef enum { IVTC_OP_DROP_FRAME,265,10068
               IVTC_OP_COPY_N,266,10103
               IVTC_OP_COPY_C,267,10134
               IVTC_OP_COMPOSE_TNBC,268,10165
               IVTC_OP_COMPOSE_TCBN 269,10202
               IVTC_OP_COMPOSE_TCBN } ivtc_op;269,10202
static const ivtc_op pi_reconstruction_ops[pi_reconstruction_ops286,10862
static const int pi_timestamp_deltas[pi_timestamp_deltas318,12272
static void IVTCFrameInit(340,13022
static void IVTCLowLevelDetect(403,15635
static void IVTCCadenceDetectAlgoScores(455,17656
static void IVTCCadenceDetectAlgoVektor(628,24137
static void IVTCCadenceDetectFinalize(813,31916
static void IVTCSoftTelecineDetect(857,33620
static void IVTCCadenceAnalyze(974,38994
static bool IVTCOutputOrDropFrame(1210,48912
int RenderIVTC(1470,59641
void IVTCClearState(1579,63599

demux/dash/mpd/IsoffMainParser.cpp,797
IsoffMainParser::IsoffMainParser 53,1971
IsoffMainParser::~IsoffMainParser 62,2243
void IsoffMainParser::parseMPDBaseUrl(66,2287
MPD * IsoffMainParser::parse(76,2621
void    IsoffMainParser::parseMPDAttributes 90,2995
void IsoffMainParser::parsePeriods(129,4207
size_t IsoffMainParser::parseSegmentTemplate(154,5195
size_t IsoffMainParser::parseSegmentInformation(192,6710
void    IsoffMainParser::parseAdaptationSets 220,7911
void    IsoffMainParser::parseRepresentations 266,9758
size_t IsoffMainParser::parseSegmentBase(323,12309
size_t IsoffMainParser::parseSegmentList(361,13629
void IsoffMainParser::parseInitSegment(418,15698
void IsoffMainParser::parseTimeline(436,16276
void IsoffMainParser::parseProgramInformation(475,17604
Profile IsoffMainParser::getProfile(502,18406

audio_filter/scaletempo.c,1534
vlc_module_begin 46,1893
struct filter_sys_t79,3281
    double    scale;82,3334
    unsigned  ms_stride;84,3376
    double    percent_overlap;85,3401
    unsigned  ms_search;86,3432
    unsigned  samples_per_frame;88,3480
    unsigned  bytes_per_sample;89,3543
    unsigned  bytes_per_frame;90,3575
    unsigned  sample_rate;91,3606
    double    frames_stride_scaled;93,3650
    double    frames_stride_error;94,3686
    unsigned  bytes_stride;95,3721
    double    bytes_stride_scaled;96,3749
    unsigned  bytes_queue_max;97,3784
    unsigned  bytes_queued;98,3815
    unsigned  bytes_to_slide;99,3843
    uint8_t  *buf_queue;buf_queue100,3873
    unsigned  samples_overlap;102,3916
    unsigned  samples_standing;103,3947
    unsigned  bytes_overlap;104,3979
    unsigned  bytes_standing;105,4008
    void     *buf_overlap;buf_overlap106,4038
    void     *table_blend;table_blend107,4065
    void    (*output_overlap)output_overlap108,4092
    unsigned  frames_search;110,4205
    void     *buf_pre_corr;buf_pre_corr111,4234
    void     *table_window;table_window112,4262
    unsigned(*best_overlap_offset)best_overlap_offset113,4290
static unsigned best_overlap_offset_float(119,4569
static void output_overlap_float(156,5746
static size_t fill_queue(174,6493
static size_t transform_buffer(217,8120
static size_t calculate_output_buffer_size(260,9794
static int reinit_buffers(278,10638
static int Open(386,14708
static void Close(436,16414
static block_t *DoWork(DoWork451,16934

lua/libs/gettext.c,206
#   define  _GNU_SOURCE28,1318
static int vlclua_gettext(41,1627
static int vlclua_gettext_noop(47,1744
static const luaL_Reg vlclua_gettext_reg[vlclua_gettext_reg56,1996
void luaopen_gettext(63,2131

video_filter/deinterlace/algo_ivtc.h,877
#define VLC_DEINTERLACE_ALGO_IVTC_H 25,1245
#define IVTC_NUM_FIELD_PAIRS 35,1526
#define IVTC_DETECTION_HISTORY_SIZE 36,1557
#define IVTC_LATEST 37,1595
    int i_mode;44,1731
    int i_old_mode;45,1802
    int i_cadence_pos;47,1861
    int i_tfd;48,1936
    int pi_scores[pi_scores54,2094
    int pi_motion[pi_motion55,2161
    int pi_top_rep[pi_top_rep56,2241
    int pi_bot_rep[pi_bot_rep57,2321
    int pi_final_scores[pi_final_scores64,2564
    int  pi_s_cadence_pos[pi_s_cadence_pos80,3228
    bool pb_s_reliable[pb_s_reliable81,3284
    int  pi_v_raw[pi_v_raw82,3337
    int  pi_v_cadence_pos[pi_v_cadence_pos83,3416
    bool pb_v_reliable[pb_v_reliable84,3472
    int pi_cadence_pos_history[pi_cadence_pos_history91,3712
    bool b_sequence_valid;100,4020
    bool pb_all_progressives[pb_all_progressives110,4366
} ivtc_sys_t;111,4425

demux/adaptive/playlist/SegmentInfoCommon.cpp,356
SegmentInfoCommon::SegmentInfoCommon(33,1380
SegmentInfoCommon::~SegmentInfoCommon(40,1549
int         SegmentInfoCommon::getStartIndex(44,1594
void        SegmentInfoCommon::setStartIndex(49,1681
void SegmentInfoCommon::appendBaseURL(55,1813
Url SegmentInfoCommon::getUrlSegment(60,1917
bool SegmentInfoCommon::getSegmentNumberByScaledTime(68,2085

demux/hls/playlist/Representation.hpp,691
#define HLSREPRESENTATION_H_22,1004
namespace hls28,1172
    namespace playlisthls::playlist30,1188
        class Representation hls::playlist::Representation37,1317
                StreamFormat streamFormat;hls::playlist::Representation::streamFormat57,2231
                bool b_live;hls::playlist::Representation::b_live58,2274
                bool b_loaded;hls::playlist::Representation::b_loaded59,2303
                time_t nextUpdateTime;hls::playlist::Representation::nextUpdateTime60,2334
                time_t targetDuration;hls::playlist::Representation::targetDuration61,2373
                Url playlistUrl;hls::playlist::Representation::playlistUrl62,2412

stream_filter/inflate.c,315
struct stream_sys_t33,1253
    z_stream zstream;35,1275
    bool eof;36,1297
    unsigned char buffer[buffer37,1311
static ssize_t Read(40,1348
static int ReadDir(104,3085
static int Seek(110,3209
static int Control(116,3314
static int Open(150,4388
static void Close 194,5494
vlc_module_begin(203,5663

video_output/win32/win32touch.c,88
LRESULT DecodeGesture(34,1279
BOOL InitGestures(192,7660
void CloseGestures(246,9259

codec/omxil/OMX_Types.h,2940
#define OMX_Types_h32,1488
#       define OMX_API 43,1804
#           define OMX_API 46,1879
#           define OMX_API 48,1942
#          define OMX_API 54,2065
#          define OMX_API 56,2125
#          define OMX_API60,2222
#          define OMX_API 62,2260
#define OMX_APIENTRY 68,2345
#define OMX_IN75,2577
#define OMX_OUT82,2805
#define OMX_INOUT91,3120
#define OMX_ALL 99,3508
typedef unsigned char OMX_U8;133,4323
typedef signed char OMX_S8;136,4417
typedef unsigned short OMX_U16;139,4519
typedef signed short OMX_S16;142,4623
typedef unsigned long OMX_U32;145,4727
typedef signed long OMX_S32;148,4830
typedef unsigned long long OMX_U64;160,5364
typedef signed long long OMX_S64;163,5472
typedef unsigned __int64  OMX_U64;168,5606
typedef signed   __int64  OMX_S64;171,5713
typedef unsigned long long OMX_U64;176,5842
typedef signed long long OMX_S64;179,5950
typedef enum OMX_BOOL 189,6251
    OMX_FALSE 190,6275
    OMX_TRUE 191,6294
    OMX_TRUE = !OMX_FALSE,OMX_FALSE191,6294
    OMX_BOOL_MAX 192,6321
    OMX_BOOL_MAX = 0x7FFFFFFFx7FFFFFFF192,6321
} OMX_BOOL;193,6351
typedef void* OMX_PTR;199,6564
typedef char* OMX_STRING;206,6864
typedef unsigned char* OMX_BYTE;213,7175
typedef unsigned char OMX_UUIDTYPE[OMX_UUIDTYPE219,7455
typedef enum OMX_DIRTYPE224,7658
    OMX_DirInput,226,7685
    OMX_DirOutput,227,7746
    OMX_DirMax 228,7808
    OMX_DirMax = 0x7FFFFFFFx7FFFFFFF228,7808
} OMX_DIRTYPE;229,7836
typedef enum OMX_ENDIANTYPE234,7993
    OMX_EndianBig,236,8023
    OMX_EndianLittle,237,8061
    OMX_EndianMax 238,8105
    OMX_EndianMax = 0x7FFFFFFFx7FFFFFFF238,8105
} OMX_ENDIANTYPE;239,8136
typedef enum OMX_NUMERICALDATATYPE245,8257
    OMX_NumericalDataSigned,247,8294
    OMX_NumericalDataUnsigned,248,8343
    OMX_NumercialDataMax 249,8396
    OMX_NumercialDataMax = 0x7FFFFFFFx7FFFFFFF249,8396
} OMX_NUMERICALDATATYPE;250,8434
typedef struct OMX_BU32 254,8496
    OMX_U32 nValue;255,8522
    OMX_U32 nMin;256,8563
    OMX_U32 nMax;257,8631
} OMX_BU32;258,8699
typedef struct OMX_BS32 262,8746
    OMX_S32 nValue;263,8772
    OMX_S32 nMin;264,8813
    OMX_S32 nMax;265,8881
} OMX_BS32;266,8949
typedef OMX_S64 OMX_TICKS;282,9769
typedef struct OMX_TICKS284,9802
    OMX_U32 nLowPart;286,9829
    OMX_U32 nHighPart;287,9902
} OMX_TICKS;288,9976
#define OMX_TICKS_PER_SECOND 290,9996
typedef void* OMX_HANDLETYPE;295,10188
typedef struct OMX_MARKTYPE297,10219
    OMX_HANDLETYPE hMarkTargetComponent;299,10249
    OMX_PTR pMarkData;302,10470
} OMX_MARKTYPE;305,10676
typedef void* OMX_NATIVE_DEVICETYPE;311,10896
typedef void* OMX_NATIVE_WINDOWTYPE;315,11072
typedef union OMX_VERSIONTYPE328,11798
        OMX_U8 nVersionMajor;332,11847
        OMX_U8 nVersionMinor;333,11918
        OMX_U8 nRevision;334,11989
        OMX_U8 nStep;335,12063
    } s;336,12133
    OMX_U32 nVersion;337,12142
} OMX_VERSIONTYPE;340,12354

codec/scte27.c,867
vlc_module_begin 41,1582
struct decoder_sys_t 53,2009
    int     segment_id;54,2032
    int     segment_size;55,2056
    uint8_t *segment_buffer;segment_buffer56,2082
    mtime_t segment_date;57,2111
    uint8_t y,61,2158
    uint8_t y, u,61,2158
    uint8_t y, u, v;61,2158
    uint8_t alpha;62,2179
} scte27_color_t;63,2198
static const scte27_color_t scte27_color_transparent 65,2217
static scte27_color_t bs_read_color(72,2354
static inline void SetYUVPPixel(85,2692
static subpicture_region_t *DecodeSimpleBitmap(DecodeSimpleBitmap90,2837
        COLOR_FRAME,218,7208
        COLOR_CHARACTER,219,7229
        COLOR_OUTLINE,220,7254
        COLOR_SHADOW,221,7277
static subpicture_t *DecodeSubtitleMessage(DecodeSubtitleMessage331,11190
static subpicture_t *Decode(Decode408,13552
static int Open(496,16679
static void Close(517,17198

codec/omxil/qcom.c,176
#define TILE_WIDTH 40,1455
#define TILE_HEIGHT 41,1477
#define TILE_SIZE 42,1500
static size_t tile_pos(45,1626
void qcom_convert(58,1879
#define TILE_GROUP_SIZE 72,2361

video_filter/croppadd.c,992
#define CROPTOP_TEXT 46,1855
#define CROPTOP_LONGTEXT 47,1908
#define CROPBOTTOM_TEXT 49,1999
#define CROPBOTTOM_LONGTEXT 50,2058
#define CROPLEFT_TEXT 52,2155
#define CROPLEFT_LONGTEXT 53,2210
#define CROPRIGHT_TEXT 55,2303
#define CROPRIGHT_LONGTEXT 56,2360
#define PADDTOP_TEXT 59,2456
#define PADDTOP_LONGTEXT 60,2507
#define PADDBOTTOM_TEXT 62,2611
#define PADDBOTTOM_LONGTEXT 63,2668
#define PADDLEFT_TEXT 65,2778
#define PADDLEFT_LONGTEXT 66,2831
#define PADDRIGHT_TEXT 68,2937
#define PADDRIGHT_LONGTEXT 69,2992
#define CFG_PREFIX 72,3101
vlc_module_begin 77,3313
struct filter_sys_t113,5010
    int i_croptop;115,5032
    int i_cropbottom;116,5051
    int i_cropleft;117,5073
    int i_cropright;118,5093
    int i_paddtop;119,5114
    int i_paddbottom;120,5133
    int i_paddleft;121,5155
    int i_paddright;122,5175
static int OpenFilter(128,5408
#define GET_OPTION(163,6641
static void CloseFilter(208,8399
static picture_t *Filter(Filter217,8710

demux/adaptive/logic/PredictiveAdaptationLogic.hpp,1419
#define PREDICTIVEADAPTATIONLOGIC_HPP21,1016
namespace adaptive27,1146
    namespace logicadaptive::logic29,1167
        class PredictiveStatsadaptive::logic::PredictiveStats31,1193
                size_t  segments_count;adaptive::logic::PredictiveStats::segments_count40,1402
                mtime_t buffering_level;adaptive::logic::PredictiveStats::buffering_level41,1442
                mtime_t buffering_target;adaptive::logic::PredictiveStats::buffering_target42,1483
                unsigned last_download_rate;adaptive::logic::PredictiveStats::last_download_rate43,1525
                unsigned last_duration;adaptive::logic::PredictiveStats::last_duration44,1570
                MovingAverage<unsigned> average;adaptive::logic::PredictiveStats::average45,1610
        class PredictiveAdaptationLogic adaptive::logic::PredictiveAdaptationLogic48,1671
                std::map<adaptive::logic::PredictiveAdaptationLogic::std::map60,2346
                std::map<adaptive::ID, PredictiveStats> streams;adaptive::logic::PredictiveAdaptationLogic::streams60,2346
                unsigned                    usedBps;adaptive::logic::PredictiveAdaptationLogic::usedBps61,2411
                vlc_object_t *              p_obj;adaptive::logic::PredictiveAdaptationLogic::p_obj62,2464
                vlc_mutex_t                 lock;adaptive::logic::PredictiveAdaptationLogic::lock63,2515

audio_filter/stereo_widen.c,743
struct filter_sys_t42,1715
    float *pf_begin;pf_begin44,1737
    float *pf_write;pf_write45,1800
    int   i_len;46,1863
    float f_delay;47,1926
    float f_feedback;48,1989
    float f_crossfeed;49,2011
    float f_dry_mix;50,2034
    bool  b_free_buf;51,2055
#define HELP_TEXT 55,2200
#define DELAY_TEXT 59,2462
#define DELAY_LONGTEXT 60,2498
#define FEEDBACK_TEXT 62,2609
#define FEEDBACK_LONGTEXT 63,2651
#define CROSSFEED_TEXT 66,2876
#define CROSSFEED_LONGTEXT 67,2915
#define DRYMIX_TEXT 70,3140
#define DRYMIX_LONGTEXT 71,3174
vlc_module_begin 76,3428
#define CREATE_VAR(116,4845
static block_t *Filter(Filter143,5771
static void Close(179,7038
#define DEL_VAR(184,7166
static int paramCallback(201,7674

demux/dash/mpd/TrickModeType.cpp,143
TrickModeType::TrickModeType(32,1258
int TrickModeType::getAlternatePlayoutRate(37,1326
void TrickModeType::setAlternatePlayoutRate(42,1421

video_output/win32/win32touch.h,611
#define VLC_GESTURE_H_25,1183
#  undef _WIN32_WINNT28,1259
#  define _WIN32_WINNT 29,1281
# define WM_GESTURE 41,1458
    GESTURE_ACTION_UNDEFINED 49,1540
    GESTURE_ACTION_VOLUME,50,1574
    GESTURE_ACTION_JUMP,51,1601
    GESTURE_ACTION_BRIGHTNESS52,1626
    DWORD       i_type;56,1677
    int         i_action;57,1734
    int         i_beginx;59,1796
    int         i_beginy;60,1859
    int         i_lasty;61,1922
    ULONGLONG   i_ullArguments;63,1999
    bool        b_2fingers;64,2092
    HINSTANCE   huser_dll;66,2164
    BOOL 67,2221
    BOOL 68,2295
} win32_gesture_sys_t;69,2388

mux/mpeg/ts.c,4835
#define VPID_TEXT 93,3196
#define VPID_LONGTEXT 94,3230
#define APID_TEXT 96,3350
#define APID_LONGTEXT 97,3384
#define SPUPID_TEXT 98,3452
#define SPUPID_LONGTEXT 99,3486
#define PMTPID_TEXT 100,3547
#define PMTPID_LONGTEXT 101,3581
#define TSID_TEXT 102,3641
#define TSID_LONGTEXT 103,3671
#define NETID_TEXT 104,3735
#define NETID_LONGTEXT 105,3767
#define PMTPROG_TEXT 107,3839
#define PMTPROG_LONGTEXT 108,3886
#define MUXPMT_TEXT 111,4042
#define MUXPMT_LONGTEXT 112,4107
#define SDTDESC_TEXT 115,4260
#define SDTDESC_LONGTEXT 116,4334
#define PID_TEXT 119,4486
#define PID_LONGTEXT 120,4529
#define ALIGNMENT_TEXT 124,4712
#define ALIGNMENT_LONGTEXT 125,4756
#define SHAPING_TEXT 128,4929
#define SHAPING_LONGTEXT 129,4975
#define KEYF_TEXT 134,5207
#define KEYF_LONGTEXT 135,5245
#define PCR_TEXT 142,5640
#define PCR_LONGTEXT 143,5681
#define BMIN_TEXT 147,5861
#define BMIN_LONGTEXT 148,5909
#define BMAX_TEXT 150,5988
#define BMAX_LONGTEXT 151,6036
#define DTS_TEXT 153,6114
#define DTS_LONGTEXT 154,6152
#define ACRYPT_TEXT 159,6379
#define ACRYPT_LONGTEXT 160,6417
#define VCRYPT_TEXT 161,6469
#define VCRYPT_LONGTEXT 162,6507
#define CK_TEXT 164,6560
#define CK_LONGTEXT 165,6590
#define CK2_TEXT 168,6697
#define CK2_LONGTEXT 169,6735
#define CU_TEXT 172,6852
#define CU_LONGTEXT 173,6889
#define CPKT_TEXT 176,7010
#define CPKT_LONGTEXT 177,7066
#define SOUT_CFG_PREFIX 181,7229
#define MAX_PMT 182,7264
#define MAX_PMT_PID 183,7398
vlc_module_begin 188,7604
typedef struct pmt_map_t 242,10480
    int i_pid;244,10563
    unsigned i_prog;245,10578
} pmt_map_t;246,10599
    int     i_depth;250,10630
    block_t *p_first;p_first251,10651
    block_t **pp_last;pp_last252,10673
} sout_buffer_chain_t;253,10696
static inline void BufferChainInit 255,10720
static inline void BufferChainAppend(262,10861
static inline block_t *BufferChainGet(BufferChainGet275,11090
static inline block_t *BufferChainPeek(BufferChainPeek294,11400
static inline void BufferChainClean(301,11514
    sout_buffer_chain_t chain_pes;314,11722
    mtime_t             i_pes_dts;315,11757
    mtime_t             i_pes_length;316,11792
    int                 i_pes_used;317,11830
    bool                b_key_frame;318,11866
} pes_state_t;320,11904
    ts_stream_t  ts;324,11937
    pes_stream_t pes;325,11958
    pes_state_t  state;326,11980
} sout_input_sys_t;327,12004
struct sout_mux_sys_t329,12025
    int             i_pcr_pid;331,12049
    sout_input_t    *p_pcr_input;p_pcr_input332,12080
    vlc_mutex_t     csa_lock;334,12115
    dvbpsi_t        *p_dvbpsi;p_dvbpsi336,12146
    bool            b_es_id_pid;337,12177
    int             i_pid_video;338,12210
    int             i_pid_audio;339,12243
    int             i_pid_spu;340,12276
    int             i_tsid;342,12308
    unsigned        i_num_pmt;343,12336
    int             i_pmtslots;344,12367
    int             i_pat_version_number;345,12399
    ts_stream_t     pat;346,12441
    int             i_pmt_version_number;348,12467
    ts_stream_t     pmt[pmt349,12509
    pmt_map_t       pmtmap[pmtmap350,12543
    int             i_pmt_program_number[i_pmt_program_number351,12584
    bool            b_data_alignment;352,12635
    sdt_psi_t       sdt;354,12674
    int64_t         i_bitrate_min;357,12726
    int64_t         i_bitrate_max;358,12761
    int64_t         i_shaping_delay;360,12797
    int64_t         i_pcr_delay;361,12834
    int64_t         i_dts_delay;363,12868
    mtime_t         first_dts;364,12901
    bool            b_use_key_frames;366,12933
    mtime_t         i_pcr;368,12972
    csa_t           *csa;csa370,13023
    int             i_csa_pkt_size;371,13049
    bool            b_crypt_audio;372,13085
    bool            b_crypt_video;373,13120
static int GetNextFreePID(377,13160
static int  AllocatePID(411,13883
static int pmtcompare(439,14448
static int intcompare(447,14612
static csa_t *csaSetup(csaSetup472,15777
static int Open(527,17802
static void Close(736,24616
static int ChangeKeyCallback(765,25622
static int ActiveKeyCallback(784,26385
static int Control(819,27507
static const char *GetIso639_2LangCode(GetIso639_2LangCode848,28200
static int AddStream(870,28821
static void DelStream(1123,37277
static void SetHeader(1198,39647
static block_t *Pack_Opus(Pack_Opus1210,39898
static bool MuxStreams(1225,40327
static int Mux(1582,53466
#define STD_PES_PAYLOAD 1601,53881
static block_t *FixPES(FixPES1602,53909
static block_t *Add_ADTS(Add_ADTS1664,55931
#define ADTS_HEADER_SIZE 1666,56003
static void TSSchedule(1705,57475
static void TSDate(1761,59399
static block_t *TSNew(TSNew1814,61253
static void TSSetPCR(1917,64329
void GetPAT(1930,64753
static void GetPMT(1941,65108

mux/mpeg/ps.c,1608
#define DTS_TEXT 48,1886
#define DTS_LONGTEXT 49,1924
#define PES_SIZE_TEXT 54,2151
#define PES_SIZE_LONGTEXT 55,2196
#define SOUT_CFG_PREFIX 61,2389
vlc_module_begin 63,2425
typedef struct ps_stream_s98,3921
    int i_stream_id;100,3950
    int i_stream_type;101,3971
    int i_max_buff_size;102,3994
    uint8_t lang[lang105,4080
} ps_stream_t;107,4102
struct sout_mux_sys_t109,4118
    bool  stream_id_mpga[stream_id_mpga112,4172
    bool  stream_id_mpgv[stream_id_mpgv113,4221
    bool  stream_id_a52[stream_id_a52114,4270
    bool  stream_id_spu[stream_id_spu115,4341
    bool  stream_id_dts[stream_id_dts116,4390
    bool  stream_id_lpcm[stream_id_lpcm117,4439
    int i_audio_bound;119,4489
    int i_video_bound;120,4512
    int i_pes_count;121,4535
    int i_system_header;122,4556
    int i_dts_delay;123,4581
    int i_rate_bound;124,4602
    int64_t i_instant_bitrate;126,4657
    int64_t i_instant_size;127,4688
    int64_t i_instant_dts;128,4716
    bool b_mpeg2;130,4744
    int i_pes_max_size;132,4763
    int i_psm_version;134,4788
    uint32_t crc32_table[crc32_table135,4811
static const char *const ppsz_sout_options[ppsz_sout_options138,4846
static int Open(145,5105
static void Close(208,7030
static int Control(229,7617
static int AddStream(260,8477
static void DelStream(386,12749
static int Mux(445,14775
static void StreamIdInit(538,17480
static int StreamIdGet(547,17615
static void StreamIdRelease(562,17870
static void MuxWritePackHeader(567,17971
static void MuxWriteSystemHeader(623,19490
static void MuxWritePSM(724,22580

demux/mpeg/mpgv.c,309
vlc_module_begin 43,1741
struct demux_sys_t55,2178
    bool  b_start;57,2199
    es_out_id_t *p_es;p_es59,2219
    decoder_t *p_packetizer;p_packetizer61,2243
#define MPGV_PACKET_SIZE 67,2355
static int Open(72,2583
static void Close(129,4177
static int Demux(143,4724
static int Control(186,5813

packetizer/h264_nal.c,761
bool h264_isavcC(37,1278
static size_t get_avcC_to_AnnexB_NAL_size(49,1653
uint8_t *h264_avcC_to_AnnexB_NAL(h264_avcC_to_AnnexB_NAL78,2392
void h264_AVC_to_AnnexB(121,3514
bool h264_AnnexB_get_spspps(163,4593
#define IFSET_NAL(186,5447
#undef IFSET_NAL195,5740
void h264_release_sps(201,5830
#define H264_CONSTRAINT_SET_FLAG(206,5916
static bool h264_parse_sequence_parameter_set_rbsp(208,5965
void h264_release_pps(462,14658
static bool h264_parse_picture_parameter_set_rbsp(467,14743
#define IMPL_h264_generic_decode(482,15239
IMPL_h264_generic_decode(507,16121
block_t *h264_AnnexB_NAL_to_avcC(h264_AnnexB_NAL_to_avcC553,17751
bool h264_get_picture_size(567,18352
bool h264_get_chroma_luma(580,18866
bool h264_get_profile_level(591,19266

video_filter/dynamicoverlay/dynamicoverlay_buffer.c,170
int BufferInit(40,1584
int BufferDestroy(49,1759
char *BufferGetToken(BufferGetToken58,1922
int BufferAdd(72,2235
int BufferPrintf(114,3829
int BufferDel(133,4202

access/linsys/linsys_sdiaudio.h,3266
#define _SDIAUDIO_H39,1803
#define SDIAUDIO_DRIVER_NAME 42,1842
#define SDIAUDIO_MAJOR 44,1883
#define SDIAUDIO_TX_BUFFERS_MIN 47,1999
#define SDIAUDIO_TX_BUFSIZE_MIN 54,2450
#define SDIAUDIO_RX_BUFFERS_MIN 55,2487
#define SDIAUDIO_RX_BUFSIZE_MIN 56,2551
#define SDIAUDIO_TX_BUFFERS 58,2633
#define SDIAUDIO_TX_BUFSIZE 59,2694
#define SDIAUDIO_RX_BUFFERS 60,2774
#define SDIAUDIO_RX_BUFSIZE 61,2835
#define SDIAUDIO_IOC_MAGIC 64,2943
#define SDIAUDIO_IOC_TXGETCAP	67,3082
#define SDIAUDIO_IOC_TXGETEVENTS	68,3156
#define SDIAUDIO_IOC_TXGETBUFLEVEL	69,3232
#define SDIAUDIO_IOC_TXGETTXD	70,3310
#define SDIAUDIO_IOC_RXGETCAP	72,3376
#define SDIAUDIO_IOC_RXGETEVENTS	73,3451
#define SDIAUDIO_IOC_RXGETBUFLEVEL	74,3528
#define SDIAUDIO_IOC_RXGETCARRIER	75,3607
#define SDIAUDIO_IOC_RXGETSTATUS	76,3676
#define SDIAUDIO_IOC_RXGETAUDIOGR0ERROR	77,3744
#define SDIAUDIO_IOC_RXGETAUDIOGR0DELAYA	78,3828
#define SDIAUDIO_IOC_RXGETAUDIOGR0DELAYB	79,3912
#define SDIAUDIO_IOC_RXGETNONAUDIO	80,3996
#define SDIAUDIO_IOC_RXGETAUDSTAT	81,4075
#define SDIAUDIO_IOC_RXGETAUDRATE	82,4153
#define SDIAUDIO_IOC_GETID	84,4232
#define SDIAUDIO_IOC_GETVERSION	85,4305
#define SDIAUDIO_IOC_QBUF_DEPRECATED	87,4452
#define SDIAUDIO_IOC_QBUF	88,4534
#define SDIAUDIO_IOC_DQBUF_DEPRECATED	90,4660
#define SDIAUDIO_IOC_DQBUF	91,4743
#define SDIAUDIO_EVENT_TX_BUFFER_ORDER	94,4845
#define SDIAUDIO_EVENT_TX_BUFFER	95,4886
#define SDIAUDIO_EVENT_TX_FIFO_ORDER	96,4957
#define SDIAUDIO_EVENT_TX_FIFO	97,4996
#define SDIAUDIO_EVENT_TX_DATA_ORDER	98,5064
#define SDIAUDIO_EVENT_TX_DATA	99,5103
#define SDIAUDIO_EVENT_RX_BUFFER_ORDER	102,5212
#define SDIAUDIO_EVENT_RX_BUFFER	103,5253
#define SDIAUDIO_EVENT_RX_FIFO_ORDER	104,5324
#define SDIAUDIO_EVENT_RX_FIFO	105,5363
#define SDIAUDIO_EVENT_RX_CARRIER_ORDER	106,5431
#define SDIAUDIO_EVENT_RX_CARRIER	107,5473
#define SDIAUDIO_EVENT_RX_DATA_ORDER	108,5546
#define SDIAUDIO_EVENT_RX_DATA	109,5585
#define SDIAUDIO_CAP_RX_CD	112,5683
#define SDIAUDIO_CAP_RX_DATA	113,5722
#define SDIAUDIO_CAP_RX_STATS	114,5763
#define SDIAUDIO_CAP_RX_NONAUDIO	115,5805
#define SDIAUDIO_CAP_RX_24BIT	116,5849
#define SDIAUDIO_CTL_AUDSAMP_SZ_16	119,5916
#define SDIAUDIO_CTL_AUDSAMP_SZ_24	120,5967
#define SDIAUDIO_CTL_AUDSAMP_SZ_32	121,6018
#define SDIAUDIO_CTL_AUDCH_EN_0	124,6097
#define SDIAUDIO_CTL_AUDCH_EN_2	125,6162
#define SDIAUDIO_CTL_AUDCH_EN_4	126,6213
#define SDIAUDIO_CTL_AUDCH_EN_6	127,6264
#define SDIAUDIO_CTL_AUDCH_EN_8	128,6315
#define SDIAUDIO_CTL_PCM_ALLCHANNEL	130,6367
#define SDIAUDIO_CTL_NONAUDIO_ALLCHANNEL	131,6443
#define SDIAUDIO_CTL_ACT_CHAN_0	134,6564
#define SDIAUDIO_CTL_ACT_CHAN_2	135,6633
#define SDIAUDIO_CTL_ACT_CHAN_4	136,6688
#define SDIAUDIO_CTL_ACT_CHAN_6	137,6743
#define SDIAUDIO_CTL_ACT_CHAN_8	138,6798
#define SDIAUDIO_CTL_SYNC_48_KHZ	141,6871
#define SDIAUDIO_CTL_SYNC_44_1_KHZ	142,6932
#define SDIAUDIO_CTL_SYNC_32_KHZ	143,6997
#define SDIAUDIO_CTL_SYNC_96_KHZ	144,7058
#define SDIAUDIO_CTL_SYNC_FREE_RUNNING	145,7119
#define SDIAUDIO_CTL_ASYNC_48_KHZ	146,7193
#define SDIAUDIO_CTL_ASYNC_44_1_KHZ	147,7256
#define SDIAUDIO_CTL_ASYNC_32_KHZ	148,7323
#define SDIAUDIO_CTL_ASYNC_96_KHZ	149,7386
#define SDIAUDIO_CTL_ASYNC_FREE_RUNNING	150,7449

demux/mpeg/mpeg4_iod.c,1561
static void od_debug(35,1394
static unsigned ODDescriptorLength(51,1861
static unsigned ODGetBytes(74,2282
static char* ODGetURL(88,2551
#define ODTag_ObjectDescr 99,2833
#define ODTag_InitialObjectDescr 100,2874
#define ODTag_ESDescr 101,2915
#define ODTag_DecConfigDescr 102,2956
#define ODTag_DecSpecificDescr 103,2997
#define ODTag_SLDescr 104,3038
    od_descriptor_t *p_od;p_od109,3134
    od_descriptor_t **pp_ods;pp_ods110,3161
    es_mpeg4_descriptor_t *es_descr;es_descr111,3191
    decoder_config_descriptor_t *p_dec_config;p_dec_config112,3228
    sl_config_descriptor_t *sl_descr;sl_descr113,3275
} od_read_params_t;114,3313
#define SL_Predefined_Custom 118,3455
#define SL_Predefined_NULL 119,3489
#define SL_Predefined_MP4 120,3523
static bool OD_SLDesc_Read(121,3557
static bool OD_DecSpecificDesc_Read(179,5836
static bool OD_DecConfigDesc_Read(195,6341
static bool OD_ESDesc_Read(221,7358
static bool OD_InitialObjectDesc_Read(267,8659
static bool ODObjectDescriptorRead(316,10339
static uint8_t OD_Desc_Read(356,11549
static uint8_t ODInit(452,14984
od_descriptor_t *IODNew(IODNew467,15483
void ODFree(500,16566
#define es_descr 511,16756
#undef  es_descr519,16986
sl_header_data DecodeSLHeader(527,17210
            bool *p_b;p_b565,18390
            mtime_t *p_t;p_t566,18413
#define ODTag_ObjectDescrUpdate 628,20442
#define ODTag_ObjectDescrRemove 629,20479
static void ObjectDescrUpdateCommandRead(631,20517
static void ObjectDescrRemoveCommandRead(653,21251
void DecodeODCommand(669,21776

audio_output/TPCircularBuffer.c,180
#define reportResult(13,261
static inline bool _reportResult(14,372
bool TPCircularBufferInit(22,648
void TPCircularBufferCleanup(105,4218
void TPCircularBufferClear(110,4414

demux/adaptive/ChunksSource.hpp,194
#define CHUNKSSOURCE_HPP21,997
namespace adaptive25,1048
    class ChunksSourceadaptive::ChunksSource27,1069
            virtual ~ChunksSource(adaptive::ChunksSource::~ChunksSource30,1114

arm_neon/i420_yuyv.S,78
i420_yuyv_neon:i420_yuyv_neon42,1399
i420_uyvy_neon:i420_uyvy_neon81,2172

packetizer/h264_nal.h,3461
# define H264_NAL_H21,1008
#define PROFILE_H264_BASELINE 25,1055
#define PROFILE_H264_MAIN 26,1100
#define PROFILE_H264_EXTENDED 27,1145
#define PROFILE_H264_HIGH 28,1190
#define PROFILE_H264_HIGH_10 29,1236
#define PROFILE_H264_HIGH_422 30,1282
#define PROFILE_H264_HIGH_444 31,1328
#define PROFILE_H264_HIGH_444_PREDICTIVE 32,1374
#define PROFILE_H264_CAVLC_INTRA 34,1421
#define PROFILE_H264_SVC_BASELINE 35,1466
#define PROFILE_H264_SVC_HIGH 36,1511
#define PROFILE_H264_MVC_STEREO_HIGH 37,1556
#define PROFILE_H264_MVC_MULTIVIEW_HIGH 38,1602
#define PROFILE_H264_MFC_HIGH 40,1649
#define PROFILE_H264_MVC_MULTIVIEW_DEPTH_HIGH 41,1708
#define PROFILE_H264_MVC_ENHANCED_MULTIVIEW_DEPTH_HIGH 42,1767
#define H264_SPS_MAX 44,1827
#define H264_PPS_MAX 45,1853
enum h264_nal_unit_type_e47,1881
    H264_NAL_UNKNOWN 49,1909
    H264_NAL_SLICE 50,1935
    H264_NAL_SLICE_DPA 51,1961
    H264_NAL_SLICE_DPB 52,1991
    H264_NAL_SLICE_DPC 53,2021
    H264_NAL_SLICE_IDR 54,2051
    H264_NAL_SEI 55,2103
    H264_NAL_SPS 56,2155
    H264_NAL_PPS 57,2185
    H264_NAL_AU_DELIMITER=58,2215
    H264_NAL_END_OF_SEQ 60,2285
    H264_NAL_END_OF_STREAM 61,2316
    H264_NAL_FILLER_DATA 62,2349
    H264_NAL_SPS_EXT 63,2380
    H264_NAL_PREFIX 64,2411
    H264_NAL_SUBSET_SPS 65,2442
    H264_NAL_DEPTH_PS 66,2473
    H264_NAL_RESERVED_17 67,2504
    H264_NAL_RESERVED_18 68,2535
    H264_NAL_SLICE_WP 69,2566
    H264_NAL_SLICE_EXT 70,2597
    H264_NAL_SLICE_3D_EXT=71,2628
    H264_NAL_RESERVED_22 72,2659
    H264_NAL_RESERVED_23 73,2690
typedef struct h264_sequence_parameter_set_t h264_sequence_parameter_set_t;76,2725
typedef struct h264_picture_parameter_set_t h264_picture_parameter_set_t;77,2801
struct h264_sequence_parameter_set_t85,3157
    int i_id;87,3196
    uint8_t i_profile,88,3210
    uint8_t i_profile, i_level;88,3210
    uint8_t i_constraint_set_flags;89,3242
    uint8_t i_chroma_idc;91,3328
    uint8_t i_bit_depth_luma;92,3354
    uint8_t i_bit_depth_chroma;93,3384
    uint32_t pic_width_in_mbs_minus1;95,3417
    uint32_t pic_height_in_map_units_minus1;96,3455
        uint32_t left_offset;99,3517
        uint32_t right_offset;100,3547
        uint32_t top_offset;101,3578
        uint32_t bottom_offset;102,3607
    } frame_crop;103,3639
    uint8_t frame_mbs_only_flag;104,3657
    int i_log2_max_frame_num;105,3690
    int i_pic_order_cnt_type;106,3720
    int i_delta_pic_order_always_zero_flag;107,3750
    int i_log2_max_pic_order_cnt_lsb;108,3794
        bool b_valid;111,3846
        int i_sar_num,112,3868
        int i_sar_num, i_sar_den;112,3868
            bool b_full_range;114,3919
            uint8_t i_colour_primaries;115,3950
            uint8_t i_transfer_characteristics;116,3990
            uint8_t i_matrix_coefficients;117,4038
        } colour;118,4081
        bool b_timing_info_present_flag;119,4099
        uint32_t i_num_units_in_tick;120,4140
        uint32_t i_time_scale;121,4178
        bool b_fixed_frame_rate;122,4209
        bool b_pic_struct_present_flag;123,4242
        bool b_hrd_parameters_present_flag;124,4282
        uint8_t i_cpb_removal_delay_length_minus1;125,4326
        uint8_t i_dpb_output_delay_length_minus1;126,4377
    } vui;127,4427
struct h264_picture_parameter_set_t130,4442
    int i_id;132,4480
    int i_sps_id;133,4494
    int i_pic_order_present_flag;134,4512
#define H264_MIN_AVCC_SIZE 143,4750

visualization/cyclic_buffer.h,774
#define CYCLIC_BUFFER_H24,1170
class block_holder27,1196
    float data[block_holder::data30,1225
    mtime_t pts;block_holder::pts31,1261
    block_holder(block_holder::block_holder32,1320
#define CYCLIC_BUFFER_SIZE 38,1390
class cyclic_block_queue39,1421
    block_holder cycl_buffer[cyclic_block_queue::cycl_buffer41,1448
    size_t consumer_pos;cyclic_block_queue::consumer_pos42,1498
    size_t insertion_pos;cyclic_block_queue::insertion_pos43,1523
    cyclic_block_queue(cyclic_block_queue::cyclic_block_queue45,1557
    block_holder* consume(cyclic_block_queue::consume51,1648
  block_holder* get_insertion_object(cyclic_block_queue::get_insertion_object70,2126
  void reset(cyclic_block_queue::reset80,2333
#undef CYCLIC_BUFFER_SIZE90,2520

demux/mpeg/mpeg4_iod.h,2155
#define VLC_MPEG4_IOD_H21,1100
#define ES_DESCRIPTOR_COUNT 23,1125
    USE_ACCESS_UNIT_START_FLAG 26,1172
    USE_ACCESS_UNIT_END_FLAG 27,1213
    USE_RANDOM_ACCESS_POINT_FLAG 28,1254
    HAS_RANDOM_ACCESS_UNITS_ONLY_FLAG 29,1298
    USE_PADDING_FLAG 30,1347
    USE_TIMESTAMPS_FLAG 31,1379
    USE_IDLE_FLAG 32,1414
    USE_DURATION_FLAG 33,1443
} sl_config_flags;34,1470
    uint32_t i_timestamp_resolution;38,1507
    uint32_t i_OCR_resolution;39,1544
    uint8_t i_flags;40,1575
    uint8_t i_timestamp_length;41,1596
    uint8_t i_OCR_length;42,1628
    uint8_t i_AU_length;43,1654
    uint8_t i_instant_bitrate_length;44,1679
    uint8_t i_degradation_priority_length;45,1717
    uint8_t i_AU_seqnum_length;46,1760
    uint8_t i_packet_seqnum_length;47,1792
    uint32_t i_timescale;49,1829
    uint16_t i_accessunit_duration;50,1855
    uint16_t i_compositionunit_duration;51,1891
    uint64_t i_startdecoding_timestamp;53,1933
    uint64_t i_startcomposition_timestamp;54,1973
} sl_config_descriptor_t;55,2016
    unsigned i_size;59,2060
    bool b_au_start;60,2081
    bool b_au_end;61,2102
    mtime_t i_dts;62,2121
    mtime_t i_pts;63,2140
} sl_header_data;64,2159
typedef struct es_mpeg4_descriptor_t es_mpeg4_descriptor_t;66,2178
typedef struct decoder_config_descriptor_t decoder_config_descriptor_t;67,2238
struct decoder_config_descriptor_t69,2311
    uint8_t                 i_objectTypeIndication;71,2348
    uint8_t                 i_streamType;72,2400
    unsigned                i_extra;74,2443
    uint8_t                 *p_extra;p_extra75,2480
struct es_mpeg4_descriptor_t79,2523
    bool                    b_ok;81,2554
    uint16_t                i_es_id;82,2588
    char                    *psz_url;psz_url84,2626
    decoder_config_descriptor_t    dec_descr;86,2665
    sl_config_descriptor_t         sl_descr;87,2711
    uint16_t                i_ID;93,2778
    char                    *psz_url;psz_url94,2812
    es_mpeg4_descriptor_t   es_descr[es_descr96,2851
} od_descriptor_t;98,2911
    int i_version;102,2948
    DECL_ARRAY(103,2967
} od_descriptors_t;104,3010

audio_output/TPCircularBuffer.h,891
#define TPCircularBuffer_h23,880
    void             *buffer;buffer34,1036
    int32_t           length;35,1066
    int32_t           tail;36,1096
    int32_t           head;37,1124
    volatile int32_t  fillCount;38,1152
} TPCircularBuffer;39,1185
static __inline__ __attribute__((always_inline)) void* TPCircularBufferTail(82,2269
static __inline__ __attribute__((always_inline)) void TPCircularBufferConsume(96,2727
static __inline__ __attribute__((always_inline)) void TPCircularBufferConsumeNoBarrier(105,3127
static __inline__ __attribute__((always_inline)) void* TPCircularBufferHead(121,3745
static __inline__ __attribute__((always_inline)) void TPCircularBufferProduce(137,4248
static __inline__ __attribute__((always_inline)) void TPCircularBufferProduceNoBarrier(146,4656
static __inline__ __attribute__((always_inline)) bool TPCircularBufferProduceBytes(162,5245

codec/crystalhd.c,1239
#  define __LINUX_USER__46,1659
#  define USE_DL_OPENING 56,1901
#  define BC_FUNC(66,2241
#  define BC_FUNC_PSYS(67,2273
#  define BC_FUNC(69,2323
#  define BC_FUNC_PSYS(70,2348
#define TO_BC_PTS(76,2442
#define FROM_BC_PTS(77,2480
vlc_module_begin 87,2832
struct decoder_sys_t106,3719
    HANDLE bcm_handle;108,3742
    uint8_t *p_sps_pps_buf;p_sps_pps_buf110,3792
    size_t   i_sps_pps_size;111,3842
    uint8_t i_nal_size;113,3891
    picture_t       *p_pic;p_pic116,3961
    BC_DTS_PROC_OUT *proc_out;proc_out117,3989
    HINSTANCE p_bcm_dll;120,4043
    BC_STATUS 121,4068
    BC_STATUS 122,4130
    BC_STATUS 123,4191
    BC_STATUS 124,4261
    BC_STATUS 125,4322
    BC_STATUS 127,4439
    BC_STATUS 129,4591
    BC_STATUS 131,4720
static int OpenDecoder(138,5012
#  define DLL_NAME 194,6748
#  define PATHS_NB 195,6780
#define LOAD_SYM(216,7370
#define LOAD_SYM_PSYS(221,7569
#undef LOAD_SYM248,8871
#undef LOAD_SYM_PSYS249,8887
static void CloseDecoder(369,12847
static BC_STATUS ourCallback(391,13525
static picture_t *DecodeBlock(DecodeBlock434,15405
#define setAR(538,18990
#undef setAR560,20108
static void crystal_CopyPicture 594,21254
static int crystal_insert_sps_pps(610,21812

lua/libs/variables.c,840
#   define  _GNU_SOURCE28,1364
static int vlclua_pushvalue(45,1738
static int vlclua_pushlist(76,2565
static int vlclua_tovalue(91,2949
static int vlclua_var_inherit(118,3756
static int vlclua_var_get(139,4313
static int vlclua_var_set(153,4700
static int vlclua_var_create(168,5087
static int vlclua_var_get_list(204,6023
static int vlclua_libvlc_command(222,6509
#undef vlclua_var_toggle_or_set243,7095
int vlclua_var_toggle_or_set(244,7127
static inline const void *luaL_checklightuserdata(luaL_checklightuserdata278,7897
static int vlclua_trigger_callback(284,8091
static int vlclua_inc_integer(293,8348
static int vlclua_dec_integer(303,8622
static int vlclua_countchoices(313,8896
static int vlclua_togglebool(323,9173
static const luaL_Reg vlclua_var_reg[vlclua_var_reg336,9605
void luaopen_variables(351,10126

demux/adaptive/playlist/SegmentBase.cpp,69
SegmentBase::SegmentBase(32,1263
SegmentBase::~SegmentBase 38,1402

demux/smooth/SmoothManager.hpp,180
#define SMOOTHMANAGER_HPP21,999
namespace adaptive27,1156
    namespace xmladaptive::xml29,1177
namespace smooth35,1230
    class SmoothManager smooth::SmoothManager39,1280

codec/omxil/qcom.h,0

access/fs.h,0

access/http/connmgr.h,0

access/http/h2output.h,0

video_filter/adjust_sat_hue.h,0

dummy.cpp,0

access/http/hpack.h,0

/home/pi/SRE/HOME-SRE-VLC/vlc/modules/hw/mmal/TAGS,include

/home/pi/SRE/HOME-SRE-VLC/vlc/modules/gui/macosx/TAGS,include
